
rs485_to_can.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007738  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000344  080077f4  080077f4  000087f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b38  08007b38  00009078  2**0
                  CONTENTS
  4 .ARM          00000008  08007b38  08007b38  00008b38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007b40  08007b40  00009078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b40  08007b40  00008b40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007b44  08007b44  00008b44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  08007b48  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000564  20000078  08007bc0  00009078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005dc  08007bc0  000095dc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00009078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011c3e  00000000  00000000  000090a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a48  00000000  00000000  0001acde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d80  00000000  00000000  0001d728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a4e  00000000  00000000  0001e4a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d6ff  00000000  00000000  0001eef6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000116a5  00000000  00000000  0003c5f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b8678  00000000  00000000  0004dc9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00106312  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038d8  00000000  00000000  00106358  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  00109c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000078 	.word	0x20000078
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080077dc 	.word	0x080077dc

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000007c 	.word	0x2000007c
 8000100:	080077dc 	.word	0x080077dc

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	@ 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			@ (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	@ 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	@ 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			@ (mov r8, r8)

08000404 <__aeabi_uldivmod>:
 8000404:	2b00      	cmp	r3, #0
 8000406:	d111      	bne.n	800042c <__aeabi_uldivmod+0x28>
 8000408:	2a00      	cmp	r2, #0
 800040a:	d10f      	bne.n	800042c <__aeabi_uldivmod+0x28>
 800040c:	2900      	cmp	r1, #0
 800040e:	d100      	bne.n	8000412 <__aeabi_uldivmod+0xe>
 8000410:	2800      	cmp	r0, #0
 8000412:	d002      	beq.n	800041a <__aeabi_uldivmod+0x16>
 8000414:	2100      	movs	r1, #0
 8000416:	43c9      	mvns	r1, r1
 8000418:	0008      	movs	r0, r1
 800041a:	b407      	push	{r0, r1, r2}
 800041c:	4802      	ldr	r0, [pc, #8]	@ (8000428 <__aeabi_uldivmod+0x24>)
 800041e:	a102      	add	r1, pc, #8	@ (adr r1, 8000428 <__aeabi_uldivmod+0x24>)
 8000420:	1840      	adds	r0, r0, r1
 8000422:	9002      	str	r0, [sp, #8]
 8000424:	bd03      	pop	{r0, r1, pc}
 8000426:	46c0      	nop			@ (mov r8, r8)
 8000428:	ffffffd9 	.word	0xffffffd9
 800042c:	b403      	push	{r0, r1}
 800042e:	4668      	mov	r0, sp
 8000430:	b501      	push	{r0, lr}
 8000432:	9802      	ldr	r0, [sp, #8]
 8000434:	f000 f806 	bl	8000444 <__udivmoddi4>
 8000438:	9b01      	ldr	r3, [sp, #4]
 800043a:	469e      	mov	lr, r3
 800043c:	b002      	add	sp, #8
 800043e:	bc0c      	pop	{r2, r3}
 8000440:	4770      	bx	lr
 8000442:	46c0      	nop			@ (mov r8, r8)

08000444 <__udivmoddi4>:
 8000444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000446:	4657      	mov	r7, sl
 8000448:	464e      	mov	r6, r9
 800044a:	4645      	mov	r5, r8
 800044c:	46de      	mov	lr, fp
 800044e:	b5e0      	push	{r5, r6, r7, lr}
 8000450:	0004      	movs	r4, r0
 8000452:	000d      	movs	r5, r1
 8000454:	4692      	mov	sl, r2
 8000456:	4699      	mov	r9, r3
 8000458:	b083      	sub	sp, #12
 800045a:	428b      	cmp	r3, r1
 800045c:	d830      	bhi.n	80004c0 <__udivmoddi4+0x7c>
 800045e:	d02d      	beq.n	80004bc <__udivmoddi4+0x78>
 8000460:	4649      	mov	r1, r9
 8000462:	4650      	mov	r0, sl
 8000464:	f000 fc0a 	bl	8000c7c <__clzdi2>
 8000468:	0029      	movs	r1, r5
 800046a:	0006      	movs	r6, r0
 800046c:	0020      	movs	r0, r4
 800046e:	f000 fc05 	bl	8000c7c <__clzdi2>
 8000472:	1a33      	subs	r3, r6, r0
 8000474:	4698      	mov	r8, r3
 8000476:	3b20      	subs	r3, #32
 8000478:	d434      	bmi.n	80004e4 <__udivmoddi4+0xa0>
 800047a:	469b      	mov	fp, r3
 800047c:	4653      	mov	r3, sl
 800047e:	465a      	mov	r2, fp
 8000480:	4093      	lsls	r3, r2
 8000482:	4642      	mov	r2, r8
 8000484:	001f      	movs	r7, r3
 8000486:	4653      	mov	r3, sl
 8000488:	4093      	lsls	r3, r2
 800048a:	001e      	movs	r6, r3
 800048c:	42af      	cmp	r7, r5
 800048e:	d83b      	bhi.n	8000508 <__udivmoddi4+0xc4>
 8000490:	42af      	cmp	r7, r5
 8000492:	d100      	bne.n	8000496 <__udivmoddi4+0x52>
 8000494:	e079      	b.n	800058a <__udivmoddi4+0x146>
 8000496:	465b      	mov	r3, fp
 8000498:	1ba4      	subs	r4, r4, r6
 800049a:	41bd      	sbcs	r5, r7
 800049c:	2b00      	cmp	r3, #0
 800049e:	da00      	bge.n	80004a2 <__udivmoddi4+0x5e>
 80004a0:	e076      	b.n	8000590 <__udivmoddi4+0x14c>
 80004a2:	2200      	movs	r2, #0
 80004a4:	2300      	movs	r3, #0
 80004a6:	9200      	str	r2, [sp, #0]
 80004a8:	9301      	str	r3, [sp, #4]
 80004aa:	2301      	movs	r3, #1
 80004ac:	465a      	mov	r2, fp
 80004ae:	4093      	lsls	r3, r2
 80004b0:	9301      	str	r3, [sp, #4]
 80004b2:	2301      	movs	r3, #1
 80004b4:	4642      	mov	r2, r8
 80004b6:	4093      	lsls	r3, r2
 80004b8:	9300      	str	r3, [sp, #0]
 80004ba:	e029      	b.n	8000510 <__udivmoddi4+0xcc>
 80004bc:	4282      	cmp	r2, r0
 80004be:	d9cf      	bls.n	8000460 <__udivmoddi4+0x1c>
 80004c0:	2200      	movs	r2, #0
 80004c2:	2300      	movs	r3, #0
 80004c4:	9200      	str	r2, [sp, #0]
 80004c6:	9301      	str	r3, [sp, #4]
 80004c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d001      	beq.n	80004d2 <__udivmoddi4+0x8e>
 80004ce:	601c      	str	r4, [r3, #0]
 80004d0:	605d      	str	r5, [r3, #4]
 80004d2:	9800      	ldr	r0, [sp, #0]
 80004d4:	9901      	ldr	r1, [sp, #4]
 80004d6:	b003      	add	sp, #12
 80004d8:	bcf0      	pop	{r4, r5, r6, r7}
 80004da:	46bb      	mov	fp, r7
 80004dc:	46b2      	mov	sl, r6
 80004de:	46a9      	mov	r9, r5
 80004e0:	46a0      	mov	r8, r4
 80004e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004e4:	4642      	mov	r2, r8
 80004e6:	469b      	mov	fp, r3
 80004e8:	2320      	movs	r3, #32
 80004ea:	1a9b      	subs	r3, r3, r2
 80004ec:	4652      	mov	r2, sl
 80004ee:	40da      	lsrs	r2, r3
 80004f0:	4641      	mov	r1, r8
 80004f2:	0013      	movs	r3, r2
 80004f4:	464a      	mov	r2, r9
 80004f6:	408a      	lsls	r2, r1
 80004f8:	0017      	movs	r7, r2
 80004fa:	4642      	mov	r2, r8
 80004fc:	431f      	orrs	r7, r3
 80004fe:	4653      	mov	r3, sl
 8000500:	4093      	lsls	r3, r2
 8000502:	001e      	movs	r6, r3
 8000504:	42af      	cmp	r7, r5
 8000506:	d9c3      	bls.n	8000490 <__udivmoddi4+0x4c>
 8000508:	2200      	movs	r2, #0
 800050a:	2300      	movs	r3, #0
 800050c:	9200      	str	r2, [sp, #0]
 800050e:	9301      	str	r3, [sp, #4]
 8000510:	4643      	mov	r3, r8
 8000512:	2b00      	cmp	r3, #0
 8000514:	d0d8      	beq.n	80004c8 <__udivmoddi4+0x84>
 8000516:	07fb      	lsls	r3, r7, #31
 8000518:	0872      	lsrs	r2, r6, #1
 800051a:	431a      	orrs	r2, r3
 800051c:	4646      	mov	r6, r8
 800051e:	087b      	lsrs	r3, r7, #1
 8000520:	e00e      	b.n	8000540 <__udivmoddi4+0xfc>
 8000522:	42ab      	cmp	r3, r5
 8000524:	d101      	bne.n	800052a <__udivmoddi4+0xe6>
 8000526:	42a2      	cmp	r2, r4
 8000528:	d80c      	bhi.n	8000544 <__udivmoddi4+0x100>
 800052a:	1aa4      	subs	r4, r4, r2
 800052c:	419d      	sbcs	r5, r3
 800052e:	2001      	movs	r0, #1
 8000530:	1924      	adds	r4, r4, r4
 8000532:	416d      	adcs	r5, r5
 8000534:	2100      	movs	r1, #0
 8000536:	3e01      	subs	r6, #1
 8000538:	1824      	adds	r4, r4, r0
 800053a:	414d      	adcs	r5, r1
 800053c:	2e00      	cmp	r6, #0
 800053e:	d006      	beq.n	800054e <__udivmoddi4+0x10a>
 8000540:	42ab      	cmp	r3, r5
 8000542:	d9ee      	bls.n	8000522 <__udivmoddi4+0xde>
 8000544:	3e01      	subs	r6, #1
 8000546:	1924      	adds	r4, r4, r4
 8000548:	416d      	adcs	r5, r5
 800054a:	2e00      	cmp	r6, #0
 800054c:	d1f8      	bne.n	8000540 <__udivmoddi4+0xfc>
 800054e:	9800      	ldr	r0, [sp, #0]
 8000550:	9901      	ldr	r1, [sp, #4]
 8000552:	465b      	mov	r3, fp
 8000554:	1900      	adds	r0, r0, r4
 8000556:	4169      	adcs	r1, r5
 8000558:	2b00      	cmp	r3, #0
 800055a:	db24      	blt.n	80005a6 <__udivmoddi4+0x162>
 800055c:	002b      	movs	r3, r5
 800055e:	465a      	mov	r2, fp
 8000560:	4644      	mov	r4, r8
 8000562:	40d3      	lsrs	r3, r2
 8000564:	002a      	movs	r2, r5
 8000566:	40e2      	lsrs	r2, r4
 8000568:	001c      	movs	r4, r3
 800056a:	465b      	mov	r3, fp
 800056c:	0015      	movs	r5, r2
 800056e:	2b00      	cmp	r3, #0
 8000570:	db2a      	blt.n	80005c8 <__udivmoddi4+0x184>
 8000572:	0026      	movs	r6, r4
 8000574:	409e      	lsls	r6, r3
 8000576:	0033      	movs	r3, r6
 8000578:	0026      	movs	r6, r4
 800057a:	4647      	mov	r7, r8
 800057c:	40be      	lsls	r6, r7
 800057e:	0032      	movs	r2, r6
 8000580:	1a80      	subs	r0, r0, r2
 8000582:	4199      	sbcs	r1, r3
 8000584:	9000      	str	r0, [sp, #0]
 8000586:	9101      	str	r1, [sp, #4]
 8000588:	e79e      	b.n	80004c8 <__udivmoddi4+0x84>
 800058a:	42a3      	cmp	r3, r4
 800058c:	d8bc      	bhi.n	8000508 <__udivmoddi4+0xc4>
 800058e:	e782      	b.n	8000496 <__udivmoddi4+0x52>
 8000590:	4642      	mov	r2, r8
 8000592:	2320      	movs	r3, #32
 8000594:	2100      	movs	r1, #0
 8000596:	1a9b      	subs	r3, r3, r2
 8000598:	2200      	movs	r2, #0
 800059a:	9100      	str	r1, [sp, #0]
 800059c:	9201      	str	r2, [sp, #4]
 800059e:	2201      	movs	r2, #1
 80005a0:	40da      	lsrs	r2, r3
 80005a2:	9201      	str	r2, [sp, #4]
 80005a4:	e785      	b.n	80004b2 <__udivmoddi4+0x6e>
 80005a6:	4642      	mov	r2, r8
 80005a8:	2320      	movs	r3, #32
 80005aa:	1a9b      	subs	r3, r3, r2
 80005ac:	002a      	movs	r2, r5
 80005ae:	4646      	mov	r6, r8
 80005b0:	409a      	lsls	r2, r3
 80005b2:	0023      	movs	r3, r4
 80005b4:	40f3      	lsrs	r3, r6
 80005b6:	4644      	mov	r4, r8
 80005b8:	4313      	orrs	r3, r2
 80005ba:	002a      	movs	r2, r5
 80005bc:	40e2      	lsrs	r2, r4
 80005be:	001c      	movs	r4, r3
 80005c0:	465b      	mov	r3, fp
 80005c2:	0015      	movs	r5, r2
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	dad4      	bge.n	8000572 <__udivmoddi4+0x12e>
 80005c8:	4642      	mov	r2, r8
 80005ca:	002f      	movs	r7, r5
 80005cc:	2320      	movs	r3, #32
 80005ce:	0026      	movs	r6, r4
 80005d0:	4097      	lsls	r7, r2
 80005d2:	1a9b      	subs	r3, r3, r2
 80005d4:	40de      	lsrs	r6, r3
 80005d6:	003b      	movs	r3, r7
 80005d8:	4333      	orrs	r3, r6
 80005da:	e7cd      	b.n	8000578 <__udivmoddi4+0x134>

080005dc <__aeabi_dmul>:
 80005dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005de:	4657      	mov	r7, sl
 80005e0:	46de      	mov	lr, fp
 80005e2:	464e      	mov	r6, r9
 80005e4:	4645      	mov	r5, r8
 80005e6:	b5e0      	push	{r5, r6, r7, lr}
 80005e8:	001f      	movs	r7, r3
 80005ea:	030b      	lsls	r3, r1, #12
 80005ec:	0b1b      	lsrs	r3, r3, #12
 80005ee:	0016      	movs	r6, r2
 80005f0:	469a      	mov	sl, r3
 80005f2:	0fca      	lsrs	r2, r1, #31
 80005f4:	004b      	lsls	r3, r1, #1
 80005f6:	0004      	movs	r4, r0
 80005f8:	4693      	mov	fp, r2
 80005fa:	b087      	sub	sp, #28
 80005fc:	0d5b      	lsrs	r3, r3, #21
 80005fe:	d100      	bne.n	8000602 <__aeabi_dmul+0x26>
 8000600:	e0d5      	b.n	80007ae <__aeabi_dmul+0x1d2>
 8000602:	4abb      	ldr	r2, [pc, #748]	@ (80008f0 <__aeabi_dmul+0x314>)
 8000604:	4293      	cmp	r3, r2
 8000606:	d100      	bne.n	800060a <__aeabi_dmul+0x2e>
 8000608:	e0f8      	b.n	80007fc <__aeabi_dmul+0x220>
 800060a:	4651      	mov	r1, sl
 800060c:	0f42      	lsrs	r2, r0, #29
 800060e:	00c9      	lsls	r1, r1, #3
 8000610:	430a      	orrs	r2, r1
 8000612:	2180      	movs	r1, #128	@ 0x80
 8000614:	0409      	lsls	r1, r1, #16
 8000616:	4311      	orrs	r1, r2
 8000618:	00c2      	lsls	r2, r0, #3
 800061a:	4691      	mov	r9, r2
 800061c:	4ab5      	ldr	r2, [pc, #724]	@ (80008f4 <__aeabi_dmul+0x318>)
 800061e:	468a      	mov	sl, r1
 8000620:	189d      	adds	r5, r3, r2
 8000622:	2300      	movs	r3, #0
 8000624:	4698      	mov	r8, r3
 8000626:	9302      	str	r3, [sp, #8]
 8000628:	033c      	lsls	r4, r7, #12
 800062a:	007b      	lsls	r3, r7, #1
 800062c:	0ffa      	lsrs	r2, r7, #31
 800062e:	0030      	movs	r0, r6
 8000630:	0b24      	lsrs	r4, r4, #12
 8000632:	0d5b      	lsrs	r3, r3, #21
 8000634:	9200      	str	r2, [sp, #0]
 8000636:	d100      	bne.n	800063a <__aeabi_dmul+0x5e>
 8000638:	e096      	b.n	8000768 <__aeabi_dmul+0x18c>
 800063a:	4aad      	ldr	r2, [pc, #692]	@ (80008f0 <__aeabi_dmul+0x314>)
 800063c:	4293      	cmp	r3, r2
 800063e:	d031      	beq.n	80006a4 <__aeabi_dmul+0xc8>
 8000640:	0f72      	lsrs	r2, r6, #29
 8000642:	00e4      	lsls	r4, r4, #3
 8000644:	4322      	orrs	r2, r4
 8000646:	2480      	movs	r4, #128	@ 0x80
 8000648:	0424      	lsls	r4, r4, #16
 800064a:	4314      	orrs	r4, r2
 800064c:	4aa9      	ldr	r2, [pc, #676]	@ (80008f4 <__aeabi_dmul+0x318>)
 800064e:	00f0      	lsls	r0, r6, #3
 8000650:	4694      	mov	ip, r2
 8000652:	4463      	add	r3, ip
 8000654:	195b      	adds	r3, r3, r5
 8000656:	1c5a      	adds	r2, r3, #1
 8000658:	9201      	str	r2, [sp, #4]
 800065a:	4642      	mov	r2, r8
 800065c:	2600      	movs	r6, #0
 800065e:	2a0a      	cmp	r2, #10
 8000660:	dc42      	bgt.n	80006e8 <__aeabi_dmul+0x10c>
 8000662:	465a      	mov	r2, fp
 8000664:	9900      	ldr	r1, [sp, #0]
 8000666:	404a      	eors	r2, r1
 8000668:	4693      	mov	fp, r2
 800066a:	4642      	mov	r2, r8
 800066c:	2a02      	cmp	r2, #2
 800066e:	dc32      	bgt.n	80006d6 <__aeabi_dmul+0xfa>
 8000670:	3a01      	subs	r2, #1
 8000672:	2a01      	cmp	r2, #1
 8000674:	d900      	bls.n	8000678 <__aeabi_dmul+0x9c>
 8000676:	e149      	b.n	800090c <__aeabi_dmul+0x330>
 8000678:	2e02      	cmp	r6, #2
 800067a:	d100      	bne.n	800067e <__aeabi_dmul+0xa2>
 800067c:	e0ca      	b.n	8000814 <__aeabi_dmul+0x238>
 800067e:	2e01      	cmp	r6, #1
 8000680:	d13d      	bne.n	80006fe <__aeabi_dmul+0x122>
 8000682:	2300      	movs	r3, #0
 8000684:	2400      	movs	r4, #0
 8000686:	2200      	movs	r2, #0
 8000688:	0010      	movs	r0, r2
 800068a:	465a      	mov	r2, fp
 800068c:	051b      	lsls	r3, r3, #20
 800068e:	4323      	orrs	r3, r4
 8000690:	07d2      	lsls	r2, r2, #31
 8000692:	4313      	orrs	r3, r2
 8000694:	0019      	movs	r1, r3
 8000696:	b007      	add	sp, #28
 8000698:	bcf0      	pop	{r4, r5, r6, r7}
 800069a:	46bb      	mov	fp, r7
 800069c:	46b2      	mov	sl, r6
 800069e:	46a9      	mov	r9, r5
 80006a0:	46a0      	mov	r8, r4
 80006a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006a4:	4b92      	ldr	r3, [pc, #584]	@ (80008f0 <__aeabi_dmul+0x314>)
 80006a6:	4326      	orrs	r6, r4
 80006a8:	18eb      	adds	r3, r5, r3
 80006aa:	2e00      	cmp	r6, #0
 80006ac:	d100      	bne.n	80006b0 <__aeabi_dmul+0xd4>
 80006ae:	e0bb      	b.n	8000828 <__aeabi_dmul+0x24c>
 80006b0:	2203      	movs	r2, #3
 80006b2:	4641      	mov	r1, r8
 80006b4:	4311      	orrs	r1, r2
 80006b6:	465a      	mov	r2, fp
 80006b8:	4688      	mov	r8, r1
 80006ba:	9900      	ldr	r1, [sp, #0]
 80006bc:	404a      	eors	r2, r1
 80006be:	2180      	movs	r1, #128	@ 0x80
 80006c0:	0109      	lsls	r1, r1, #4
 80006c2:	468c      	mov	ip, r1
 80006c4:	0029      	movs	r1, r5
 80006c6:	4461      	add	r1, ip
 80006c8:	9101      	str	r1, [sp, #4]
 80006ca:	4641      	mov	r1, r8
 80006cc:	290a      	cmp	r1, #10
 80006ce:	dd00      	ble.n	80006d2 <__aeabi_dmul+0xf6>
 80006d0:	e233      	b.n	8000b3a <__aeabi_dmul+0x55e>
 80006d2:	4693      	mov	fp, r2
 80006d4:	2603      	movs	r6, #3
 80006d6:	4642      	mov	r2, r8
 80006d8:	2701      	movs	r7, #1
 80006da:	4097      	lsls	r7, r2
 80006dc:	21a6      	movs	r1, #166	@ 0xa6
 80006de:	003a      	movs	r2, r7
 80006e0:	00c9      	lsls	r1, r1, #3
 80006e2:	400a      	ands	r2, r1
 80006e4:	420f      	tst	r7, r1
 80006e6:	d031      	beq.n	800074c <__aeabi_dmul+0x170>
 80006e8:	9e02      	ldr	r6, [sp, #8]
 80006ea:	2e02      	cmp	r6, #2
 80006ec:	d100      	bne.n	80006f0 <__aeabi_dmul+0x114>
 80006ee:	e235      	b.n	8000b5c <__aeabi_dmul+0x580>
 80006f0:	2e03      	cmp	r6, #3
 80006f2:	d100      	bne.n	80006f6 <__aeabi_dmul+0x11a>
 80006f4:	e1d2      	b.n	8000a9c <__aeabi_dmul+0x4c0>
 80006f6:	4654      	mov	r4, sl
 80006f8:	4648      	mov	r0, r9
 80006fa:	2e01      	cmp	r6, #1
 80006fc:	d0c1      	beq.n	8000682 <__aeabi_dmul+0xa6>
 80006fe:	9a01      	ldr	r2, [sp, #4]
 8000700:	4b7d      	ldr	r3, [pc, #500]	@ (80008f8 <__aeabi_dmul+0x31c>)
 8000702:	4694      	mov	ip, r2
 8000704:	4463      	add	r3, ip
 8000706:	2b00      	cmp	r3, #0
 8000708:	dc00      	bgt.n	800070c <__aeabi_dmul+0x130>
 800070a:	e0c0      	b.n	800088e <__aeabi_dmul+0x2b2>
 800070c:	0742      	lsls	r2, r0, #29
 800070e:	d009      	beq.n	8000724 <__aeabi_dmul+0x148>
 8000710:	220f      	movs	r2, #15
 8000712:	4002      	ands	r2, r0
 8000714:	2a04      	cmp	r2, #4
 8000716:	d005      	beq.n	8000724 <__aeabi_dmul+0x148>
 8000718:	1d02      	adds	r2, r0, #4
 800071a:	4282      	cmp	r2, r0
 800071c:	4180      	sbcs	r0, r0
 800071e:	4240      	negs	r0, r0
 8000720:	1824      	adds	r4, r4, r0
 8000722:	0010      	movs	r0, r2
 8000724:	01e2      	lsls	r2, r4, #7
 8000726:	d506      	bpl.n	8000736 <__aeabi_dmul+0x15a>
 8000728:	4b74      	ldr	r3, [pc, #464]	@ (80008fc <__aeabi_dmul+0x320>)
 800072a:	9a01      	ldr	r2, [sp, #4]
 800072c:	401c      	ands	r4, r3
 800072e:	2380      	movs	r3, #128	@ 0x80
 8000730:	4694      	mov	ip, r2
 8000732:	00db      	lsls	r3, r3, #3
 8000734:	4463      	add	r3, ip
 8000736:	4a72      	ldr	r2, [pc, #456]	@ (8000900 <__aeabi_dmul+0x324>)
 8000738:	4293      	cmp	r3, r2
 800073a:	dc6b      	bgt.n	8000814 <__aeabi_dmul+0x238>
 800073c:	0762      	lsls	r2, r4, #29
 800073e:	08c0      	lsrs	r0, r0, #3
 8000740:	0264      	lsls	r4, r4, #9
 8000742:	055b      	lsls	r3, r3, #21
 8000744:	4302      	orrs	r2, r0
 8000746:	0b24      	lsrs	r4, r4, #12
 8000748:	0d5b      	lsrs	r3, r3, #21
 800074a:	e79d      	b.n	8000688 <__aeabi_dmul+0xac>
 800074c:	2190      	movs	r1, #144	@ 0x90
 800074e:	0089      	lsls	r1, r1, #2
 8000750:	420f      	tst	r7, r1
 8000752:	d163      	bne.n	800081c <__aeabi_dmul+0x240>
 8000754:	2288      	movs	r2, #136	@ 0x88
 8000756:	423a      	tst	r2, r7
 8000758:	d100      	bne.n	800075c <__aeabi_dmul+0x180>
 800075a:	e0d7      	b.n	800090c <__aeabi_dmul+0x330>
 800075c:	9b00      	ldr	r3, [sp, #0]
 800075e:	46a2      	mov	sl, r4
 8000760:	469b      	mov	fp, r3
 8000762:	4681      	mov	r9, r0
 8000764:	9602      	str	r6, [sp, #8]
 8000766:	e7bf      	b.n	80006e8 <__aeabi_dmul+0x10c>
 8000768:	0023      	movs	r3, r4
 800076a:	4333      	orrs	r3, r6
 800076c:	d100      	bne.n	8000770 <__aeabi_dmul+0x194>
 800076e:	e07f      	b.n	8000870 <__aeabi_dmul+0x294>
 8000770:	2c00      	cmp	r4, #0
 8000772:	d100      	bne.n	8000776 <__aeabi_dmul+0x19a>
 8000774:	e1ad      	b.n	8000ad2 <__aeabi_dmul+0x4f6>
 8000776:	0020      	movs	r0, r4
 8000778:	f000 fa62 	bl	8000c40 <__clzsi2>
 800077c:	0002      	movs	r2, r0
 800077e:	0003      	movs	r3, r0
 8000780:	3a0b      	subs	r2, #11
 8000782:	201d      	movs	r0, #29
 8000784:	0019      	movs	r1, r3
 8000786:	1a82      	subs	r2, r0, r2
 8000788:	0030      	movs	r0, r6
 800078a:	3908      	subs	r1, #8
 800078c:	40d0      	lsrs	r0, r2
 800078e:	408c      	lsls	r4, r1
 8000790:	4304      	orrs	r4, r0
 8000792:	0030      	movs	r0, r6
 8000794:	4088      	lsls	r0, r1
 8000796:	4a5b      	ldr	r2, [pc, #364]	@ (8000904 <__aeabi_dmul+0x328>)
 8000798:	1aeb      	subs	r3, r5, r3
 800079a:	4694      	mov	ip, r2
 800079c:	4463      	add	r3, ip
 800079e:	1c5a      	adds	r2, r3, #1
 80007a0:	9201      	str	r2, [sp, #4]
 80007a2:	4642      	mov	r2, r8
 80007a4:	2600      	movs	r6, #0
 80007a6:	2a0a      	cmp	r2, #10
 80007a8:	dc00      	bgt.n	80007ac <__aeabi_dmul+0x1d0>
 80007aa:	e75a      	b.n	8000662 <__aeabi_dmul+0x86>
 80007ac:	e79c      	b.n	80006e8 <__aeabi_dmul+0x10c>
 80007ae:	4653      	mov	r3, sl
 80007b0:	4303      	orrs	r3, r0
 80007b2:	4699      	mov	r9, r3
 80007b4:	d054      	beq.n	8000860 <__aeabi_dmul+0x284>
 80007b6:	4653      	mov	r3, sl
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d100      	bne.n	80007be <__aeabi_dmul+0x1e2>
 80007bc:	e177      	b.n	8000aae <__aeabi_dmul+0x4d2>
 80007be:	4650      	mov	r0, sl
 80007c0:	f000 fa3e 	bl	8000c40 <__clzsi2>
 80007c4:	230b      	movs	r3, #11
 80007c6:	425b      	negs	r3, r3
 80007c8:	469c      	mov	ip, r3
 80007ca:	0002      	movs	r2, r0
 80007cc:	4484      	add	ip, r0
 80007ce:	0011      	movs	r1, r2
 80007d0:	4650      	mov	r0, sl
 80007d2:	3908      	subs	r1, #8
 80007d4:	4088      	lsls	r0, r1
 80007d6:	231d      	movs	r3, #29
 80007d8:	4680      	mov	r8, r0
 80007da:	4660      	mov	r0, ip
 80007dc:	1a1b      	subs	r3, r3, r0
 80007de:	0020      	movs	r0, r4
 80007e0:	40d8      	lsrs	r0, r3
 80007e2:	0003      	movs	r3, r0
 80007e4:	4640      	mov	r0, r8
 80007e6:	4303      	orrs	r3, r0
 80007e8:	469a      	mov	sl, r3
 80007ea:	0023      	movs	r3, r4
 80007ec:	408b      	lsls	r3, r1
 80007ee:	4699      	mov	r9, r3
 80007f0:	2300      	movs	r3, #0
 80007f2:	4d44      	ldr	r5, [pc, #272]	@ (8000904 <__aeabi_dmul+0x328>)
 80007f4:	4698      	mov	r8, r3
 80007f6:	1aad      	subs	r5, r5, r2
 80007f8:	9302      	str	r3, [sp, #8]
 80007fa:	e715      	b.n	8000628 <__aeabi_dmul+0x4c>
 80007fc:	4652      	mov	r2, sl
 80007fe:	4302      	orrs	r2, r0
 8000800:	4691      	mov	r9, r2
 8000802:	d126      	bne.n	8000852 <__aeabi_dmul+0x276>
 8000804:	2200      	movs	r2, #0
 8000806:	001d      	movs	r5, r3
 8000808:	2302      	movs	r3, #2
 800080a:	4692      	mov	sl, r2
 800080c:	3208      	adds	r2, #8
 800080e:	4690      	mov	r8, r2
 8000810:	9302      	str	r3, [sp, #8]
 8000812:	e709      	b.n	8000628 <__aeabi_dmul+0x4c>
 8000814:	2400      	movs	r4, #0
 8000816:	2200      	movs	r2, #0
 8000818:	4b35      	ldr	r3, [pc, #212]	@ (80008f0 <__aeabi_dmul+0x314>)
 800081a:	e735      	b.n	8000688 <__aeabi_dmul+0xac>
 800081c:	2300      	movs	r3, #0
 800081e:	2480      	movs	r4, #128	@ 0x80
 8000820:	469b      	mov	fp, r3
 8000822:	0324      	lsls	r4, r4, #12
 8000824:	4b32      	ldr	r3, [pc, #200]	@ (80008f0 <__aeabi_dmul+0x314>)
 8000826:	e72f      	b.n	8000688 <__aeabi_dmul+0xac>
 8000828:	2202      	movs	r2, #2
 800082a:	4641      	mov	r1, r8
 800082c:	4311      	orrs	r1, r2
 800082e:	2280      	movs	r2, #128	@ 0x80
 8000830:	0112      	lsls	r2, r2, #4
 8000832:	4694      	mov	ip, r2
 8000834:	002a      	movs	r2, r5
 8000836:	4462      	add	r2, ip
 8000838:	4688      	mov	r8, r1
 800083a:	9201      	str	r2, [sp, #4]
 800083c:	290a      	cmp	r1, #10
 800083e:	dd00      	ble.n	8000842 <__aeabi_dmul+0x266>
 8000840:	e752      	b.n	80006e8 <__aeabi_dmul+0x10c>
 8000842:	465a      	mov	r2, fp
 8000844:	2000      	movs	r0, #0
 8000846:	9900      	ldr	r1, [sp, #0]
 8000848:	0004      	movs	r4, r0
 800084a:	404a      	eors	r2, r1
 800084c:	4693      	mov	fp, r2
 800084e:	2602      	movs	r6, #2
 8000850:	e70b      	b.n	800066a <__aeabi_dmul+0x8e>
 8000852:	220c      	movs	r2, #12
 8000854:	001d      	movs	r5, r3
 8000856:	2303      	movs	r3, #3
 8000858:	4681      	mov	r9, r0
 800085a:	4690      	mov	r8, r2
 800085c:	9302      	str	r3, [sp, #8]
 800085e:	e6e3      	b.n	8000628 <__aeabi_dmul+0x4c>
 8000860:	2300      	movs	r3, #0
 8000862:	469a      	mov	sl, r3
 8000864:	3304      	adds	r3, #4
 8000866:	4698      	mov	r8, r3
 8000868:	3b03      	subs	r3, #3
 800086a:	2500      	movs	r5, #0
 800086c:	9302      	str	r3, [sp, #8]
 800086e:	e6db      	b.n	8000628 <__aeabi_dmul+0x4c>
 8000870:	4642      	mov	r2, r8
 8000872:	3301      	adds	r3, #1
 8000874:	431a      	orrs	r2, r3
 8000876:	002b      	movs	r3, r5
 8000878:	4690      	mov	r8, r2
 800087a:	1c5a      	adds	r2, r3, #1
 800087c:	9201      	str	r2, [sp, #4]
 800087e:	4642      	mov	r2, r8
 8000880:	2400      	movs	r4, #0
 8000882:	2000      	movs	r0, #0
 8000884:	2601      	movs	r6, #1
 8000886:	2a0a      	cmp	r2, #10
 8000888:	dc00      	bgt.n	800088c <__aeabi_dmul+0x2b0>
 800088a:	e6ea      	b.n	8000662 <__aeabi_dmul+0x86>
 800088c:	e72c      	b.n	80006e8 <__aeabi_dmul+0x10c>
 800088e:	2201      	movs	r2, #1
 8000890:	1ad2      	subs	r2, r2, r3
 8000892:	2a38      	cmp	r2, #56	@ 0x38
 8000894:	dd00      	ble.n	8000898 <__aeabi_dmul+0x2bc>
 8000896:	e6f4      	b.n	8000682 <__aeabi_dmul+0xa6>
 8000898:	2a1f      	cmp	r2, #31
 800089a:	dc00      	bgt.n	800089e <__aeabi_dmul+0x2c2>
 800089c:	e12a      	b.n	8000af4 <__aeabi_dmul+0x518>
 800089e:	211f      	movs	r1, #31
 80008a0:	4249      	negs	r1, r1
 80008a2:	1acb      	subs	r3, r1, r3
 80008a4:	0021      	movs	r1, r4
 80008a6:	40d9      	lsrs	r1, r3
 80008a8:	000b      	movs	r3, r1
 80008aa:	2a20      	cmp	r2, #32
 80008ac:	d005      	beq.n	80008ba <__aeabi_dmul+0x2de>
 80008ae:	4a16      	ldr	r2, [pc, #88]	@ (8000908 <__aeabi_dmul+0x32c>)
 80008b0:	9d01      	ldr	r5, [sp, #4]
 80008b2:	4694      	mov	ip, r2
 80008b4:	4465      	add	r5, ip
 80008b6:	40ac      	lsls	r4, r5
 80008b8:	4320      	orrs	r0, r4
 80008ba:	1e42      	subs	r2, r0, #1
 80008bc:	4190      	sbcs	r0, r2
 80008be:	4318      	orrs	r0, r3
 80008c0:	2307      	movs	r3, #7
 80008c2:	0019      	movs	r1, r3
 80008c4:	2400      	movs	r4, #0
 80008c6:	4001      	ands	r1, r0
 80008c8:	4203      	tst	r3, r0
 80008ca:	d00c      	beq.n	80008e6 <__aeabi_dmul+0x30a>
 80008cc:	230f      	movs	r3, #15
 80008ce:	4003      	ands	r3, r0
 80008d0:	2b04      	cmp	r3, #4
 80008d2:	d100      	bne.n	80008d6 <__aeabi_dmul+0x2fa>
 80008d4:	e140      	b.n	8000b58 <__aeabi_dmul+0x57c>
 80008d6:	1d03      	adds	r3, r0, #4
 80008d8:	4283      	cmp	r3, r0
 80008da:	41a4      	sbcs	r4, r4
 80008dc:	0018      	movs	r0, r3
 80008de:	4264      	negs	r4, r4
 80008e0:	0761      	lsls	r1, r4, #29
 80008e2:	0264      	lsls	r4, r4, #9
 80008e4:	0b24      	lsrs	r4, r4, #12
 80008e6:	08c2      	lsrs	r2, r0, #3
 80008e8:	2300      	movs	r3, #0
 80008ea:	430a      	orrs	r2, r1
 80008ec:	e6cc      	b.n	8000688 <__aeabi_dmul+0xac>
 80008ee:	46c0      	nop			@ (mov r8, r8)
 80008f0:	000007ff 	.word	0x000007ff
 80008f4:	fffffc01 	.word	0xfffffc01
 80008f8:	000003ff 	.word	0x000003ff
 80008fc:	feffffff 	.word	0xfeffffff
 8000900:	000007fe 	.word	0x000007fe
 8000904:	fffffc0d 	.word	0xfffffc0d
 8000908:	0000043e 	.word	0x0000043e
 800090c:	4649      	mov	r1, r9
 800090e:	464a      	mov	r2, r9
 8000910:	0409      	lsls	r1, r1, #16
 8000912:	0c09      	lsrs	r1, r1, #16
 8000914:	000d      	movs	r5, r1
 8000916:	0c16      	lsrs	r6, r2, #16
 8000918:	0c02      	lsrs	r2, r0, #16
 800091a:	0400      	lsls	r0, r0, #16
 800091c:	0c00      	lsrs	r0, r0, #16
 800091e:	4345      	muls	r5, r0
 8000920:	46ac      	mov	ip, r5
 8000922:	0005      	movs	r5, r0
 8000924:	4375      	muls	r5, r6
 8000926:	46a8      	mov	r8, r5
 8000928:	0015      	movs	r5, r2
 800092a:	000f      	movs	r7, r1
 800092c:	4375      	muls	r5, r6
 800092e:	9200      	str	r2, [sp, #0]
 8000930:	9502      	str	r5, [sp, #8]
 8000932:	002a      	movs	r2, r5
 8000934:	9d00      	ldr	r5, [sp, #0]
 8000936:	436f      	muls	r7, r5
 8000938:	4665      	mov	r5, ip
 800093a:	0c2d      	lsrs	r5, r5, #16
 800093c:	46a9      	mov	r9, r5
 800093e:	4447      	add	r7, r8
 8000940:	444f      	add	r7, r9
 8000942:	45b8      	cmp	r8, r7
 8000944:	d905      	bls.n	8000952 <__aeabi_dmul+0x376>
 8000946:	0015      	movs	r5, r2
 8000948:	2280      	movs	r2, #128	@ 0x80
 800094a:	0252      	lsls	r2, r2, #9
 800094c:	4690      	mov	r8, r2
 800094e:	4445      	add	r5, r8
 8000950:	9502      	str	r5, [sp, #8]
 8000952:	0c3d      	lsrs	r5, r7, #16
 8000954:	9503      	str	r5, [sp, #12]
 8000956:	4665      	mov	r5, ip
 8000958:	042d      	lsls	r5, r5, #16
 800095a:	043f      	lsls	r7, r7, #16
 800095c:	0c2d      	lsrs	r5, r5, #16
 800095e:	46ac      	mov	ip, r5
 8000960:	003d      	movs	r5, r7
 8000962:	4465      	add	r5, ip
 8000964:	9504      	str	r5, [sp, #16]
 8000966:	0c25      	lsrs	r5, r4, #16
 8000968:	0424      	lsls	r4, r4, #16
 800096a:	0c24      	lsrs	r4, r4, #16
 800096c:	46ac      	mov	ip, r5
 800096e:	0025      	movs	r5, r4
 8000970:	4375      	muls	r5, r6
 8000972:	46a8      	mov	r8, r5
 8000974:	4665      	mov	r5, ip
 8000976:	000f      	movs	r7, r1
 8000978:	4369      	muls	r1, r5
 800097a:	4441      	add	r1, r8
 800097c:	4689      	mov	r9, r1
 800097e:	4367      	muls	r7, r4
 8000980:	0c39      	lsrs	r1, r7, #16
 8000982:	4449      	add	r1, r9
 8000984:	436e      	muls	r6, r5
 8000986:	4588      	cmp	r8, r1
 8000988:	d903      	bls.n	8000992 <__aeabi_dmul+0x3b6>
 800098a:	2280      	movs	r2, #128	@ 0x80
 800098c:	0252      	lsls	r2, r2, #9
 800098e:	4690      	mov	r8, r2
 8000990:	4446      	add	r6, r8
 8000992:	0c0d      	lsrs	r5, r1, #16
 8000994:	46a8      	mov	r8, r5
 8000996:	0035      	movs	r5, r6
 8000998:	4445      	add	r5, r8
 800099a:	9505      	str	r5, [sp, #20]
 800099c:	9d03      	ldr	r5, [sp, #12]
 800099e:	043f      	lsls	r7, r7, #16
 80009a0:	46a8      	mov	r8, r5
 80009a2:	0c3f      	lsrs	r7, r7, #16
 80009a4:	0409      	lsls	r1, r1, #16
 80009a6:	19c9      	adds	r1, r1, r7
 80009a8:	4488      	add	r8, r1
 80009aa:	4645      	mov	r5, r8
 80009ac:	9503      	str	r5, [sp, #12]
 80009ae:	4655      	mov	r5, sl
 80009b0:	042e      	lsls	r6, r5, #16
 80009b2:	0c36      	lsrs	r6, r6, #16
 80009b4:	0c2f      	lsrs	r7, r5, #16
 80009b6:	0035      	movs	r5, r6
 80009b8:	4345      	muls	r5, r0
 80009ba:	4378      	muls	r0, r7
 80009bc:	4681      	mov	r9, r0
 80009be:	0038      	movs	r0, r7
 80009c0:	46a8      	mov	r8, r5
 80009c2:	0c2d      	lsrs	r5, r5, #16
 80009c4:	46aa      	mov	sl, r5
 80009c6:	9a00      	ldr	r2, [sp, #0]
 80009c8:	4350      	muls	r0, r2
 80009ca:	4372      	muls	r2, r6
 80009cc:	444a      	add	r2, r9
 80009ce:	4452      	add	r2, sl
 80009d0:	4591      	cmp	r9, r2
 80009d2:	d903      	bls.n	80009dc <__aeabi_dmul+0x400>
 80009d4:	2580      	movs	r5, #128	@ 0x80
 80009d6:	026d      	lsls	r5, r5, #9
 80009d8:	46a9      	mov	r9, r5
 80009da:	4448      	add	r0, r9
 80009dc:	0c15      	lsrs	r5, r2, #16
 80009de:	46a9      	mov	r9, r5
 80009e0:	4645      	mov	r5, r8
 80009e2:	042d      	lsls	r5, r5, #16
 80009e4:	0c2d      	lsrs	r5, r5, #16
 80009e6:	46a8      	mov	r8, r5
 80009e8:	4665      	mov	r5, ip
 80009ea:	437d      	muls	r5, r7
 80009ec:	0412      	lsls	r2, r2, #16
 80009ee:	4448      	add	r0, r9
 80009f0:	4490      	add	r8, r2
 80009f2:	46a9      	mov	r9, r5
 80009f4:	0032      	movs	r2, r6
 80009f6:	4665      	mov	r5, ip
 80009f8:	4362      	muls	r2, r4
 80009fa:	436e      	muls	r6, r5
 80009fc:	437c      	muls	r4, r7
 80009fe:	0c17      	lsrs	r7, r2, #16
 8000a00:	1936      	adds	r6, r6, r4
 8000a02:	19bf      	adds	r7, r7, r6
 8000a04:	42bc      	cmp	r4, r7
 8000a06:	d903      	bls.n	8000a10 <__aeabi_dmul+0x434>
 8000a08:	2480      	movs	r4, #128	@ 0x80
 8000a0a:	0264      	lsls	r4, r4, #9
 8000a0c:	46a4      	mov	ip, r4
 8000a0e:	44e1      	add	r9, ip
 8000a10:	9c02      	ldr	r4, [sp, #8]
 8000a12:	9e03      	ldr	r6, [sp, #12]
 8000a14:	46a4      	mov	ip, r4
 8000a16:	9d05      	ldr	r5, [sp, #20]
 8000a18:	4466      	add	r6, ip
 8000a1a:	428e      	cmp	r6, r1
 8000a1c:	4189      	sbcs	r1, r1
 8000a1e:	46ac      	mov	ip, r5
 8000a20:	0412      	lsls	r2, r2, #16
 8000a22:	043c      	lsls	r4, r7, #16
 8000a24:	0c12      	lsrs	r2, r2, #16
 8000a26:	18a2      	adds	r2, r4, r2
 8000a28:	4462      	add	r2, ip
 8000a2a:	4249      	negs	r1, r1
 8000a2c:	1854      	adds	r4, r2, r1
 8000a2e:	4446      	add	r6, r8
 8000a30:	46a4      	mov	ip, r4
 8000a32:	4546      	cmp	r6, r8
 8000a34:	41a4      	sbcs	r4, r4
 8000a36:	4682      	mov	sl, r0
 8000a38:	4264      	negs	r4, r4
 8000a3a:	46a0      	mov	r8, r4
 8000a3c:	42aa      	cmp	r2, r5
 8000a3e:	4192      	sbcs	r2, r2
 8000a40:	458c      	cmp	ip, r1
 8000a42:	4189      	sbcs	r1, r1
 8000a44:	44e2      	add	sl, ip
 8000a46:	44d0      	add	r8, sl
 8000a48:	4249      	negs	r1, r1
 8000a4a:	4252      	negs	r2, r2
 8000a4c:	430a      	orrs	r2, r1
 8000a4e:	45a0      	cmp	r8, r4
 8000a50:	41a4      	sbcs	r4, r4
 8000a52:	4582      	cmp	sl, r0
 8000a54:	4189      	sbcs	r1, r1
 8000a56:	4264      	negs	r4, r4
 8000a58:	4249      	negs	r1, r1
 8000a5a:	430c      	orrs	r4, r1
 8000a5c:	4641      	mov	r1, r8
 8000a5e:	0c3f      	lsrs	r7, r7, #16
 8000a60:	19d2      	adds	r2, r2, r7
 8000a62:	1912      	adds	r2, r2, r4
 8000a64:	0dcc      	lsrs	r4, r1, #23
 8000a66:	9904      	ldr	r1, [sp, #16]
 8000a68:	0270      	lsls	r0, r6, #9
 8000a6a:	4308      	orrs	r0, r1
 8000a6c:	1e41      	subs	r1, r0, #1
 8000a6e:	4188      	sbcs	r0, r1
 8000a70:	4641      	mov	r1, r8
 8000a72:	444a      	add	r2, r9
 8000a74:	0df6      	lsrs	r6, r6, #23
 8000a76:	0252      	lsls	r2, r2, #9
 8000a78:	4330      	orrs	r0, r6
 8000a7a:	0249      	lsls	r1, r1, #9
 8000a7c:	4314      	orrs	r4, r2
 8000a7e:	4308      	orrs	r0, r1
 8000a80:	01d2      	lsls	r2, r2, #7
 8000a82:	d535      	bpl.n	8000af0 <__aeabi_dmul+0x514>
 8000a84:	2201      	movs	r2, #1
 8000a86:	0843      	lsrs	r3, r0, #1
 8000a88:	4002      	ands	r2, r0
 8000a8a:	4313      	orrs	r3, r2
 8000a8c:	07e0      	lsls	r0, r4, #31
 8000a8e:	4318      	orrs	r0, r3
 8000a90:	0864      	lsrs	r4, r4, #1
 8000a92:	e634      	b.n	80006fe <__aeabi_dmul+0x122>
 8000a94:	9b00      	ldr	r3, [sp, #0]
 8000a96:	46a2      	mov	sl, r4
 8000a98:	469b      	mov	fp, r3
 8000a9a:	4681      	mov	r9, r0
 8000a9c:	2480      	movs	r4, #128	@ 0x80
 8000a9e:	4653      	mov	r3, sl
 8000aa0:	0324      	lsls	r4, r4, #12
 8000aa2:	431c      	orrs	r4, r3
 8000aa4:	0324      	lsls	r4, r4, #12
 8000aa6:	464a      	mov	r2, r9
 8000aa8:	4b2e      	ldr	r3, [pc, #184]	@ (8000b64 <__aeabi_dmul+0x588>)
 8000aaa:	0b24      	lsrs	r4, r4, #12
 8000aac:	e5ec      	b.n	8000688 <__aeabi_dmul+0xac>
 8000aae:	f000 f8c7 	bl	8000c40 <__clzsi2>
 8000ab2:	2315      	movs	r3, #21
 8000ab4:	469c      	mov	ip, r3
 8000ab6:	4484      	add	ip, r0
 8000ab8:	0002      	movs	r2, r0
 8000aba:	4663      	mov	r3, ip
 8000abc:	3220      	adds	r2, #32
 8000abe:	2b1c      	cmp	r3, #28
 8000ac0:	dc00      	bgt.n	8000ac4 <__aeabi_dmul+0x4e8>
 8000ac2:	e684      	b.n	80007ce <__aeabi_dmul+0x1f2>
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	4699      	mov	r9, r3
 8000ac8:	0023      	movs	r3, r4
 8000aca:	3808      	subs	r0, #8
 8000acc:	4083      	lsls	r3, r0
 8000ace:	469a      	mov	sl, r3
 8000ad0:	e68e      	b.n	80007f0 <__aeabi_dmul+0x214>
 8000ad2:	f000 f8b5 	bl	8000c40 <__clzsi2>
 8000ad6:	0002      	movs	r2, r0
 8000ad8:	0003      	movs	r3, r0
 8000ada:	3215      	adds	r2, #21
 8000adc:	3320      	adds	r3, #32
 8000ade:	2a1c      	cmp	r2, #28
 8000ae0:	dc00      	bgt.n	8000ae4 <__aeabi_dmul+0x508>
 8000ae2:	e64e      	b.n	8000782 <__aeabi_dmul+0x1a6>
 8000ae4:	0002      	movs	r2, r0
 8000ae6:	0034      	movs	r4, r6
 8000ae8:	3a08      	subs	r2, #8
 8000aea:	2000      	movs	r0, #0
 8000aec:	4094      	lsls	r4, r2
 8000aee:	e652      	b.n	8000796 <__aeabi_dmul+0x1ba>
 8000af0:	9301      	str	r3, [sp, #4]
 8000af2:	e604      	b.n	80006fe <__aeabi_dmul+0x122>
 8000af4:	4b1c      	ldr	r3, [pc, #112]	@ (8000b68 <__aeabi_dmul+0x58c>)
 8000af6:	0021      	movs	r1, r4
 8000af8:	469c      	mov	ip, r3
 8000afa:	0003      	movs	r3, r0
 8000afc:	9d01      	ldr	r5, [sp, #4]
 8000afe:	40d3      	lsrs	r3, r2
 8000b00:	4465      	add	r5, ip
 8000b02:	40a9      	lsls	r1, r5
 8000b04:	4319      	orrs	r1, r3
 8000b06:	0003      	movs	r3, r0
 8000b08:	40ab      	lsls	r3, r5
 8000b0a:	1e58      	subs	r0, r3, #1
 8000b0c:	4183      	sbcs	r3, r0
 8000b0e:	4319      	orrs	r1, r3
 8000b10:	0008      	movs	r0, r1
 8000b12:	40d4      	lsrs	r4, r2
 8000b14:	074b      	lsls	r3, r1, #29
 8000b16:	d009      	beq.n	8000b2c <__aeabi_dmul+0x550>
 8000b18:	230f      	movs	r3, #15
 8000b1a:	400b      	ands	r3, r1
 8000b1c:	2b04      	cmp	r3, #4
 8000b1e:	d005      	beq.n	8000b2c <__aeabi_dmul+0x550>
 8000b20:	1d0b      	adds	r3, r1, #4
 8000b22:	428b      	cmp	r3, r1
 8000b24:	4180      	sbcs	r0, r0
 8000b26:	4240      	negs	r0, r0
 8000b28:	1824      	adds	r4, r4, r0
 8000b2a:	0018      	movs	r0, r3
 8000b2c:	0223      	lsls	r3, r4, #8
 8000b2e:	d400      	bmi.n	8000b32 <__aeabi_dmul+0x556>
 8000b30:	e6d6      	b.n	80008e0 <__aeabi_dmul+0x304>
 8000b32:	2301      	movs	r3, #1
 8000b34:	2400      	movs	r4, #0
 8000b36:	2200      	movs	r2, #0
 8000b38:	e5a6      	b.n	8000688 <__aeabi_dmul+0xac>
 8000b3a:	290f      	cmp	r1, #15
 8000b3c:	d1aa      	bne.n	8000a94 <__aeabi_dmul+0x4b8>
 8000b3e:	2380      	movs	r3, #128	@ 0x80
 8000b40:	4652      	mov	r2, sl
 8000b42:	031b      	lsls	r3, r3, #12
 8000b44:	421a      	tst	r2, r3
 8000b46:	d0a9      	beq.n	8000a9c <__aeabi_dmul+0x4c0>
 8000b48:	421c      	tst	r4, r3
 8000b4a:	d1a7      	bne.n	8000a9c <__aeabi_dmul+0x4c0>
 8000b4c:	431c      	orrs	r4, r3
 8000b4e:	9b00      	ldr	r3, [sp, #0]
 8000b50:	0002      	movs	r2, r0
 8000b52:	469b      	mov	fp, r3
 8000b54:	4b03      	ldr	r3, [pc, #12]	@ (8000b64 <__aeabi_dmul+0x588>)
 8000b56:	e597      	b.n	8000688 <__aeabi_dmul+0xac>
 8000b58:	2400      	movs	r4, #0
 8000b5a:	e6c1      	b.n	80008e0 <__aeabi_dmul+0x304>
 8000b5c:	2400      	movs	r4, #0
 8000b5e:	4b01      	ldr	r3, [pc, #4]	@ (8000b64 <__aeabi_dmul+0x588>)
 8000b60:	0022      	movs	r2, r4
 8000b62:	e591      	b.n	8000688 <__aeabi_dmul+0xac>
 8000b64:	000007ff 	.word	0x000007ff
 8000b68:	0000041e 	.word	0x0000041e

08000b6c <__aeabi_d2iz>:
 8000b6c:	000b      	movs	r3, r1
 8000b6e:	0002      	movs	r2, r0
 8000b70:	b570      	push	{r4, r5, r6, lr}
 8000b72:	4d16      	ldr	r5, [pc, #88]	@ (8000bcc <__aeabi_d2iz+0x60>)
 8000b74:	030c      	lsls	r4, r1, #12
 8000b76:	b082      	sub	sp, #8
 8000b78:	0049      	lsls	r1, r1, #1
 8000b7a:	2000      	movs	r0, #0
 8000b7c:	9200      	str	r2, [sp, #0]
 8000b7e:	9301      	str	r3, [sp, #4]
 8000b80:	0b24      	lsrs	r4, r4, #12
 8000b82:	0d49      	lsrs	r1, r1, #21
 8000b84:	0fde      	lsrs	r6, r3, #31
 8000b86:	42a9      	cmp	r1, r5
 8000b88:	dd04      	ble.n	8000b94 <__aeabi_d2iz+0x28>
 8000b8a:	4811      	ldr	r0, [pc, #68]	@ (8000bd0 <__aeabi_d2iz+0x64>)
 8000b8c:	4281      	cmp	r1, r0
 8000b8e:	dd03      	ble.n	8000b98 <__aeabi_d2iz+0x2c>
 8000b90:	4b10      	ldr	r3, [pc, #64]	@ (8000bd4 <__aeabi_d2iz+0x68>)
 8000b92:	18f0      	adds	r0, r6, r3
 8000b94:	b002      	add	sp, #8
 8000b96:	bd70      	pop	{r4, r5, r6, pc}
 8000b98:	2080      	movs	r0, #128	@ 0x80
 8000b9a:	0340      	lsls	r0, r0, #13
 8000b9c:	4320      	orrs	r0, r4
 8000b9e:	4c0e      	ldr	r4, [pc, #56]	@ (8000bd8 <__aeabi_d2iz+0x6c>)
 8000ba0:	1a64      	subs	r4, r4, r1
 8000ba2:	2c1f      	cmp	r4, #31
 8000ba4:	dd08      	ble.n	8000bb8 <__aeabi_d2iz+0x4c>
 8000ba6:	4b0d      	ldr	r3, [pc, #52]	@ (8000bdc <__aeabi_d2iz+0x70>)
 8000ba8:	1a5b      	subs	r3, r3, r1
 8000baa:	40d8      	lsrs	r0, r3
 8000bac:	0003      	movs	r3, r0
 8000bae:	4258      	negs	r0, r3
 8000bb0:	2e00      	cmp	r6, #0
 8000bb2:	d1ef      	bne.n	8000b94 <__aeabi_d2iz+0x28>
 8000bb4:	0018      	movs	r0, r3
 8000bb6:	e7ed      	b.n	8000b94 <__aeabi_d2iz+0x28>
 8000bb8:	4b09      	ldr	r3, [pc, #36]	@ (8000be0 <__aeabi_d2iz+0x74>)
 8000bba:	9a00      	ldr	r2, [sp, #0]
 8000bbc:	469c      	mov	ip, r3
 8000bbe:	0003      	movs	r3, r0
 8000bc0:	4461      	add	r1, ip
 8000bc2:	408b      	lsls	r3, r1
 8000bc4:	40e2      	lsrs	r2, r4
 8000bc6:	4313      	orrs	r3, r2
 8000bc8:	e7f1      	b.n	8000bae <__aeabi_d2iz+0x42>
 8000bca:	46c0      	nop			@ (mov r8, r8)
 8000bcc:	000003fe 	.word	0x000003fe
 8000bd0:	0000041d 	.word	0x0000041d
 8000bd4:	7fffffff 	.word	0x7fffffff
 8000bd8:	00000433 	.word	0x00000433
 8000bdc:	00000413 	.word	0x00000413
 8000be0:	fffffbed 	.word	0xfffffbed

08000be4 <__aeabi_i2d>:
 8000be4:	b570      	push	{r4, r5, r6, lr}
 8000be6:	2800      	cmp	r0, #0
 8000be8:	d016      	beq.n	8000c18 <__aeabi_i2d+0x34>
 8000bea:	17c3      	asrs	r3, r0, #31
 8000bec:	18c5      	adds	r5, r0, r3
 8000bee:	405d      	eors	r5, r3
 8000bf0:	0fc4      	lsrs	r4, r0, #31
 8000bf2:	0028      	movs	r0, r5
 8000bf4:	f000 f824 	bl	8000c40 <__clzsi2>
 8000bf8:	4b10      	ldr	r3, [pc, #64]	@ (8000c3c <__aeabi_i2d+0x58>)
 8000bfa:	1a1b      	subs	r3, r3, r0
 8000bfc:	055b      	lsls	r3, r3, #21
 8000bfe:	0d5b      	lsrs	r3, r3, #21
 8000c00:	280a      	cmp	r0, #10
 8000c02:	dc14      	bgt.n	8000c2e <__aeabi_i2d+0x4a>
 8000c04:	0002      	movs	r2, r0
 8000c06:	002e      	movs	r6, r5
 8000c08:	3215      	adds	r2, #21
 8000c0a:	4096      	lsls	r6, r2
 8000c0c:	220b      	movs	r2, #11
 8000c0e:	1a12      	subs	r2, r2, r0
 8000c10:	40d5      	lsrs	r5, r2
 8000c12:	032d      	lsls	r5, r5, #12
 8000c14:	0b2d      	lsrs	r5, r5, #12
 8000c16:	e003      	b.n	8000c20 <__aeabi_i2d+0x3c>
 8000c18:	2400      	movs	r4, #0
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	2500      	movs	r5, #0
 8000c1e:	2600      	movs	r6, #0
 8000c20:	051b      	lsls	r3, r3, #20
 8000c22:	432b      	orrs	r3, r5
 8000c24:	07e4      	lsls	r4, r4, #31
 8000c26:	4323      	orrs	r3, r4
 8000c28:	0030      	movs	r0, r6
 8000c2a:	0019      	movs	r1, r3
 8000c2c:	bd70      	pop	{r4, r5, r6, pc}
 8000c2e:	380b      	subs	r0, #11
 8000c30:	4085      	lsls	r5, r0
 8000c32:	032d      	lsls	r5, r5, #12
 8000c34:	2600      	movs	r6, #0
 8000c36:	0b2d      	lsrs	r5, r5, #12
 8000c38:	e7f2      	b.n	8000c20 <__aeabi_i2d+0x3c>
 8000c3a:	46c0      	nop			@ (mov r8, r8)
 8000c3c:	0000041e 	.word	0x0000041e

08000c40 <__clzsi2>:
 8000c40:	211c      	movs	r1, #28
 8000c42:	2301      	movs	r3, #1
 8000c44:	041b      	lsls	r3, r3, #16
 8000c46:	4298      	cmp	r0, r3
 8000c48:	d301      	bcc.n	8000c4e <__clzsi2+0xe>
 8000c4a:	0c00      	lsrs	r0, r0, #16
 8000c4c:	3910      	subs	r1, #16
 8000c4e:	0a1b      	lsrs	r3, r3, #8
 8000c50:	4298      	cmp	r0, r3
 8000c52:	d301      	bcc.n	8000c58 <__clzsi2+0x18>
 8000c54:	0a00      	lsrs	r0, r0, #8
 8000c56:	3908      	subs	r1, #8
 8000c58:	091b      	lsrs	r3, r3, #4
 8000c5a:	4298      	cmp	r0, r3
 8000c5c:	d301      	bcc.n	8000c62 <__clzsi2+0x22>
 8000c5e:	0900      	lsrs	r0, r0, #4
 8000c60:	3904      	subs	r1, #4
 8000c62:	a202      	add	r2, pc, #8	@ (adr r2, 8000c6c <__clzsi2+0x2c>)
 8000c64:	5c10      	ldrb	r0, [r2, r0]
 8000c66:	1840      	adds	r0, r0, r1
 8000c68:	4770      	bx	lr
 8000c6a:	46c0      	nop			@ (mov r8, r8)
 8000c6c:	02020304 	.word	0x02020304
 8000c70:	01010101 	.word	0x01010101
	...

08000c7c <__clzdi2>:
 8000c7c:	b510      	push	{r4, lr}
 8000c7e:	2900      	cmp	r1, #0
 8000c80:	d103      	bne.n	8000c8a <__clzdi2+0xe>
 8000c82:	f7ff ffdd 	bl	8000c40 <__clzsi2>
 8000c86:	3020      	adds	r0, #32
 8000c88:	e002      	b.n	8000c90 <__clzdi2+0x14>
 8000c8a:	0008      	movs	r0, r1
 8000c8c:	f7ff ffd8 	bl	8000c40 <__clzsi2>
 8000c90:	bd10      	pop	{r4, pc}
 8000c92:	46c0      	nop			@ (mov r8, r8)

08000c94 <transmitBMSCommand>:

#include <batt_rs485_comm.h>
#include "main.h"

void transmitBMSCommand(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000c98:	23a0      	movs	r3, #160	@ 0xa0
 8000c9a:	05db      	lsls	r3, r3, #23
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	2120      	movs	r1, #32
 8000ca0:	0018      	movs	r0, r3
 8000ca2:	f002 fd73 	bl	800378c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000ca6:	23a0      	movs	r3, #160	@ 0xa0
 8000ca8:	05db      	lsls	r3, r3, #23
 8000caa:	2201      	movs	r2, #1
 8000cac:	2102      	movs	r1, #2
 8000cae:	0018      	movs	r0, r3
 8000cb0:	f002 fd6c 	bl	800378c <HAL_GPIO_WritePin>
	if (hostCommand == 1) {
 8000cb4:	4b13      	ldr	r3, [pc, #76]	@ (8000d04 <transmitBMSCommand+0x70>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	2b01      	cmp	r3, #1
 8000cbc:	d107      	bne.n	8000cce <transmitBMSCommand+0x3a>
		HAL_UART_Transmit(&huart1, hostCommand_1, sizeof(hostCommand_1), HAL_MAX_DELAY);
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	425b      	negs	r3, r3
 8000cc2:	4911      	ldr	r1, [pc, #68]	@ (8000d08 <transmitBMSCommand+0x74>)
 8000cc4:	4811      	ldr	r0, [pc, #68]	@ (8000d0c <transmitBMSCommand+0x78>)
 8000cc6:	2207      	movs	r2, #7
 8000cc8:	f003 fd66 	bl	8004798 <HAL_UART_Transmit>
 8000ccc:	e006      	b.n	8000cdc <transmitBMSCommand+0x48>
	} else {
		HAL_UART_Transmit(&huart1, hostCommand_2, sizeof(hostCommand_2), HAL_MAX_DELAY);
 8000cce:	2301      	movs	r3, #1
 8000cd0:	425b      	negs	r3, r3
 8000cd2:	490f      	ldr	r1, [pc, #60]	@ (8000d10 <transmitBMSCommand+0x7c>)
 8000cd4:	480d      	ldr	r0, [pc, #52]	@ (8000d0c <transmitBMSCommand+0x78>)
 8000cd6:	2207      	movs	r2, #7
 8000cd8:	f003 fd5e 	bl	8004798 <HAL_UART_Transmit>
	}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000cdc:	23a0      	movs	r3, #160	@ 0xa0
 8000cde:	05db      	lsls	r3, r3, #23
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	2120      	movs	r1, #32
 8000ce4:	0018      	movs	r0, r3
 8000ce6:	f002 fd51 	bl	800378c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000cea:	23a0      	movs	r3, #160	@ 0xa0
 8000cec:	05db      	lsls	r3, r3, #23
 8000cee:	2200      	movs	r2, #0
 8000cf0:	2102      	movs	r1, #2
 8000cf2:	0018      	movs	r0, r3
 8000cf4:	f002 fd4a 	bl	800378c <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8000cf8:	20c8      	movs	r0, #200	@ 0xc8
 8000cfa:	f001 fa51 	bl	80021a0 <HAL_Delay>
}
 8000cfe:	46c0      	nop			@ (mov r8, r8)
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	2000000f 	.word	0x2000000f
 8000d08:	20000000 	.word	0x20000000
 8000d0c:	2000011c 	.word	0x2000011c
 8000d10:	20000008 	.word	0x20000008

08000d14 <transmitData>:

void transmitData(const char* label, uint16_t value, UART_HandleTypeDef* huart)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b088      	sub	sp, #32
 8000d18:	af02      	add	r7, sp, #8
 8000d1a:	60f8      	str	r0, [r7, #12]
 8000d1c:	607a      	str	r2, [r7, #4]
 8000d1e:	200a      	movs	r0, #10
 8000d20:	183b      	adds	r3, r7, r0
 8000d22:	1c0a      	adds	r2, r1, #0
 8000d24:	801a      	strh	r2, [r3, #0]
    int len = snprintf(v_i_Str, sizeof(v_i_Str), "%s: %u\r\n", label, value);
 8000d26:	183b      	adds	r3, r7, r0
 8000d28:	881b      	ldrh	r3, [r3, #0]
 8000d2a:	68f9      	ldr	r1, [r7, #12]
 8000d2c:	4a0d      	ldr	r2, [pc, #52]	@ (8000d64 <transmitData+0x50>)
 8000d2e:	480e      	ldr	r0, [pc, #56]	@ (8000d68 <transmitData+0x54>)
 8000d30:	9300      	str	r3, [sp, #0]
 8000d32:	000b      	movs	r3, r1
 8000d34:	2132      	movs	r1, #50	@ 0x32
 8000d36:	f005 fca9 	bl	800668c <sniprintf>
 8000d3a:	0003      	movs	r3, r0
 8000d3c:	617b      	str	r3, [r7, #20]
    if (len > 0 && len < sizeof(v_i_Str)) {
 8000d3e:	697b      	ldr	r3, [r7, #20]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	dd0a      	ble.n	8000d5a <transmitData+0x46>
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	2b31      	cmp	r3, #49	@ 0x31
 8000d48:	d807      	bhi.n	8000d5a <transmitData+0x46>
        HAL_UART_Transmit(huart, (uint8_t*)v_i_Str, len, UART_TIMEOUT);
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	b29a      	uxth	r2, r3
 8000d4e:	23fa      	movs	r3, #250	@ 0xfa
 8000d50:	009b      	lsls	r3, r3, #2
 8000d52:	4905      	ldr	r1, [pc, #20]	@ (8000d68 <transmitData+0x54>)
 8000d54:	6878      	ldr	r0, [r7, #4]
 8000d56:	f003 fd1f 	bl	8004798 <HAL_UART_Transmit>
    } else {
        // Handle snprintf error if needed
    }
}
 8000d5a:	46c0      	nop			@ (mov r8, r8)
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	b006      	add	sp, #24
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	46c0      	nop			@ (mov r8, r8)
 8000d64:	080077f4 	.word	0x080077f4
 8000d68:	20000420 	.word	0x20000420

08000d6c <transmitBMSCellTemps>:
//When you call transmitBMSCellTemps(bmsResponse_1, &huart2);, bmsResponse_1 is passed to the response parameter of the function.
//Inside the function, response acts as an alias for bmsResponse_1.
//Any manipulation of response inside the function is actually manipulating the data in bmsResponse_1.

void transmitBMSCellTemps(uint8_t* response, UART_HandleTypeDef* huart)
{
 8000d6c:	b5b0      	push	{r4, r5, r7, lr}
 8000d6e:	b088      	sub	sp, #32
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
 8000d74:	6039      	str	r1, [r7, #0]
    for (uint8_t i = 0; i < NUM_CELL_TEMPS; ++i) {
 8000d76:	231f      	movs	r3, #31
 8000d78:	18fb      	adds	r3, r7, r3
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	701a      	strb	r2, [r3, #0]
 8000d7e:	e03c      	b.n	8000dfa <transmitBMSCellTemps+0x8e>
        uint16_t cell_temp = (response[27 + 2 * i] << 8) | response[28 + 2 * i];
 8000d80:	201f      	movs	r0, #31
 8000d82:	183b      	adds	r3, r7, r0
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	005b      	lsls	r3, r3, #1
 8000d88:	331b      	adds	r3, #27
 8000d8a:	001a      	movs	r2, r3
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	189b      	adds	r3, r3, r2
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	021b      	lsls	r3, r3, #8
 8000d94:	b21a      	sxth	r2, r3
 8000d96:	183b      	adds	r3, r7, r0
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	330e      	adds	r3, #14
 8000d9c:	005b      	lsls	r3, r3, #1
 8000d9e:	0019      	movs	r1, r3
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	185b      	adds	r3, r3, r1
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	b21b      	sxth	r3, r3
 8000da8:	4313      	orrs	r3, r2
 8000daa:	b21a      	sxth	r2, r3
 8000dac:	211c      	movs	r1, #28
 8000dae:	187b      	adds	r3, r7, r1
 8000db0:	801a      	strh	r2, [r3, #0]
        Cell_temp[i] = cell_temp - TEMP_OFFSET;
 8000db2:	183b      	adds	r3, r7, r0
 8000db4:	781a      	ldrb	r2, [r3, #0]
 8000db6:	187b      	adds	r3, r7, r1
 8000db8:	881b      	ldrh	r3, [r3, #0]
 8000dba:	4915      	ldr	r1, [pc, #84]	@ (8000e10 <transmitBMSCellTemps+0xa4>)
 8000dbc:	468c      	mov	ip, r1
 8000dbe:	4463      	add	r3, ip
 8000dc0:	b299      	uxth	r1, r3
 8000dc2:	4b14      	ldr	r3, [pc, #80]	@ (8000e14 <transmitBMSCellTemps+0xa8>)
 8000dc4:	0052      	lsls	r2, r2, #1
 8000dc6:	52d1      	strh	r1, [r2, r3]
        char label[20];
        snprintf(label, sizeof(label), "Cell_temp_%d", i + 1);
 8000dc8:	0004      	movs	r4, r0
 8000dca:	183b      	adds	r3, r7, r0
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	3301      	adds	r3, #1
 8000dd0:	4a11      	ldr	r2, [pc, #68]	@ (8000e18 <transmitBMSCellTemps+0xac>)
 8000dd2:	2508      	movs	r5, #8
 8000dd4:	1978      	adds	r0, r7, r5
 8000dd6:	2114      	movs	r1, #20
 8000dd8:	f005 fc58 	bl	800668c <sniprintf>
        transmitData(label, Cell_temp[i], huart);
 8000ddc:	193b      	adds	r3, r7, r4
 8000dde:	781a      	ldrb	r2, [r3, #0]
 8000de0:	4b0c      	ldr	r3, [pc, #48]	@ (8000e14 <transmitBMSCellTemps+0xa8>)
 8000de2:	0052      	lsls	r2, r2, #1
 8000de4:	5ad1      	ldrh	r1, [r2, r3]
 8000de6:	683a      	ldr	r2, [r7, #0]
 8000de8:	197b      	adds	r3, r7, r5
 8000dea:	0018      	movs	r0, r3
 8000dec:	f7ff ff92 	bl	8000d14 <transmitData>
    for (uint8_t i = 0; i < NUM_CELL_TEMPS; ++i) {
 8000df0:	193b      	adds	r3, r7, r4
 8000df2:	193a      	adds	r2, r7, r4
 8000df4:	7812      	ldrb	r2, [r2, #0]
 8000df6:	3201      	adds	r2, #1
 8000df8:	701a      	strb	r2, [r3, #0]
 8000dfa:	231f      	movs	r3, #31
 8000dfc:	18fb      	adds	r3, r7, r3
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	2b04      	cmp	r3, #4
 8000e02:	d9bd      	bls.n	8000d80 <transmitBMSCellTemps+0x14>
    }
}
 8000e04:	46c0      	nop			@ (mov r8, r8)
 8000e06:	46c0      	nop			@ (mov r8, r8)
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	b008      	add	sp, #32
 8000e0c:	bdb0      	pop	{r4, r5, r7, pc}
 8000e0e:	46c0      	nop			@ (mov r8, r8)
 8000e10:	fffff555 	.word	0xfffff555
 8000e14:	2000045c 	.word	0x2000045c
 8000e18:	08007800 	.word	0x08007800

08000e1c <transmitBMSCellStrings>:

void transmitBMSCellStrings(uint8_t* response, UART_HandleTypeDef* huart)
{
 8000e1c:	b5b0      	push	{r4, r5, r7, lr}
 8000e1e:	b088      	sub	sp, #32
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
 8000e24:	6039      	str	r1, [r7, #0]
    for (uint8_t i = 0; i < NUM_CELL_STRINGS; ++i) {
 8000e26:	231f      	movs	r3, #31
 8000e28:	18fb      	adds	r3, r7, r3
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	701a      	strb	r2, [r3, #0]
 8000e2e:	e038      	b.n	8000ea2 <transmitBMSCellStrings+0x86>
        uint16_t cell_string = (response[4 + 2 * i] << 8) | response[5 + 2 * i];
 8000e30:	201f      	movs	r0, #31
 8000e32:	183b      	adds	r3, r7, r0
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	3302      	adds	r3, #2
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	001a      	movs	r2, r3
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	189b      	adds	r3, r3, r2
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	021b      	lsls	r3, r3, #8
 8000e44:	b21a      	sxth	r2, r3
 8000e46:	183b      	adds	r3, r7, r0
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	005b      	lsls	r3, r3, #1
 8000e4c:	3305      	adds	r3, #5
 8000e4e:	0019      	movs	r1, r3
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	185b      	adds	r3, r3, r1
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	b21b      	sxth	r3, r3
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	b21a      	sxth	r2, r3
 8000e5c:	211c      	movs	r1, #28
 8000e5e:	187b      	adds	r3, r7, r1
 8000e60:	801a      	strh	r2, [r3, #0]
        Cell_String[i] = cell_string;
 8000e62:	183b      	adds	r3, r7, r0
 8000e64:	781a      	ldrb	r2, [r3, #0]
 8000e66:	4b14      	ldr	r3, [pc, #80]	@ (8000eb8 <transmitBMSCellStrings+0x9c>)
 8000e68:	0052      	lsls	r2, r2, #1
 8000e6a:	1879      	adds	r1, r7, r1
 8000e6c:	8809      	ldrh	r1, [r1, #0]
 8000e6e:	52d1      	strh	r1, [r2, r3]
        char label[20];
        snprintf(label, sizeof(label), "Cell_String_%d", i + 1);
 8000e70:	0004      	movs	r4, r0
 8000e72:	183b      	adds	r3, r7, r0
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	3301      	adds	r3, #1
 8000e78:	4a10      	ldr	r2, [pc, #64]	@ (8000ebc <transmitBMSCellStrings+0xa0>)
 8000e7a:	2508      	movs	r5, #8
 8000e7c:	1978      	adds	r0, r7, r5
 8000e7e:	2114      	movs	r1, #20
 8000e80:	f005 fc04 	bl	800668c <sniprintf>
        transmitData(label, Cell_String[i], huart);
 8000e84:	193b      	adds	r3, r7, r4
 8000e86:	781a      	ldrb	r2, [r3, #0]
 8000e88:	4b0b      	ldr	r3, [pc, #44]	@ (8000eb8 <transmitBMSCellStrings+0x9c>)
 8000e8a:	0052      	lsls	r2, r2, #1
 8000e8c:	5ad1      	ldrh	r1, [r2, r3]
 8000e8e:	683a      	ldr	r2, [r7, #0]
 8000e90:	197b      	adds	r3, r7, r5
 8000e92:	0018      	movs	r0, r3
 8000e94:	f7ff ff3e 	bl	8000d14 <transmitData>
    for (uint8_t i = 0; i < NUM_CELL_STRINGS; ++i) {
 8000e98:	193b      	adds	r3, r7, r4
 8000e9a:	193a      	adds	r2, r7, r4
 8000e9c:	7812      	ldrb	r2, [r2, #0]
 8000e9e:	3201      	adds	r2, #1
 8000ea0:	701a      	strb	r2, [r3, #0]
 8000ea2:	231f      	movs	r3, #31
 8000ea4:	18fb      	adds	r3, r7, r3
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	2b16      	cmp	r3, #22
 8000eaa:	d9c1      	bls.n	8000e30 <transmitBMSCellStrings+0x14>
    }
}
 8000eac:	46c0      	nop			@ (mov r8, r8)
 8000eae:	46c0      	nop			@ (mov r8, r8)
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	b008      	add	sp, #32
 8000eb4:	bdb0      	pop	{r4, r5, r7, pc}
 8000eb6:	46c0      	nop			@ (mov r8, r8)
 8000eb8:	20000394 	.word	0x20000394
 8000ebc:	08007810 	.word	0x08007810

08000ec0 <transmitDataOverUSART2>:

void transmitDataOverUSART2(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
    voltage = bmsResponse_1[4] << 8 | bmsResponse_1[5];
 8000ec4:	4b26      	ldr	r3, [pc, #152]	@ (8000f60 <transmitDataOverUSART2+0xa0>)
 8000ec6:	791b      	ldrb	r3, [r3, #4]
 8000ec8:	021b      	lsls	r3, r3, #8
 8000eca:	b21a      	sxth	r2, r3
 8000ecc:	4b24      	ldr	r3, [pc, #144]	@ (8000f60 <transmitDataOverUSART2+0xa0>)
 8000ece:	795b      	ldrb	r3, [r3, #5]
 8000ed0:	b21b      	sxth	r3, r3
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	b21b      	sxth	r3, r3
 8000ed6:	b29a      	uxth	r2, r3
 8000ed8:	4b22      	ldr	r3, [pc, #136]	@ (8000f64 <transmitDataOverUSART2+0xa4>)
 8000eda:	801a      	strh	r2, [r3, #0]
    transmitData("Voltage", voltage, &huart2);
 8000edc:	4b21      	ldr	r3, [pc, #132]	@ (8000f64 <transmitDataOverUSART2+0xa4>)
 8000ede:	8819      	ldrh	r1, [r3, #0]
 8000ee0:	4a21      	ldr	r2, [pc, #132]	@ (8000f68 <transmitDataOverUSART2+0xa8>)
 8000ee2:	4b22      	ldr	r3, [pc, #136]	@ (8000f6c <transmitDataOverUSART2+0xac>)
 8000ee4:	0018      	movs	r0, r3
 8000ee6:	f7ff ff15 	bl	8000d14 <transmitData>

    current = bmsResponse_1[6] << 8 | bmsResponse_1[7];
 8000eea:	4b1d      	ldr	r3, [pc, #116]	@ (8000f60 <transmitDataOverUSART2+0xa0>)
 8000eec:	799b      	ldrb	r3, [r3, #6]
 8000eee:	021b      	lsls	r3, r3, #8
 8000ef0:	b21a      	sxth	r2, r3
 8000ef2:	4b1b      	ldr	r3, [pc, #108]	@ (8000f60 <transmitDataOverUSART2+0xa0>)
 8000ef4:	79db      	ldrb	r3, [r3, #7]
 8000ef6:	b21b      	sxth	r3, r3
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	b21b      	sxth	r3, r3
 8000efc:	b29a      	uxth	r2, r3
 8000efe:	4b1c      	ldr	r3, [pc, #112]	@ (8000f70 <transmitDataOverUSART2+0xb0>)
 8000f00:	801a      	strh	r2, [r3, #0]
    transmitData("Current", current, &huart2);
 8000f02:	4b1b      	ldr	r3, [pc, #108]	@ (8000f70 <transmitDataOverUSART2+0xb0>)
 8000f04:	8819      	ldrh	r1, [r3, #0]
 8000f06:	4a18      	ldr	r2, [pc, #96]	@ (8000f68 <transmitDataOverUSART2+0xa8>)
 8000f08:	4b1a      	ldr	r3, [pc, #104]	@ (8000f74 <transmitDataOverUSART2+0xb4>)
 8000f0a:	0018      	movs	r0, r3
 8000f0c:	f7ff ff02 	bl	8000d14 <transmitData>

    SoC = bmsResponse_1[23];
 8000f10:	4b13      	ldr	r3, [pc, #76]	@ (8000f60 <transmitDataOverUSART2+0xa0>)
 8000f12:	7ddb      	ldrb	r3, [r3, #23]
 8000f14:	001a      	movs	r2, r3
 8000f16:	4b18      	ldr	r3, [pc, #96]	@ (8000f78 <transmitDataOverUSART2+0xb8>)
 8000f18:	801a      	strh	r2, [r3, #0]
    transmitData("SOC", SoC, &huart2);
 8000f1a:	4b17      	ldr	r3, [pc, #92]	@ (8000f78 <transmitDataOverUSART2+0xb8>)
 8000f1c:	8819      	ldrh	r1, [r3, #0]
 8000f1e:	4a12      	ldr	r2, [pc, #72]	@ (8000f68 <transmitDataOverUSART2+0xa8>)
 8000f20:	4b16      	ldr	r3, [pc, #88]	@ (8000f7c <transmitDataOverUSART2+0xbc>)
 8000f22:	0018      	movs	r0, r3
 8000f24:	f7ff fef6 	bl	8000d14 <transmitData>

    TotalCells = bmsResponse_1[25];
 8000f28:	4b0d      	ldr	r3, [pc, #52]	@ (8000f60 <transmitDataOverUSART2+0xa0>)
 8000f2a:	7e5b      	ldrb	r3, [r3, #25]
 8000f2c:	001a      	movs	r2, r3
 8000f2e:	4b14      	ldr	r3, [pc, #80]	@ (8000f80 <transmitDataOverUSART2+0xc0>)
 8000f30:	801a      	strh	r2, [r3, #0]
    transmitData("No. of Cells", TotalCells, &huart2);
 8000f32:	4b13      	ldr	r3, [pc, #76]	@ (8000f80 <transmitDataOverUSART2+0xc0>)
 8000f34:	8819      	ldrh	r1, [r3, #0]
 8000f36:	4a0c      	ldr	r2, [pc, #48]	@ (8000f68 <transmitDataOverUSART2+0xa8>)
 8000f38:	4b12      	ldr	r3, [pc, #72]	@ (8000f84 <transmitDataOverUSART2+0xc4>)
 8000f3a:	0018      	movs	r0, r3
 8000f3c:	f7ff feea 	bl	8000d14 <transmitData>

    transmitBMSCellTemps(bmsResponse_1, &huart2);
 8000f40:	4a09      	ldr	r2, [pc, #36]	@ (8000f68 <transmitDataOverUSART2+0xa8>)
 8000f42:	4b07      	ldr	r3, [pc, #28]	@ (8000f60 <transmitDataOverUSART2+0xa0>)
 8000f44:	0011      	movs	r1, r2
 8000f46:	0018      	movs	r0, r3
 8000f48:	f7ff ff10 	bl	8000d6c <transmitBMSCellTemps>

//    if (hostCommand == 2) {
        transmitBMSCellStrings(bmsResponse_2, &huart2);
 8000f4c:	4a06      	ldr	r2, [pc, #24]	@ (8000f68 <transmitDataOverUSART2+0xa8>)
 8000f4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000f88 <transmitDataOverUSART2+0xc8>)
 8000f50:	0011      	movs	r1, r2
 8000f52:	0018      	movs	r0, r3
 8000f54:	f7ff ff62 	bl	8000e1c <transmitBMSCellStrings>
//    }
}
 8000f58:	46c0      	nop			@ (mov r8, r8)
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	46c0      	nop			@ (mov r8, r8)
 8000f60:	20000304 	.word	0x20000304
 8000f64:	20000452 	.word	0x20000452
 8000f68:	200001b0 	.word	0x200001b0
 8000f6c:	08007820 	.word	0x08007820
 8000f70:	20000454 	.word	0x20000454
 8000f74:	08007828 	.word	0x08007828
 8000f78:	20000456 	.word	0x20000456
 8000f7c:	08007830 	.word	0x08007830
 8000f80:	20000458 	.word	0x20000458
 8000f84:	08007834 	.word	0x08007834
 8000f88:	2000034c 	.word	0x2000034c

08000f8c <transmitDataOverCAN>:
void indicateCANCommunicationError();
void configureMaxOutputVoltage();
uint8_t getBatteryType(); // Add this function prototype

void transmitDataOverCAN(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b08a      	sub	sp, #40	@ 0x28
 8000f90:	af00      	add	r7, sp, #0
    int totalCellVolt = (bmsResponse_1[25] * 3.65) * 100;
 8000f92:	4bc9      	ldr	r3, [pc, #804]	@ (80012b8 <transmitDataOverCAN+0x32c>)
 8000f94:	7e5b      	ldrb	r3, [r3, #25]
 8000f96:	0018      	movs	r0, r3
 8000f98:	f7ff fe24 	bl	8000be4 <__aeabi_i2d>
 8000f9c:	4ac7      	ldr	r2, [pc, #796]	@ (80012bc <transmitDataOverCAN+0x330>)
 8000f9e:	4bc8      	ldr	r3, [pc, #800]	@ (80012c0 <transmitDataOverCAN+0x334>)
 8000fa0:	f7ff fb1c 	bl	80005dc <__aeabi_dmul>
 8000fa4:	0002      	movs	r2, r0
 8000fa6:	000b      	movs	r3, r1
 8000fa8:	0010      	movs	r0, r2
 8000faa:	0019      	movs	r1, r3
 8000fac:	2200      	movs	r2, #0
 8000fae:	4bc5      	ldr	r3, [pc, #788]	@ (80012c4 <transmitDataOverCAN+0x338>)
 8000fb0:	f7ff fb14 	bl	80005dc <__aeabi_dmul>
 8000fb4:	0002      	movs	r2, r0
 8000fb6:	000b      	movs	r3, r1
 8000fb8:	0010      	movs	r0, r2
 8000fba:	0019      	movs	r1, r3
 8000fbc:	f7ff fdd6 	bl	8000b6c <__aeabi_d2iz>
 8000fc0:	0003      	movs	r3, r0
 8000fc2:	617b      	str	r3, [r7, #20]
    uint16_t scaled_Volt_Value = totalCellVolt / 10;
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	210a      	movs	r1, #10
 8000fc8:	0018      	movs	r0, r3
 8000fca:	f7ff f92f 	bl	800022c <__divsi3>
 8000fce:	0003      	movs	r3, r0
 8000fd0:	001a      	movs	r2, r3
 8000fd2:	2112      	movs	r1, #18
 8000fd4:	187b      	adds	r3, r7, r1
 8000fd6:	801a      	strh	r2, [r3, #0]
    uint8_t scaled_Volt_HighByte = (scaled_Volt_Value >> 8) & 0xFF;
 8000fd8:	187b      	adds	r3, r7, r1
 8000fda:	881b      	ldrh	r3, [r3, #0]
 8000fdc:	0a1b      	lsrs	r3, r3, #8
 8000fde:	b29a      	uxth	r2, r3
 8000fe0:	2311      	movs	r3, #17
 8000fe2:	18fb      	adds	r3, r7, r3
 8000fe4:	701a      	strb	r2, [r3, #0]
    uint8_t scaled_Volt_LowByte = scaled_Volt_Value & 0xFF;
 8000fe6:	2310      	movs	r3, #16
 8000fe8:	18fb      	adds	r3, r7, r3
 8000fea:	187a      	adds	r2, r7, r1
 8000fec:	8812      	ldrh	r2, [r2, #0]
 8000fee:	701a      	strb	r2, [r3, #0]
    uint32_t msgId = 0x200;
 8000ff0:	2380      	movs	r3, #128	@ 0x80
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	60fb      	str	r3, [r7, #12]

    uint8_t broadcastAdd = 0xFF;       // byte 0
 8000ff6:	230b      	movs	r3, #11
 8000ff8:	18fb      	adds	r3, r7, r3
 8000ffa:	22ff      	movs	r2, #255	@ 0xff
 8000ffc:	701a      	strb	r2, [r3, #0]
    uint8_t relayPowerON = 3;          // for bit 1 in byte 1
 8000ffe:	230a      	movs	r3, #10
 8001000:	18fb      	adds	r3, r7, r3
 8001002:	2203      	movs	r2, #3
 8001004:	701a      	strb	r2, [r3, #0]
    uint8_t min_current = 0x10;        // 5 amps
 8001006:	2309      	movs	r3, #9
 8001008:	18fb      	adds	r3, r7, r3
 800100a:	2210      	movs	r2, #16
 800100c:	701a      	strb	r2, [r3, #0]
    uint8_t max_current = 0x20;        // 10 amps
 800100e:	2308      	movs	r3, #8
 8001010:	18fb      	adds	r3, r7, r3
 8001012:	2220      	movs	r2, #32
 8001014:	701a      	strb	r2, [r3, #0]
    uint8_t derated_current = 0x04;    // 4 amps
 8001016:	1dfb      	adds	r3, r7, #7
 8001018:	2204      	movs	r2, #4
 800101a:	701a      	strb	r2, [r3, #0]

    TxHeader.Identifier = msgId;
 800101c:	4baa      	ldr	r3, [pc, #680]	@ (80012c8 <transmitDataOverCAN+0x33c>)
 800101e:	68fa      	ldr	r2, [r7, #12]
 8001020:	601a      	str	r2, [r3, #0]
    TxHeader.IdType = FDCAN_STANDARD_ID;
 8001022:	4ba9      	ldr	r3, [pc, #676]	@ (80012c8 <transmitDataOverCAN+0x33c>)
 8001024:	2200      	movs	r2, #0
 8001026:	605a      	str	r2, [r3, #4]
    TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8001028:	4ba7      	ldr	r3, [pc, #668]	@ (80012c8 <transmitDataOverCAN+0x33c>)
 800102a:	2200      	movs	r2, #0
 800102c:	609a      	str	r2, [r3, #8]
    TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 800102e:	4ba6      	ldr	r3, [pc, #664]	@ (80012c8 <transmitDataOverCAN+0x33c>)
 8001030:	2208      	movs	r2, #8
 8001032:	60da      	str	r2, [r3, #12]
    TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8001034:	4ba4      	ldr	r3, [pc, #656]	@ (80012c8 <transmitDataOverCAN+0x33c>)
 8001036:	2200      	movs	r2, #0
 8001038:	611a      	str	r2, [r3, #16]
    TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 800103a:	4ba3      	ldr	r3, [pc, #652]	@ (80012c8 <transmitDataOverCAN+0x33c>)
 800103c:	2200      	movs	r2, #0
 800103e:	615a      	str	r2, [r3, #20]
    TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8001040:	4ba1      	ldr	r3, [pc, #644]	@ (80012c8 <transmitDataOverCAN+0x33c>)
 8001042:	2200      	movs	r2, #0
 8001044:	619a      	str	r2, [r3, #24]
    TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8001046:	4ba0      	ldr	r3, [pc, #640]	@ (80012c8 <transmitDataOverCAN+0x33c>)
 8001048:	2200      	movs	r2, #0
 800104a:	61da      	str	r2, [r3, #28]
    TxHeader.MessageMarker = 0;
 800104c:	4b9e      	ldr	r3, [pc, #632]	@ (80012c8 <transmitDataOverCAN+0x33c>)
 800104e:	2200      	movs	r2, #0
 8001050:	621a      	str	r2, [r3, #32]

    bool CellVoltLessThan3000 = false;
 8001052:	2327      	movs	r3, #39	@ 0x27
 8001054:	18fb      	adds	r3, r7, r3
 8001056:	2200      	movs	r2, #0
 8001058:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 23; i++)
 800105a:	2300      	movs	r3, #0
 800105c:	623b      	str	r3, [r7, #32]
 800105e:	e00e      	b.n	800107e <transmitDataOverCAN+0xf2>
    {
        if (Cell_String[i] <= 3000)
 8001060:	4b9a      	ldr	r3, [pc, #616]	@ (80012cc <transmitDataOverCAN+0x340>)
 8001062:	6a3a      	ldr	r2, [r7, #32]
 8001064:	0052      	lsls	r2, r2, #1
 8001066:	5ad3      	ldrh	r3, [r2, r3]
 8001068:	4a99      	ldr	r2, [pc, #612]	@ (80012d0 <transmitDataOverCAN+0x344>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d804      	bhi.n	8001078 <transmitDataOverCAN+0xec>
        {
            CellVoltLessThan3000 = true;
 800106e:	2327      	movs	r3, #39	@ 0x27
 8001070:	18fb      	adds	r3, r7, r3
 8001072:	2201      	movs	r2, #1
 8001074:	701a      	strb	r2, [r3, #0]
            break;
 8001076:	e005      	b.n	8001084 <transmitDataOverCAN+0xf8>
    for (int i = 0; i < 23; i++)
 8001078:	6a3b      	ldr	r3, [r7, #32]
 800107a:	3301      	adds	r3, #1
 800107c:	623b      	str	r3, [r7, #32]
 800107e:	6a3b      	ldr	r3, [r7, #32]
 8001080:	2b16      	cmp	r3, #22
 8001082:	dded      	ble.n	8001060 <transmitDataOverCAN+0xd4>
        }
    }

    if (CellVoltLessThan3000)
 8001084:	2327      	movs	r3, #39	@ 0x27
 8001086:	18fb      	adds	r3, r7, r3
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d021      	beq.n	80010d2 <transmitDataOverCAN+0x146>
    {
        TxData[0] = broadcastAdd;
 800108e:	4b91      	ldr	r3, [pc, #580]	@ (80012d4 <transmitDataOverCAN+0x348>)
 8001090:	220b      	movs	r2, #11
 8001092:	18ba      	adds	r2, r7, r2
 8001094:	7812      	ldrb	r2, [r2, #0]
 8001096:	701a      	strb	r2, [r3, #0]
        TxData[1] = relayPowerON;
 8001098:	4b8e      	ldr	r3, [pc, #568]	@ (80012d4 <transmitDataOverCAN+0x348>)
 800109a:	220a      	movs	r2, #10
 800109c:	18ba      	adds	r2, r7, r2
 800109e:	7812      	ldrb	r2, [r2, #0]
 80010a0:	705a      	strb	r2, [r3, #1]
        TxData[2] = scaled_Volt_HighByte;
 80010a2:	4b8c      	ldr	r3, [pc, #560]	@ (80012d4 <transmitDataOverCAN+0x348>)
 80010a4:	2211      	movs	r2, #17
 80010a6:	18ba      	adds	r2, r7, r2
 80010a8:	7812      	ldrb	r2, [r2, #0]
 80010aa:	709a      	strb	r2, [r3, #2]
        TxData[3] = scaled_Volt_LowByte;
 80010ac:	4b89      	ldr	r3, [pc, #548]	@ (80012d4 <transmitDataOverCAN+0x348>)
 80010ae:	2210      	movs	r2, #16
 80010b0:	18ba      	adds	r2, r7, r2
 80010b2:	7812      	ldrb	r2, [r2, #0]
 80010b4:	70da      	strb	r2, [r3, #3]
        TxData[4] = 0x00;
 80010b6:	4b87      	ldr	r3, [pc, #540]	@ (80012d4 <transmitDataOverCAN+0x348>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	711a      	strb	r2, [r3, #4]
        TxData[5] = 0x02;  // 2 amps
 80010bc:	4b85      	ldr	r3, [pc, #532]	@ (80012d4 <transmitDataOverCAN+0x348>)
 80010be:	2202      	movs	r2, #2
 80010c0:	715a      	strb	r2, [r3, #5]
        canConnected = 1;  // Indicate CAN connection is established
 80010c2:	4b85      	ldr	r3, [pc, #532]	@ (80012d8 <transmitDataOverCAN+0x34c>)
 80010c4:	2201      	movs	r2, #1
 80010c6:	701a      	strb	r2, [r3, #0]
        printf("Charging with 2.0A as one of the cell voltage is less than 3000 mV\r\n");
 80010c8:	4b84      	ldr	r3, [pc, #528]	@ (80012dc <transmitDataOverCAN+0x350>)
 80010ca:	0018      	movs	r0, r3
 80010cc:	f005 fad4 	bl	8006678 <puts>
 80010d0:	e020      	b.n	8001114 <transmitDataOverCAN+0x188>
    }
    else
    {
        TxData[0] = broadcastAdd;
 80010d2:	4b80      	ldr	r3, [pc, #512]	@ (80012d4 <transmitDataOverCAN+0x348>)
 80010d4:	220b      	movs	r2, #11
 80010d6:	18ba      	adds	r2, r7, r2
 80010d8:	7812      	ldrb	r2, [r2, #0]
 80010da:	701a      	strb	r2, [r3, #0]
        TxData[1] = relayPowerON;
 80010dc:	4b7d      	ldr	r3, [pc, #500]	@ (80012d4 <transmitDataOverCAN+0x348>)
 80010de:	220a      	movs	r2, #10
 80010e0:	18ba      	adds	r2, r7, r2
 80010e2:	7812      	ldrb	r2, [r2, #0]
 80010e4:	705a      	strb	r2, [r3, #1]
        TxData[2] = scaled_Volt_HighByte;
 80010e6:	4b7b      	ldr	r3, [pc, #492]	@ (80012d4 <transmitDataOverCAN+0x348>)
 80010e8:	2211      	movs	r2, #17
 80010ea:	18ba      	adds	r2, r7, r2
 80010ec:	7812      	ldrb	r2, [r2, #0]
 80010ee:	709a      	strb	r2, [r3, #2]
        TxData[3] = scaled_Volt_LowByte;
 80010f0:	4b78      	ldr	r3, [pc, #480]	@ (80012d4 <transmitDataOverCAN+0x348>)
 80010f2:	2210      	movs	r2, #16
 80010f4:	18ba      	adds	r2, r7, r2
 80010f6:	7812      	ldrb	r2, [r2, #0]
 80010f8:	70da      	strb	r2, [r3, #3]
        TxData[4] = 0x00;
 80010fa:	4b76      	ldr	r3, [pc, #472]	@ (80012d4 <transmitDataOverCAN+0x348>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	711a      	strb	r2, [r3, #4]
        TxData[5] = 0x0A;  // 10 amps
 8001100:	4b74      	ldr	r3, [pc, #464]	@ (80012d4 <transmitDataOverCAN+0x348>)
 8001102:	220a      	movs	r2, #10
 8001104:	715a      	strb	r2, [r3, #5]
        canConnected = 1;  // Indicate CAN connection is established
 8001106:	4b74      	ldr	r3, [pc, #464]	@ (80012d8 <transmitDataOverCAN+0x34c>)
 8001108:	2201      	movs	r2, #1
 800110a:	701a      	strb	r2, [r3, #0]
        printf("Charging with 10.0A \r\n");
 800110c:	4b74      	ldr	r3, [pc, #464]	@ (80012e0 <transmitDataOverCAN+0x354>)
 800110e:	0018      	movs	r0, r3
 8001110:	f005 fab2 	bl	8006678 <puts>
    }

    if (!canConnected) {
 8001114:	4b70      	ldr	r3, [pc, #448]	@ (80012d8 <transmitDataOverCAN+0x34c>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	b2db      	uxtb	r3, r3
 800111a:	2b00      	cmp	r3, #0
 800111c:	d119      	bne.n	8001152 <transmitDataOverCAN+0x1c6>
        TxData[0] = broadcastAdd;
 800111e:	4b6d      	ldr	r3, [pc, #436]	@ (80012d4 <transmitDataOverCAN+0x348>)
 8001120:	220b      	movs	r2, #11
 8001122:	18ba      	adds	r2, r7, r2
 8001124:	7812      	ldrb	r2, [r2, #0]
 8001126:	701a      	strb	r2, [r3, #0]
        TxData[1] = relayPowerON;
 8001128:	4b6a      	ldr	r3, [pc, #424]	@ (80012d4 <transmitDataOverCAN+0x348>)
 800112a:	220a      	movs	r2, #10
 800112c:	18ba      	adds	r2, r7, r2
 800112e:	7812      	ldrb	r2, [r2, #0]
 8001130:	705a      	strb	r2, [r3, #1]
        TxData[2] = 0x02;  // 02DF = 735 Volt
 8001132:	4b68      	ldr	r3, [pc, #416]	@ (80012d4 <transmitDataOverCAN+0x348>)
 8001134:	2202      	movs	r2, #2
 8001136:	709a      	strb	r2, [r3, #2]
        TxData[3] = 0xDF;  // 02DF = 735 Volt
 8001138:	4b66      	ldr	r3, [pc, #408]	@ (80012d4 <transmitDataOverCAN+0x348>)
 800113a:	22df      	movs	r2, #223	@ 0xdf
 800113c:	70da      	strb	r2, [r3, #3]
        TxData[4] = 0x00;
 800113e:	4b65      	ldr	r3, [pc, #404]	@ (80012d4 <transmitDataOverCAN+0x348>)
 8001140:	2200      	movs	r2, #0
 8001142:	711a      	strb	r2, [r3, #4]
        TxData[5] = 0x05;  // 5 amps
 8001144:	4b63      	ldr	r3, [pc, #396]	@ (80012d4 <transmitDataOverCAN+0x348>)
 8001146:	2205      	movs	r2, #5
 8001148:	715a      	strb	r2, [r3, #5]
        printf("Charging with 5.0A without CAN communication\r\n");
 800114a:	4b66      	ldr	r3, [pc, #408]	@ (80012e4 <transmitDataOverCAN+0x358>)
 800114c:	0018      	movs	r0, r3
 800114e:	f005 fa93 	bl	8006678 <puts>
    }

    if(voltage >= 7305){
 8001152:	4b65      	ldr	r3, [pc, #404]	@ (80012e8 <transmitDataOverCAN+0x35c>)
 8001154:	881b      	ldrh	r3, [r3, #0]
 8001156:	4a65      	ldr	r2, [pc, #404]	@ (80012ec <transmitDataOverCAN+0x360>)
 8001158:	4293      	cmp	r3, r2
 800115a:	d917      	bls.n	800118c <transmitDataOverCAN+0x200>
        TxData[0] = broadcastAdd;
 800115c:	4b5d      	ldr	r3, [pc, #372]	@ (80012d4 <transmitDataOverCAN+0x348>)
 800115e:	220b      	movs	r2, #11
 8001160:	18ba      	adds	r2, r7, r2
 8001162:	7812      	ldrb	r2, [r2, #0]
 8001164:	701a      	strb	r2, [r3, #0]
        TxData[1] = 0x00;
 8001166:	4b5b      	ldr	r3, [pc, #364]	@ (80012d4 <transmitDataOverCAN+0x348>)
 8001168:	2200      	movs	r2, #0
 800116a:	705a      	strb	r2, [r3, #1]
        TxData[2] = 0x00;
 800116c:	4b59      	ldr	r3, [pc, #356]	@ (80012d4 <transmitDataOverCAN+0x348>)
 800116e:	2200      	movs	r2, #0
 8001170:	709a      	strb	r2, [r3, #2]
        TxData[3] = 0x00;
 8001172:	4b58      	ldr	r3, [pc, #352]	@ (80012d4 <transmitDataOverCAN+0x348>)
 8001174:	2200      	movs	r2, #0
 8001176:	70da      	strb	r2, [r3, #3]
        TxData[4] = 0x00;
 8001178:	4b56      	ldr	r3, [pc, #344]	@ (80012d4 <transmitDataOverCAN+0x348>)
 800117a:	2200      	movs	r2, #0
 800117c:	711a      	strb	r2, [r3, #4]
        TxData[5] = 0x00;  // Stop charging
 800117e:	4b55      	ldr	r3, [pc, #340]	@ (80012d4 <transmitDataOverCAN+0x348>)
 8001180:	2200      	movs	r2, #0
 8001182:	715a      	strb	r2, [r3, #5]
        printf("Stopped charging as voltage is above 73.5V without CAN\r\n");
 8001184:	4b5a      	ldr	r3, [pc, #360]	@ (80012f0 <transmitDataOverCAN+0x364>)
 8001186:	0018      	movs	r0, r3
 8001188:	f005 fa76 	bl	8006678 <puts>
    }

    if (SoC > 90)  // start CV mode
 800118c:	4b59      	ldr	r3, [pc, #356]	@ (80012f4 <transmitDataOverCAN+0x368>)
 800118e:	881b      	ldrh	r3, [r3, #0]
 8001190:	2b5a      	cmp	r3, #90	@ 0x5a
 8001192:	d924      	bls.n	80011de <transmitDataOverCAN+0x252>
    {
        TxData[0] = broadcastAdd;
 8001194:	4b4f      	ldr	r3, [pc, #316]	@ (80012d4 <transmitDataOverCAN+0x348>)
 8001196:	220b      	movs	r2, #11
 8001198:	18ba      	adds	r2, r7, r2
 800119a:	7812      	ldrb	r2, [r2, #0]
 800119c:	701a      	strb	r2, [r3, #0]
        TxData[1] = relayPowerON;
 800119e:	4b4d      	ldr	r3, [pc, #308]	@ (80012d4 <transmitDataOverCAN+0x348>)
 80011a0:	220a      	movs	r2, #10
 80011a2:	18ba      	adds	r2, r7, r2
 80011a4:	7812      	ldrb	r2, [r2, #0]
 80011a6:	705a      	strb	r2, [r3, #1]
        TxData[2] = scaled_Volt_HighByte;
 80011a8:	4b4a      	ldr	r3, [pc, #296]	@ (80012d4 <transmitDataOverCAN+0x348>)
 80011aa:	2211      	movs	r2, #17
 80011ac:	18ba      	adds	r2, r7, r2
 80011ae:	7812      	ldrb	r2, [r2, #0]
 80011b0:	709a      	strb	r2, [r3, #2]
        TxData[3] = scaled_Volt_LowByte;
 80011b2:	4b48      	ldr	r3, [pc, #288]	@ (80012d4 <transmitDataOverCAN+0x348>)
 80011b4:	2210      	movs	r2, #16
 80011b6:	18ba      	adds	r2, r7, r2
 80011b8:	7812      	ldrb	r2, [r2, #0]
 80011ba:	70da      	strb	r2, [r3, #3]
        TxData[4] = 0x00;
 80011bc:	4b45      	ldr	r3, [pc, #276]	@ (80012d4 <transmitDataOverCAN+0x348>)
 80011be:	2200      	movs	r2, #0
 80011c0:	711a      	strb	r2, [r3, #4]
        TxData[5] = min_current;  // 5 amps
 80011c2:	4b44      	ldr	r3, [pc, #272]	@ (80012d4 <transmitDataOverCAN+0x348>)
 80011c4:	2209      	movs	r2, #9
 80011c6:	18ba      	adds	r2, r7, r2
 80011c8:	7812      	ldrb	r2, [r2, #0]
 80011ca:	715a      	strb	r2, [r3, #5]
        printf("CV mode started, SoC = %d\r\n", SoC);
 80011cc:	4b49      	ldr	r3, [pc, #292]	@ (80012f4 <transmitDataOverCAN+0x368>)
 80011ce:	881b      	ldrh	r3, [r3, #0]
 80011d0:	001a      	movs	r2, r3
 80011d2:	4b49      	ldr	r3, [pc, #292]	@ (80012f8 <transmitDataOverCAN+0x36c>)
 80011d4:	0011      	movs	r1, r2
 80011d6:	0018      	movs	r0, r3
 80011d8:	f005 f9de 	bl	8006598 <iprintf>
 80011dc:	e023      	b.n	8001226 <transmitDataOverCAN+0x29a>
    }
    else
    {
        TxData[0] = broadcastAdd;
 80011de:	4b3d      	ldr	r3, [pc, #244]	@ (80012d4 <transmitDataOverCAN+0x348>)
 80011e0:	220b      	movs	r2, #11
 80011e2:	18ba      	adds	r2, r7, r2
 80011e4:	7812      	ldrb	r2, [r2, #0]
 80011e6:	701a      	strb	r2, [r3, #0]
        TxData[1] = relayPowerON;
 80011e8:	4b3a      	ldr	r3, [pc, #232]	@ (80012d4 <transmitDataOverCAN+0x348>)
 80011ea:	220a      	movs	r2, #10
 80011ec:	18ba      	adds	r2, r7, r2
 80011ee:	7812      	ldrb	r2, [r2, #0]
 80011f0:	705a      	strb	r2, [r3, #1]
        TxData[2] = scaled_Volt_HighByte;
 80011f2:	4b38      	ldr	r3, [pc, #224]	@ (80012d4 <transmitDataOverCAN+0x348>)
 80011f4:	2211      	movs	r2, #17
 80011f6:	18ba      	adds	r2, r7, r2
 80011f8:	7812      	ldrb	r2, [r2, #0]
 80011fa:	709a      	strb	r2, [r3, #2]
        TxData[3] = scaled_Volt_LowByte;
 80011fc:	4b35      	ldr	r3, [pc, #212]	@ (80012d4 <transmitDataOverCAN+0x348>)
 80011fe:	2210      	movs	r2, #16
 8001200:	18ba      	adds	r2, r7, r2
 8001202:	7812      	ldrb	r2, [r2, #0]
 8001204:	70da      	strb	r2, [r3, #3]
        TxData[4] = 0x00;
 8001206:	4b33      	ldr	r3, [pc, #204]	@ (80012d4 <transmitDataOverCAN+0x348>)
 8001208:	2200      	movs	r2, #0
 800120a:	711a      	strb	r2, [r3, #4]
        TxData[5] = max_current;  // 10 amps
 800120c:	4b31      	ldr	r3, [pc, #196]	@ (80012d4 <transmitDataOverCAN+0x348>)
 800120e:	2208      	movs	r2, #8
 8001210:	18ba      	adds	r2, r7, r2
 8001212:	7812      	ldrb	r2, [r2, #0]
 8001214:	715a      	strb	r2, [r3, #5]
        printf("Charging with 10 amps, SoC = %d\r\n", SoC);
 8001216:	4b37      	ldr	r3, [pc, #220]	@ (80012f4 <transmitDataOverCAN+0x368>)
 8001218:	881b      	ldrh	r3, [r3, #0]
 800121a:	001a      	movs	r2, r3
 800121c:	4b37      	ldr	r3, [pc, #220]	@ (80012fc <transmitDataOverCAN+0x370>)
 800121e:	0011      	movs	r1, r2
 8001220:	0018      	movs	r0, r3
 8001222:	f005 f9b9 	bl	8006598 <iprintf>
    }

    bool cellTempGreaterThan500 = false;
 8001226:	231f      	movs	r3, #31
 8001228:	18fb      	adds	r3, r7, r3
 800122a:	2200      	movs	r2, #0
 800122c:	701a      	strb	r2, [r3, #0]
    bool cellTempGreaterThan600 = false;
 800122e:	231e      	movs	r3, #30
 8001230:	18fb      	adds	r3, r7, r3
 8001232:	2200      	movs	r2, #0
 8001234:	701a      	strb	r2, [r3, #0]
    for (int c = 0; c < 5; c++)
 8001236:	2300      	movs	r3, #0
 8001238:	61bb      	str	r3, [r7, #24]
 800123a:	e01b      	b.n	8001274 <transmitDataOverCAN+0x2e8>
    {
        if (Cell_temp[c] >= 600)
 800123c:	4b30      	ldr	r3, [pc, #192]	@ (8001300 <transmitDataOverCAN+0x374>)
 800123e:	69ba      	ldr	r2, [r7, #24]
 8001240:	0052      	lsls	r2, r2, #1
 8001242:	5ad2      	ldrh	r2, [r2, r3]
 8001244:	2396      	movs	r3, #150	@ 0x96
 8001246:	009b      	lsls	r3, r3, #2
 8001248:	429a      	cmp	r2, r3
 800124a:	d304      	bcc.n	8001256 <transmitDataOverCAN+0x2ca>
        {
            cellTempGreaterThan600 = true;
 800124c:	231e      	movs	r3, #30
 800124e:	18fb      	adds	r3, r7, r3
 8001250:	2201      	movs	r2, #1
 8001252:	701a      	strb	r2, [r3, #0]
            break;
 8001254:	e011      	b.n	800127a <transmitDataOverCAN+0x2ee>
        }
        if (Cell_temp[c] >= 500)
 8001256:	4b2a      	ldr	r3, [pc, #168]	@ (8001300 <transmitDataOverCAN+0x374>)
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	0052      	lsls	r2, r2, #1
 800125c:	5ad2      	ldrh	r2, [r2, r3]
 800125e:	23fa      	movs	r3, #250	@ 0xfa
 8001260:	005b      	lsls	r3, r3, #1
 8001262:	429a      	cmp	r2, r3
 8001264:	d303      	bcc.n	800126e <transmitDataOverCAN+0x2e2>
        {
            cellTempGreaterThan500 = true;
 8001266:	231f      	movs	r3, #31
 8001268:	18fb      	adds	r3, r7, r3
 800126a:	2201      	movs	r2, #1
 800126c:	701a      	strb	r2, [r3, #0]
    for (int c = 0; c < 5; c++)
 800126e:	69bb      	ldr	r3, [r7, #24]
 8001270:	3301      	adds	r3, #1
 8001272:	61bb      	str	r3, [r7, #24]
 8001274:	69bb      	ldr	r3, [r7, #24]
 8001276:	2b04      	cmp	r3, #4
 8001278:	dde0      	ble.n	800123c <transmitDataOverCAN+0x2b0>
        }
    }
    if (cellTempGreaterThan600)
 800127a:	231e      	movs	r3, #30
 800127c:	18fb      	adds	r3, r7, r3
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d041      	beq.n	8001308 <transmitDataOverCAN+0x37c>
    {
        TxData[0] = broadcastAdd;
 8001284:	4b13      	ldr	r3, [pc, #76]	@ (80012d4 <transmitDataOverCAN+0x348>)
 8001286:	220b      	movs	r2, #11
 8001288:	18ba      	adds	r2, r7, r2
 800128a:	7812      	ldrb	r2, [r2, #0]
 800128c:	701a      	strb	r2, [r3, #0]
        TxData[1] = 0x00;
 800128e:	4b11      	ldr	r3, [pc, #68]	@ (80012d4 <transmitDataOverCAN+0x348>)
 8001290:	2200      	movs	r2, #0
 8001292:	705a      	strb	r2, [r3, #1]
        TxData[2] = 0x00;
 8001294:	4b0f      	ldr	r3, [pc, #60]	@ (80012d4 <transmitDataOverCAN+0x348>)
 8001296:	2200      	movs	r2, #0
 8001298:	709a      	strb	r2, [r3, #2]
        TxData[3] = 0x00;
 800129a:	4b0e      	ldr	r3, [pc, #56]	@ (80012d4 <transmitDataOverCAN+0x348>)
 800129c:	2200      	movs	r2, #0
 800129e:	70da      	strb	r2, [r3, #3]
        TxData[4] = 0x00;
 80012a0:	4b0c      	ldr	r3, [pc, #48]	@ (80012d4 <transmitDataOverCAN+0x348>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	711a      	strb	r2, [r3, #4]
        TxData[5] = 0x00;  // Stop charging
 80012a6:	4b0b      	ldr	r3, [pc, #44]	@ (80012d4 <transmitDataOverCAN+0x348>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	715a      	strb	r2, [r3, #5]
        printf("Stopped charging as cell temperature is above 60°C\r\n");
 80012ac:	4b15      	ldr	r3, [pc, #84]	@ (8001304 <transmitDataOverCAN+0x378>)
 80012ae:	0018      	movs	r0, r3
 80012b0:	f005 f9e2 	bl	8006678 <puts>
 80012b4:	e04c      	b.n	8001350 <transmitDataOverCAN+0x3c4>
 80012b6:	46c0      	nop			@ (mov r8, r8)
 80012b8:	20000304 	.word	0x20000304
 80012bc:	33333333 	.word	0x33333333
 80012c0:	400d3333 	.word	0x400d3333
 80012c4:	40590000 	.word	0x40590000
 80012c8:	200000f8 	.word	0x200000f8
 80012cc:	20000394 	.word	0x20000394
 80012d0:	00000bb8 	.word	0x00000bb8
 80012d4:	2000047c 	.word	0x2000047c
 80012d8:	20000484 	.word	0x20000484
 80012dc:	08007844 	.word	0x08007844
 80012e0:	08007888 	.word	0x08007888
 80012e4:	080078a0 	.word	0x080078a0
 80012e8:	20000452 	.word	0x20000452
 80012ec:	00001c88 	.word	0x00001c88
 80012f0:	080078d0 	.word	0x080078d0
 80012f4:	20000456 	.word	0x20000456
 80012f8:	08007908 	.word	0x08007908
 80012fc:	08007924 	.word	0x08007924
 8001300:	2000045c 	.word	0x2000045c
 8001304:	08007948 	.word	0x08007948
    }
    else if(cellTempGreaterThan500)
 8001308:	231f      	movs	r3, #31
 800130a:	18fb      	adds	r3, r7, r3
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d01e      	beq.n	8001350 <transmitDataOverCAN+0x3c4>
    {
        TxData[0] = broadcastAdd;
 8001312:	4b34      	ldr	r3, [pc, #208]	@ (80013e4 <transmitDataOverCAN+0x458>)
 8001314:	220b      	movs	r2, #11
 8001316:	18ba      	adds	r2, r7, r2
 8001318:	7812      	ldrb	r2, [r2, #0]
 800131a:	701a      	strb	r2, [r3, #0]
        TxData[1] = relayPowerON;
 800131c:	4b31      	ldr	r3, [pc, #196]	@ (80013e4 <transmitDataOverCAN+0x458>)
 800131e:	220a      	movs	r2, #10
 8001320:	18ba      	adds	r2, r7, r2
 8001322:	7812      	ldrb	r2, [r2, #0]
 8001324:	705a      	strb	r2, [r3, #1]
        TxData[2] = scaled_Volt_HighByte;
 8001326:	4b2f      	ldr	r3, [pc, #188]	@ (80013e4 <transmitDataOverCAN+0x458>)
 8001328:	2211      	movs	r2, #17
 800132a:	18ba      	adds	r2, r7, r2
 800132c:	7812      	ldrb	r2, [r2, #0]
 800132e:	709a      	strb	r2, [r3, #2]
        TxData[3] = scaled_Volt_LowByte;
 8001330:	4b2c      	ldr	r3, [pc, #176]	@ (80013e4 <transmitDataOverCAN+0x458>)
 8001332:	2210      	movs	r2, #16
 8001334:	18ba      	adds	r2, r7, r2
 8001336:	7812      	ldrb	r2, [r2, #0]
 8001338:	70da      	strb	r2, [r3, #3]
        TxData[4] = 0x00;
 800133a:	4b2a      	ldr	r3, [pc, #168]	@ (80013e4 <transmitDataOverCAN+0x458>)
 800133c:	2200      	movs	r2, #0
 800133e:	711a      	strb	r2, [r3, #4]
        TxData[5] = derated_current;  // 4 amps
 8001340:	4b28      	ldr	r3, [pc, #160]	@ (80013e4 <transmitDataOverCAN+0x458>)
 8001342:	1dfa      	adds	r2, r7, #7
 8001344:	7812      	ldrb	r2, [r2, #0]
 8001346:	715a      	strb	r2, [r3, #5]
        printf("Temperature exceeds limit, charging with 4 amps\r\n");
 8001348:	4b27      	ldr	r3, [pc, #156]	@ (80013e8 <transmitDataOverCAN+0x45c>)
 800134a:	0018      	movs	r0, r3
 800134c:	f005 f994 	bl	8006678 <puts>
    }

    // Implement LED indication based on SOC
    setLEDIndicationBasedOnSOC(SoC);
 8001350:	4b26      	ldr	r3, [pc, #152]	@ (80013ec <transmitDataOverCAN+0x460>)
 8001352:	881b      	ldrh	r3, [r3, #0]
 8001354:	b2db      	uxtb	r3, r3
 8001356:	0018      	movs	r0, r3
 8001358:	f000 f856 	bl	8001408 <setLEDIndicationBasedOnSOC>

    // Implement charging time cut-off
    if (hasChargingExceededMaxTime())
 800135c:	f000 f85e 	bl	800141c <hasChargingExceededMaxTime>
 8001360:	1e03      	subs	r3, r0, #0
 8001362:	d017      	beq.n	8001394 <transmitDataOverCAN+0x408>
    {
        TxData[0] = broadcastAdd;
 8001364:	4b1f      	ldr	r3, [pc, #124]	@ (80013e4 <transmitDataOverCAN+0x458>)
 8001366:	220b      	movs	r2, #11
 8001368:	18ba      	adds	r2, r7, r2
 800136a:	7812      	ldrb	r2, [r2, #0]
 800136c:	701a      	strb	r2, [r3, #0]
        TxData[1] = 0x00;
 800136e:	4b1d      	ldr	r3, [pc, #116]	@ (80013e4 <transmitDataOverCAN+0x458>)
 8001370:	2200      	movs	r2, #0
 8001372:	705a      	strb	r2, [r3, #1]
        TxData[2] = 0x00;
 8001374:	4b1b      	ldr	r3, [pc, #108]	@ (80013e4 <transmitDataOverCAN+0x458>)
 8001376:	2200      	movs	r2, #0
 8001378:	709a      	strb	r2, [r3, #2]
        TxData[3] = 0x00;
 800137a:	4b1a      	ldr	r3, [pc, #104]	@ (80013e4 <transmitDataOverCAN+0x458>)
 800137c:	2200      	movs	r2, #0
 800137e:	70da      	strb	r2, [r3, #3]
        TxData[4] = 0x00;
 8001380:	4b18      	ldr	r3, [pc, #96]	@ (80013e4 <transmitDataOverCAN+0x458>)
 8001382:	2200      	movs	r2, #0
 8001384:	711a      	strb	r2, [r3, #4]
        TxData[5] = 0x00;  // Stop charging
 8001386:	4b17      	ldr	r3, [pc, #92]	@ (80013e4 <transmitDataOverCAN+0x458>)
 8001388:	2200      	movs	r2, #0
 800138a:	715a      	strb	r2, [r3, #5]
        printf("Stopped charging as it exceeded 7 hours\r\n");
 800138c:	4b18      	ldr	r3, [pc, #96]	@ (80013f0 <transmitDataOverCAN+0x464>)
 800138e:	0018      	movs	r0, r3
 8001390:	f005 f972 	bl	8006678 <puts>
    }

    // Implement LED fault indications
    if (!canConnected)
 8001394:	4b17      	ldr	r3, [pc, #92]	@ (80013f4 <transmitDataOverCAN+0x468>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	b2db      	uxtb	r3, r3
 800139a:	2b00      	cmp	r3, #0
 800139c:	d101      	bne.n	80013a2 <transmitDataOverCAN+0x416>
    {
        indicateCANCommunicationError();
 800139e:	f000 f843 	bl	8001428 <indicateCANCommunicationError>
    }
    // Other fault indications can be added here

    // Configure maximum output voltage based on battery type
    configureMaxOutputVoltage();
 80013a2:	f000 f847 	bl	8001434 <configureMaxOutputVoltage>

    // Transmit CAN frame
    if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) == HAL_OK) {
 80013a6:	4a0f      	ldr	r2, [pc, #60]	@ (80013e4 <transmitDataOverCAN+0x458>)
 80013a8:	4913      	ldr	r1, [pc, #76]	@ (80013f8 <transmitDataOverCAN+0x46c>)
 80013aa:	4b14      	ldr	r3, [pc, #80]	@ (80013fc <transmitDataOverCAN+0x470>)
 80013ac:	0018      	movs	r0, r3
 80013ae:	f001 fdc0 	bl	8002f32 <HAL_FDCAN_AddMessageToTxFifoQ>
 80013b2:	1e03      	subs	r3, r0, #0
 80013b4:	d107      	bne.n	80013c6 <transmitDataOverCAN+0x43a>
        printf("Data sent over CAN successfully.\r\n");
 80013b6:	4b12      	ldr	r3, [pc, #72]	@ (8001400 <transmitDataOverCAN+0x474>)
 80013b8:	0018      	movs	r0, r3
 80013ba:	f005 f95d 	bl	8006678 <puts>
        canConnected = 1;
 80013be:	4b0d      	ldr	r3, [pc, #52]	@ (80013f4 <transmitDataOverCAN+0x468>)
 80013c0:	2201      	movs	r2, #1
 80013c2:	701a      	strb	r2, [r3, #0]
 80013c4:	e006      	b.n	80013d4 <transmitDataOverCAN+0x448>
    } else {
        printf("CAN transmission error.\r\n");
 80013c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001404 <transmitDataOverCAN+0x478>)
 80013c8:	0018      	movs	r0, r3
 80013ca:	f005 f955 	bl	8006678 <puts>
        canConnected = 0;  // Indicate CAN connection error
 80013ce:	4b09      	ldr	r3, [pc, #36]	@ (80013f4 <transmitDataOverCAN+0x468>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	701a      	strb	r2, [r3, #0]
    }
    printf("\n");
 80013d4:	200a      	movs	r0, #10
 80013d6:	f005 f8ef 	bl	80065b8 <putchar>
}
 80013da:	46c0      	nop			@ (mov r8, r8)
 80013dc:	46bd      	mov	sp, r7
 80013de:	b00a      	add	sp, #40	@ 0x28
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	46c0      	nop			@ (mov r8, r8)
 80013e4:	2000047c 	.word	0x2000047c
 80013e8:	08007980 	.word	0x08007980
 80013ec:	20000456 	.word	0x20000456
 80013f0:	080079b4 	.word	0x080079b4
 80013f4:	20000484 	.word	0x20000484
 80013f8:	200000f8 	.word	0x200000f8
 80013fc:	20000094 	.word	0x20000094
 8001400:	080079e0 	.word	0x080079e0
 8001404:	08007a04 	.word	0x08007a04

08001408 <setLEDIndicationBasedOnSOC>:

void setLEDIndicationBasedOnSOC(uint8_t SoC)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	0002      	movs	r2, r0
 8001410:	1dfb      	adds	r3, r7, #7
 8001412:	701a      	strb	r2, [r3, #0]
    // } else if (SoC < 75) {
    //     turnOnLED(LED_75);
    // } else {
    //     turnOnLED(LED_100);
    // }
}
 8001414:	46c0      	nop			@ (mov r8, r8)
 8001416:	46bd      	mov	sp, r7
 8001418:	b002      	add	sp, #8
 800141a:	bd80      	pop	{r7, pc}

0800141c <hasChargingExceededMaxTime>:

bool hasChargingExceededMaxTime()
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
    // Implementation to check if charging has exceeded 7 hours
    // Example:
    // return (current_time - start_time) >= 7 * 3600;
    return false; // Placeholder return statement
 8001420:	2300      	movs	r3, #0
}
 8001422:	0018      	movs	r0, r3
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}

08001428 <indicateCANCommunicationError>:

void indicateCANCommunicationError()
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
    // Implementation of CAN communication error indication
    // Example:
    // blinkLED(LED_75, 1);
    // blinkLED(LED_100, 1);
}
 800142c:	46c0      	nop			@ (mov r8, r8)
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
	...

08001434 <configureMaxOutputVoltage>:

void configureMaxOutputVoltage()
{
 8001434:	b590      	push	{r4, r7, lr}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
    // Configure maximum output voltage based on battery type
    uint16_t maxOutputVoltage = MAX_VOLTAGE_23S; // Default to 23S battery
 800143a:	1dbb      	adds	r3, r7, #6
 800143c:	4a22      	ldr	r2, [pc, #136]	@ (80014c8 <configureMaxOutputVoltage+0x94>)
 800143e:	801a      	strh	r2, [r3, #0]
    uint8_t batteryType = getBatteryType(); // Function to get battery type
 8001440:	1d7c      	adds	r4, r7, #5
 8001442:	f000 f84f 	bl	80014e4 <getBatteryType>
 8001446:	0003      	movs	r3, r0
 8001448:	7023      	strb	r3, [r4, #0]

    switch (batteryType)
 800144a:	1d7b      	adds	r3, r7, #5
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	2b13      	cmp	r3, #19
 8001450:	d005      	beq.n	800145e <configureMaxOutputVoltage+0x2a>
 8001452:	dc10      	bgt.n	8001476 <configureMaxOutputVoltage+0x42>
 8001454:	2b0f      	cmp	r3, #15
 8001456:	d00a      	beq.n	800146e <configureMaxOutputVoltage+0x3a>
 8001458:	2b10      	cmp	r3, #16
 800145a:	d004      	beq.n	8001466 <configureMaxOutputVoltage+0x32>
 800145c:	e00b      	b.n	8001476 <configureMaxOutputVoltage+0x42>
    {
        case 19:
            maxOutputVoltage = MAX_VOLTAGE_19S;
 800145e:	1dbb      	adds	r3, r7, #6
 8001460:	4a1a      	ldr	r2, [pc, #104]	@ (80014cc <configureMaxOutputVoltage+0x98>)
 8001462:	801a      	strh	r2, [r3, #0]
            break;
 8001464:	e00b      	b.n	800147e <configureMaxOutputVoltage+0x4a>
        case 16:
            maxOutputVoltage = MAX_VOLTAGE_16S;
 8001466:	1dbb      	adds	r3, r7, #6
 8001468:	4a19      	ldr	r2, [pc, #100]	@ (80014d0 <configureMaxOutputVoltage+0x9c>)
 800146a:	801a      	strh	r2, [r3, #0]
            break;
 800146c:	e007      	b.n	800147e <configureMaxOutputVoltage+0x4a>
        case 15:
            maxOutputVoltage = MAX_VOLTAGE_15S;
 800146e:	1dbb      	adds	r3, r7, #6
 8001470:	4a18      	ldr	r2, [pc, #96]	@ (80014d4 <configureMaxOutputVoltage+0xa0>)
 8001472:	801a      	strh	r2, [r3, #0]
            break;
 8001474:	e003      	b.n	800147e <configureMaxOutputVoltage+0x4a>
        default:
            maxOutputVoltage = MAX_VOLTAGE_23S;
 8001476:	1dbb      	adds	r3, r7, #6
 8001478:	4a13      	ldr	r2, [pc, #76]	@ (80014c8 <configureMaxOutputVoltage+0x94>)
 800147a:	801a      	strh	r2, [r3, #0]
            break;
 800147c:	46c0      	nop			@ (mov r8, r8)
    }

    // Ensure voltage does not exceed maximum for battery type
    if (voltage > maxOutputVoltage)
 800147e:	4b16      	ldr	r3, [pc, #88]	@ (80014d8 <configureMaxOutputVoltage+0xa4>)
 8001480:	881b      	ldrh	r3, [r3, #0]
 8001482:	1dba      	adds	r2, r7, #6
 8001484:	8812      	ldrh	r2, [r2, #0]
 8001486:	429a      	cmp	r2, r3
 8001488:	d219      	bcs.n	80014be <configureMaxOutputVoltage+0x8a>
    {
        uint8_t broadcastAdd = 0xFF;  // Ensure broadcastAdd is declared here
 800148a:	1d3b      	adds	r3, r7, #4
 800148c:	22ff      	movs	r2, #255	@ 0xff
 800148e:	701a      	strb	r2, [r3, #0]
        TxData[0] = broadcastAdd;
 8001490:	4b12      	ldr	r3, [pc, #72]	@ (80014dc <configureMaxOutputVoltage+0xa8>)
 8001492:	1d3a      	adds	r2, r7, #4
 8001494:	7812      	ldrb	r2, [r2, #0]
 8001496:	701a      	strb	r2, [r3, #0]
        TxData[1] = 0x00;
 8001498:	4b10      	ldr	r3, [pc, #64]	@ (80014dc <configureMaxOutputVoltage+0xa8>)
 800149a:	2200      	movs	r2, #0
 800149c:	705a      	strb	r2, [r3, #1]
        TxData[2] = 0x00;
 800149e:	4b0f      	ldr	r3, [pc, #60]	@ (80014dc <configureMaxOutputVoltage+0xa8>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	709a      	strb	r2, [r3, #2]
        TxData[3] = 0x00;
 80014a4:	4b0d      	ldr	r3, [pc, #52]	@ (80014dc <configureMaxOutputVoltage+0xa8>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	70da      	strb	r2, [r3, #3]
        TxData[4] = 0x00;
 80014aa:	4b0c      	ldr	r3, [pc, #48]	@ (80014dc <configureMaxOutputVoltage+0xa8>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	711a      	strb	r2, [r3, #4]
        TxData[5] = 0x00;  // Stop charging
 80014b0:	4b0a      	ldr	r3, [pc, #40]	@ (80014dc <configureMaxOutputVoltage+0xa8>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	715a      	strb	r2, [r3, #5]
        printf("Stopped charging as voltage exceeds max output voltage for battery type\r\n");
 80014b6:	4b0a      	ldr	r3, [pc, #40]	@ (80014e0 <configureMaxOutputVoltage+0xac>)
 80014b8:	0018      	movs	r0, r3
 80014ba:	f005 f8dd 	bl	8006678 <puts>
    }
}
 80014be:	46c0      	nop			@ (mov r8, r8)
 80014c0:	46bd      	mov	sp, r7
 80014c2:	b003      	add	sp, #12
 80014c4:	bd90      	pop	{r4, r7, pc}
 80014c6:	46c0      	nop			@ (mov r8, r8)
 80014c8:	000020d0 	.word	0x000020d0
 80014cc:	00001b17 	.word	0x00001b17
 80014d0:	000016d0 	.word	0x000016d0
 80014d4:	00001563 	.word	0x00001563
 80014d8:	20000452 	.word	0x20000452
 80014dc:	2000047c 	.word	0x2000047c
 80014e0:	08007a20 	.word	0x08007a20

080014e4 <getBatteryType>:

uint8_t getBatteryType()
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
    // Placeholder function to get the battery type
    // Replace this with actual logic to determine the battery type
    return 23; // Default to 23S battery
 80014e8:	2317      	movs	r3, #23
}
 80014ea:	0018      	movs	r0, r3
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}

080014f0 <MX_GPIO_Init>:
DMA_HandleTypeDef hdma_usart1_rx;
DMA_HandleTypeDef hdma_usart2_tx;


void MX_GPIO_Init(void)
{
 80014f0:	b590      	push	{r4, r7, lr}
 80014f2:	b08b      	sub	sp, #44	@ 0x2c
 80014f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f6:	2414      	movs	r4, #20
 80014f8:	193b      	adds	r3, r7, r4
 80014fa:	0018      	movs	r0, r3
 80014fc:	2314      	movs	r3, #20
 80014fe:	001a      	movs	r2, r3
 8001500:	2100      	movs	r1, #0
 8001502:	f005 f9e3 	bl	80068cc <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001506:	4b27      	ldr	r3, [pc, #156]	@ (80015a4 <MX_GPIO_Init+0xb4>)
 8001508:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800150a:	4b26      	ldr	r3, [pc, #152]	@ (80015a4 <MX_GPIO_Init+0xb4>)
 800150c:	2104      	movs	r1, #4
 800150e:	430a      	orrs	r2, r1
 8001510:	635a      	str	r2, [r3, #52]	@ 0x34
 8001512:	4b24      	ldr	r3, [pc, #144]	@ (80015a4 <MX_GPIO_Init+0xb4>)
 8001514:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001516:	2204      	movs	r2, #4
 8001518:	4013      	ands	r3, r2
 800151a:	613b      	str	r3, [r7, #16]
 800151c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800151e:	4b21      	ldr	r3, [pc, #132]	@ (80015a4 <MX_GPIO_Init+0xb4>)
 8001520:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001522:	4b20      	ldr	r3, [pc, #128]	@ (80015a4 <MX_GPIO_Init+0xb4>)
 8001524:	2120      	movs	r1, #32
 8001526:	430a      	orrs	r2, r1
 8001528:	635a      	str	r2, [r3, #52]	@ 0x34
 800152a:	4b1e      	ldr	r3, [pc, #120]	@ (80015a4 <MX_GPIO_Init+0xb4>)
 800152c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800152e:	2220      	movs	r2, #32
 8001530:	4013      	ands	r3, r2
 8001532:	60fb      	str	r3, [r7, #12]
 8001534:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001536:	4b1b      	ldr	r3, [pc, #108]	@ (80015a4 <MX_GPIO_Init+0xb4>)
 8001538:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800153a:	4b1a      	ldr	r3, [pc, #104]	@ (80015a4 <MX_GPIO_Init+0xb4>)
 800153c:	2101      	movs	r1, #1
 800153e:	430a      	orrs	r2, r1
 8001540:	635a      	str	r2, [r3, #52]	@ 0x34
 8001542:	4b18      	ldr	r3, [pc, #96]	@ (80015a4 <MX_GPIO_Init+0xb4>)
 8001544:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001546:	2201      	movs	r2, #1
 8001548:	4013      	ands	r3, r2
 800154a:	60bb      	str	r3, [r7, #8]
 800154c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800154e:	4b15      	ldr	r3, [pc, #84]	@ (80015a4 <MX_GPIO_Init+0xb4>)
 8001550:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001552:	4b14      	ldr	r3, [pc, #80]	@ (80015a4 <MX_GPIO_Init+0xb4>)
 8001554:	2108      	movs	r1, #8
 8001556:	430a      	orrs	r2, r1
 8001558:	635a      	str	r2, [r3, #52]	@ 0x34
 800155a:	4b12      	ldr	r3, [pc, #72]	@ (80015a4 <MX_GPIO_Init+0xb4>)
 800155c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800155e:	2208      	movs	r2, #8
 8001560:	4013      	ands	r3, r2
 8001562:	607b      	str	r3, [r7, #4]
 8001564:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8001566:	23a0      	movs	r3, #160	@ 0xa0
 8001568:	05db      	lsls	r3, r3, #23
 800156a:	2200      	movs	r2, #0
 800156c:	2120      	movs	r1, #32
 800156e:	0018      	movs	r0, r3
 8001570:	f002 f90c 	bl	800378c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8001574:	0021      	movs	r1, r4
 8001576:	187b      	adds	r3, r7, r1
 8001578:	2220      	movs	r2, #32
 800157a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800157c:	187b      	adds	r3, r7, r1
 800157e:	2201      	movs	r2, #1
 8001580:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001582:	187b      	adds	r3, r7, r1
 8001584:	2200      	movs	r2, #0
 8001586:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001588:	187b      	adds	r3, r7, r1
 800158a:	2202      	movs	r2, #2
 800158c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 800158e:	187a      	adds	r2, r7, r1
 8001590:	23a0      	movs	r3, #160	@ 0xa0
 8001592:	05db      	lsls	r3, r3, #23
 8001594:	0011      	movs	r1, r2
 8001596:	0018      	movs	r0, r3
 8001598:	f001 ff8c 	bl	80034b4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800159c:	46c0      	nop			@ (mov r8, r8)
 800159e:	46bd      	mov	sp, r7
 80015a0:	b00b      	add	sp, #44	@ 0x2c
 80015a2:	bd90      	pop	{r4, r7, pc}
 80015a4:	40021000 	.word	0x40021000

080015a8 <MX_DMA_Init>:

void MX_DMA_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015ae:	4b14      	ldr	r3, [pc, #80]	@ (8001600 <MX_DMA_Init+0x58>)
 80015b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80015b2:	4b13      	ldr	r3, [pc, #76]	@ (8001600 <MX_DMA_Init+0x58>)
 80015b4:	2101      	movs	r1, #1
 80015b6:	430a      	orrs	r2, r1
 80015b8:	639a      	str	r2, [r3, #56]	@ 0x38
 80015ba:	4b11      	ldr	r3, [pc, #68]	@ (8001600 <MX_DMA_Init+0x58>)
 80015bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015be:	2201      	movs	r2, #1
 80015c0:	4013      	ands	r3, r2
 80015c2:	607b      	str	r3, [r7, #4]
 80015c4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80015c6:	2200      	movs	r2, #0
 80015c8:	2100      	movs	r1, #0
 80015ca:	2009      	movs	r0, #9
 80015cc:	f000 fece 	bl	800236c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80015d0:	2009      	movs	r0, #9
 80015d2:	f000 fee0 	bl	8002396 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80015d6:	2200      	movs	r2, #0
 80015d8:	2100      	movs	r1, #0
 80015da:	200a      	movs	r0, #10
 80015dc:	f000 fec6 	bl	800236c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80015e0:	200a      	movs	r0, #10
 80015e2:	f000 fed8 	bl	8002396 <HAL_NVIC_EnableIRQ>
  /* DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn, 0, 0);
 80015e6:	2200      	movs	r2, #0
 80015e8:	2100      	movs	r1, #0
 80015ea:	200b      	movs	r0, #11
 80015ec:	f000 febe 	bl	800236c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn);
 80015f0:	200b      	movs	r0, #11
 80015f2:	f000 fed0 	bl	8002396 <HAL_NVIC_EnableIRQ>

}
 80015f6:	46c0      	nop			@ (mov r8, r8)
 80015f8:	46bd      	mov	sp, r7
 80015fa:	b002      	add	sp, #8
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	46c0      	nop			@ (mov r8, r8)
 8001600:	40021000 	.word	0x40021000

08001604 <MX_USART1_UART_Init>:

void MX_USART1_UART_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 8001608:	4b24      	ldr	r3, [pc, #144]	@ (800169c <MX_USART1_UART_Init+0x98>)
 800160a:	4a25      	ldr	r2, [pc, #148]	@ (80016a0 <MX_USART1_UART_Init+0x9c>)
 800160c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800160e:	4b23      	ldr	r3, [pc, #140]	@ (800169c <MX_USART1_UART_Init+0x98>)
 8001610:	2296      	movs	r2, #150	@ 0x96
 8001612:	0192      	lsls	r2, r2, #6
 8001614:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001616:	4b21      	ldr	r3, [pc, #132]	@ (800169c <MX_USART1_UART_Init+0x98>)
 8001618:	2200      	movs	r2, #0
 800161a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800161c:	4b1f      	ldr	r3, [pc, #124]	@ (800169c <MX_USART1_UART_Init+0x98>)
 800161e:	2200      	movs	r2, #0
 8001620:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001622:	4b1e      	ldr	r3, [pc, #120]	@ (800169c <MX_USART1_UART_Init+0x98>)
 8001624:	2200      	movs	r2, #0
 8001626:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001628:	4b1c      	ldr	r3, [pc, #112]	@ (800169c <MX_USART1_UART_Init+0x98>)
 800162a:	220c      	movs	r2, #12
 800162c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800162e:	4b1b      	ldr	r3, [pc, #108]	@ (800169c <MX_USART1_UART_Init+0x98>)
 8001630:	2200      	movs	r2, #0
 8001632:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001634:	4b19      	ldr	r3, [pc, #100]	@ (800169c <MX_USART1_UART_Init+0x98>)
 8001636:	2200      	movs	r2, #0
 8001638:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800163a:	4b18      	ldr	r3, [pc, #96]	@ (800169c <MX_USART1_UART_Init+0x98>)
 800163c:	2200      	movs	r2, #0
 800163e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001640:	4b16      	ldr	r3, [pc, #88]	@ (800169c <MX_USART1_UART_Init+0x98>)
 8001642:	2200      	movs	r2, #0
 8001644:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001646:	4b15      	ldr	r3, [pc, #84]	@ (800169c <MX_USART1_UART_Init+0x98>)
 8001648:	2200      	movs	r2, #0
 800164a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RS485Ex_Init(&huart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 800164c:	4813      	ldr	r0, [pc, #76]	@ (800169c <MX_USART1_UART_Init+0x98>)
 800164e:	2300      	movs	r3, #0
 8001650:	2200      	movs	r2, #0
 8001652:	2100      	movs	r1, #0
 8001654:	f004 fd38 	bl	80060c8 <HAL_RS485Ex_Init>
 8001658:	1e03      	subs	r3, r0, #0
 800165a:	d001      	beq.n	8001660 <MX_USART1_UART_Init+0x5c>
  {
    Error_Handler();
 800165c:	f000 fa22 	bl	8001aa4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001660:	4b0e      	ldr	r3, [pc, #56]	@ (800169c <MX_USART1_UART_Init+0x98>)
 8001662:	2100      	movs	r1, #0
 8001664:	0018      	movs	r0, r3
 8001666:	f004 fdf3 	bl	8006250 <HAL_UARTEx_SetTxFifoThreshold>
 800166a:	1e03      	subs	r3, r0, #0
 800166c:	d001      	beq.n	8001672 <MX_USART1_UART_Init+0x6e>
  {
    Error_Handler();
 800166e:	f000 fa19 	bl	8001aa4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001672:	4b0a      	ldr	r3, [pc, #40]	@ (800169c <MX_USART1_UART_Init+0x98>)
 8001674:	2100      	movs	r1, #0
 8001676:	0018      	movs	r0, r3
 8001678:	f004 fe2a 	bl	80062d0 <HAL_UARTEx_SetRxFifoThreshold>
 800167c:	1e03      	subs	r3, r0, #0
 800167e:	d001      	beq.n	8001684 <MX_USART1_UART_Init+0x80>
  {
    Error_Handler();
 8001680:	f000 fa10 	bl	8001aa4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001684:	4b05      	ldr	r3, [pc, #20]	@ (800169c <MX_USART1_UART_Init+0x98>)
 8001686:	0018      	movs	r0, r3
 8001688:	f004 fda8 	bl	80061dc <HAL_UARTEx_DisableFifoMode>
 800168c:	1e03      	subs	r3, r0, #0
 800168e:	d001      	beq.n	8001694 <MX_USART1_UART_Init+0x90>
  {
    Error_Handler();
 8001690:	f000 fa08 	bl	8001aa4 <Error_Handler>
  }

}
 8001694:	46c0      	nop			@ (mov r8, r8)
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	46c0      	nop			@ (mov r8, r8)
 800169c:	2000011c 	.word	0x2000011c
 80016a0:	40013800 	.word	0x40013800

080016a4 <MX_USART2_UART_Init>:

void MX_USART2_UART_Init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80016a8:	4b23      	ldr	r3, [pc, #140]	@ (8001738 <MX_USART2_UART_Init+0x94>)
 80016aa:	4a24      	ldr	r2, [pc, #144]	@ (800173c <MX_USART2_UART_Init+0x98>)
 80016ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80016ae:	4b22      	ldr	r3, [pc, #136]	@ (8001738 <MX_USART2_UART_Init+0x94>)
 80016b0:	2296      	movs	r2, #150	@ 0x96
 80016b2:	0192      	lsls	r2, r2, #6
 80016b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016b6:	4b20      	ldr	r3, [pc, #128]	@ (8001738 <MX_USART2_UART_Init+0x94>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016bc:	4b1e      	ldr	r3, [pc, #120]	@ (8001738 <MX_USART2_UART_Init+0x94>)
 80016be:	2200      	movs	r2, #0
 80016c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016c2:	4b1d      	ldr	r3, [pc, #116]	@ (8001738 <MX_USART2_UART_Init+0x94>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001738 <MX_USART2_UART_Init+0x94>)
 80016ca:	220c      	movs	r2, #12
 80016cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ce:	4b1a      	ldr	r3, [pc, #104]	@ (8001738 <MX_USART2_UART_Init+0x94>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016d4:	4b18      	ldr	r3, [pc, #96]	@ (8001738 <MX_USART2_UART_Init+0x94>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016da:	4b17      	ldr	r3, [pc, #92]	@ (8001738 <MX_USART2_UART_Init+0x94>)
 80016dc:	2200      	movs	r2, #0
 80016de:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016e0:	4b15      	ldr	r3, [pc, #84]	@ (8001738 <MX_USART2_UART_Init+0x94>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016e6:	4b14      	ldr	r3, [pc, #80]	@ (8001738 <MX_USART2_UART_Init+0x94>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016ec:	4b12      	ldr	r3, [pc, #72]	@ (8001738 <MX_USART2_UART_Init+0x94>)
 80016ee:	0018      	movs	r0, r3
 80016f0:	f002 fffc 	bl	80046ec <HAL_UART_Init>
 80016f4:	1e03      	subs	r3, r0, #0
 80016f6:	d001      	beq.n	80016fc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80016f8:	f000 f9d4 	bl	8001aa4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016fc:	4b0e      	ldr	r3, [pc, #56]	@ (8001738 <MX_USART2_UART_Init+0x94>)
 80016fe:	2100      	movs	r1, #0
 8001700:	0018      	movs	r0, r3
 8001702:	f004 fda5 	bl	8006250 <HAL_UARTEx_SetTxFifoThreshold>
 8001706:	1e03      	subs	r3, r0, #0
 8001708:	d001      	beq.n	800170e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800170a:	f000 f9cb 	bl	8001aa4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800170e:	4b0a      	ldr	r3, [pc, #40]	@ (8001738 <MX_USART2_UART_Init+0x94>)
 8001710:	2100      	movs	r1, #0
 8001712:	0018      	movs	r0, r3
 8001714:	f004 fddc 	bl	80062d0 <HAL_UARTEx_SetRxFifoThreshold>
 8001718:	1e03      	subs	r3, r0, #0
 800171a:	d001      	beq.n	8001720 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800171c:	f000 f9c2 	bl	8001aa4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001720:	4b05      	ldr	r3, [pc, #20]	@ (8001738 <MX_USART2_UART_Init+0x94>)
 8001722:	0018      	movs	r0, r3
 8001724:	f004 fd5a 	bl	80061dc <HAL_UARTEx_DisableFifoMode>
 8001728:	1e03      	subs	r3, r0, #0
 800172a:	d001      	beq.n	8001730 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800172c:	f000 f9ba 	bl	8001aa4 <Error_Handler>
  }

}
 8001730:	46c0      	nop			@ (mov r8, r8)
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	46c0      	nop			@ (mov r8, r8)
 8001738:	200001b0 	.word	0x200001b0
 800173c:	40004400 	.word	0x40004400

08001740 <MX_FDCAN1_Init>:

void MX_FDCAN1_Init(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0

  hfdcan1.Instance = FDCAN1;
 8001744:	4b24      	ldr	r3, [pc, #144]	@ (80017d8 <MX_FDCAN1_Init+0x98>)
 8001746:	4a25      	ldr	r2, [pc, #148]	@ (80017dc <MX_FDCAN1_Init+0x9c>)
 8001748:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800174a:	4b23      	ldr	r3, [pc, #140]	@ (80017d8 <MX_FDCAN1_Init+0x98>)
 800174c:	2200      	movs	r2, #0
 800174e:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001750:	4b21      	ldr	r3, [pc, #132]	@ (80017d8 <MX_FDCAN1_Init+0x98>)
 8001752:	2200      	movs	r2, #0
 8001754:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001756:	4b20      	ldr	r3, [pc, #128]	@ (80017d8 <MX_FDCAN1_Init+0x98>)
 8001758:	2200      	movs	r2, #0
 800175a:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 800175c:	4b1e      	ldr	r3, [pc, #120]	@ (80017d8 <MX_FDCAN1_Init+0x98>)
 800175e:	2200      	movs	r2, #0
 8001760:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001762:	4b1d      	ldr	r3, [pc, #116]	@ (80017d8 <MX_FDCAN1_Init+0x98>)
 8001764:	2200      	movs	r2, #0
 8001766:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001768:	4b1b      	ldr	r3, [pc, #108]	@ (80017d8 <MX_FDCAN1_Init+0x98>)
 800176a:	2200      	movs	r2, #0
 800176c:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 8;
 800176e:	4b1a      	ldr	r3, [pc, #104]	@ (80017d8 <MX_FDCAN1_Init+0x98>)
 8001770:	2208      	movs	r2, #8
 8001772:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001774:	4b18      	ldr	r3, [pc, #96]	@ (80017d8 <MX_FDCAN1_Init+0x98>)
 8001776:	2201      	movs	r2, #1
 8001778:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 7;
 800177a:	4b17      	ldr	r3, [pc, #92]	@ (80017d8 <MX_FDCAN1_Init+0x98>)
 800177c:	2207      	movs	r2, #7
 800177e:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 8;
 8001780:	4b15      	ldr	r3, [pc, #84]	@ (80017d8 <MX_FDCAN1_Init+0x98>)
 8001782:	2208      	movs	r2, #8
 8001784:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8001786:	4b14      	ldr	r3, [pc, #80]	@ (80017d8 <MX_FDCAN1_Init+0x98>)
 8001788:	2201      	movs	r2, #1
 800178a:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 800178c:	4b12      	ldr	r3, [pc, #72]	@ (80017d8 <MX_FDCAN1_Init+0x98>)
 800178e:	2201      	movs	r2, #1
 8001790:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8001792:	4b11      	ldr	r3, [pc, #68]	@ (80017d8 <MX_FDCAN1_Init+0x98>)
 8001794:	2201      	movs	r2, #1
 8001796:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8001798:	4b0f      	ldr	r3, [pc, #60]	@ (80017d8 <MX_FDCAN1_Init+0x98>)
 800179a:	2201      	movs	r2, #1
 800179c:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 800179e:	4b0e      	ldr	r3, [pc, #56]	@ (80017d8 <MX_FDCAN1_Init+0x98>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80017a4:	4b0c      	ldr	r3, [pc, #48]	@ (80017d8 <MX_FDCAN1_Init+0x98>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80017aa:	4b0b      	ldr	r3, [pc, #44]	@ (80017d8 <MX_FDCAN1_Init+0x98>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80017b0:	4b09      	ldr	r3, [pc, #36]	@ (80017d8 <MX_FDCAN1_Init+0x98>)
 80017b2:	0018      	movs	r0, r3
 80017b4:	f001 f9d4 	bl	8002b60 <HAL_FDCAN_Init>
 80017b8:	1e03      	subs	r3, r0, #0
 80017ba:	d001      	beq.n	80017c0 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 80017bc:	f000 f972 	bl	8001aa4 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  // Start FDCAN1
  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 80017c0:	4b05      	ldr	r3, [pc, #20]	@ (80017d8 <MX_FDCAN1_Init+0x98>)
 80017c2:	0018      	movs	r0, r3
 80017c4:	f001 fb8f 	bl	8002ee6 <HAL_FDCAN_Start>
 80017c8:	1e03      	subs	r3, r0, #0
 80017ca:	d001      	beq.n	80017d0 <MX_FDCAN1_Init+0x90>
  {
      Error_Handler();
 80017cc:	f000 f96a 	bl	8001aa4 <Error_Handler>
  }
  /* USER CODE END FDCAN1_Init 2 */

}
 80017d0:	46c0      	nop			@ (mov r8, r8)
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	46c0      	nop			@ (mov r8, r8)
 80017d8:	20000094 	.word	0x20000094
 80017dc:	40006400 	.word	0x40006400

080017e0 <FDCAN1_FilterConfig>:

void FDCAN1_FilterConfig(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b086      	sub	sp, #24
 80017e4:	af00      	add	r7, sp, #0
    FDCAN_FilterTypeDef sFilterConfig;

    sFilterConfig.IdType = FDCAN_STANDARD_ID;
 80017e6:	003b      	movs	r3, r7
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]
    sFilterConfig.FilterIndex = 0;
 80017ec:	003b      	movs	r3, r7
 80017ee:	2200      	movs	r2, #0
 80017f0:	605a      	str	r2, [r3, #4]
    sFilterConfig.FilterType = FDCAN_FILTER_RANGE;
 80017f2:	003b      	movs	r3, r7
 80017f4:	2200      	movs	r2, #0
 80017f6:	609a      	str	r2, [r3, #8]
    sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80017f8:	003b      	movs	r3, r7
 80017fa:	2201      	movs	r2, #1
 80017fc:	60da      	str	r2, [r3, #12]
    sFilterConfig.FilterID1 = 0x200; // First ID of the range
 80017fe:	003b      	movs	r3, r7
 8001800:	2280      	movs	r2, #128	@ 0x80
 8001802:	0092      	lsls	r2, r2, #2
 8001804:	611a      	str	r2, [r3, #16]
//    sFilterConfig.FilterID2 = 0x110; // Last ID of the range

    if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 8001806:	003a      	movs	r2, r7
 8001808:	4b06      	ldr	r3, [pc, #24]	@ (8001824 <FDCAN1_FilterConfig+0x44>)
 800180a:	0011      	movs	r1, r2
 800180c:	0018      	movs	r0, r3
 800180e:	f001 fb0d 	bl	8002e2c <HAL_FDCAN_ConfigFilter>
 8001812:	1e03      	subs	r3, r0, #0
 8001814:	d001      	beq.n	800181a <FDCAN1_FilterConfig+0x3a>
    {
        /* Filter configuration Error */
        Error_Handler();
 8001816:	f000 f945 	bl	8001aa4 <Error_Handler>
    }
}
 800181a:	46c0      	nop			@ (mov r8, r8)
 800181c:	46bd      	mov	sp, r7
 800181e:	b006      	add	sp, #24
 8001820:	bd80      	pop	{r7, pc}
 8001822:	46c0      	nop			@ (mov r8, r8)
 8001824:	20000094 	.word	0x20000094

08001828 <_write>:
uint8_t TxData[8] = {0};  			// Buffer to store CAN data payload of 8 bytes
volatile uint8_t canConnected = 0;  // Flag to indicate CAN connection status


//**************************Printf functionality********************
int _write(int file, char *ptr, int len) {
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	60f8      	str	r0, [r7, #12]
 8001830:	60b9      	str	r1, [r7, #8]
 8001832:	607a      	str	r2, [r7, #4]
    if (HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY) == HAL_OK) {
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	b29a      	uxth	r2, r3
 8001838:	2301      	movs	r3, #1
 800183a:	425b      	negs	r3, r3
 800183c:	68b9      	ldr	r1, [r7, #8]
 800183e:	4806      	ldr	r0, [pc, #24]	@ (8001858 <_write+0x30>)
 8001840:	f002 ffaa 	bl	8004798 <HAL_UART_Transmit>
 8001844:	1e03      	subs	r3, r0, #0
 8001846:	d101      	bne.n	800184c <_write+0x24>
        return len;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	e000      	b.n	800184e <_write+0x26>
    }
    return 0;
 800184c:	2300      	movs	r3, #0
}
 800184e:	0018      	movs	r0, r3
 8001850:	46bd      	mov	sp, r7
 8001852:	b004      	add	sp, #16
 8001854:	bd80      	pop	{r7, pc}
 8001856:	46c0      	nop			@ (mov r8, r8)
 8001858:	200001b0 	.word	0x200001b0

0800185c <startReception>:
//**************************Printf functionality********************

void startReception(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
//    memset(bmsResponse_1, 0, sizeof(bmsResponse_1)); // Clear b/
//    memset(bmsResponse_2, 0, sizeof(bmsResponse_2)); // Clear b/
    if (hostCommand == 1) {
 8001860:	4b0a      	ldr	r3, [pc, #40]	@ (800188c <startReception+0x30>)
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	b2db      	uxtb	r3, r3
 8001866:	2b01      	cmp	r3, #1
 8001868:	d106      	bne.n	8001878 <startReception+0x1c>
        HAL_UART_Receive_DMA(&huart1, bmsResponse_1, sizeof(bmsResponse_1));
 800186a:	4909      	ldr	r1, [pc, #36]	@ (8001890 <startReception+0x34>)
 800186c:	4b09      	ldr	r3, [pc, #36]	@ (8001894 <startReception+0x38>)
 800186e:	2246      	movs	r2, #70	@ 0x46
 8001870:	0018      	movs	r0, r3
 8001872:	f003 f835 	bl	80048e0 <HAL_UART_Receive_DMA>
    } else {
        HAL_UART_Receive_DMA(&huart1, bmsResponse_2, sizeof(bmsResponse_2));
    }
}
 8001876:	e005      	b.n	8001884 <startReception+0x28>
        HAL_UART_Receive_DMA(&huart1, bmsResponse_2, sizeof(bmsResponse_2));
 8001878:	4907      	ldr	r1, [pc, #28]	@ (8001898 <startReception+0x3c>)
 800187a:	4b06      	ldr	r3, [pc, #24]	@ (8001894 <startReception+0x38>)
 800187c:	2246      	movs	r2, #70	@ 0x46
 800187e:	0018      	movs	r0, r3
 8001880:	f003 f82e 	bl	80048e0 <HAL_UART_Receive_DMA>
}
 8001884:	46c0      	nop			@ (mov r8, r8)
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	46c0      	nop			@ (mov r8, r8)
 800188c:	2000000f 	.word	0x2000000f
 8001890:	20000304 	.word	0x20000304
 8001894:	2000011c 	.word	0x2000011c
 8001898:	2000034c 	.word	0x2000034c

0800189c <main>:

int main(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  HAL_Init();
 80018a0:	f000 fbf8 	bl	8002094 <HAL_Init>
  SystemClock_Config();
 80018a4:	f000 f8b6 	bl	8001a14 <SystemClock_Config>
  MX_GPIO_Init();
 80018a8:	f7ff fe22 	bl	80014f0 <MX_GPIO_Init>
  MX_DMA_Init();
 80018ac:	f7ff fe7c 	bl	80015a8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80018b0:	f7ff fef8 	bl	80016a4 <MX_USART2_UART_Init>
  MX_FDCAN1_Init();
 80018b4:	f7ff ff44 	bl	8001740 <MX_FDCAN1_Init>
  FDCAN1_FilterConfig();
 80018b8:	f7ff ff92 	bl	80017e0 <FDCAN1_FilterConfig>
  MX_USART1_UART_Init();
 80018bc:	f7ff fea2 	bl	8001604 <MX_USART1_UART_Init>

  startReception();
 80018c0:	f7ff ffcc 	bl	800185c <startReception>
  lastDataTime = HAL_GetTick(); // Initialize the last data time
 80018c4:	f000 fc62 	bl	800218c <HAL_GetTick>
 80018c8:	0002      	movs	r2, r0
 80018ca:	4b1b      	ldr	r3, [pc, #108]	@ (8001938 <main+0x9c>)
 80018cc:	601a      	str	r2, [r3, #0]

  while (1)
  {
	  transmitBMSCommand();
 80018ce:	f7ff f9e1 	bl	8000c94 <transmitBMSCommand>

	      if ((dataReady[0] || dataReady[1]) && (HAL_GetTick() - lastDataTime < TIMEOUT)) {
 80018d2:	4b1a      	ldr	r3, [pc, #104]	@ (800193c <main+0xa0>)
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d104      	bne.n	80018e6 <main+0x4a>
 80018dc:	4b17      	ldr	r3, [pc, #92]	@ (800193c <main+0xa0>)
 80018de:	785b      	ldrb	r3, [r3, #1]
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d024      	beq.n	8001930 <main+0x94>
 80018e6:	f000 fc51 	bl	800218c <HAL_GetTick>
 80018ea:	0002      	movs	r2, r0
 80018ec:	4b12      	ldr	r3, [pc, #72]	@ (8001938 <main+0x9c>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	1ad2      	subs	r2, r2, r3
 80018f2:	23fa      	movs	r3, #250	@ 0xfa
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	429a      	cmp	r2, r3
 80018f8:	d21a      	bcs.n	8001930 <main+0x94>
	        transmitDataOverUSART2();
 80018fa:	f7ff fae1 	bl	8000ec0 <transmitDataOverUSART2>
	        transmitDataOverCAN();
 80018fe:	f7ff fb45 	bl	8000f8c <transmitDataOverCAN>
	        memset(v_i_Str, 0, sizeof(v_i_Str)); // Clear buffer
 8001902:	4b0f      	ldr	r3, [pc, #60]	@ (8001940 <main+0xa4>)
 8001904:	2232      	movs	r2, #50	@ 0x32
 8001906:	2100      	movs	r1, #0
 8001908:	0018      	movs	r0, r3
 800190a:	f004 ffdf 	bl	80068cc <memset>


	        dataReady[0] = 0;		//Clear the flag
 800190e:	4b0b      	ldr	r3, [pc, #44]	@ (800193c <main+0xa0>)
 8001910:	2200      	movs	r2, #0
 8001912:	701a      	strb	r2, [r3, #0]
	        dataReady[1] = 0;		//Clear the flag
 8001914:	4b09      	ldr	r3, [pc, #36]	@ (800193c <main+0xa0>)
 8001916:	2200      	movs	r2, #0
 8001918:	705a      	strb	r2, [r3, #1]

	        hostCommand = (hostCommand == 1) ? 2 : 1;	        // Toggle between commands
 800191a:	4b0a      	ldr	r3, [pc, #40]	@ (8001944 <main+0xa8>)
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	b2db      	uxtb	r3, r3
 8001920:	2b01      	cmp	r3, #1
 8001922:	d101      	bne.n	8001928 <main+0x8c>
 8001924:	2202      	movs	r2, #2
 8001926:	e000      	b.n	800192a <main+0x8e>
 8001928:	2201      	movs	r2, #1
 800192a:	4b06      	ldr	r3, [pc, #24]	@ (8001944 <main+0xa8>)
 800192c:	701a      	strb	r2, [r3, #0]
 800192e:	e001      	b.n	8001934 <main+0x98>
	      } else {
	        CheckForTimeout();
 8001930:	f000 f830 	bl	8001994 <CheckForTimeout>
	  transmitBMSCommand();
 8001934:	e7cb      	b.n	80018ce <main+0x32>
 8001936:	46c0      	nop			@ (mov r8, r8)
 8001938:	20000478 	.word	0x20000478
 800193c:	20000474 	.word	0x20000474
 8001940:	20000420 	.word	0x20000420
 8001944:	2000000f 	.word	0x2000000f

08001948 <HAL_UART_RxCpltCallback>:
	      }
  }
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1) {
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a0b      	ldr	r2, [pc, #44]	@ (8001984 <HAL_UART_RxCpltCallback+0x3c>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d110      	bne.n	800197c <HAL_UART_RxCpltCallback+0x34>
    if (hostCommand == 1) {
 800195a:	4b0b      	ldr	r3, [pc, #44]	@ (8001988 <HAL_UART_RxCpltCallback+0x40>)
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	b2db      	uxtb	r3, r3
 8001960:	2b01      	cmp	r3, #1
 8001962:	d103      	bne.n	800196c <HAL_UART_RxCpltCallback+0x24>
      dataReady[0] = 1;  //Data is ready
 8001964:	4b09      	ldr	r3, [pc, #36]	@ (800198c <HAL_UART_RxCpltCallback+0x44>)
 8001966:	2201      	movs	r2, #1
 8001968:	701a      	strb	r2, [r3, #0]
 800196a:	e002      	b.n	8001972 <HAL_UART_RxCpltCallback+0x2a>
    } else {
    	dataReady[1] = 1;  //Data is ready
 800196c:	4b07      	ldr	r3, [pc, #28]	@ (800198c <HAL_UART_RxCpltCallback+0x44>)
 800196e:	2201      	movs	r2, #1
 8001970:	705a      	strb	r2, [r3, #1]
    }
    lastDataTime = HAL_GetTick(); // Update last data time
 8001972:	f000 fc0b 	bl	800218c <HAL_GetTick>
 8001976:	0002      	movs	r2, r0
 8001978:	4b05      	ldr	r3, [pc, #20]	@ (8001990 <HAL_UART_RxCpltCallback+0x48>)
 800197a:	601a      	str	r2, [r3, #0]
  }
}
 800197c:	46c0      	nop			@ (mov r8, r8)
 800197e:	46bd      	mov	sp, r7
 8001980:	b002      	add	sp, #8
 8001982:	bd80      	pop	{r7, pc}
 8001984:	40013800 	.word	0x40013800
 8001988:	2000000f 	.word	0x2000000f
 800198c:	20000474 	.word	0x20000474
 8001990:	20000478 	.word	0x20000478

08001994 <CheckForTimeout>:

void CheckForTimeout() {
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  if (HAL_GetTick() - lastDataTime >= TIMEOUT) {
 8001998:	f000 fbf8 	bl	800218c <HAL_GetTick>
 800199c:	0002      	movs	r2, r0
 800199e:	4b18      	ldr	r3, [pc, #96]	@ (8001a00 <CheckForTimeout+0x6c>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	1ad2      	subs	r2, r2, r3
 80019a4:	23fa      	movs	r3, #250	@ 0xfa
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d325      	bcc.n	80019f8 <CheckForTimeout+0x64>
    HAL_UART_DMAStop(&huart1);
 80019ac:	4b15      	ldr	r3, [pc, #84]	@ (8001a04 <CheckForTimeout+0x70>)
 80019ae:	0018      	movs	r0, r3
 80019b0:	f002 fffc 	bl	80049ac <HAL_UART_DMAStop>
    __HAL_UART_FLUSH_DRREGISTER(&huart1);
 80019b4:	4b13      	ldr	r3, [pc, #76]	@ (8001a04 <CheckForTimeout+0x70>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	699a      	ldr	r2, [r3, #24]
 80019ba:	4b12      	ldr	r3, [pc, #72]	@ (8001a04 <CheckForTimeout+0x70>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	2108      	movs	r1, #8
 80019c0:	430a      	orrs	r2, r1
 80019c2:	619a      	str	r2, [r3, #24]
 80019c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001a04 <CheckForTimeout+0x70>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	699a      	ldr	r2, [r3, #24]
 80019ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001a04 <CheckForTimeout+0x70>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	2110      	movs	r1, #16
 80019d0:	430a      	orrs	r2, r1
 80019d2:	619a      	str	r2, [r3, #24]
    HAL_UART_Receive_DMA(&huart1, hostCommand == 1 ? bmsResponse_1 : bmsResponse_2, sizeof(bmsResponse_1));
 80019d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001a08 <CheckForTimeout+0x74>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d101      	bne.n	80019e2 <CheckForTimeout+0x4e>
 80019de:	4b0b      	ldr	r3, [pc, #44]	@ (8001a0c <CheckForTimeout+0x78>)
 80019e0:	e000      	b.n	80019e4 <CheckForTimeout+0x50>
 80019e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001a10 <CheckForTimeout+0x7c>)
 80019e4:	4807      	ldr	r0, [pc, #28]	@ (8001a04 <CheckForTimeout+0x70>)
 80019e6:	2246      	movs	r2, #70	@ 0x46
 80019e8:	0019      	movs	r1, r3
 80019ea:	f002 ff79 	bl	80048e0 <HAL_UART_Receive_DMA>
    lastDataTime = HAL_GetTick(); // Reset the timer
 80019ee:	f000 fbcd 	bl	800218c <HAL_GetTick>
 80019f2:	0002      	movs	r2, r0
 80019f4:	4b02      	ldr	r3, [pc, #8]	@ (8001a00 <CheckForTimeout+0x6c>)
 80019f6:	601a      	str	r2, [r3, #0]
  }
}
 80019f8:	46c0      	nop			@ (mov r8, r8)
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	46c0      	nop			@ (mov r8, r8)
 8001a00:	20000478 	.word	0x20000478
 8001a04:	2000011c 	.word	0x2000011c
 8001a08:	2000000f 	.word	0x2000000f
 8001a0c:	20000304 	.word	0x20000304
 8001a10:	2000034c 	.word	0x2000034c

08001a14 <SystemClock_Config>:

void SystemClock_Config(void)
{
 8001a14:	b590      	push	{r4, r7, lr}
 8001a16:	b095      	sub	sp, #84	@ 0x54
 8001a18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a1a:	2414      	movs	r4, #20
 8001a1c:	193b      	adds	r3, r7, r4
 8001a1e:	0018      	movs	r0, r3
 8001a20:	233c      	movs	r3, #60	@ 0x3c
 8001a22:	001a      	movs	r2, r3
 8001a24:	2100      	movs	r1, #0
 8001a26:	f004 ff51 	bl	80068cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a2a:	1d3b      	adds	r3, r7, #4
 8001a2c:	0018      	movs	r0, r3
 8001a2e:	2310      	movs	r3, #16
 8001a30:	001a      	movs	r2, r3
 8001a32:	2100      	movs	r1, #0
 8001a34:	f004 ff4a 	bl	80068cc <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a38:	2380      	movs	r3, #128	@ 0x80
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	0018      	movs	r0, r3
 8001a3e:	f001 fec3 	bl	80037c8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a42:	193b      	adds	r3, r7, r4
 8001a44:	2202      	movs	r2, #2
 8001a46:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a48:	193b      	adds	r3, r7, r4
 8001a4a:	2280      	movs	r2, #128	@ 0x80
 8001a4c:	0052      	lsls	r2, r2, #1
 8001a4e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8001a50:	193b      	adds	r3, r7, r4
 8001a52:	2200      	movs	r2, #0
 8001a54:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a56:	193b      	adds	r3, r7, r4
 8001a58:	2240      	movs	r2, #64	@ 0x40
 8001a5a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001a5c:	193b      	adds	r3, r7, r4
 8001a5e:	2200      	movs	r2, #0
 8001a60:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a62:	193b      	adds	r3, r7, r4
 8001a64:	0018      	movs	r0, r3
 8001a66:	f001 fefb 	bl	8003860 <HAL_RCC_OscConfig>
 8001a6a:	1e03      	subs	r3, r0, #0
 8001a6c:	d001      	beq.n	8001a72 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8001a6e:	f000 f819 	bl	8001aa4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a72:	1d3b      	adds	r3, r7, #4
 8001a74:	2207      	movs	r2, #7
 8001a76:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001a78:	1d3b      	adds	r3, r7, #4
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a7e:	1d3b      	adds	r3, r7, #4
 8001a80:	2200      	movs	r2, #0
 8001a82:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a84:	1d3b      	adds	r3, r7, #4
 8001a86:	2200      	movs	r2, #0
 8001a88:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001a8a:	1d3b      	adds	r3, r7, #4
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	0018      	movs	r0, r3
 8001a90:	f002 fa46 	bl	8003f20 <HAL_RCC_ClockConfig>
 8001a94:	1e03      	subs	r3, r0, #0
 8001a96:	d001      	beq.n	8001a9c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8001a98:	f000 f804 	bl	8001aa4 <Error_Handler>
  }
}
 8001a9c:	46c0      	nop			@ (mov r8, r8)
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	b015      	add	sp, #84	@ 0x54
 8001aa2:	bd90      	pop	{r4, r7, pc}

08001aa4 <Error_Handler>:

void Error_Handler(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001aa8:	b672      	cpsid	i
}
 8001aaa:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001aac:	46c0      	nop			@ (mov r8, r8)
 8001aae:	e7fd      	b.n	8001aac <Error_Handler+0x8>

08001ab0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ab6:	4b11      	ldr	r3, [pc, #68]	@ (8001afc <HAL_MspInit+0x4c>)
 8001ab8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001aba:	4b10      	ldr	r3, [pc, #64]	@ (8001afc <HAL_MspInit+0x4c>)
 8001abc:	2101      	movs	r1, #1
 8001abe:	430a      	orrs	r2, r1
 8001ac0:	641a      	str	r2, [r3, #64]	@ 0x40
 8001ac2:	4b0e      	ldr	r3, [pc, #56]	@ (8001afc <HAL_MspInit+0x4c>)
 8001ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	4013      	ands	r3, r2
 8001aca:	607b      	str	r3, [r7, #4]
 8001acc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ace:	4b0b      	ldr	r3, [pc, #44]	@ (8001afc <HAL_MspInit+0x4c>)
 8001ad0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001ad2:	4b0a      	ldr	r3, [pc, #40]	@ (8001afc <HAL_MspInit+0x4c>)
 8001ad4:	2180      	movs	r1, #128	@ 0x80
 8001ad6:	0549      	lsls	r1, r1, #21
 8001ad8:	430a      	orrs	r2, r1
 8001ada:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001adc:	4b07      	ldr	r3, [pc, #28]	@ (8001afc <HAL_MspInit+0x4c>)
 8001ade:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001ae0:	2380      	movs	r3, #128	@ 0x80
 8001ae2:	055b      	lsls	r3, r3, #21
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	603b      	str	r3, [r7, #0]
 8001ae8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8001aea:	23c0      	movs	r3, #192	@ 0xc0
 8001aec:	00db      	lsls	r3, r3, #3
 8001aee:	0018      	movs	r0, r3
 8001af0:	f000 fb7a 	bl	80021e8 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001af4:	46c0      	nop			@ (mov r8, r8)
 8001af6:	46bd      	mov	sp, r7
 8001af8:	b002      	add	sp, #8
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	40021000 	.word	0x40021000

08001b00 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001b00:	b590      	push	{r4, r7, lr}
 8001b02:	b09d      	sub	sp, #116	@ 0x74
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b08:	235c      	movs	r3, #92	@ 0x5c
 8001b0a:	18fb      	adds	r3, r7, r3
 8001b0c:	0018      	movs	r0, r3
 8001b0e:	2314      	movs	r3, #20
 8001b10:	001a      	movs	r2, r3
 8001b12:	2100      	movs	r1, #0
 8001b14:	f004 feda 	bl	80068cc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b18:	2410      	movs	r4, #16
 8001b1a:	193b      	adds	r3, r7, r4
 8001b1c:	0018      	movs	r0, r3
 8001b1e:	234c      	movs	r3, #76	@ 0x4c
 8001b20:	001a      	movs	r2, r3
 8001b22:	2100      	movs	r1, #0
 8001b24:	f004 fed2 	bl	80068cc <memset>
  if(hfdcan->Instance==FDCAN1)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a2a      	ldr	r2, [pc, #168]	@ (8001bd8 <HAL_FDCAN_MspInit+0xd8>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d14e      	bne.n	8001bd0 <HAL_FDCAN_MspInit+0xd0>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001b32:	193b      	adds	r3, r7, r4
 8001b34:	2280      	movs	r2, #128	@ 0x80
 8001b36:	0492      	lsls	r2, r2, #18
 8001b38:	601a      	str	r2, [r3, #0]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001b3a:	193b      	adds	r3, r7, r4
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	649a      	str	r2, [r3, #72]	@ 0x48

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b40:	193b      	adds	r3, r7, r4
 8001b42:	0018      	movs	r0, r3
 8001b44:	f002 fb96 	bl	8004274 <HAL_RCCEx_PeriphCLKConfig>
 8001b48:	1e03      	subs	r3, r0, #0
 8001b4a:	d001      	beq.n	8001b50 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001b4c:	f7ff ffaa 	bl	8001aa4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001b50:	4b22      	ldr	r3, [pc, #136]	@ (8001bdc <HAL_FDCAN_MspInit+0xdc>)
 8001b52:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001b54:	4b21      	ldr	r3, [pc, #132]	@ (8001bdc <HAL_FDCAN_MspInit+0xdc>)
 8001b56:	2180      	movs	r1, #128	@ 0x80
 8001b58:	0149      	lsls	r1, r1, #5
 8001b5a:	430a      	orrs	r2, r1
 8001b5c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001b5e:	4b1f      	ldr	r3, [pc, #124]	@ (8001bdc <HAL_FDCAN_MspInit+0xdc>)
 8001b60:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001b62:	2380      	movs	r3, #128	@ 0x80
 8001b64:	015b      	lsls	r3, r3, #5
 8001b66:	4013      	ands	r3, r2
 8001b68:	60fb      	str	r3, [r7, #12]
 8001b6a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b6c:	4b1b      	ldr	r3, [pc, #108]	@ (8001bdc <HAL_FDCAN_MspInit+0xdc>)
 8001b6e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b70:	4b1a      	ldr	r3, [pc, #104]	@ (8001bdc <HAL_FDCAN_MspInit+0xdc>)
 8001b72:	2108      	movs	r1, #8
 8001b74:	430a      	orrs	r2, r1
 8001b76:	635a      	str	r2, [r3, #52]	@ 0x34
 8001b78:	4b18      	ldr	r3, [pc, #96]	@ (8001bdc <HAL_FDCAN_MspInit+0xdc>)
 8001b7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b7c:	2208      	movs	r2, #8
 8001b7e:	4013      	ands	r3, r2
 8001b80:	60bb      	str	r3, [r7, #8]
 8001b82:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001b84:	215c      	movs	r1, #92	@ 0x5c
 8001b86:	187b      	adds	r3, r7, r1
 8001b88:	2203      	movs	r2, #3
 8001b8a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b8c:	187b      	adds	r3, r7, r1
 8001b8e:	2202      	movs	r2, #2
 8001b90:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b92:	187b      	adds	r3, r7, r1
 8001b94:	2200      	movs	r2, #0
 8001b96:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b98:	187b      	adds	r3, r7, r1
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_FDCAN1;
 8001b9e:	187b      	adds	r3, r7, r1
 8001ba0:	2203      	movs	r2, #3
 8001ba2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ba4:	187b      	adds	r3, r7, r1
 8001ba6:	4a0e      	ldr	r2, [pc, #56]	@ (8001be0 <HAL_FDCAN_MspInit+0xe0>)
 8001ba8:	0019      	movs	r1, r3
 8001baa:	0010      	movs	r0, r2
 8001bac:	f001 fc82 	bl	80034b4 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_FDCAN_IT0_IRQn, 0, 0);
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	2100      	movs	r1, #0
 8001bb4:	2015      	movs	r0, #21
 8001bb6:	f000 fbd9 	bl	800236c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_FDCAN_IT0_IRQn);
 8001bba:	2015      	movs	r0, #21
 8001bbc:	f000 fbeb 	bl	8002396 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM17_FDCAN_IT1_IRQn, 0, 0);
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	2100      	movs	r1, #0
 8001bc4:	2016      	movs	r0, #22
 8001bc6:	f000 fbd1 	bl	800236c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_FDCAN_IT1_IRQn);
 8001bca:	2016      	movs	r0, #22
 8001bcc:	f000 fbe3 	bl	8002396 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8001bd0:	46c0      	nop			@ (mov r8, r8)
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	b01d      	add	sp, #116	@ 0x74
 8001bd6:	bd90      	pop	{r4, r7, pc}
 8001bd8:	40006400 	.word	0x40006400
 8001bdc:	40021000 	.word	0x40021000
 8001be0:	50000c00 	.word	0x50000c00

08001be4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001be4:	b590      	push	{r4, r7, lr}
 8001be6:	b0a1      	sub	sp, #132	@ 0x84
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bec:	236c      	movs	r3, #108	@ 0x6c
 8001bee:	18fb      	adds	r3, r7, r3
 8001bf0:	0018      	movs	r0, r3
 8001bf2:	2314      	movs	r3, #20
 8001bf4:	001a      	movs	r2, r3
 8001bf6:	2100      	movs	r1, #0
 8001bf8:	f004 fe68 	bl	80068cc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bfc:	2420      	movs	r4, #32
 8001bfe:	193b      	adds	r3, r7, r4
 8001c00:	0018      	movs	r0, r3
 8001c02:	234c      	movs	r3, #76	@ 0x4c
 8001c04:	001a      	movs	r2, r3
 8001c06:	2100      	movs	r1, #0
 8001c08:	f004 fe60 	bl	80068cc <memset>
  if(huart->Instance==USART1)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a89      	ldr	r2, [pc, #548]	@ (8001e38 <HAL_UART_MspInit+0x254>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d000      	beq.n	8001c18 <HAL_UART_MspInit+0x34>
 8001c16:	e094      	b.n	8001d42 <HAL_UART_MspInit+0x15e>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001c18:	193b      	adds	r3, r7, r4
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001c1e:	193b      	adds	r3, r7, r4
 8001c20:	2200      	movs	r2, #0
 8001c22:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c24:	193b      	adds	r3, r7, r4
 8001c26:	0018      	movs	r0, r3
 8001c28:	f002 fb24 	bl	8004274 <HAL_RCCEx_PeriphCLKConfig>
 8001c2c:	1e03      	subs	r3, r0, #0
 8001c2e:	d001      	beq.n	8001c34 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8001c30:	f7ff ff38 	bl	8001aa4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c34:	4b81      	ldr	r3, [pc, #516]	@ (8001e3c <HAL_UART_MspInit+0x258>)
 8001c36:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001c38:	4b80      	ldr	r3, [pc, #512]	@ (8001e3c <HAL_UART_MspInit+0x258>)
 8001c3a:	2180      	movs	r1, #128	@ 0x80
 8001c3c:	01c9      	lsls	r1, r1, #7
 8001c3e:	430a      	orrs	r2, r1
 8001c40:	641a      	str	r2, [r3, #64]	@ 0x40
 8001c42:	4b7e      	ldr	r3, [pc, #504]	@ (8001e3c <HAL_UART_MspInit+0x258>)
 8001c44:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001c46:	2380      	movs	r3, #128	@ 0x80
 8001c48:	01db      	lsls	r3, r3, #7
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	61fb      	str	r3, [r7, #28]
 8001c4e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c50:	4b7a      	ldr	r3, [pc, #488]	@ (8001e3c <HAL_UART_MspInit+0x258>)
 8001c52:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001c54:	4b79      	ldr	r3, [pc, #484]	@ (8001e3c <HAL_UART_MspInit+0x258>)
 8001c56:	2104      	movs	r1, #4
 8001c58:	430a      	orrs	r2, r1
 8001c5a:	635a      	str	r2, [r3, #52]	@ 0x34
 8001c5c:	4b77      	ldr	r3, [pc, #476]	@ (8001e3c <HAL_UART_MspInit+0x258>)
 8001c5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c60:	2204      	movs	r2, #4
 8001c62:	4013      	ands	r3, r2
 8001c64:	61bb      	str	r3, [r7, #24]
 8001c66:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c68:	4b74      	ldr	r3, [pc, #464]	@ (8001e3c <HAL_UART_MspInit+0x258>)
 8001c6a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001c6c:	4b73      	ldr	r3, [pc, #460]	@ (8001e3c <HAL_UART_MspInit+0x258>)
 8001c6e:	2101      	movs	r1, #1
 8001c70:	430a      	orrs	r2, r1
 8001c72:	635a      	str	r2, [r3, #52]	@ 0x34
 8001c74:	4b71      	ldr	r3, [pc, #452]	@ (8001e3c <HAL_UART_MspInit+0x258>)
 8001c76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c78:	2201      	movs	r2, #1
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	617b      	str	r3, [r7, #20]
 8001c7e:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    PA12 [PA10]     ------> USART1_DE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001c80:	246c      	movs	r4, #108	@ 0x6c
 8001c82:	193b      	adds	r3, r7, r4
 8001c84:	2230      	movs	r2, #48	@ 0x30
 8001c86:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c88:	193b      	adds	r3, r7, r4
 8001c8a:	2202      	movs	r2, #2
 8001c8c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8e:	193b      	adds	r3, r7, r4
 8001c90:	2200      	movs	r2, #0
 8001c92:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c94:	193b      	adds	r3, r7, r4
 8001c96:	2200      	movs	r2, #0
 8001c98:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001c9a:	193b      	adds	r3, r7, r4
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ca0:	193b      	adds	r3, r7, r4
 8001ca2:	4a67      	ldr	r2, [pc, #412]	@ (8001e40 <HAL_UART_MspInit+0x25c>)
 8001ca4:	0019      	movs	r1, r3
 8001ca6:	0010      	movs	r0, r2
 8001ca8:	f001 fc04 	bl	80034b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001cac:	0021      	movs	r1, r4
 8001cae:	187b      	adds	r3, r7, r1
 8001cb0:	2280      	movs	r2, #128	@ 0x80
 8001cb2:	0152      	lsls	r2, r2, #5
 8001cb4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb6:	187b      	adds	r3, r7, r1
 8001cb8:	2202      	movs	r2, #2
 8001cba:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cbc:	187b      	adds	r3, r7, r1
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc2:	187b      	adds	r3, r7, r1
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001cc8:	187b      	adds	r3, r7, r1
 8001cca:	2201      	movs	r2, #1
 8001ccc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cce:	187a      	adds	r2, r7, r1
 8001cd0:	23a0      	movs	r3, #160	@ 0xa0
 8001cd2:	05db      	lsls	r3, r3, #23
 8001cd4:	0011      	movs	r1, r2
 8001cd6:	0018      	movs	r0, r3
 8001cd8:	f001 fbec 	bl	80034b4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel2;
 8001cdc:	4b59      	ldr	r3, [pc, #356]	@ (8001e44 <HAL_UART_MspInit+0x260>)
 8001cde:	4a5a      	ldr	r2, [pc, #360]	@ (8001e48 <HAL_UART_MspInit+0x264>)
 8001ce0:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8001ce2:	4b58      	ldr	r3, [pc, #352]	@ (8001e44 <HAL_UART_MspInit+0x260>)
 8001ce4:	2232      	movs	r2, #50	@ 0x32
 8001ce6:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ce8:	4b56      	ldr	r3, [pc, #344]	@ (8001e44 <HAL_UART_MspInit+0x260>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cee:	4b55      	ldr	r3, [pc, #340]	@ (8001e44 <HAL_UART_MspInit+0x260>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001cf4:	4b53      	ldr	r3, [pc, #332]	@ (8001e44 <HAL_UART_MspInit+0x260>)
 8001cf6:	2280      	movs	r2, #128	@ 0x80
 8001cf8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001cfa:	4b52      	ldr	r3, [pc, #328]	@ (8001e44 <HAL_UART_MspInit+0x260>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d00:	4b50      	ldr	r3, [pc, #320]	@ (8001e44 <HAL_UART_MspInit+0x260>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001d06:	4b4f      	ldr	r3, [pc, #316]	@ (8001e44 <HAL_UART_MspInit+0x260>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001d0c:	4b4d      	ldr	r3, [pc, #308]	@ (8001e44 <HAL_UART_MspInit+0x260>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001d12:	4b4c      	ldr	r3, [pc, #304]	@ (8001e44 <HAL_UART_MspInit+0x260>)
 8001d14:	0018      	movs	r0, r3
 8001d16:	f000 fb5b 	bl	80023d0 <HAL_DMA_Init>
 8001d1a:	1e03      	subs	r3, r0, #0
 8001d1c:	d001      	beq.n	8001d22 <HAL_UART_MspInit+0x13e>
    {
      Error_Handler();
 8001d1e:	f7ff fec1 	bl	8001aa4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2180      	movs	r1, #128	@ 0x80
 8001d26:	4a47      	ldr	r2, [pc, #284]	@ (8001e44 <HAL_UART_MspInit+0x260>)
 8001d28:	505a      	str	r2, [r3, r1]
 8001d2a:	4b46      	ldr	r3, [pc, #280]	@ (8001e44 <HAL_UART_MspInit+0x260>)
 8001d2c:	687a      	ldr	r2, [r7, #4]
 8001d2e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001d30:	2200      	movs	r2, #0
 8001d32:	2100      	movs	r1, #0
 8001d34:	201b      	movs	r0, #27
 8001d36:	f000 fb19 	bl	800236c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001d3a:	201b      	movs	r0, #27
 8001d3c:	f000 fb2b 	bl	8002396 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001d40:	e075      	b.n	8001e2e <HAL_UART_MspInit+0x24a>
  else if(huart->Instance==USART2)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a41      	ldr	r2, [pc, #260]	@ (8001e4c <HAL_UART_MspInit+0x268>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d170      	bne.n	8001e2e <HAL_UART_MspInit+0x24a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001d4c:	2120      	movs	r1, #32
 8001d4e:	187b      	adds	r3, r7, r1
 8001d50:	2202      	movs	r2, #2
 8001d52:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001d54:	187b      	adds	r3, r7, r1
 8001d56:	2200      	movs	r2, #0
 8001d58:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d5a:	187b      	adds	r3, r7, r1
 8001d5c:	0018      	movs	r0, r3
 8001d5e:	f002 fa89 	bl	8004274 <HAL_RCCEx_PeriphCLKConfig>
 8001d62:	1e03      	subs	r3, r0, #0
 8001d64:	d001      	beq.n	8001d6a <HAL_UART_MspInit+0x186>
      Error_Handler();
 8001d66:	f7ff fe9d 	bl	8001aa4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d6a:	4b34      	ldr	r3, [pc, #208]	@ (8001e3c <HAL_UART_MspInit+0x258>)
 8001d6c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001d6e:	4b33      	ldr	r3, [pc, #204]	@ (8001e3c <HAL_UART_MspInit+0x258>)
 8001d70:	2180      	movs	r1, #128	@ 0x80
 8001d72:	0289      	lsls	r1, r1, #10
 8001d74:	430a      	orrs	r2, r1
 8001d76:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001d78:	4b30      	ldr	r3, [pc, #192]	@ (8001e3c <HAL_UART_MspInit+0x258>)
 8001d7a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001d7c:	2380      	movs	r3, #128	@ 0x80
 8001d7e:	029b      	lsls	r3, r3, #10
 8001d80:	4013      	ands	r3, r2
 8001d82:	613b      	str	r3, [r7, #16]
 8001d84:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d86:	4b2d      	ldr	r3, [pc, #180]	@ (8001e3c <HAL_UART_MspInit+0x258>)
 8001d88:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001d8a:	4b2c      	ldr	r3, [pc, #176]	@ (8001e3c <HAL_UART_MspInit+0x258>)
 8001d8c:	2101      	movs	r1, #1
 8001d8e:	430a      	orrs	r2, r1
 8001d90:	635a      	str	r2, [r3, #52]	@ 0x34
 8001d92:	4b2a      	ldr	r3, [pc, #168]	@ (8001e3c <HAL_UART_MspInit+0x258>)
 8001d94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d96:	2201      	movs	r2, #1
 8001d98:	4013      	ands	r3, r2
 8001d9a:	60fb      	str	r3, [r7, #12]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8001d9e:	216c      	movs	r1, #108	@ 0x6c
 8001da0:	187b      	adds	r3, r7, r1
 8001da2:	220c      	movs	r2, #12
 8001da4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da6:	187b      	adds	r3, r7, r1
 8001da8:	2202      	movs	r2, #2
 8001daa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dac:	187b      	adds	r3, r7, r1
 8001dae:	2200      	movs	r2, #0
 8001db0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db2:	187b      	adds	r3, r7, r1
 8001db4:	2200      	movs	r2, #0
 8001db6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001db8:	187b      	adds	r3, r7, r1
 8001dba:	2201      	movs	r2, #1
 8001dbc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dbe:	187a      	adds	r2, r7, r1
 8001dc0:	23a0      	movs	r3, #160	@ 0xa0
 8001dc2:	05db      	lsls	r3, r3, #23
 8001dc4:	0011      	movs	r1, r2
 8001dc6:	0018      	movs	r0, r3
 8001dc8:	f001 fb74 	bl	80034b4 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel1;
 8001dcc:	4b20      	ldr	r3, [pc, #128]	@ (8001e50 <HAL_UART_MspInit+0x26c>)
 8001dce:	4a21      	ldr	r2, [pc, #132]	@ (8001e54 <HAL_UART_MspInit+0x270>)
 8001dd0:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8001dd2:	4b1f      	ldr	r3, [pc, #124]	@ (8001e50 <HAL_UART_MspInit+0x26c>)
 8001dd4:	2235      	movs	r2, #53	@ 0x35
 8001dd6:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001dd8:	4b1d      	ldr	r3, [pc, #116]	@ (8001e50 <HAL_UART_MspInit+0x26c>)
 8001dda:	2210      	movs	r2, #16
 8001ddc:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001dde:	4b1c      	ldr	r3, [pc, #112]	@ (8001e50 <HAL_UART_MspInit+0x26c>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001de4:	4b1a      	ldr	r3, [pc, #104]	@ (8001e50 <HAL_UART_MspInit+0x26c>)
 8001de6:	2280      	movs	r2, #128	@ 0x80
 8001de8:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001dea:	4b19      	ldr	r3, [pc, #100]	@ (8001e50 <HAL_UART_MspInit+0x26c>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001df0:	4b17      	ldr	r3, [pc, #92]	@ (8001e50 <HAL_UART_MspInit+0x26c>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001df6:	4b16      	ldr	r3, [pc, #88]	@ (8001e50 <HAL_UART_MspInit+0x26c>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001dfc:	4b14      	ldr	r3, [pc, #80]	@ (8001e50 <HAL_UART_MspInit+0x26c>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001e02:	4b13      	ldr	r3, [pc, #76]	@ (8001e50 <HAL_UART_MspInit+0x26c>)
 8001e04:	0018      	movs	r0, r3
 8001e06:	f000 fae3 	bl	80023d0 <HAL_DMA_Init>
 8001e0a:	1e03      	subs	r3, r0, #0
 8001e0c:	d001      	beq.n	8001e12 <HAL_UART_MspInit+0x22e>
      Error_Handler();
 8001e0e:	f7ff fe49 	bl	8001aa4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a0e      	ldr	r2, [pc, #56]	@ (8001e50 <HAL_UART_MspInit+0x26c>)
 8001e16:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001e18:	4b0d      	ldr	r3, [pc, #52]	@ (8001e50 <HAL_UART_MspInit+0x26c>)
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_LPUART2_IRQn, 0, 0);
 8001e1e:	2200      	movs	r2, #0
 8001e20:	2100      	movs	r1, #0
 8001e22:	201c      	movs	r0, #28
 8001e24:	f000 faa2 	bl	800236c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_LPUART2_IRQn);
 8001e28:	201c      	movs	r0, #28
 8001e2a:	f000 fab4 	bl	8002396 <HAL_NVIC_EnableIRQ>
}
 8001e2e:	46c0      	nop			@ (mov r8, r8)
 8001e30:	46bd      	mov	sp, r7
 8001e32:	b021      	add	sp, #132	@ 0x84
 8001e34:	bd90      	pop	{r4, r7, pc}
 8001e36:	46c0      	nop			@ (mov r8, r8)
 8001e38:	40013800 	.word	0x40013800
 8001e3c:	40021000 	.word	0x40021000
 8001e40:	50000800 	.word	0x50000800
 8001e44:	20000244 	.word	0x20000244
 8001e48:	4002001c 	.word	0x4002001c
 8001e4c:	40004400 	.word	0x40004400
 8001e50:	200002a4 	.word	0x200002a4
 8001e54:	40020008 	.word	0x40020008

08001e58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e5c:	46c0      	nop			@ (mov r8, r8)
 8001e5e:	e7fd      	b.n	8001e5c <NMI_Handler+0x4>

08001e60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e64:	46c0      	nop			@ (mov r8, r8)
 8001e66:	e7fd      	b.n	8001e64 <HardFault_Handler+0x4>

08001e68 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001e6c:	46c0      	nop			@ (mov r8, r8)
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}

08001e72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e72:	b580      	push	{r7, lr}
 8001e74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e76:	46c0      	nop			@ (mov r8, r8)
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}

08001e7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e80:	f000 f972 	bl	8002168 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e84:	46c0      	nop			@ (mov r8, r8)
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
	...

08001e8c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001e90:	4b03      	ldr	r3, [pc, #12]	@ (8001ea0 <DMA1_Channel1_IRQHandler+0x14>)
 8001e92:	0018      	movs	r0, r3
 8001e94:	f000 fc96 	bl	80027c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001e98:	46c0      	nop			@ (mov r8, r8)
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	46c0      	nop			@ (mov r8, r8)
 8001ea0:	200002a4 	.word	0x200002a4

08001ea4 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001ea8:	4b03      	ldr	r3, [pc, #12]	@ (8001eb8 <DMA1_Channel2_3_IRQHandler+0x14>)
 8001eaa:	0018      	movs	r0, r3
 8001eac:	f000 fc8a 	bl	80027c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8001eb0:	46c0      	nop			@ (mov r8, r8)
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	46c0      	nop			@ (mov r8, r8)
 8001eb8:	20000244 	.word	0x20000244

08001ebc <DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMA1 Ch4 to Ch7, DMA2 Ch1 to Ch5 and DMAMUX1 Overrun Interrupts.
  */
void DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQHandler(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn 0 */

  /* USER CODE END DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn 0 */
  // Handle DMAMUX
  // Handle DMA1_Channel2
  HAL_DMAEx_MUX_IRQHandler(&hdma_usart1_rx);
 8001ec0:	4b03      	ldr	r3, [pc, #12]	@ (8001ed0 <DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQHandler+0x14>)
 8001ec2:	0018      	movs	r0, r3
 8001ec4:	f000 fdf6 	bl	8002ab4 <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn 1 */
}
 8001ec8:	46c0      	nop			@ (mov r8, r8)
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	46c0      	nop			@ (mov r8, r8)
 8001ed0:	20000244 	.word	0x20000244

08001ed4 <TIM16_FDCAN_IT0_IRQHandler>:

/**
  * @brief This function handles TIM16, FDCAN1_IT0 and FDCAN2_IT0 Interrupt.
  */
void TIM16_FDCAN_IT0_IRQHandler(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_FDCAN_IT0_IRQn 0 */

  /* USER CODE END TIM16_FDCAN_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001ed8:	4b03      	ldr	r3, [pc, #12]	@ (8001ee8 <TIM16_FDCAN_IT0_IRQHandler+0x14>)
 8001eda:	0018      	movs	r0, r3
 8001edc:	f001 f86e 	bl	8002fbc <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN TIM16_FDCAN_IT0_IRQn 1 */

  /* USER CODE END TIM16_FDCAN_IT0_IRQn 1 */
}
 8001ee0:	46c0      	nop			@ (mov r8, r8)
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	46c0      	nop			@ (mov r8, r8)
 8001ee8:	20000094 	.word	0x20000094

08001eec <TIM17_FDCAN_IT1_IRQHandler>:

/**
  * @brief This function handles TIM17, FDCAN1_IT1 and FDCAN2_IT1 Interrupt.
  */
void TIM17_FDCAN_IT1_IRQHandler(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_FDCAN_IT1_IRQn 0 */

  /* USER CODE END TIM17_FDCAN_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001ef0:	4b03      	ldr	r3, [pc, #12]	@ (8001f00 <TIM17_FDCAN_IT1_IRQHandler+0x14>)
 8001ef2:	0018      	movs	r0, r3
 8001ef4:	f001 f862 	bl	8002fbc <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN TIM17_FDCAN_IT1_IRQn 1 */

  /* USER CODE END TIM17_FDCAN_IT1_IRQn 1 */
}
 8001ef8:	46c0      	nop			@ (mov r8, r8)
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	46c0      	nop			@ (mov r8, r8)
 8001f00:	20000094 	.word	0x20000094

08001f04 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001f08:	4b03      	ldr	r3, [pc, #12]	@ (8001f18 <USART1_IRQHandler+0x14>)
 8001f0a:	0018      	movs	r0, r3
 8001f0c:	f002 fde2 	bl	8004ad4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001f10:	46c0      	nop			@ (mov r8, r8)
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	46c0      	nop			@ (mov r8, r8)
 8001f18:	2000011c 	.word	0x2000011c

08001f1c <USART2_LPUART2_IRQHandler>:

/**
  * @brief This function handles USART2 + LPUART2 Interrupt.
  */
void USART2_LPUART2_IRQHandler(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_LPUART2_IRQn 0 */

  /* USER CODE END USART2_LPUART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001f20:	4b03      	ldr	r3, [pc, #12]	@ (8001f30 <USART2_LPUART2_IRQHandler+0x14>)
 8001f22:	0018      	movs	r0, r3
 8001f24:	f002 fdd6 	bl	8004ad4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_LPUART2_IRQn 1 */

  /* USER CODE END USART2_LPUART2_IRQn 1 */
}
 8001f28:	46c0      	nop			@ (mov r8, r8)
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	46c0      	nop			@ (mov r8, r8)
 8001f30:	200001b0 	.word	0x200001b0

08001f34 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b086      	sub	sp, #24
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	60f8      	str	r0, [r7, #12]
 8001f3c:	60b9      	str	r1, [r7, #8]
 8001f3e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f40:	2300      	movs	r3, #0
 8001f42:	617b      	str	r3, [r7, #20]
 8001f44:	e00a      	b.n	8001f5c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f46:	e000      	b.n	8001f4a <_read+0x16>
 8001f48:	bf00      	nop
 8001f4a:	0001      	movs	r1, r0
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	1c5a      	adds	r2, r3, #1
 8001f50:	60ba      	str	r2, [r7, #8]
 8001f52:	b2ca      	uxtb	r2, r1
 8001f54:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	3301      	adds	r3, #1
 8001f5a:	617b      	str	r3, [r7, #20]
 8001f5c:	697a      	ldr	r2, [r7, #20]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	dbf0      	blt.n	8001f46 <_read+0x12>
  }

  return len;
 8001f64:	687b      	ldr	r3, [r7, #4]
}
 8001f66:	0018      	movs	r0, r3
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	b006      	add	sp, #24
 8001f6c:	bd80      	pop	{r7, pc}

08001f6e <_close>:
  }
  return len;
}

int _close(int file)
{
 8001f6e:	b580      	push	{r7, lr}
 8001f70:	b082      	sub	sp, #8
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f76:	2301      	movs	r3, #1
 8001f78:	425b      	negs	r3, r3
}
 8001f7a:	0018      	movs	r0, r3
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	b002      	add	sp, #8
 8001f80:	bd80      	pop	{r7, pc}

08001f82 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f82:	b580      	push	{r7, lr}
 8001f84:	b082      	sub	sp, #8
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
 8001f8a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	2280      	movs	r2, #128	@ 0x80
 8001f90:	0192      	lsls	r2, r2, #6
 8001f92:	605a      	str	r2, [r3, #4]
  return 0;
 8001f94:	2300      	movs	r3, #0
}
 8001f96:	0018      	movs	r0, r3
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	b002      	add	sp, #8
 8001f9c:	bd80      	pop	{r7, pc}

08001f9e <_isatty>:

int _isatty(int file)
{
 8001f9e:	b580      	push	{r7, lr}
 8001fa0:	b082      	sub	sp, #8
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001fa6:	2301      	movs	r3, #1
}
 8001fa8:	0018      	movs	r0, r3
 8001faa:	46bd      	mov	sp, r7
 8001fac:	b002      	add	sp, #8
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	60f8      	str	r0, [r7, #12]
 8001fb8:	60b9      	str	r1, [r7, #8]
 8001fba:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001fbc:	2300      	movs	r3, #0
}
 8001fbe:	0018      	movs	r0, r3
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	b004      	add	sp, #16
 8001fc4:	bd80      	pop	{r7, pc}
	...

08001fc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b086      	sub	sp, #24
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fd0:	4a14      	ldr	r2, [pc, #80]	@ (8002024 <_sbrk+0x5c>)
 8001fd2:	4b15      	ldr	r3, [pc, #84]	@ (8002028 <_sbrk+0x60>)
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fdc:	4b13      	ldr	r3, [pc, #76]	@ (800202c <_sbrk+0x64>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d102      	bne.n	8001fea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fe4:	4b11      	ldr	r3, [pc, #68]	@ (800202c <_sbrk+0x64>)
 8001fe6:	4a12      	ldr	r2, [pc, #72]	@ (8002030 <_sbrk+0x68>)
 8001fe8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fea:	4b10      	ldr	r3, [pc, #64]	@ (800202c <_sbrk+0x64>)
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	18d3      	adds	r3, r2, r3
 8001ff2:	693a      	ldr	r2, [r7, #16]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d207      	bcs.n	8002008 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ff8:	f004 fcbe 	bl	8006978 <__errno>
 8001ffc:	0003      	movs	r3, r0
 8001ffe:	220c      	movs	r2, #12
 8002000:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002002:	2301      	movs	r3, #1
 8002004:	425b      	negs	r3, r3
 8002006:	e009      	b.n	800201c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002008:	4b08      	ldr	r3, [pc, #32]	@ (800202c <_sbrk+0x64>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800200e:	4b07      	ldr	r3, [pc, #28]	@ (800202c <_sbrk+0x64>)
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	18d2      	adds	r2, r2, r3
 8002016:	4b05      	ldr	r3, [pc, #20]	@ (800202c <_sbrk+0x64>)
 8002018:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800201a:	68fb      	ldr	r3, [r7, #12]
}
 800201c:	0018      	movs	r0, r3
 800201e:	46bd      	mov	sp, r7
 8002020:	b006      	add	sp, #24
 8002022:	bd80      	pop	{r7, pc}
 8002024:	20024000 	.word	0x20024000
 8002028:	00000400 	.word	0x00000400
 800202c:	20000488 	.word	0x20000488
 8002030:	200005e0 	.word	0x200005e0

08002034 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002038:	46c0      	nop			@ (mov r8, r8)
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
	...

08002040 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002040:	480d      	ldr	r0, [pc, #52]	@ (8002078 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002042:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002044:	f7ff fff6 	bl	8002034 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002048:	480c      	ldr	r0, [pc, #48]	@ (800207c <LoopForever+0x6>)
  ldr r1, =_edata
 800204a:	490d      	ldr	r1, [pc, #52]	@ (8002080 <LoopForever+0xa>)
  ldr r2, =_sidata
 800204c:	4a0d      	ldr	r2, [pc, #52]	@ (8002084 <LoopForever+0xe>)
  movs r3, #0
 800204e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002050:	e002      	b.n	8002058 <LoopCopyDataInit>

08002052 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002052:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002054:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002056:	3304      	adds	r3, #4

08002058 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002058:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800205a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800205c:	d3f9      	bcc.n	8002052 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800205e:	4a0a      	ldr	r2, [pc, #40]	@ (8002088 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002060:	4c0a      	ldr	r4, [pc, #40]	@ (800208c <LoopForever+0x16>)
  movs r3, #0
 8002062:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002064:	e001      	b.n	800206a <LoopFillZerobss>

08002066 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002066:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002068:	3204      	adds	r2, #4

0800206a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800206a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800206c:	d3fb      	bcc.n	8002066 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800206e:	f004 fc89 	bl	8006984 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8002072:	f7ff fc13 	bl	800189c <main>

08002076 <LoopForever>:

LoopForever:
  b LoopForever
 8002076:	e7fe      	b.n	8002076 <LoopForever>
  ldr   r0, =_estack
 8002078:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 800207c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002080:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8002084:	08007b48 	.word	0x08007b48
  ldr r2, =_sbss
 8002088:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 800208c:	200005dc 	.word	0x200005dc

08002090 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002090:	e7fe      	b.n	8002090 <ADC1_COMP_IRQHandler>
	...

08002094 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800209a:	1dfb      	adds	r3, r7, #7
 800209c:	2200      	movs	r2, #0
 800209e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020a0:	4b0b      	ldr	r3, [pc, #44]	@ (80020d0 <HAL_Init+0x3c>)
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	4b0a      	ldr	r3, [pc, #40]	@ (80020d0 <HAL_Init+0x3c>)
 80020a6:	2180      	movs	r1, #128	@ 0x80
 80020a8:	0049      	lsls	r1, r1, #1
 80020aa:	430a      	orrs	r2, r1
 80020ac:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80020ae:	2000      	movs	r0, #0
 80020b0:	f000 f810 	bl	80020d4 <HAL_InitTick>
 80020b4:	1e03      	subs	r3, r0, #0
 80020b6:	d003      	beq.n	80020c0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80020b8:	1dfb      	adds	r3, r7, #7
 80020ba:	2201      	movs	r2, #1
 80020bc:	701a      	strb	r2, [r3, #0]
 80020be:	e001      	b.n	80020c4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80020c0:	f7ff fcf6 	bl	8001ab0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80020c4:	1dfb      	adds	r3, r7, #7
 80020c6:	781b      	ldrb	r3, [r3, #0]
}
 80020c8:	0018      	movs	r0, r3
 80020ca:	46bd      	mov	sp, r7
 80020cc:	b002      	add	sp, #8
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	40022000 	.word	0x40022000

080020d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020d4:	b590      	push	{r4, r7, lr}
 80020d6:	b085      	sub	sp, #20
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80020dc:	230f      	movs	r3, #15
 80020de:	18fb      	adds	r3, r7, r3
 80020e0:	2200      	movs	r2, #0
 80020e2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80020e4:	4b1d      	ldr	r3, [pc, #116]	@ (800215c <HAL_InitTick+0x88>)
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d02b      	beq.n	8002144 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80020ec:	4b1c      	ldr	r3, [pc, #112]	@ (8002160 <HAL_InitTick+0x8c>)
 80020ee:	681c      	ldr	r4, [r3, #0]
 80020f0:	4b1a      	ldr	r3, [pc, #104]	@ (800215c <HAL_InitTick+0x88>)
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	0019      	movs	r1, r3
 80020f6:	23fa      	movs	r3, #250	@ 0xfa
 80020f8:	0098      	lsls	r0, r3, #2
 80020fa:	f7fe f80d 	bl	8000118 <__udivsi3>
 80020fe:	0003      	movs	r3, r0
 8002100:	0019      	movs	r1, r3
 8002102:	0020      	movs	r0, r4
 8002104:	f7fe f808 	bl	8000118 <__udivsi3>
 8002108:	0003      	movs	r3, r0
 800210a:	0018      	movs	r0, r3
 800210c:	f000 f953 	bl	80023b6 <HAL_SYSTICK_Config>
 8002110:	1e03      	subs	r3, r0, #0
 8002112:	d112      	bne.n	800213a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2b03      	cmp	r3, #3
 8002118:	d80a      	bhi.n	8002130 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800211a:	6879      	ldr	r1, [r7, #4]
 800211c:	2301      	movs	r3, #1
 800211e:	425b      	negs	r3, r3
 8002120:	2200      	movs	r2, #0
 8002122:	0018      	movs	r0, r3
 8002124:	f000 f922 	bl	800236c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002128:	4b0e      	ldr	r3, [pc, #56]	@ (8002164 <HAL_InitTick+0x90>)
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	601a      	str	r2, [r3, #0]
 800212e:	e00d      	b.n	800214c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002130:	230f      	movs	r3, #15
 8002132:	18fb      	adds	r3, r7, r3
 8002134:	2201      	movs	r2, #1
 8002136:	701a      	strb	r2, [r3, #0]
 8002138:	e008      	b.n	800214c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800213a:	230f      	movs	r3, #15
 800213c:	18fb      	adds	r3, r7, r3
 800213e:	2201      	movs	r2, #1
 8002140:	701a      	strb	r2, [r3, #0]
 8002142:	e003      	b.n	800214c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002144:	230f      	movs	r3, #15
 8002146:	18fb      	adds	r3, r7, r3
 8002148:	2201      	movs	r2, #1
 800214a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800214c:	230f      	movs	r3, #15
 800214e:	18fb      	adds	r3, r7, r3
 8002150:	781b      	ldrb	r3, [r3, #0]
}
 8002152:	0018      	movs	r0, r3
 8002154:	46bd      	mov	sp, r7
 8002156:	b005      	add	sp, #20
 8002158:	bd90      	pop	{r4, r7, pc}
 800215a:	46c0      	nop			@ (mov r8, r8)
 800215c:	20000018 	.word	0x20000018
 8002160:	20000010 	.word	0x20000010
 8002164:	20000014 	.word	0x20000014

08002168 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800216c:	4b05      	ldr	r3, [pc, #20]	@ (8002184 <HAL_IncTick+0x1c>)
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	001a      	movs	r2, r3
 8002172:	4b05      	ldr	r3, [pc, #20]	@ (8002188 <HAL_IncTick+0x20>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	18d2      	adds	r2, r2, r3
 8002178:	4b03      	ldr	r3, [pc, #12]	@ (8002188 <HAL_IncTick+0x20>)
 800217a:	601a      	str	r2, [r3, #0]
}
 800217c:	46c0      	nop			@ (mov r8, r8)
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	46c0      	nop			@ (mov r8, r8)
 8002184:	20000018 	.word	0x20000018
 8002188:	2000048c 	.word	0x2000048c

0800218c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
  return uwTick;
 8002190:	4b02      	ldr	r3, [pc, #8]	@ (800219c <HAL_GetTick+0x10>)
 8002192:	681b      	ldr	r3, [r3, #0]
}
 8002194:	0018      	movs	r0, r3
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	46c0      	nop			@ (mov r8, r8)
 800219c:	2000048c 	.word	0x2000048c

080021a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021a8:	f7ff fff0 	bl	800218c <HAL_GetTick>
 80021ac:	0003      	movs	r3, r0
 80021ae:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	3301      	adds	r3, #1
 80021b8:	d005      	beq.n	80021c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021ba:	4b0a      	ldr	r3, [pc, #40]	@ (80021e4 <HAL_Delay+0x44>)
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	001a      	movs	r2, r3
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	189b      	adds	r3, r3, r2
 80021c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80021c6:	46c0      	nop			@ (mov r8, r8)
 80021c8:	f7ff ffe0 	bl	800218c <HAL_GetTick>
 80021cc:	0002      	movs	r2, r0
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	68fa      	ldr	r2, [r7, #12]
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d8f7      	bhi.n	80021c8 <HAL_Delay+0x28>
  {
  }
}
 80021d8:	46c0      	nop			@ (mov r8, r8)
 80021da:	46c0      	nop			@ (mov r8, r8)
 80021dc:	46bd      	mov	sp, r7
 80021de:	b004      	add	sp, #16
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	46c0      	nop			@ (mov r8, r8)
 80021e4:	20000018 	.word	0x20000018

080021e8 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80021f0:	4b06      	ldr	r3, [pc, #24]	@ (800220c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a06      	ldr	r2, [pc, #24]	@ (8002210 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80021f6:	4013      	ands	r3, r2
 80021f8:	0019      	movs	r1, r3
 80021fa:	4b04      	ldr	r3, [pc, #16]	@ (800220c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	430a      	orrs	r2, r1
 8002200:	601a      	str	r2, [r3, #0]
}
 8002202:	46c0      	nop			@ (mov r8, r8)
 8002204:	46bd      	mov	sp, r7
 8002206:	b002      	add	sp, #8
 8002208:	bd80      	pop	{r7, pc}
 800220a:	46c0      	nop			@ (mov r8, r8)
 800220c:	40010000 	.word	0x40010000
 8002210:	fffff9ff 	.word	0xfffff9ff

08002214 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	0002      	movs	r2, r0
 800221c:	1dfb      	adds	r3, r7, #7
 800221e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002220:	1dfb      	adds	r3, r7, #7
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	2b7f      	cmp	r3, #127	@ 0x7f
 8002226:	d809      	bhi.n	800223c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002228:	1dfb      	adds	r3, r7, #7
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	001a      	movs	r2, r3
 800222e:	231f      	movs	r3, #31
 8002230:	401a      	ands	r2, r3
 8002232:	4b04      	ldr	r3, [pc, #16]	@ (8002244 <__NVIC_EnableIRQ+0x30>)
 8002234:	2101      	movs	r1, #1
 8002236:	4091      	lsls	r1, r2
 8002238:	000a      	movs	r2, r1
 800223a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800223c:	46c0      	nop			@ (mov r8, r8)
 800223e:	46bd      	mov	sp, r7
 8002240:	b002      	add	sp, #8
 8002242:	bd80      	pop	{r7, pc}
 8002244:	e000e100 	.word	0xe000e100

08002248 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002248:	b590      	push	{r4, r7, lr}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	0002      	movs	r2, r0
 8002250:	6039      	str	r1, [r7, #0]
 8002252:	1dfb      	adds	r3, r7, #7
 8002254:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002256:	1dfb      	adds	r3, r7, #7
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	2b7f      	cmp	r3, #127	@ 0x7f
 800225c:	d828      	bhi.n	80022b0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800225e:	4a2f      	ldr	r2, [pc, #188]	@ (800231c <__NVIC_SetPriority+0xd4>)
 8002260:	1dfb      	adds	r3, r7, #7
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	b25b      	sxtb	r3, r3
 8002266:	089b      	lsrs	r3, r3, #2
 8002268:	33c0      	adds	r3, #192	@ 0xc0
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	589b      	ldr	r3, [r3, r2]
 800226e:	1dfa      	adds	r2, r7, #7
 8002270:	7812      	ldrb	r2, [r2, #0]
 8002272:	0011      	movs	r1, r2
 8002274:	2203      	movs	r2, #3
 8002276:	400a      	ands	r2, r1
 8002278:	00d2      	lsls	r2, r2, #3
 800227a:	21ff      	movs	r1, #255	@ 0xff
 800227c:	4091      	lsls	r1, r2
 800227e:	000a      	movs	r2, r1
 8002280:	43d2      	mvns	r2, r2
 8002282:	401a      	ands	r2, r3
 8002284:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	019b      	lsls	r3, r3, #6
 800228a:	22ff      	movs	r2, #255	@ 0xff
 800228c:	401a      	ands	r2, r3
 800228e:	1dfb      	adds	r3, r7, #7
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	0018      	movs	r0, r3
 8002294:	2303      	movs	r3, #3
 8002296:	4003      	ands	r3, r0
 8002298:	00db      	lsls	r3, r3, #3
 800229a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800229c:	481f      	ldr	r0, [pc, #124]	@ (800231c <__NVIC_SetPriority+0xd4>)
 800229e:	1dfb      	adds	r3, r7, #7
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	b25b      	sxtb	r3, r3
 80022a4:	089b      	lsrs	r3, r3, #2
 80022a6:	430a      	orrs	r2, r1
 80022a8:	33c0      	adds	r3, #192	@ 0xc0
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80022ae:	e031      	b.n	8002314 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80022b0:	4a1b      	ldr	r2, [pc, #108]	@ (8002320 <__NVIC_SetPriority+0xd8>)
 80022b2:	1dfb      	adds	r3, r7, #7
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	0019      	movs	r1, r3
 80022b8:	230f      	movs	r3, #15
 80022ba:	400b      	ands	r3, r1
 80022bc:	3b08      	subs	r3, #8
 80022be:	089b      	lsrs	r3, r3, #2
 80022c0:	3306      	adds	r3, #6
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	18d3      	adds	r3, r2, r3
 80022c6:	3304      	adds	r3, #4
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	1dfa      	adds	r2, r7, #7
 80022cc:	7812      	ldrb	r2, [r2, #0]
 80022ce:	0011      	movs	r1, r2
 80022d0:	2203      	movs	r2, #3
 80022d2:	400a      	ands	r2, r1
 80022d4:	00d2      	lsls	r2, r2, #3
 80022d6:	21ff      	movs	r1, #255	@ 0xff
 80022d8:	4091      	lsls	r1, r2
 80022da:	000a      	movs	r2, r1
 80022dc:	43d2      	mvns	r2, r2
 80022de:	401a      	ands	r2, r3
 80022e0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	019b      	lsls	r3, r3, #6
 80022e6:	22ff      	movs	r2, #255	@ 0xff
 80022e8:	401a      	ands	r2, r3
 80022ea:	1dfb      	adds	r3, r7, #7
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	0018      	movs	r0, r3
 80022f0:	2303      	movs	r3, #3
 80022f2:	4003      	ands	r3, r0
 80022f4:	00db      	lsls	r3, r3, #3
 80022f6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80022f8:	4809      	ldr	r0, [pc, #36]	@ (8002320 <__NVIC_SetPriority+0xd8>)
 80022fa:	1dfb      	adds	r3, r7, #7
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	001c      	movs	r4, r3
 8002300:	230f      	movs	r3, #15
 8002302:	4023      	ands	r3, r4
 8002304:	3b08      	subs	r3, #8
 8002306:	089b      	lsrs	r3, r3, #2
 8002308:	430a      	orrs	r2, r1
 800230a:	3306      	adds	r3, #6
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	18c3      	adds	r3, r0, r3
 8002310:	3304      	adds	r3, #4
 8002312:	601a      	str	r2, [r3, #0]
}
 8002314:	46c0      	nop			@ (mov r8, r8)
 8002316:	46bd      	mov	sp, r7
 8002318:	b003      	add	sp, #12
 800231a:	bd90      	pop	{r4, r7, pc}
 800231c:	e000e100 	.word	0xe000e100
 8002320:	e000ed00 	.word	0xe000ed00

08002324 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	1e5a      	subs	r2, r3, #1
 8002330:	2380      	movs	r3, #128	@ 0x80
 8002332:	045b      	lsls	r3, r3, #17
 8002334:	429a      	cmp	r2, r3
 8002336:	d301      	bcc.n	800233c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002338:	2301      	movs	r3, #1
 800233a:	e010      	b.n	800235e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800233c:	4b0a      	ldr	r3, [pc, #40]	@ (8002368 <SysTick_Config+0x44>)
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	3a01      	subs	r2, #1
 8002342:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002344:	2301      	movs	r3, #1
 8002346:	425b      	negs	r3, r3
 8002348:	2103      	movs	r1, #3
 800234a:	0018      	movs	r0, r3
 800234c:	f7ff ff7c 	bl	8002248 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002350:	4b05      	ldr	r3, [pc, #20]	@ (8002368 <SysTick_Config+0x44>)
 8002352:	2200      	movs	r2, #0
 8002354:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002356:	4b04      	ldr	r3, [pc, #16]	@ (8002368 <SysTick_Config+0x44>)
 8002358:	2207      	movs	r2, #7
 800235a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800235c:	2300      	movs	r3, #0
}
 800235e:	0018      	movs	r0, r3
 8002360:	46bd      	mov	sp, r7
 8002362:	b002      	add	sp, #8
 8002364:	bd80      	pop	{r7, pc}
 8002366:	46c0      	nop			@ (mov r8, r8)
 8002368:	e000e010 	.word	0xe000e010

0800236c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b084      	sub	sp, #16
 8002370:	af00      	add	r7, sp, #0
 8002372:	60b9      	str	r1, [r7, #8]
 8002374:	607a      	str	r2, [r7, #4]
 8002376:	210f      	movs	r1, #15
 8002378:	187b      	adds	r3, r7, r1
 800237a:	1c02      	adds	r2, r0, #0
 800237c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800237e:	68ba      	ldr	r2, [r7, #8]
 8002380:	187b      	adds	r3, r7, r1
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	b25b      	sxtb	r3, r3
 8002386:	0011      	movs	r1, r2
 8002388:	0018      	movs	r0, r3
 800238a:	f7ff ff5d 	bl	8002248 <__NVIC_SetPriority>
}
 800238e:	46c0      	nop			@ (mov r8, r8)
 8002390:	46bd      	mov	sp, r7
 8002392:	b004      	add	sp, #16
 8002394:	bd80      	pop	{r7, pc}

08002396 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002396:	b580      	push	{r7, lr}
 8002398:	b082      	sub	sp, #8
 800239a:	af00      	add	r7, sp, #0
 800239c:	0002      	movs	r2, r0
 800239e:	1dfb      	adds	r3, r7, #7
 80023a0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023a2:	1dfb      	adds	r3, r7, #7
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	b25b      	sxtb	r3, r3
 80023a8:	0018      	movs	r0, r3
 80023aa:	f7ff ff33 	bl	8002214 <__NVIC_EnableIRQ>
}
 80023ae:	46c0      	nop			@ (mov r8, r8)
 80023b0:	46bd      	mov	sp, r7
 80023b2:	b002      	add	sp, #8
 80023b4:	bd80      	pop	{r7, pc}

080023b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023b6:	b580      	push	{r7, lr}
 80023b8:	b082      	sub	sp, #8
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	0018      	movs	r0, r3
 80023c2:	f7ff ffaf 	bl	8002324 <SysTick_Config>
 80023c6:	0003      	movs	r3, r0
}
 80023c8:	0018      	movs	r0, r3
 80023ca:	46bd      	mov	sp, r7
 80023cc:	b002      	add	sp, #8
 80023ce:	bd80      	pop	{r7, pc}

080023d0 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d101      	bne.n	80023e2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e091      	b.n	8002506 <HAL_DMA_Init+0x136>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
#if defined(DMA2)
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	001a      	movs	r2, r3
 80023e8:	4b49      	ldr	r3, [pc, #292]	@ (8002510 <HAL_DMA_Init+0x140>)
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d810      	bhi.n	8002410 <HAL_DMA_Init+0x40>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a48      	ldr	r2, [pc, #288]	@ (8002514 <HAL_DMA_Init+0x144>)
 80023f4:	4694      	mov	ip, r2
 80023f6:	4463      	add	r3, ip
 80023f8:	2114      	movs	r1, #20
 80023fa:	0018      	movs	r0, r3
 80023fc:	f7fd fe8c 	bl	8000118 <__udivsi3>
 8002400:	0003      	movs	r3, r0
 8002402:	009a      	lsls	r2, r3, #2
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	4a43      	ldr	r2, [pc, #268]	@ (8002518 <HAL_DMA_Init+0x148>)
 800240c:	641a      	str	r2, [r3, #64]	@ 0x40
 800240e:	e00f      	b.n	8002430 <HAL_DMA_Init+0x60>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a41      	ldr	r2, [pc, #260]	@ (800251c <HAL_DMA_Init+0x14c>)
 8002416:	4694      	mov	ip, r2
 8002418:	4463      	add	r3, ip
 800241a:	2114      	movs	r1, #20
 800241c:	0018      	movs	r0, r3
 800241e:	f7fd fe7b 	bl	8000118 <__udivsi3>
 8002422:	0003      	movs	r3, r0
 8002424:	009a      	lsls	r2, r3, #2
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4a3c      	ldr	r2, [pc, #240]	@ (8002520 <HAL_DMA_Init+0x150>)
 800242e:	641a      	str	r2, [r3, #64]	@ 0x40
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2225      	movs	r2, #37	@ 0x25
 8002434:	2102      	movs	r1, #2
 8002436:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4938      	ldr	r1, [pc, #224]	@ (8002524 <HAL_DMA_Init+0x154>)
 8002444:	400a      	ands	r2, r1
 8002446:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	6819      	ldr	r1, [r3, #0]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	689a      	ldr	r2, [r3, #8]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	431a      	orrs	r2, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	691b      	ldr	r3, [r3, #16]
 800245c:	431a      	orrs	r2, r3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	695b      	ldr	r3, [r3, #20]
 8002462:	431a      	orrs	r2, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	699b      	ldr	r3, [r3, #24]
 8002468:	431a      	orrs	r2, r3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	69db      	ldr	r3, [r3, #28]
 800246e:	431a      	orrs	r2, r3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6a1b      	ldr	r3, [r3, #32]
 8002474:	431a      	orrs	r2, r3
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	430a      	orrs	r2, r1
 800247c:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	0018      	movs	r0, r3
 8002482:	f000 faa9 	bl	80029d8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	689a      	ldr	r2, [r3, #8]
 800248a:	2380      	movs	r3, #128	@ 0x80
 800248c:	01db      	lsls	r3, r3, #7
 800248e:	429a      	cmp	r2, r3
 8002490:	d102      	bne.n	8002498 <HAL_DMA_Init+0xc8>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2200      	movs	r2, #0
 8002496:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	685a      	ldr	r2, [r3, #4]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024a0:	217f      	movs	r1, #127	@ 0x7f
 80024a2:	400a      	ands	r2, r1
 80024a4:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80024ae:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d011      	beq.n	80024dc <HAL_DMA_Init+0x10c>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	2b04      	cmp	r3, #4
 80024be:	d80d      	bhi.n	80024dc <HAL_DMA_Init+0x10c>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	0018      	movs	r0, r3
 80024c4:	f000 fad2 	bl	8002a6c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024cc:	2200      	movs	r2, #0
 80024ce:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024d4:	687a      	ldr	r2, [r7, #4]
 80024d6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80024d8:	605a      	str	r2, [r3, #4]
 80024da:	e008      	b.n	80024ee <HAL_DMA_Init+0x11e>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2200      	movs	r2, #0
 80024e0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2200      	movs	r2, #0
 80024e6:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2200      	movs	r2, #0
 80024ec:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2200      	movs	r2, #0
 80024f2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2225      	movs	r2, #37	@ 0x25
 80024f8:	2101      	movs	r1, #1
 80024fa:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2224      	movs	r2, #36	@ 0x24
 8002500:	2100      	movs	r1, #0
 8002502:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002504:	2300      	movs	r3, #0
}
 8002506:	0018      	movs	r0, r3
 8002508:	46bd      	mov	sp, r7
 800250a:	b002      	add	sp, #8
 800250c:	bd80      	pop	{r7, pc}
 800250e:	46c0      	nop			@ (mov r8, r8)
 8002510:	40020407 	.word	0x40020407
 8002514:	bffdfff8 	.word	0xbffdfff8
 8002518:	40020000 	.word	0x40020000
 800251c:	bffdfbf8 	.word	0xbffdfbf8
 8002520:	40020400 	.word	0x40020400
 8002524:	ffff800f 	.word	0xffff800f

08002528 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b086      	sub	sp, #24
 800252c:	af00      	add	r7, sp, #0
 800252e:	60f8      	str	r0, [r7, #12]
 8002530:	60b9      	str	r1, [r7, #8]
 8002532:	607a      	str	r2, [r7, #4]
 8002534:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002536:	2317      	movs	r3, #23
 8002538:	18fb      	adds	r3, r7, r3
 800253a:	2200      	movs	r2, #0
 800253c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2224      	movs	r2, #36	@ 0x24
 8002542:	5c9b      	ldrb	r3, [r3, r2]
 8002544:	2b01      	cmp	r3, #1
 8002546:	d101      	bne.n	800254c <HAL_DMA_Start_IT+0x24>
 8002548:	2302      	movs	r3, #2
 800254a:	e06f      	b.n	800262c <HAL_DMA_Start_IT+0x104>
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2224      	movs	r2, #36	@ 0x24
 8002550:	2101      	movs	r1, #1
 8002552:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2225      	movs	r2, #37	@ 0x25
 8002558:	5c9b      	ldrb	r3, [r3, r2]
 800255a:	b2db      	uxtb	r3, r3
 800255c:	2b01      	cmp	r3, #1
 800255e:	d157      	bne.n	8002610 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2225      	movs	r2, #37	@ 0x25
 8002564:	2102      	movs	r1, #2
 8002566:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2200      	movs	r2, #0
 800256c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2101      	movs	r1, #1
 800257a:	438a      	bics	r2, r1
 800257c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	68b9      	ldr	r1, [r7, #8]
 8002584:	68f8      	ldr	r0, [r7, #12]
 8002586:	f000 f9eb 	bl	8002960 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800258e:	2b00      	cmp	r3, #0
 8002590:	d008      	beq.n	80025a4 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	210e      	movs	r1, #14
 800259e:	430a      	orrs	r2, r1
 80025a0:	601a      	str	r2, [r3, #0]
 80025a2:	e00f      	b.n	80025c4 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	2104      	movs	r1, #4
 80025b0:	438a      	bics	r2, r1
 80025b2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	210a      	movs	r1, #10
 80025c0:	430a      	orrs	r2, r1
 80025c2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	2380      	movs	r3, #128	@ 0x80
 80025cc:	025b      	lsls	r3, r3, #9
 80025ce:	4013      	ands	r3, r2
 80025d0:	d008      	beq.n	80025e4 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025dc:	2180      	movs	r1, #128	@ 0x80
 80025de:	0049      	lsls	r1, r1, #1
 80025e0:	430a      	orrs	r2, r1
 80025e2:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d008      	beq.n	80025fe <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025f6:	2180      	movs	r1, #128	@ 0x80
 80025f8:	0049      	lsls	r1, r1, #1
 80025fa:	430a      	orrs	r2, r1
 80025fc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2101      	movs	r1, #1
 800260a:	430a      	orrs	r2, r1
 800260c:	601a      	str	r2, [r3, #0]
 800260e:	e00a      	b.n	8002626 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2280      	movs	r2, #128	@ 0x80
 8002614:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2224      	movs	r2, #36	@ 0x24
 800261a:	2100      	movs	r1, #0
 800261c:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 800261e:	2317      	movs	r3, #23
 8002620:	18fb      	adds	r3, r7, r3
 8002622:	2201      	movs	r2, #1
 8002624:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8002626:	2317      	movs	r3, #23
 8002628:	18fb      	adds	r3, r7, r3
 800262a:	781b      	ldrb	r3, [r3, #0]
}
 800262c:	0018      	movs	r0, r3
 800262e:	46bd      	mov	sp, r7
 8002630:	b006      	add	sp, #24
 8002632:	bd80      	pop	{r7, pc}

08002634 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d101      	bne.n	8002646 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e04f      	b.n	80026e6 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2225      	movs	r2, #37	@ 0x25
 800264a:	5c9b      	ldrb	r3, [r3, r2]
 800264c:	b2db      	uxtb	r3, r3
 800264e:	2b02      	cmp	r3, #2
 8002650:	d008      	beq.n	8002664 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2204      	movs	r2, #4
 8002656:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2224      	movs	r2, #36	@ 0x24
 800265c:	2100      	movs	r1, #0
 800265e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e040      	b.n	80026e6 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	210e      	movs	r1, #14
 8002670:	438a      	bics	r2, r1
 8002672:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800267e:	491c      	ldr	r1, [pc, #112]	@ (80026f0 <HAL_DMA_Abort+0xbc>)
 8002680:	400a      	ands	r2, r1
 8002682:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	2101      	movs	r1, #1
 8002690:	438a      	bics	r2, r1
 8002692:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002698:	221c      	movs	r2, #28
 800269a:	401a      	ands	r2, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026a0:	2101      	movs	r1, #1
 80026a2:	4091      	lsls	r1, r2
 80026a4:	000a      	movs	r2, r1
 80026a6:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026ac:	687a      	ldr	r2, [r7, #4]
 80026ae:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80026b0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d00c      	beq.n	80026d4 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026c4:	490a      	ldr	r1, [pc, #40]	@ (80026f0 <HAL_DMA_Abort+0xbc>)
 80026c6:	400a      	ands	r2, r1
 80026c8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80026d2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2225      	movs	r2, #37	@ 0x25
 80026d8:	2101      	movs	r1, #1
 80026da:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2224      	movs	r2, #36	@ 0x24
 80026e0:	2100      	movs	r1, #0
 80026e2:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80026e4:	2300      	movs	r3, #0
}
 80026e6:	0018      	movs	r0, r3
 80026e8:	46bd      	mov	sp, r7
 80026ea:	b002      	add	sp, #8
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	46c0      	nop			@ (mov r8, r8)
 80026f0:	fffffeff 	.word	0xfffffeff

080026f4 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026fc:	210f      	movs	r1, #15
 80026fe:	187b      	adds	r3, r7, r1
 8002700:	2200      	movs	r2, #0
 8002702:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2225      	movs	r2, #37	@ 0x25
 8002708:	5c9b      	ldrb	r3, [r3, r2]
 800270a:	b2db      	uxtb	r3, r3
 800270c:	2b02      	cmp	r3, #2
 800270e:	d006      	beq.n	800271e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2204      	movs	r2, #4
 8002714:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002716:	187b      	adds	r3, r7, r1
 8002718:	2201      	movs	r2, #1
 800271a:	701a      	strb	r2, [r3, #0]
 800271c:	e048      	b.n	80027b0 <HAL_DMA_Abort_IT+0xbc>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	210e      	movs	r1, #14
 800272a:	438a      	bics	r2, r1
 800272c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	2101      	movs	r1, #1
 800273a:	438a      	bics	r2, r1
 800273c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002748:	491d      	ldr	r1, [pc, #116]	@ (80027c0 <HAL_DMA_Abort_IT+0xcc>)
 800274a:	400a      	ands	r2, r1
 800274c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002752:	221c      	movs	r2, #28
 8002754:	401a      	ands	r2, r3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800275a:	2101      	movs	r1, #1
 800275c:	4091      	lsls	r1, r2
 800275e:	000a      	movs	r2, r1
 8002760:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800276a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002770:	2b00      	cmp	r3, #0
 8002772:	d00c      	beq.n	800278e <HAL_DMA_Abort_IT+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800277e:	4910      	ldr	r1, [pc, #64]	@ (80027c0 <HAL_DMA_Abort_IT+0xcc>)
 8002780:	400a      	ands	r2, r1
 8002782:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800278c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2225      	movs	r2, #37	@ 0x25
 8002792:	2101      	movs	r1, #1
 8002794:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2224      	movs	r2, #36	@ 0x24
 800279a:	2100      	movs	r1, #0
 800279c:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d004      	beq.n	80027b0 <HAL_DMA_Abort_IT+0xbc>
    {
      hdma->XferAbortCallback(hdma);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	0010      	movs	r0, r2
 80027ae:	4798      	blx	r3
    }
  }
  return status;
 80027b0:	230f      	movs	r3, #15
 80027b2:	18fb      	adds	r3, r7, r3
 80027b4:	781b      	ldrb	r3, [r3, #0]
}
 80027b6:	0018      	movs	r0, r3
 80027b8:	46bd      	mov	sp, r7
 80027ba:	b004      	add	sp, #16
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	46c0      	nop			@ (mov r8, r8)
 80027c0:	fffffeff 	.word	0xfffffeff

080027c4 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	60fb      	str	r3, [r7, #12]
#else
  uint32_t flag_it = DMA1->ISR;
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027e0:	221c      	movs	r2, #28
 80027e2:	4013      	ands	r3, r2
 80027e4:	2204      	movs	r2, #4
 80027e6:	409a      	lsls	r2, r3
 80027e8:	0013      	movs	r3, r2
 80027ea:	68fa      	ldr	r2, [r7, #12]
 80027ec:	4013      	ands	r3, r2
 80027ee:	d026      	beq.n	800283e <HAL_DMA_IRQHandler+0x7a>
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	2204      	movs	r2, #4
 80027f4:	4013      	ands	r3, r2
 80027f6:	d022      	beq.n	800283e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	2220      	movs	r2, #32
 8002800:	4013      	ands	r3, r2
 8002802:	d107      	bne.n	8002814 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	2104      	movs	r1, #4
 8002810:	438a      	bics	r2, r1
 8002812:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002818:	221c      	movs	r2, #28
 800281a:	401a      	ands	r2, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002820:	2104      	movs	r1, #4
 8002822:	4091      	lsls	r1, r2
 8002824:	000a      	movs	r2, r1
 8002826:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800282c:	2b00      	cmp	r3, #0
 800282e:	d100      	bne.n	8002832 <HAL_DMA_IRQHandler+0x6e>
 8002830:	e080      	b.n	8002934 <HAL_DMA_IRQHandler+0x170>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	0010      	movs	r0, r2
 800283a:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 800283c:	e07a      	b.n	8002934 <HAL_DMA_IRQHandler+0x170>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002842:	221c      	movs	r2, #28
 8002844:	4013      	ands	r3, r2
 8002846:	2202      	movs	r2, #2
 8002848:	409a      	lsls	r2, r3
 800284a:	0013      	movs	r3, r2
 800284c:	68fa      	ldr	r2, [r7, #12]
 800284e:	4013      	ands	r3, r2
 8002850:	d03c      	beq.n	80028cc <HAL_DMA_IRQHandler+0x108>
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	2202      	movs	r2, #2
 8002856:	4013      	ands	r3, r2
 8002858:	d038      	beq.n	80028cc <HAL_DMA_IRQHandler+0x108>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	2220      	movs	r2, #32
 8002862:	4013      	ands	r3, r2
 8002864:	d10b      	bne.n	800287e <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	210a      	movs	r1, #10
 8002872:	438a      	bics	r2, r1
 8002874:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2225      	movs	r2, #37	@ 0x25
 800287a:	2101      	movs	r1, #1
 800287c:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	001a      	movs	r2, r3
 8002884:	4b2e      	ldr	r3, [pc, #184]	@ (8002940 <HAL_DMA_IRQHandler+0x17c>)
 8002886:	429a      	cmp	r2, r3
 8002888:	d909      	bls.n	800289e <HAL_DMA_IRQHandler+0xda>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800288e:	221c      	movs	r2, #28
 8002890:	401a      	ands	r2, r3
 8002892:	4b2c      	ldr	r3, [pc, #176]	@ (8002944 <HAL_DMA_IRQHandler+0x180>)
 8002894:	2102      	movs	r1, #2
 8002896:	4091      	lsls	r1, r2
 8002898:	000a      	movs	r2, r1
 800289a:	605a      	str	r2, [r3, #4]
 800289c:	e008      	b.n	80028b0 <HAL_DMA_IRQHandler+0xec>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028a2:	221c      	movs	r2, #28
 80028a4:	401a      	ands	r2, r3
 80028a6:	4b28      	ldr	r3, [pc, #160]	@ (8002948 <HAL_DMA_IRQHandler+0x184>)
 80028a8:	2102      	movs	r1, #2
 80028aa:	4091      	lsls	r1, r2
 80028ac:	000a      	movs	r2, r1
 80028ae:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2224      	movs	r2, #36	@ 0x24
 80028b4:	2100      	movs	r1, #0
 80028b6:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d039      	beq.n	8002934 <HAL_DMA_IRQHandler+0x170>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	0010      	movs	r0, r2
 80028c8:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80028ca:	e033      	b.n	8002934 <HAL_DMA_IRQHandler+0x170>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028d0:	221c      	movs	r2, #28
 80028d2:	4013      	ands	r3, r2
 80028d4:	2208      	movs	r2, #8
 80028d6:	409a      	lsls	r2, r3
 80028d8:	0013      	movs	r3, r2
 80028da:	68fa      	ldr	r2, [r7, #12]
 80028dc:	4013      	ands	r3, r2
 80028de:	d02a      	beq.n	8002936 <HAL_DMA_IRQHandler+0x172>
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	2208      	movs	r2, #8
 80028e4:	4013      	ands	r3, r2
 80028e6:	d026      	beq.n	8002936 <HAL_DMA_IRQHandler+0x172>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	210e      	movs	r1, #14
 80028f4:	438a      	bics	r2, r1
 80028f6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028fc:	221c      	movs	r2, #28
 80028fe:	401a      	ands	r2, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002904:	2101      	movs	r1, #1
 8002906:	4091      	lsls	r1, r2
 8002908:	000a      	movs	r2, r1
 800290a:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2201      	movs	r2, #1
 8002910:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2225      	movs	r2, #37	@ 0x25
 8002916:	2101      	movs	r1, #1
 8002918:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2224      	movs	r2, #36	@ 0x24
 800291e:	2100      	movs	r1, #0
 8002920:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002926:	2b00      	cmp	r3, #0
 8002928:	d005      	beq.n	8002936 <HAL_DMA_IRQHandler+0x172>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	0010      	movs	r0, r2
 8002932:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002934:	46c0      	nop			@ (mov r8, r8)
 8002936:	46c0      	nop			@ (mov r8, r8)
}
 8002938:	46bd      	mov	sp, r7
 800293a:	b004      	add	sp, #16
 800293c:	bd80      	pop	{r7, pc}
 800293e:	46c0      	nop			@ (mov r8, r8)
 8002940:	40020080 	.word	0x40020080
 8002944:	40020400 	.word	0x40020400
 8002948:	40020000 	.word	0x40020000

0800294c <HAL_DMA_GetError>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b082      	sub	sp, #8
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  /* Return the DMA error code */
  return hdma->ErrorCode;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8002958:	0018      	movs	r0, r3
 800295a:	46bd      	mov	sp, r7
 800295c:	b002      	add	sp, #8
 800295e:	bd80      	pop	{r7, pc}

08002960 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b084      	sub	sp, #16
 8002964:	af00      	add	r7, sp, #0
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	60b9      	str	r1, [r7, #8]
 800296a:	607a      	str	r2, [r7, #4]
 800296c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002972:	68fa      	ldr	r2, [r7, #12]
 8002974:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002976:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800297c:	2b00      	cmp	r3, #0
 800297e:	d004      	beq.n	800298a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002984:	68fa      	ldr	r2, [r7, #12]
 8002986:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002988:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800298e:	221c      	movs	r2, #28
 8002990:	401a      	ands	r2, r3
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002996:	2101      	movs	r1, #1
 8002998:	4091      	lsls	r1, r2
 800299a:	000a      	movs	r2, r1
 800299c:	605a      	str	r2, [r3, #4]
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	683a      	ldr	r2, [r7, #0]
 80029a4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	2b10      	cmp	r3, #16
 80029ac:	d108      	bne.n	80029c0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	68ba      	ldr	r2, [r7, #8]
 80029bc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80029be:	e007      	b.n	80029d0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	68ba      	ldr	r2, [r7, #8]
 80029c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	60da      	str	r2, [r3, #12]
}
 80029d0:	46c0      	nop			@ (mov r8, r8)
 80029d2:	46bd      	mov	sp, r7
 80029d4:	b004      	add	sp, #16
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

#if defined(DMA2)
  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	001a      	movs	r2, r3
 80029e6:	4b1d      	ldr	r3, [pc, #116]	@ (8002a5c <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d814      	bhi.n	8002a16 <DMA_CalcDMAMUXChannelBaseAndMask+0x3e>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029f0:	089b      	lsrs	r3, r3, #2
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	4a1a      	ldr	r2, [pc, #104]	@ (8002a60 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 80029f6:	189a      	adds	r2, r3, r2
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	001a      	movs	r2, r3
 8002a02:	23ff      	movs	r3, #255	@ 0xff
 8002a04:	4013      	ands	r3, r2
 8002a06:	3b08      	subs	r3, #8
 8002a08:	2114      	movs	r1, #20
 8002a0a:	0018      	movs	r0, r3
 8002a0c:	f7fd fb84 	bl	8000118 <__udivsi3>
 8002a10:	0003      	movs	r3, r0
 8002a12:	60fb      	str	r3, [r7, #12]
 8002a14:	e014      	b.n	8002a40 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a1a:	089b      	lsrs	r3, r3, #2
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	4a11      	ldr	r2, [pc, #68]	@ (8002a64 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8002a20:	189a      	adds	r2, r3, r2
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	001a      	movs	r2, r3
 8002a2c:	23ff      	movs	r3, #255	@ 0xff
 8002a2e:	4013      	ands	r3, r2
 8002a30:	3b08      	subs	r3, #8
 8002a32:	2114      	movs	r1, #20
 8002a34:	0018      	movs	r0, r3
 8002a36:	f7fd fb6f 	bl	8000118 <__udivsi3>
 8002a3a:	0003      	movs	r3, r0
 8002a3c:	3307      	adds	r3, #7
 8002a3e:	60fb      	str	r3, [r7, #12]
  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	4a09      	ldr	r2, [pc, #36]	@ (8002a68 <DMA_CalcDMAMUXChannelBaseAndMask+0x90>)
 8002a44:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	221f      	movs	r2, #31
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	409a      	lsls	r2, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002a54:	46c0      	nop			@ (mov r8, r8)
 8002a56:	46bd      	mov	sp, r7
 8002a58:	b004      	add	sp, #16
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	40020407 	.word	0x40020407
 8002a60:	40020800 	.word	0x40020800
 8002a64:	4002081c 	.word	0x4002081c
 8002a68:	40020880 	.word	0x40020880

08002a6c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b084      	sub	sp, #16
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	227f      	movs	r2, #127	@ 0x7f
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	4a0a      	ldr	r2, [pc, #40]	@ (8002aac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002a82:	4694      	mov	ip, r2
 8002a84:	4463      	add	r3, ip
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	001a      	movs	r2, r3
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4a07      	ldr	r2, [pc, #28]	@ (8002ab0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002a92:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	3b01      	subs	r3, #1
 8002a98:	2203      	movs	r2, #3
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	409a      	lsls	r2, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8002aa4:	46c0      	nop			@ (mov r8, r8)
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	b004      	add	sp, #16
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	1000823f 	.word	0x1000823f
 8002ab0:	40020940 	.word	0x40020940

08002ab4 <HAL_DMAEx_MUX_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA channel.
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  /* Check for DMAMUX Synchronization overrun */
  if ((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	d01c      	beq.n	8002b04 <HAL_DMAEx_MUX_IRQHandler+0x50>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ad4:	4921      	ldr	r1, [pc, #132]	@ (8002b5c <HAL_DMAEx_MUX_IRQHandler+0xa8>)
 8002ad6:	400a      	ands	r2, r1
 8002ad8:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002ae2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ae8:	2280      	movs	r2, #128	@ 0x80
 8002aea:	0092      	lsls	r2, r2, #2
 8002aec:	431a      	orrs	r2, r3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	63da      	str	r2, [r3, #60]	@ 0x3c

    if (hdma->XferErrorCallback != NULL)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d004      	beq.n	8002b04 <HAL_DMAEx_MUX_IRQHandler+0x50>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	0010      	movs	r0, r2
 8002b02:	4798      	blx	r3
    }
  }

  if (hdma->DMAmuxRequestGen != 0)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d023      	beq.n	8002b54 <HAL_DMAEx_MUX_IRQHandler+0xa0>
  {
    /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if ((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b16:	4013      	ands	r3, r2
 8002b18:	d01c      	beq.n	8002b54 <HAL_DMAEx_MUX_IRQHandler+0xa0>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b24:	490d      	ldr	r1, [pc, #52]	@ (8002b5c <HAL_DMAEx_MUX_IRQHandler+0xa8>)
 8002b26:	400a      	ands	r2, r1
 8002b28:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002b32:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b38:	2280      	movs	r2, #128	@ 0x80
 8002b3a:	00d2      	lsls	r2, r2, #3
 8002b3c:	431a      	orrs	r2, r3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	63da      	str	r2, [r3, #60]	@ 0x3c

      if (hdma->XferErrorCallback != NULL)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d004      	beq.n	8002b54 <HAL_DMAEx_MUX_IRQHandler+0xa0>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	0010      	movs	r0, r2
 8002b52:	4798      	blx	r3
      }
    }
  }
}
 8002b54:	46c0      	nop			@ (mov r8, r8)
 8002b56:	46bd      	mov	sp, r7
 8002b58:	b002      	add	sp, #8
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	fffffeff 	.word	0xfffffeff

08002b60 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d101      	bne.n	8002b72 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e14e      	b.n	8002e10 <HAL_FDCAN_Init+0x2b0>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	225c      	movs	r2, #92	@ 0x5c
 8002b76:	5c9b      	ldrb	r3, [r3, r2]
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d107      	bne.n	8002b8e <HAL_FDCAN_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	225d      	movs	r2, #93	@ 0x5d
 8002b82:	2100      	movs	r1, #0
 8002b84:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	0018      	movs	r0, r3
 8002b8a:	f7fe ffb9 	bl	8001b00 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	699a      	ldr	r2, [r3, #24]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2110      	movs	r1, #16
 8002b9a:	438a      	bics	r2, r1
 8002b9c:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b9e:	f7ff faf5 	bl	800218c <HAL_GetTick>
 8002ba2:	0003      	movs	r3, r0
 8002ba4:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002ba6:	e012      	b.n	8002bce <HAL_FDCAN_Init+0x6e>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002ba8:	f7ff faf0 	bl	800218c <HAL_GetTick>
 8002bac:	0002      	movs	r2, r0
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	2b0a      	cmp	r3, #10
 8002bb4:	d90b      	bls.n	8002bce <HAL_FDCAN_Init+0x6e>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bba:	2201      	movs	r2, #1
 8002bbc:	431a      	orrs	r2, r3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	225c      	movs	r2, #92	@ 0x5c
 8002bc6:	2103      	movs	r1, #3
 8002bc8:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e120      	b.n	8002e10 <HAL_FDCAN_Init+0x2b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	699b      	ldr	r3, [r3, #24]
 8002bd4:	2208      	movs	r2, #8
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	2b08      	cmp	r3, #8
 8002bda:	d0e5      	beq.n	8002ba8 <HAL_FDCAN_Init+0x48>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	699a      	ldr	r2, [r3, #24]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	2101      	movs	r1, #1
 8002be8:	430a      	orrs	r2, r1
 8002bea:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002bec:	f7ff face 	bl	800218c <HAL_GetTick>
 8002bf0:	0003      	movs	r3, r0
 8002bf2:	60fb      	str	r3, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002bf4:	e012      	b.n	8002c1c <HAL_FDCAN_Init+0xbc>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002bf6:	f7ff fac9 	bl	800218c <HAL_GetTick>
 8002bfa:	0002      	movs	r2, r0
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	2b0a      	cmp	r3, #10
 8002c02:	d90b      	bls.n	8002c1c <HAL_FDCAN_Init+0xbc>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c08:	2201      	movs	r2, #1
 8002c0a:	431a      	orrs	r2, r3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	225c      	movs	r2, #92	@ 0x5c
 8002c14:	2103      	movs	r1, #3
 8002c16:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e0f9      	b.n	8002e10 <HAL_FDCAN_Init+0x2b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	699b      	ldr	r3, [r3, #24]
 8002c22:	2201      	movs	r2, #1
 8002c24:	4013      	ands	r3, r2
 8002c26:	d0e6      	beq.n	8002bf6 <HAL_FDCAN_Init+0x96>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	699a      	ldr	r2, [r3, #24]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	2102      	movs	r1, #2
 8002c34:	430a      	orrs	r2, r1
 8002c36:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a76      	ldr	r2, [pc, #472]	@ (8002e18 <HAL_FDCAN_Init+0x2b8>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d103      	bne.n	8002c4a <HAL_FDCAN_Init+0xea>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8002c42:	4a76      	ldr	r2, [pc, #472]	@ (8002e1c <HAL_FDCAN_Init+0x2bc>)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	7c1b      	ldrb	r3, [r3, #16]
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d108      	bne.n	8002c64 <HAL_FDCAN_Init+0x104>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	699a      	ldr	r2, [r3, #24]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	2140      	movs	r1, #64	@ 0x40
 8002c5e:	438a      	bics	r2, r1
 8002c60:	619a      	str	r2, [r3, #24]
 8002c62:	e007      	b.n	8002c74 <HAL_FDCAN_Init+0x114>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	699a      	ldr	r2, [r3, #24]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	2140      	movs	r1, #64	@ 0x40
 8002c70:	430a      	orrs	r2, r1
 8002c72:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	7c5b      	ldrb	r3, [r3, #17]
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d109      	bne.n	8002c90 <HAL_FDCAN_Init+0x130>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	699a      	ldr	r2, [r3, #24]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	2180      	movs	r1, #128	@ 0x80
 8002c88:	01c9      	lsls	r1, r1, #7
 8002c8a:	430a      	orrs	r2, r1
 8002c8c:	619a      	str	r2, [r3, #24]
 8002c8e:	e007      	b.n	8002ca0 <HAL_FDCAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	699a      	ldr	r2, [r3, #24]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4961      	ldr	r1, [pc, #388]	@ (8002e20 <HAL_FDCAN_Init+0x2c0>)
 8002c9c:	400a      	ands	r2, r1
 8002c9e:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	7c9b      	ldrb	r3, [r3, #18]
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d108      	bne.n	8002cba <HAL_FDCAN_Init+0x15a>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	699a      	ldr	r2, [r3, #24]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	495c      	ldr	r1, [pc, #368]	@ (8002e24 <HAL_FDCAN_Init+0x2c4>)
 8002cb4:	400a      	ands	r2, r1
 8002cb6:	619a      	str	r2, [r3, #24]
 8002cb8:	e008      	b.n	8002ccc <HAL_FDCAN_Init+0x16c>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	699a      	ldr	r2, [r3, #24]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2180      	movs	r1, #128	@ 0x80
 8002cc6:	0149      	lsls	r1, r1, #5
 8002cc8:	430a      	orrs	r2, r1
 8002cca:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	699b      	ldr	r3, [r3, #24]
 8002cd2:	4a55      	ldr	r2, [pc, #340]	@ (8002e28 <HAL_FDCAN_Init+0x2c8>)
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	0019      	movs	r1, r3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	689a      	ldr	r2, [r3, #8]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	430a      	orrs	r2, r1
 8002ce2:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	699a      	ldr	r2, [r3, #24]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	21a4      	movs	r1, #164	@ 0xa4
 8002cf0:	438a      	bics	r2, r1
 8002cf2:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	691a      	ldr	r2, [r3, #16]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	2110      	movs	r1, #16
 8002d00:	438a      	bics	r2, r1
 8002d02:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d108      	bne.n	8002d1e <HAL_FDCAN_Init+0x1be>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	699a      	ldr	r2, [r3, #24]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	2104      	movs	r1, #4
 8002d18:	430a      	orrs	r2, r1
 8002d1a:	619a      	str	r2, [r3, #24]
 8002d1c:	e02c      	b.n	8002d78 <HAL_FDCAN_Init+0x218>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d028      	beq.n	8002d78 <HAL_FDCAN_Init+0x218>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d01c      	beq.n	8002d68 <HAL_FDCAN_Init+0x208>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	699a      	ldr	r2, [r3, #24]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2180      	movs	r1, #128	@ 0x80
 8002d3a:	430a      	orrs	r2, r1
 8002d3c:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	691a      	ldr	r2, [r3, #16]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	2110      	movs	r1, #16
 8002d4a:	430a      	orrs	r2, r1
 8002d4c:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	2b03      	cmp	r3, #3
 8002d54:	d110      	bne.n	8002d78 <HAL_FDCAN_Init+0x218>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	699a      	ldr	r2, [r3, #24]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	2120      	movs	r1, #32
 8002d62:	430a      	orrs	r2, r1
 8002d64:	619a      	str	r2, [r3, #24]
 8002d66:	e007      	b.n	8002d78 <HAL_FDCAN_Init+0x218>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	699a      	ldr	r2, [r3, #24]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	2120      	movs	r1, #32
 8002d74:	430a      	orrs	r2, r1
 8002d76:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	699b      	ldr	r3, [r3, #24]
 8002d7c:	3b01      	subs	r3, #1
 8002d7e:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	69db      	ldr	r3, [r3, #28]
 8002d84:	3b01      	subs	r3, #1
 8002d86:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002d88:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6a1b      	ldr	r3, [r3, #32]
 8002d8e:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002d90:	431a      	orrs	r2, r3
 8002d92:	0011      	movs	r1, r2
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	695b      	ldr	r3, [r3, #20]
 8002d98:	3b01      	subs	r3, #1
 8002d9a:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002da0:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002da2:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	689a      	ldr	r2, [r3, #8]
 8002da8:	23c0      	movs	r3, #192	@ 0xc0
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d115      	bne.n	8002ddc <HAL_FDCAN_Init+0x27c>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002db4:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dba:	3b01      	subs	r3, #1
 8002dbc:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002dbe:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dc4:	3b01      	subs	r3, #1
 8002dc6:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002dc8:	431a      	orrs	r2, r3
 8002dca:	0011      	movs	r1, r2
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dd0:	3b01      	subs	r3, #1
 8002dd2:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002dd8:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002dda:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	22c0      	movs	r2, #192	@ 0xc0
 8002de2:	5899      	ldr	r1, [r3, r2]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	430a      	orrs	r2, r1
 8002dee:	21c0      	movs	r1, #192	@ 0xc0
 8002df0:	505a      	str	r2, [r3, r1]

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	0018      	movs	r0, r3
 8002df6:	f000 fa75 	bl	80032e4 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2200      	movs	r2, #0
 8002e04:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	225c      	movs	r2, #92	@ 0x5c
 8002e0a:	2101      	movs	r1, #1
 8002e0c:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002e0e:	2300      	movs	r3, #0
}
 8002e10:	0018      	movs	r0, r3
 8002e12:	46bd      	mov	sp, r7
 8002e14:	b004      	add	sp, #16
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	40006400 	.word	0x40006400
 8002e1c:	40006500 	.word	0x40006500
 8002e20:	ffffbfff 	.word	0xffffbfff
 8002e24:	ffffefff 	.word	0xffffefff
 8002e28:	fffffcff 	.word	0xfffffcff

08002e2c <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b086      	sub	sp, #24
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8002e36:	2017      	movs	r0, #23
 8002e38:	183b      	adds	r3, r7, r0
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	215c      	movs	r1, #92	@ 0x5c
 8002e3e:	5c52      	ldrb	r2, [r2, r1]
 8002e40:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8002e42:	0002      	movs	r2, r0
 8002e44:	18bb      	adds	r3, r7, r2
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d003      	beq.n	8002e54 <HAL_FDCAN_ConfigFilter+0x28>
 8002e4c:	18bb      	adds	r3, r7, r2
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	2b02      	cmp	r3, #2
 8002e52:	d13d      	bne.n	8002ed0 <HAL_FDCAN_ConfigFilter+0xa4>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d119      	bne.n	8002e90 <HAL_FDCAN_ConfigFilter+0x64>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8002e68:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	691b      	ldr	r3, [r3, #16]
 8002e6e:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8002e70:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8002e76:	4313      	orrs	r3, r2
 8002e78:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	18d3      	adds	r3, r2, r3
 8002e86:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	693a      	ldr	r2, [r7, #16]
 8002e8c:	601a      	str	r2, [r3, #0]
 8002e8e:	e01d      	b.n	8002ecc <HAL_FDCAN_ConfigFilter+0xa0>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	075a      	lsls	r2, r3, #29
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	691b      	ldr	r3, [r3, #16]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	079a      	lsls	r2, r3, #30
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	695b      	ldr	r3, [r3, #20]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	00db      	lsls	r3, r3, #3
 8002eb6:	18d3      	adds	r3, r2, r3
 8002eb8:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	693a      	ldr	r2, [r7, #16]
 8002ebe:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	3304      	adds	r3, #4
 8002ec4:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	68fa      	ldr	r2, [r7, #12]
 8002eca:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	e006      	b.n	8002ede <HAL_FDCAN_ConfigFilter+0xb2>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ed4:	2202      	movs	r2, #2
 8002ed6:	431a      	orrs	r2, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
  }
}
 8002ede:	0018      	movs	r0, r3
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	b006      	add	sp, #24
 8002ee4:	bd80      	pop	{r7, pc}

08002ee6 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8002ee6:	b580      	push	{r7, lr}
 8002ee8:	b082      	sub	sp, #8
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	225c      	movs	r2, #92	@ 0x5c
 8002ef2:	5c9b      	ldrb	r3, [r3, r2]
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d110      	bne.n	8002f1c <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	225c      	movs	r2, #92	@ 0x5c
 8002efe:	2102      	movs	r1, #2
 8002f00:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	699a      	ldr	r2, [r3, #24]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2101      	movs	r1, #1
 8002f0e:	438a      	bics	r2, r1
 8002f10:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	e006      	b.n	8002f2a <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f20:	2204      	movs	r2, #4
 8002f22:	431a      	orrs	r2, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
  }
}
 8002f2a:	0018      	movs	r0, r3
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	b002      	add	sp, #8
 8002f30:	bd80      	pop	{r7, pc}

08002f32 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8002f32:	b580      	push	{r7, lr}
 8002f34:	b086      	sub	sp, #24
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	60f8      	str	r0, [r7, #12]
 8002f3a:	60b9      	str	r1, [r7, #8]
 8002f3c:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	225c      	movs	r2, #92	@ 0x5c
 8002f42:	5c9b      	ldrb	r3, [r3, r2]
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d12d      	bne.n	8002fa6 <HAL_FDCAN_AddMessageToTxFifoQ+0x74>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	22c4      	movs	r2, #196	@ 0xc4
 8002f50:	589a      	ldr	r2, [r3, r2]
 8002f52:	2380      	movs	r3, #128	@ 0x80
 8002f54:	039b      	lsls	r3, r3, #14
 8002f56:	4013      	ands	r3, r2
 8002f58:	d008      	beq.n	8002f6c <HAL_FDCAN_AddMessageToTxFifoQ+0x3a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f5e:	2280      	movs	r2, #128	@ 0x80
 8002f60:	0092      	lsls	r2, r2, #2
 8002f62:	431a      	orrs	r2, r3
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e023      	b.n	8002fb4 <HAL_FDCAN_AddMessageToTxFifoQ+0x82>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	22c4      	movs	r2, #196	@ 0xc4
 8002f72:	589b      	ldr	r3, [r3, r2]
 8002f74:	0c1b      	lsrs	r3, r3, #16
 8002f76:	2203      	movs	r2, #3
 8002f78:	4013      	ands	r3, r2
 8002f7a:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	68b9      	ldr	r1, [r7, #8]
 8002f82:	68f8      	ldr	r0, [r7, #12]
 8002f84:	f000 fa1a 	bl	80033bc <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	2101      	movs	r1, #1
 8002f8e:	697a      	ldr	r2, [r7, #20]
 8002f90:	4091      	lsls	r1, r2
 8002f92:	000a      	movs	r2, r1
 8002f94:	21cc      	movs	r1, #204	@ 0xcc
 8002f96:	505a      	str	r2, [r3, r1]

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8002f98:	2201      	movs	r2, #1
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	409a      	lsls	r2, r3
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	e006      	b.n	8002fb4 <HAL_FDCAN_AddMessageToTxFifoQ+0x82>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002faa:	2208      	movs	r2, #8
 8002fac:	431a      	orrs	r2, r3
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
  }
}
 8002fb4:	0018      	movs	r0, r3
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	b006      	add	sp, #24
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b08c      	sub	sp, #48	@ 0x30
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002fca:	23e0      	movs	r3, #224	@ 0xe0
 8002fcc:	015b      	lsls	r3, r3, #5
 8002fce:	4013      	ands	r3, r2
 8002fd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002fd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fda:	4013      	ands	r3, r2
 8002fdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fe4:	2207      	movs	r2, #7
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002ff0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ffc:	2238      	movs	r2, #56	@ 0x38
 8002ffe:	4013      	ands	r3, r2
 8003000:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800300a:	4013      	ands	r3, r2
 800300c:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003014:	23f1      	movs	r3, #241	@ 0xf1
 8003016:	041b      	lsls	r3, r3, #16
 8003018:	4013      	ands	r3, r2
 800301a:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003022:	6a3b      	ldr	r3, [r7, #32]
 8003024:	4013      	ands	r3, r2
 8003026:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800302e:	23e0      	movs	r3, #224	@ 0xe0
 8003030:	031b      	lsls	r3, r3, #12
 8003032:	4013      	ands	r3, r2
 8003034:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	4013      	ands	r3, r2
 8003040:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003048:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003050:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	2240      	movs	r2, #64	@ 0x40
 8003056:	4013      	ands	r3, r2
 8003058:	d00b      	beq.n	8003072 <HAL_FDCAN_IRQHandler+0xb6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 800305a:	69bb      	ldr	r3, [r7, #24]
 800305c:	2240      	movs	r2, #64	@ 0x40
 800305e:	4013      	ands	r3, r2
 8003060:	d007      	beq.n	8003072 <HAL_FDCAN_IRQHandler+0xb6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	2240      	movs	r2, #64	@ 0x40
 8003068:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	0018      	movs	r0, r3
 800306e:	f000 f91f 	bl	80032b0 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8003072:	697a      	ldr	r2, [r7, #20]
 8003074:	2380      	movs	r3, #128	@ 0x80
 8003076:	005b      	lsls	r3, r3, #1
 8003078:	4013      	ands	r3, r2
 800307a:	d01b      	beq.n	80030b4 <HAL_FDCAN_IRQHandler+0xf8>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 800307c:	69ba      	ldr	r2, [r7, #24]
 800307e:	2380      	movs	r3, #128	@ 0x80
 8003080:	005b      	lsls	r3, r3, #1
 8003082:	4013      	ands	r3, r2
 8003084:	d016      	beq.n	80030b4 <HAL_FDCAN_IRQHandler+0xf8>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	22d8      	movs	r2, #216	@ 0xd8
 800308c:	589b      	ldr	r3, [r3, r2]
 800308e:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	22e0      	movs	r2, #224	@ 0xe0
 8003096:	589a      	ldr	r2, [r3, r2]
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	4013      	ands	r3, r2
 800309c:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	2280      	movs	r2, #128	@ 0x80
 80030a4:	0052      	lsls	r2, r2, #1
 80030a6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80030a8:	693a      	ldr	r2, [r7, #16]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	0011      	movs	r1, r2
 80030ae:	0018      	movs	r0, r3
 80030b0:	f000 f8e5 	bl	800327e <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80030b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d009      	beq.n	80030ce <HAL_FDCAN_IRQHandler+0x112>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80030c0:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80030c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	0011      	movs	r1, r2
 80030c8:	0018      	movs	r0, r3
 80030ca:	f000 f8ac 	bl	8003226 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80030ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d009      	beq.n	80030e8 <HAL_FDCAN_IRQHandler+0x12c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80030da:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80030dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	0011      	movs	r1, r2
 80030e2:	0018      	movs	r0, r3
 80030e4:	f000 f8a8 	bl	8003238 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80030e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d009      	beq.n	8003102 <HAL_FDCAN_IRQHandler+0x146>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030f4:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80030f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	0011      	movs	r1, r2
 80030fc:	0018      	movs	r0, r3
 80030fe:	f000 f8a4 	bl	800324a <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8003102:	697a      	ldr	r2, [r7, #20]
 8003104:	2380      	movs	r3, #128	@ 0x80
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	4013      	ands	r3, r2
 800310a:	d00d      	beq.n	8003128 <HAL_FDCAN_IRQHandler+0x16c>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 800310c:	69ba      	ldr	r2, [r7, #24]
 800310e:	2380      	movs	r3, #128	@ 0x80
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	4013      	ands	r3, r2
 8003114:	d008      	beq.n	8003128 <HAL_FDCAN_IRQHandler+0x16c>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	2280      	movs	r2, #128	@ 0x80
 800311c:	0092      	lsls	r2, r2, #2
 800311e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	0018      	movs	r0, r3
 8003124:	f000 f89a 	bl	800325c <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	2280      	movs	r2, #128	@ 0x80
 800312c:	4013      	ands	r3, r2
 800312e:	d019      	beq.n	8003164 <HAL_FDCAN_IRQHandler+0x1a8>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	2280      	movs	r2, #128	@ 0x80
 8003134:	4013      	ands	r3, r2
 8003136:	d015      	beq.n	8003164 <HAL_FDCAN_IRQHandler+0x1a8>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	22d4      	movs	r2, #212	@ 0xd4
 800313e:	589b      	ldr	r3, [r3, r2]
 8003140:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	22dc      	movs	r2, #220	@ 0xdc
 8003148:	589a      	ldr	r2, [r3, r2]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	4013      	ands	r3, r2
 800314e:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	2280      	movs	r2, #128	@ 0x80
 8003156:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8003158:	68fa      	ldr	r2, [r7, #12]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	0011      	movs	r1, r2
 800315e:	0018      	movs	r0, r3
 8003160:	f000 f884 	bl	800326c <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8003164:	697a      	ldr	r2, [r7, #20]
 8003166:	2380      	movs	r3, #128	@ 0x80
 8003168:	019b      	lsls	r3, r3, #6
 800316a:	4013      	ands	r3, r2
 800316c:	d00d      	beq.n	800318a <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 800316e:	69ba      	ldr	r2, [r7, #24]
 8003170:	2380      	movs	r3, #128	@ 0x80
 8003172:	019b      	lsls	r3, r3, #6
 8003174:	4013      	ands	r3, r2
 8003176:	d008      	beq.n	800318a <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	2280      	movs	r2, #128	@ 0x80
 800317e:	0192      	lsls	r2, r2, #6
 8003180:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	0018      	movs	r0, r3
 8003186:	f000 f883 	bl	8003290 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 800318a:	697a      	ldr	r2, [r7, #20]
 800318c:	2380      	movs	r3, #128	@ 0x80
 800318e:	021b      	lsls	r3, r3, #8
 8003190:	4013      	ands	r3, r2
 8003192:	d00d      	beq.n	80031b0 <HAL_FDCAN_IRQHandler+0x1f4>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8003194:	69ba      	ldr	r2, [r7, #24]
 8003196:	2380      	movs	r3, #128	@ 0x80
 8003198:	021b      	lsls	r3, r3, #8
 800319a:	4013      	ands	r3, r2
 800319c:	d008      	beq.n	80031b0 <HAL_FDCAN_IRQHandler+0x1f4>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	2280      	movs	r2, #128	@ 0x80
 80031a4:	0212      	lsls	r2, r2, #8
 80031a6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	0018      	movs	r0, r3
 80031ac:	f000 f878 	bl	80032a0 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 80031b0:	697a      	ldr	r2, [r7, #20]
 80031b2:	2380      	movs	r3, #128	@ 0x80
 80031b4:	01db      	lsls	r3, r3, #7
 80031b6:	4013      	ands	r3, r2
 80031b8:	d00f      	beq.n	80031da <HAL_FDCAN_IRQHandler+0x21e>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 80031ba:	69ba      	ldr	r2, [r7, #24]
 80031bc:	2380      	movs	r3, #128	@ 0x80
 80031be:	01db      	lsls	r3, r3, #7
 80031c0:	4013      	ands	r3, r2
 80031c2:	d00a      	beq.n	80031da <HAL_FDCAN_IRQHandler+0x21e>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2280      	movs	r2, #128	@ 0x80
 80031ca:	01d2      	lsls	r2, r2, #7
 80031cc:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031d2:	2280      	movs	r2, #128	@ 0x80
 80031d4:	431a      	orrs	r2, r3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d009      	beq.n	80031f4 <HAL_FDCAN_IRQHandler+0x238>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	69fa      	ldr	r2, [r7, #28]
 80031e6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80031e8:	69fa      	ldr	r2, [r7, #28]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	0011      	movs	r1, r2
 80031ee:	0018      	movs	r0, r3
 80031f0:	f000 f86e 	bl	80032d0 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80031f4:	6a3b      	ldr	r3, [r7, #32]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d009      	beq.n	800320e <HAL_FDCAN_IRQHandler+0x252>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	6a3a      	ldr	r2, [r7, #32]
 8003200:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003206:	6a3b      	ldr	r3, [r7, #32]
 8003208:	431a      	orrs	r2, r3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003212:	2b00      	cmp	r3, #0
 8003214:	d003      	beq.n	800321e <HAL_FDCAN_IRQHandler+0x262>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	0018      	movs	r0, r3
 800321a:	f000 f851 	bl	80032c0 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800321e:	46c0      	nop			@ (mov r8, r8)
 8003220:	46bd      	mov	sp, r7
 8003222:	b00c      	add	sp, #48	@ 0x30
 8003224:	bd80      	pop	{r7, pc}

08003226 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8003226:	b580      	push	{r7, lr}
 8003228:	b082      	sub	sp, #8
 800322a:	af00      	add	r7, sp, #0
 800322c:	6078      	str	r0, [r7, #4]
 800322e:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8003230:	46c0      	nop			@ (mov r8, r8)
 8003232:	46bd      	mov	sp, r7
 8003234:	b002      	add	sp, #8
 8003236:	bd80      	pop	{r7, pc}

08003238 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b082      	sub	sp, #8
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 8003242:	46c0      	nop			@ (mov r8, r8)
 8003244:	46bd      	mov	sp, r7
 8003246:	b002      	add	sp, #8
 8003248:	bd80      	pop	{r7, pc}

0800324a <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 800324a:	b580      	push	{r7, lr}
 800324c:	b082      	sub	sp, #8
 800324e:	af00      	add	r7, sp, #0
 8003250:	6078      	str	r0, [r7, #4]
 8003252:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8003254:	46c0      	nop			@ (mov r8, r8)
 8003256:	46bd      	mov	sp, r7
 8003258:	b002      	add	sp, #8
 800325a:	bd80      	pop	{r7, pc}

0800325c <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b082      	sub	sp, #8
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8003264:	46c0      	nop			@ (mov r8, r8)
 8003266:	46bd      	mov	sp, r7
 8003268:	b002      	add	sp, #8
 800326a:	bd80      	pop	{r7, pc}

0800326c <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b082      	sub	sp, #8
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8003276:	46c0      	nop			@ (mov r8, r8)
 8003278:	46bd      	mov	sp, r7
 800327a:	b002      	add	sp, #8
 800327c:	bd80      	pop	{r7, pc}

0800327e <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800327e:	b580      	push	{r7, lr}
 8003280:	b082      	sub	sp, #8
 8003282:	af00      	add	r7, sp, #0
 8003284:	6078      	str	r0, [r7, #4]
 8003286:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8003288:	46c0      	nop			@ (mov r8, r8)
 800328a:	46bd      	mov	sp, r7
 800328c:	b002      	add	sp, #8
 800328e:	bd80      	pop	{r7, pc}

08003290 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b082      	sub	sp, #8
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8003298:	46c0      	nop			@ (mov r8, r8)
 800329a:	46bd      	mov	sp, r7
 800329c:	b002      	add	sp, #8
 800329e:	bd80      	pop	{r7, pc}

080032a0 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b082      	sub	sp, #8
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80032a8:	46c0      	nop			@ (mov r8, r8)
 80032aa:	46bd      	mov	sp, r7
 80032ac:	b002      	add	sp, #8
 80032ae:	bd80      	pop	{r7, pc}

080032b0 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b082      	sub	sp, #8
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80032b8:	46c0      	nop			@ (mov r8, r8)
 80032ba:	46bd      	mov	sp, r7
 80032bc:	b002      	add	sp, #8
 80032be:	bd80      	pop	{r7, pc}

080032c0 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b082      	sub	sp, #8
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80032c8:	46c0      	nop			@ (mov r8, r8)
 80032ca:	46bd      	mov	sp, r7
 80032cc:	b002      	add	sp, #8
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b082      	sub	sp, #8
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80032da:	46c0      	nop			@ (mov r8, r8)
 80032dc:	46bd      	mov	sp, r7
 80032de:	b002      	add	sp, #8
 80032e0:	bd80      	pop	{r7, pc}
	...

080032e4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80032ec:	4b2f      	ldr	r3, [pc, #188]	@ (80033ac <FDCAN_CalcultateRamBlockAddresses+0xc8>)
 80032ee:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a2e      	ldr	r2, [pc, #184]	@ (80033b0 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d105      	bne.n	8003306 <FDCAN_CalcultateRamBlockAddresses+0x22>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	22d4      	movs	r2, #212	@ 0xd4
 80032fe:	0092      	lsls	r2, r2, #2
 8003300:	4694      	mov	ip, r2
 8003302:	4463      	add	r3, ip
 8003304:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	68ba      	ldr	r2, [r7, #8]
 800330a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	2280      	movs	r2, #128	@ 0x80
 8003312:	589b      	ldr	r3, [r3, r2]
 8003314:	4a27      	ldr	r2, [pc, #156]	@ (80033b4 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8003316:	4013      	ands	r3, r2
 8003318:	0019      	movs	r1, r3
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800331e:	041a      	lsls	r2, r3, #16
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	430a      	orrs	r2, r1
 8003326:	2180      	movs	r1, #128	@ 0x80
 8003328:	505a      	str	r2, [r3, r1]

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	3370      	adds	r3, #112	@ 0x70
 800332e:	001a      	movs	r2, r3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	2280      	movs	r2, #128	@ 0x80
 800333a:	589b      	ldr	r3, [r3, r2]
 800333c:	4a1e      	ldr	r2, [pc, #120]	@ (80033b8 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 800333e:	4013      	ands	r3, r2
 8003340:	0019      	movs	r1, r3
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003346:	061a      	lsls	r2, r3, #24
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	430a      	orrs	r2, r1
 800334e:	2180      	movs	r1, #128	@ 0x80
 8003350:	505a      	str	r2, [r3, r1]

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	33b0      	adds	r3, #176	@ 0xb0
 8003356:	001a      	movs	r2, r3
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	3389      	adds	r3, #137	@ 0x89
 8003360:	33ff      	adds	r3, #255	@ 0xff
 8003362:	001a      	movs	r2, r3
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	2298      	movs	r2, #152	@ 0x98
 800336c:	0092      	lsls	r2, r2, #2
 800336e:	189a      	adds	r2, r3, r2
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	229e      	movs	r2, #158	@ 0x9e
 8003378:	0092      	lsls	r2, r2, #2
 800337a:	189a      	adds	r2, r3, r2
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	60fb      	str	r3, [r7, #12]
 8003384:	e005      	b.n	8003392 <FDCAN_CalcultateRamBlockAddresses+0xae>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2200      	movs	r2, #0
 800338a:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	3304      	adds	r3, #4
 8003390:	60fb      	str	r3, [r7, #12]
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	22d4      	movs	r2, #212	@ 0xd4
 8003396:	0092      	lsls	r2, r2, #2
 8003398:	4694      	mov	ip, r2
 800339a:	4463      	add	r3, ip
 800339c:	68fa      	ldr	r2, [r7, #12]
 800339e:	429a      	cmp	r2, r3
 80033a0:	d3f1      	bcc.n	8003386 <FDCAN_CalcultateRamBlockAddresses+0xa2>
  }
}
 80033a2:	46c0      	nop			@ (mov r8, r8)
 80033a4:	46c0      	nop			@ (mov r8, r8)
 80033a6:	46bd      	mov	sp, r7
 80033a8:	b004      	add	sp, #16
 80033aa:	bd80      	pop	{r7, pc}
 80033ac:	4000b400 	.word	0x4000b400
 80033b0:	40006800 	.word	0x40006800
 80033b4:	ffe0ffff 	.word	0xffe0ffff
 80033b8:	f0ffffff 	.word	0xf0ffffff

080033bc <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b088      	sub	sp, #32
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	60f8      	str	r0, [r7, #12]
 80033c4:	60b9      	str	r1, [r7, #8]
 80033c6:	607a      	str	r2, [r7, #4]
 80033c8:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d10a      	bne.n	80033e8 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 80033da:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80033e2:	4313      	orrs	r3, r2
 80033e4:	61fb      	str	r3, [r7, #28]
 80033e6:	e00b      	b.n	8003400 <FDCAN_CopyMessageToRAM+0x44>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 80033f0:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 80033f6:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80033f8:	2280      	movs	r2, #128	@ 0x80
 80033fa:	05d2      	lsls	r2, r2, #23
 80033fc:	4313      	orrs	r3, r2
 80033fe:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	6a1b      	ldr	r3, [r3, #32]
 8003404:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800340a:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8003410:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8003416:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800341e:	4313      	orrs	r3, r2
 8003420:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003426:	683a      	ldr	r2, [r7, #0]
 8003428:	0013      	movs	r3, r2
 800342a:	00db      	lsls	r3, r3, #3
 800342c:	189b      	adds	r3, r3, r2
 800342e:	00db      	lsls	r3, r3, #3
 8003430:	18cb      	adds	r3, r1, r3
 8003432:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8003434:	69bb      	ldr	r3, [r7, #24]
 8003436:	69fa      	ldr	r2, [r7, #28]
 8003438:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800343a:	69bb      	ldr	r3, [r7, #24]
 800343c:	3304      	adds	r3, #4
 800343e:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	693a      	ldr	r2, [r7, #16]
 8003444:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8003446:	69bb      	ldr	r3, [r7, #24]
 8003448:	3304      	adds	r3, #4
 800344a:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 800344c:	2300      	movs	r3, #0
 800344e:	617b      	str	r3, [r7, #20]
 8003450:	e020      	b.n	8003494 <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	3303      	adds	r3, #3
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	18d3      	adds	r3, r2, r3
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	3302      	adds	r3, #2
 8003462:	6879      	ldr	r1, [r7, #4]
 8003464:	18cb      	adds	r3, r1, r3
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800346a:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	3301      	adds	r3, #1
 8003470:	6879      	ldr	r1, [r7, #4]
 8003472:	18cb      	adds	r3, r1, r3
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8003478:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 800347a:	6879      	ldr	r1, [r7, #4]
 800347c:	697a      	ldr	r2, [r7, #20]
 800347e:	188a      	adds	r2, r1, r2
 8003480:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8003482:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8003488:	69bb      	ldr	r3, [r7, #24]
 800348a:	3304      	adds	r3, #4
 800348c:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	3304      	adds	r3, #4
 8003492:	617b      	str	r3, [r7, #20]
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	4a05      	ldr	r2, [pc, #20]	@ (80034b0 <FDCAN_CopyMessageToRAM+0xf4>)
 800349a:	5cd3      	ldrb	r3, [r2, r3]
 800349c:	001a      	movs	r2, r3
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d3d6      	bcc.n	8003452 <FDCAN_CopyMessageToRAM+0x96>
  }
}
 80034a4:	46c0      	nop			@ (mov r8, r8)
 80034a6:	46c0      	nop			@ (mov r8, r8)
 80034a8:	46bd      	mov	sp, r7
 80034aa:	b008      	add	sp, #32
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	46c0      	nop			@ (mov r8, r8)
 80034b0:	08007acc 	.word	0x08007acc

080034b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b086      	sub	sp, #24
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80034be:	2300      	movs	r3, #0
 80034c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034c2:	e14d      	b.n	8003760 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	2101      	movs	r1, #1
 80034ca:	697a      	ldr	r2, [r7, #20]
 80034cc:	4091      	lsls	r1, r2
 80034ce:	000a      	movs	r2, r1
 80034d0:	4013      	ands	r3, r2
 80034d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d100      	bne.n	80034dc <HAL_GPIO_Init+0x28>
 80034da:	e13e      	b.n	800375a <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	2203      	movs	r2, #3
 80034e2:	4013      	ands	r3, r2
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d005      	beq.n	80034f4 <HAL_GPIO_Init+0x40>
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	2203      	movs	r2, #3
 80034ee:	4013      	ands	r3, r2
 80034f0:	2b02      	cmp	r3, #2
 80034f2:	d130      	bne.n	8003556 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	005b      	lsls	r3, r3, #1
 80034fe:	2203      	movs	r2, #3
 8003500:	409a      	lsls	r2, r3
 8003502:	0013      	movs	r3, r2
 8003504:	43da      	mvns	r2, r3
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	4013      	ands	r3, r2
 800350a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	68da      	ldr	r2, [r3, #12]
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	005b      	lsls	r3, r3, #1
 8003514:	409a      	lsls	r2, r3
 8003516:	0013      	movs	r3, r2
 8003518:	693a      	ldr	r2, [r7, #16]
 800351a:	4313      	orrs	r3, r2
 800351c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	693a      	ldr	r2, [r7, #16]
 8003522:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800352a:	2201      	movs	r2, #1
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	409a      	lsls	r2, r3
 8003530:	0013      	movs	r3, r2
 8003532:	43da      	mvns	r2, r3
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	4013      	ands	r3, r2
 8003538:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	091b      	lsrs	r3, r3, #4
 8003540:	2201      	movs	r2, #1
 8003542:	401a      	ands	r2, r3
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	409a      	lsls	r2, r3
 8003548:	0013      	movs	r3, r2
 800354a:	693a      	ldr	r2, [r7, #16]
 800354c:	4313      	orrs	r3, r2
 800354e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	693a      	ldr	r2, [r7, #16]
 8003554:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	2203      	movs	r2, #3
 800355c:	4013      	ands	r3, r2
 800355e:	2b03      	cmp	r3, #3
 8003560:	d017      	beq.n	8003592 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	005b      	lsls	r3, r3, #1
 800356c:	2203      	movs	r2, #3
 800356e:	409a      	lsls	r2, r3
 8003570:	0013      	movs	r3, r2
 8003572:	43da      	mvns	r2, r3
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	4013      	ands	r3, r2
 8003578:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	689a      	ldr	r2, [r3, #8]
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	005b      	lsls	r3, r3, #1
 8003582:	409a      	lsls	r2, r3
 8003584:	0013      	movs	r3, r2
 8003586:	693a      	ldr	r2, [r7, #16]
 8003588:	4313      	orrs	r3, r2
 800358a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	693a      	ldr	r2, [r7, #16]
 8003590:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	2203      	movs	r2, #3
 8003598:	4013      	ands	r3, r2
 800359a:	2b02      	cmp	r3, #2
 800359c:	d123      	bne.n	80035e6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	08da      	lsrs	r2, r3, #3
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	3208      	adds	r2, #8
 80035a6:	0092      	lsls	r2, r2, #2
 80035a8:	58d3      	ldr	r3, [r2, r3]
 80035aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	2207      	movs	r2, #7
 80035b0:	4013      	ands	r3, r2
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	220f      	movs	r2, #15
 80035b6:	409a      	lsls	r2, r3
 80035b8:	0013      	movs	r3, r2
 80035ba:	43da      	mvns	r2, r3
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	4013      	ands	r3, r2
 80035c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	691a      	ldr	r2, [r3, #16]
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	2107      	movs	r1, #7
 80035ca:	400b      	ands	r3, r1
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	409a      	lsls	r2, r3
 80035d0:	0013      	movs	r3, r2
 80035d2:	693a      	ldr	r2, [r7, #16]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	08da      	lsrs	r2, r3, #3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	3208      	adds	r2, #8
 80035e0:	0092      	lsls	r2, r2, #2
 80035e2:	6939      	ldr	r1, [r7, #16]
 80035e4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	005b      	lsls	r3, r3, #1
 80035f0:	2203      	movs	r2, #3
 80035f2:	409a      	lsls	r2, r3
 80035f4:	0013      	movs	r3, r2
 80035f6:	43da      	mvns	r2, r3
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	4013      	ands	r3, r2
 80035fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	2203      	movs	r2, #3
 8003604:	401a      	ands	r2, r3
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	005b      	lsls	r3, r3, #1
 800360a:	409a      	lsls	r2, r3
 800360c:	0013      	movs	r3, r2
 800360e:	693a      	ldr	r2, [r7, #16]
 8003610:	4313      	orrs	r3, r2
 8003612:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	693a      	ldr	r2, [r7, #16]
 8003618:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	685a      	ldr	r2, [r3, #4]
 800361e:	23c0      	movs	r3, #192	@ 0xc0
 8003620:	029b      	lsls	r3, r3, #10
 8003622:	4013      	ands	r3, r2
 8003624:	d100      	bne.n	8003628 <HAL_GPIO_Init+0x174>
 8003626:	e098      	b.n	800375a <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003628:	4a53      	ldr	r2, [pc, #332]	@ (8003778 <HAL_GPIO_Init+0x2c4>)
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	089b      	lsrs	r3, r3, #2
 800362e:	3318      	adds	r3, #24
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	589b      	ldr	r3, [r3, r2]
 8003634:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	2203      	movs	r2, #3
 800363a:	4013      	ands	r3, r2
 800363c:	00db      	lsls	r3, r3, #3
 800363e:	220f      	movs	r2, #15
 8003640:	409a      	lsls	r2, r3
 8003642:	0013      	movs	r3, r2
 8003644:	43da      	mvns	r2, r3
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	4013      	ands	r3, r2
 800364a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	23a0      	movs	r3, #160	@ 0xa0
 8003650:	05db      	lsls	r3, r3, #23
 8003652:	429a      	cmp	r2, r3
 8003654:	d019      	beq.n	800368a <HAL_GPIO_Init+0x1d6>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4a48      	ldr	r2, [pc, #288]	@ (800377c <HAL_GPIO_Init+0x2c8>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d013      	beq.n	8003686 <HAL_GPIO_Init+0x1d2>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4a47      	ldr	r2, [pc, #284]	@ (8003780 <HAL_GPIO_Init+0x2cc>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d00d      	beq.n	8003682 <HAL_GPIO_Init+0x1ce>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4a46      	ldr	r2, [pc, #280]	@ (8003784 <HAL_GPIO_Init+0x2d0>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d007      	beq.n	800367e <HAL_GPIO_Init+0x1ca>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4a45      	ldr	r2, [pc, #276]	@ (8003788 <HAL_GPIO_Init+0x2d4>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d101      	bne.n	800367a <HAL_GPIO_Init+0x1c6>
 8003676:	2304      	movs	r3, #4
 8003678:	e008      	b.n	800368c <HAL_GPIO_Init+0x1d8>
 800367a:	2305      	movs	r3, #5
 800367c:	e006      	b.n	800368c <HAL_GPIO_Init+0x1d8>
 800367e:	2303      	movs	r3, #3
 8003680:	e004      	b.n	800368c <HAL_GPIO_Init+0x1d8>
 8003682:	2302      	movs	r3, #2
 8003684:	e002      	b.n	800368c <HAL_GPIO_Init+0x1d8>
 8003686:	2301      	movs	r3, #1
 8003688:	e000      	b.n	800368c <HAL_GPIO_Init+0x1d8>
 800368a:	2300      	movs	r3, #0
 800368c:	697a      	ldr	r2, [r7, #20]
 800368e:	2103      	movs	r1, #3
 8003690:	400a      	ands	r2, r1
 8003692:	00d2      	lsls	r2, r2, #3
 8003694:	4093      	lsls	r3, r2
 8003696:	693a      	ldr	r2, [r7, #16]
 8003698:	4313      	orrs	r3, r2
 800369a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800369c:	4936      	ldr	r1, [pc, #216]	@ (8003778 <HAL_GPIO_Init+0x2c4>)
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	089b      	lsrs	r3, r3, #2
 80036a2:	3318      	adds	r3, #24
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	693a      	ldr	r2, [r7, #16]
 80036a8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80036aa:	4b33      	ldr	r3, [pc, #204]	@ (8003778 <HAL_GPIO_Init+0x2c4>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	43da      	mvns	r2, r3
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	4013      	ands	r3, r2
 80036b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	685a      	ldr	r2, [r3, #4]
 80036be:	2380      	movs	r3, #128	@ 0x80
 80036c0:	035b      	lsls	r3, r3, #13
 80036c2:	4013      	ands	r3, r2
 80036c4:	d003      	beq.n	80036ce <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80036c6:	693a      	ldr	r2, [r7, #16]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80036ce:	4b2a      	ldr	r3, [pc, #168]	@ (8003778 <HAL_GPIO_Init+0x2c4>)
 80036d0:	693a      	ldr	r2, [r7, #16]
 80036d2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80036d4:	4b28      	ldr	r3, [pc, #160]	@ (8003778 <HAL_GPIO_Init+0x2c4>)
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	43da      	mvns	r2, r3
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	4013      	ands	r3, r2
 80036e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	685a      	ldr	r2, [r3, #4]
 80036e8:	2380      	movs	r3, #128	@ 0x80
 80036ea:	039b      	lsls	r3, r3, #14
 80036ec:	4013      	ands	r3, r2
 80036ee:	d003      	beq.n	80036f8 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80036f0:	693a      	ldr	r2, [r7, #16]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	4313      	orrs	r3, r2
 80036f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80036f8:	4b1f      	ldr	r3, [pc, #124]	@ (8003778 <HAL_GPIO_Init+0x2c4>)
 80036fa:	693a      	ldr	r2, [r7, #16]
 80036fc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80036fe:	4a1e      	ldr	r2, [pc, #120]	@ (8003778 <HAL_GPIO_Init+0x2c4>)
 8003700:	2384      	movs	r3, #132	@ 0x84
 8003702:	58d3      	ldr	r3, [r2, r3]
 8003704:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	43da      	mvns	r2, r3
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	4013      	ands	r3, r2
 800370e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	685a      	ldr	r2, [r3, #4]
 8003714:	2380      	movs	r3, #128	@ 0x80
 8003716:	029b      	lsls	r3, r3, #10
 8003718:	4013      	ands	r3, r2
 800371a:	d003      	beq.n	8003724 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800371c:	693a      	ldr	r2, [r7, #16]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	4313      	orrs	r3, r2
 8003722:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003724:	4914      	ldr	r1, [pc, #80]	@ (8003778 <HAL_GPIO_Init+0x2c4>)
 8003726:	2284      	movs	r2, #132	@ 0x84
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800372c:	4a12      	ldr	r2, [pc, #72]	@ (8003778 <HAL_GPIO_Init+0x2c4>)
 800372e:	2380      	movs	r3, #128	@ 0x80
 8003730:	58d3      	ldr	r3, [r2, r3]
 8003732:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	43da      	mvns	r2, r3
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	4013      	ands	r3, r2
 800373c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	685a      	ldr	r2, [r3, #4]
 8003742:	2380      	movs	r3, #128	@ 0x80
 8003744:	025b      	lsls	r3, r3, #9
 8003746:	4013      	ands	r3, r2
 8003748:	d003      	beq.n	8003752 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800374a:	693a      	ldr	r2, [r7, #16]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	4313      	orrs	r3, r2
 8003750:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003752:	4909      	ldr	r1, [pc, #36]	@ (8003778 <HAL_GPIO_Init+0x2c4>)
 8003754:	2280      	movs	r2, #128	@ 0x80
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	3301      	adds	r3, #1
 800375e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	40da      	lsrs	r2, r3
 8003768:	1e13      	subs	r3, r2, #0
 800376a:	d000      	beq.n	800376e <HAL_GPIO_Init+0x2ba>
 800376c:	e6aa      	b.n	80034c4 <HAL_GPIO_Init+0x10>
  }
}
 800376e:	46c0      	nop			@ (mov r8, r8)
 8003770:	46c0      	nop			@ (mov r8, r8)
 8003772:	46bd      	mov	sp, r7
 8003774:	b006      	add	sp, #24
 8003776:	bd80      	pop	{r7, pc}
 8003778:	40021800 	.word	0x40021800
 800377c:	50000400 	.word	0x50000400
 8003780:	50000800 	.word	0x50000800
 8003784:	50000c00 	.word	0x50000c00
 8003788:	50001000 	.word	0x50001000

0800378c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b082      	sub	sp, #8
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
 8003794:	0008      	movs	r0, r1
 8003796:	0011      	movs	r1, r2
 8003798:	1cbb      	adds	r3, r7, #2
 800379a:	1c02      	adds	r2, r0, #0
 800379c:	801a      	strh	r2, [r3, #0]
 800379e:	1c7b      	adds	r3, r7, #1
 80037a0:	1c0a      	adds	r2, r1, #0
 80037a2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80037a4:	1c7b      	adds	r3, r7, #1
 80037a6:	781b      	ldrb	r3, [r3, #0]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d004      	beq.n	80037b6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80037ac:	1cbb      	adds	r3, r7, #2
 80037ae:	881a      	ldrh	r2, [r3, #0]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80037b4:	e003      	b.n	80037be <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80037b6:	1cbb      	adds	r3, r7, #2
 80037b8:	881a      	ldrh	r2, [r3, #0]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80037be:	46c0      	nop			@ (mov r8, r8)
 80037c0:	46bd      	mov	sp, r7
 80037c2:	b002      	add	sp, #8
 80037c4:	bd80      	pop	{r7, pc}
	...

080037c8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b084      	sub	sp, #16
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80037d0:	4b19      	ldr	r3, [pc, #100]	@ (8003838 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a19      	ldr	r2, [pc, #100]	@ (800383c <HAL_PWREx_ControlVoltageScaling+0x74>)
 80037d6:	4013      	ands	r3, r2
 80037d8:	0019      	movs	r1, r3
 80037da:	4b17      	ldr	r3, [pc, #92]	@ (8003838 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	430a      	orrs	r2, r1
 80037e0:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	2380      	movs	r3, #128	@ 0x80
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d11f      	bne.n	800382c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80037ec:	4b14      	ldr	r3, [pc, #80]	@ (8003840 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	0013      	movs	r3, r2
 80037f2:	005b      	lsls	r3, r3, #1
 80037f4:	189b      	adds	r3, r3, r2
 80037f6:	005b      	lsls	r3, r3, #1
 80037f8:	4912      	ldr	r1, [pc, #72]	@ (8003844 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80037fa:	0018      	movs	r0, r3
 80037fc:	f7fc fc8c 	bl	8000118 <__udivsi3>
 8003800:	0003      	movs	r3, r0
 8003802:	3301      	adds	r3, #1
 8003804:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003806:	e008      	b.n	800381a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d003      	beq.n	8003816 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	3b01      	subs	r3, #1
 8003812:	60fb      	str	r3, [r7, #12]
 8003814:	e001      	b.n	800381a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e009      	b.n	800382e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800381a:	4b07      	ldr	r3, [pc, #28]	@ (8003838 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800381c:	695a      	ldr	r2, [r3, #20]
 800381e:	2380      	movs	r3, #128	@ 0x80
 8003820:	00db      	lsls	r3, r3, #3
 8003822:	401a      	ands	r2, r3
 8003824:	2380      	movs	r3, #128	@ 0x80
 8003826:	00db      	lsls	r3, r3, #3
 8003828:	429a      	cmp	r2, r3
 800382a:	d0ed      	beq.n	8003808 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800382c:	2300      	movs	r3, #0
}
 800382e:	0018      	movs	r0, r3
 8003830:	46bd      	mov	sp, r7
 8003832:	b004      	add	sp, #16
 8003834:	bd80      	pop	{r7, pc}
 8003836:	46c0      	nop			@ (mov r8, r8)
 8003838:	40007000 	.word	0x40007000
 800383c:	fffff9ff 	.word	0xfffff9ff
 8003840:	20000010 	.word	0x20000010
 8003844:	000f4240 	.word	0x000f4240

08003848 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800384c:	4b03      	ldr	r3, [pc, #12]	@ (800385c <LL_RCC_GetAPB1Prescaler+0x14>)
 800384e:	689a      	ldr	r2, [r3, #8]
 8003850:	23e0      	movs	r3, #224	@ 0xe0
 8003852:	01db      	lsls	r3, r3, #7
 8003854:	4013      	ands	r3, r2
}
 8003856:	0018      	movs	r0, r3
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}
 800385c:	40021000 	.word	0x40021000

08003860 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b088      	sub	sp, #32
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d102      	bne.n	8003874 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	f000 fb50 	bl	8003f14 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	2201      	movs	r2, #1
 800387a:	4013      	ands	r3, r2
 800387c:	d100      	bne.n	8003880 <HAL_RCC_OscConfig+0x20>
 800387e:	e07c      	b.n	800397a <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003880:	4bc3      	ldr	r3, [pc, #780]	@ (8003b90 <HAL_RCC_OscConfig+0x330>)
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	2238      	movs	r2, #56	@ 0x38
 8003886:	4013      	ands	r3, r2
 8003888:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800388a:	4bc1      	ldr	r3, [pc, #772]	@ (8003b90 <HAL_RCC_OscConfig+0x330>)
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	2203      	movs	r2, #3
 8003890:	4013      	ands	r3, r2
 8003892:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003894:	69bb      	ldr	r3, [r7, #24]
 8003896:	2b10      	cmp	r3, #16
 8003898:	d102      	bne.n	80038a0 <HAL_RCC_OscConfig+0x40>
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	2b03      	cmp	r3, #3
 800389e:	d002      	beq.n	80038a6 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80038a0:	69bb      	ldr	r3, [r7, #24]
 80038a2:	2b08      	cmp	r3, #8
 80038a4:	d10b      	bne.n	80038be <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038a6:	4bba      	ldr	r3, [pc, #744]	@ (8003b90 <HAL_RCC_OscConfig+0x330>)
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	2380      	movs	r3, #128	@ 0x80
 80038ac:	029b      	lsls	r3, r3, #10
 80038ae:	4013      	ands	r3, r2
 80038b0:	d062      	beq.n	8003978 <HAL_RCC_OscConfig+0x118>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d15e      	bne.n	8003978 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e32a      	b.n	8003f14 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	685a      	ldr	r2, [r3, #4]
 80038c2:	2380      	movs	r3, #128	@ 0x80
 80038c4:	025b      	lsls	r3, r3, #9
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d107      	bne.n	80038da <HAL_RCC_OscConfig+0x7a>
 80038ca:	4bb1      	ldr	r3, [pc, #708]	@ (8003b90 <HAL_RCC_OscConfig+0x330>)
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	4bb0      	ldr	r3, [pc, #704]	@ (8003b90 <HAL_RCC_OscConfig+0x330>)
 80038d0:	2180      	movs	r1, #128	@ 0x80
 80038d2:	0249      	lsls	r1, r1, #9
 80038d4:	430a      	orrs	r2, r1
 80038d6:	601a      	str	r2, [r3, #0]
 80038d8:	e020      	b.n	800391c <HAL_RCC_OscConfig+0xbc>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	685a      	ldr	r2, [r3, #4]
 80038de:	23a0      	movs	r3, #160	@ 0xa0
 80038e0:	02db      	lsls	r3, r3, #11
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d10e      	bne.n	8003904 <HAL_RCC_OscConfig+0xa4>
 80038e6:	4baa      	ldr	r3, [pc, #680]	@ (8003b90 <HAL_RCC_OscConfig+0x330>)
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	4ba9      	ldr	r3, [pc, #676]	@ (8003b90 <HAL_RCC_OscConfig+0x330>)
 80038ec:	2180      	movs	r1, #128	@ 0x80
 80038ee:	02c9      	lsls	r1, r1, #11
 80038f0:	430a      	orrs	r2, r1
 80038f2:	601a      	str	r2, [r3, #0]
 80038f4:	4ba6      	ldr	r3, [pc, #664]	@ (8003b90 <HAL_RCC_OscConfig+0x330>)
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	4ba5      	ldr	r3, [pc, #660]	@ (8003b90 <HAL_RCC_OscConfig+0x330>)
 80038fa:	2180      	movs	r1, #128	@ 0x80
 80038fc:	0249      	lsls	r1, r1, #9
 80038fe:	430a      	orrs	r2, r1
 8003900:	601a      	str	r2, [r3, #0]
 8003902:	e00b      	b.n	800391c <HAL_RCC_OscConfig+0xbc>
 8003904:	4ba2      	ldr	r3, [pc, #648]	@ (8003b90 <HAL_RCC_OscConfig+0x330>)
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	4ba1      	ldr	r3, [pc, #644]	@ (8003b90 <HAL_RCC_OscConfig+0x330>)
 800390a:	49a2      	ldr	r1, [pc, #648]	@ (8003b94 <HAL_RCC_OscConfig+0x334>)
 800390c:	400a      	ands	r2, r1
 800390e:	601a      	str	r2, [r3, #0]
 8003910:	4b9f      	ldr	r3, [pc, #636]	@ (8003b90 <HAL_RCC_OscConfig+0x330>)
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	4b9e      	ldr	r3, [pc, #632]	@ (8003b90 <HAL_RCC_OscConfig+0x330>)
 8003916:	49a0      	ldr	r1, [pc, #640]	@ (8003b98 <HAL_RCC_OscConfig+0x338>)
 8003918:	400a      	ands	r2, r1
 800391a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d014      	beq.n	800394e <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003924:	f7fe fc32 	bl	800218c <HAL_GetTick>
 8003928:	0003      	movs	r3, r0
 800392a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800392c:	e008      	b.n	8003940 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800392e:	f7fe fc2d 	bl	800218c <HAL_GetTick>
 8003932:	0002      	movs	r2, r0
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	2b64      	cmp	r3, #100	@ 0x64
 800393a:	d901      	bls.n	8003940 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 800393c:	2303      	movs	r3, #3
 800393e:	e2e9      	b.n	8003f14 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003940:	4b93      	ldr	r3, [pc, #588]	@ (8003b90 <HAL_RCC_OscConfig+0x330>)
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	2380      	movs	r3, #128	@ 0x80
 8003946:	029b      	lsls	r3, r3, #10
 8003948:	4013      	ands	r3, r2
 800394a:	d0f0      	beq.n	800392e <HAL_RCC_OscConfig+0xce>
 800394c:	e015      	b.n	800397a <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800394e:	f7fe fc1d 	bl	800218c <HAL_GetTick>
 8003952:	0003      	movs	r3, r0
 8003954:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003956:	e008      	b.n	800396a <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003958:	f7fe fc18 	bl	800218c <HAL_GetTick>
 800395c:	0002      	movs	r2, r0
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	2b64      	cmp	r3, #100	@ 0x64
 8003964:	d901      	bls.n	800396a <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8003966:	2303      	movs	r3, #3
 8003968:	e2d4      	b.n	8003f14 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800396a:	4b89      	ldr	r3, [pc, #548]	@ (8003b90 <HAL_RCC_OscConfig+0x330>)
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	2380      	movs	r3, #128	@ 0x80
 8003970:	029b      	lsls	r3, r3, #10
 8003972:	4013      	ands	r3, r2
 8003974:	d1f0      	bne.n	8003958 <HAL_RCC_OscConfig+0xf8>
 8003976:	e000      	b.n	800397a <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003978:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	2202      	movs	r2, #2
 8003980:	4013      	ands	r3, r2
 8003982:	d100      	bne.n	8003986 <HAL_RCC_OscConfig+0x126>
 8003984:	e099      	b.n	8003aba <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003986:	4b82      	ldr	r3, [pc, #520]	@ (8003b90 <HAL_RCC_OscConfig+0x330>)
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	2238      	movs	r2, #56	@ 0x38
 800398c:	4013      	ands	r3, r2
 800398e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003990:	4b7f      	ldr	r3, [pc, #508]	@ (8003b90 <HAL_RCC_OscConfig+0x330>)
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	2203      	movs	r2, #3
 8003996:	4013      	ands	r3, r2
 8003998:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	2b10      	cmp	r3, #16
 800399e:	d102      	bne.n	80039a6 <HAL_RCC_OscConfig+0x146>
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d002      	beq.n	80039ac <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80039a6:	69bb      	ldr	r3, [r7, #24]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d135      	bne.n	8003a18 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039ac:	4b78      	ldr	r3, [pc, #480]	@ (8003b90 <HAL_RCC_OscConfig+0x330>)
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	2380      	movs	r3, #128	@ 0x80
 80039b2:	00db      	lsls	r3, r3, #3
 80039b4:	4013      	ands	r3, r2
 80039b6:	d005      	beq.n	80039c4 <HAL_RCC_OscConfig+0x164>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d101      	bne.n	80039c4 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e2a7      	b.n	8003f14 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039c4:	4b72      	ldr	r3, [pc, #456]	@ (8003b90 <HAL_RCC_OscConfig+0x330>)
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	4a74      	ldr	r2, [pc, #464]	@ (8003b9c <HAL_RCC_OscConfig+0x33c>)
 80039ca:	4013      	ands	r3, r2
 80039cc:	0019      	movs	r1, r3
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	695b      	ldr	r3, [r3, #20]
 80039d2:	021a      	lsls	r2, r3, #8
 80039d4:	4b6e      	ldr	r3, [pc, #440]	@ (8003b90 <HAL_RCC_OscConfig+0x330>)
 80039d6:	430a      	orrs	r2, r1
 80039d8:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80039da:	69bb      	ldr	r3, [r7, #24]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d112      	bne.n	8003a06 <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80039e0:	4b6b      	ldr	r3, [pc, #428]	@ (8003b90 <HAL_RCC_OscConfig+0x330>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a6e      	ldr	r2, [pc, #440]	@ (8003ba0 <HAL_RCC_OscConfig+0x340>)
 80039e6:	4013      	ands	r3, r2
 80039e8:	0019      	movs	r1, r3
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	691a      	ldr	r2, [r3, #16]
 80039ee:	4b68      	ldr	r3, [pc, #416]	@ (8003b90 <HAL_RCC_OscConfig+0x330>)
 80039f0:	430a      	orrs	r2, r1
 80039f2:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80039f4:	4b66      	ldr	r3, [pc, #408]	@ (8003b90 <HAL_RCC_OscConfig+0x330>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	0adb      	lsrs	r3, r3, #11
 80039fa:	2207      	movs	r2, #7
 80039fc:	4013      	ands	r3, r2
 80039fe:	4a69      	ldr	r2, [pc, #420]	@ (8003ba4 <HAL_RCC_OscConfig+0x344>)
 8003a00:	40da      	lsrs	r2, r3
 8003a02:	4b69      	ldr	r3, [pc, #420]	@ (8003ba8 <HAL_RCC_OscConfig+0x348>)
 8003a04:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003a06:	4b69      	ldr	r3, [pc, #420]	@ (8003bac <HAL_RCC_OscConfig+0x34c>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	0018      	movs	r0, r3
 8003a0c:	f7fe fb62 	bl	80020d4 <HAL_InitTick>
 8003a10:	1e03      	subs	r3, r0, #0
 8003a12:	d051      	beq.n	8003ab8 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e27d      	b.n	8003f14 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d030      	beq.n	8003a82 <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003a20:	4b5b      	ldr	r3, [pc, #364]	@ (8003b90 <HAL_RCC_OscConfig+0x330>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a5e      	ldr	r2, [pc, #376]	@ (8003ba0 <HAL_RCC_OscConfig+0x340>)
 8003a26:	4013      	ands	r3, r2
 8003a28:	0019      	movs	r1, r3
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	691a      	ldr	r2, [r3, #16]
 8003a2e:	4b58      	ldr	r3, [pc, #352]	@ (8003b90 <HAL_RCC_OscConfig+0x330>)
 8003a30:	430a      	orrs	r2, r1
 8003a32:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003a34:	4b56      	ldr	r3, [pc, #344]	@ (8003b90 <HAL_RCC_OscConfig+0x330>)
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	4b55      	ldr	r3, [pc, #340]	@ (8003b90 <HAL_RCC_OscConfig+0x330>)
 8003a3a:	2180      	movs	r1, #128	@ 0x80
 8003a3c:	0049      	lsls	r1, r1, #1
 8003a3e:	430a      	orrs	r2, r1
 8003a40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a42:	f7fe fba3 	bl	800218c <HAL_GetTick>
 8003a46:	0003      	movs	r3, r0
 8003a48:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a4a:	e008      	b.n	8003a5e <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a4c:	f7fe fb9e 	bl	800218c <HAL_GetTick>
 8003a50:	0002      	movs	r2, r0
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	1ad3      	subs	r3, r2, r3
 8003a56:	2b02      	cmp	r3, #2
 8003a58:	d901      	bls.n	8003a5e <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	e25a      	b.n	8003f14 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a5e:	4b4c      	ldr	r3, [pc, #304]	@ (8003b90 <HAL_RCC_OscConfig+0x330>)
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	2380      	movs	r3, #128	@ 0x80
 8003a64:	00db      	lsls	r3, r3, #3
 8003a66:	4013      	ands	r3, r2
 8003a68:	d0f0      	beq.n	8003a4c <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a6a:	4b49      	ldr	r3, [pc, #292]	@ (8003b90 <HAL_RCC_OscConfig+0x330>)
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	4a4b      	ldr	r2, [pc, #300]	@ (8003b9c <HAL_RCC_OscConfig+0x33c>)
 8003a70:	4013      	ands	r3, r2
 8003a72:	0019      	movs	r1, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	695b      	ldr	r3, [r3, #20]
 8003a78:	021a      	lsls	r2, r3, #8
 8003a7a:	4b45      	ldr	r3, [pc, #276]	@ (8003b90 <HAL_RCC_OscConfig+0x330>)
 8003a7c:	430a      	orrs	r2, r1
 8003a7e:	605a      	str	r2, [r3, #4]
 8003a80:	e01b      	b.n	8003aba <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003a82:	4b43      	ldr	r3, [pc, #268]	@ (8003b90 <HAL_RCC_OscConfig+0x330>)
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	4b42      	ldr	r3, [pc, #264]	@ (8003b90 <HAL_RCC_OscConfig+0x330>)
 8003a88:	4949      	ldr	r1, [pc, #292]	@ (8003bb0 <HAL_RCC_OscConfig+0x350>)
 8003a8a:	400a      	ands	r2, r1
 8003a8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a8e:	f7fe fb7d 	bl	800218c <HAL_GetTick>
 8003a92:	0003      	movs	r3, r0
 8003a94:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a96:	e008      	b.n	8003aaa <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a98:	f7fe fb78 	bl	800218c <HAL_GetTick>
 8003a9c:	0002      	movs	r2, r0
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	2b02      	cmp	r3, #2
 8003aa4:	d901      	bls.n	8003aaa <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e234      	b.n	8003f14 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003aaa:	4b39      	ldr	r3, [pc, #228]	@ (8003b90 <HAL_RCC_OscConfig+0x330>)
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	2380      	movs	r3, #128	@ 0x80
 8003ab0:	00db      	lsls	r3, r3, #3
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	d1f0      	bne.n	8003a98 <HAL_RCC_OscConfig+0x238>
 8003ab6:	e000      	b.n	8003aba <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ab8:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	2208      	movs	r2, #8
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	d047      	beq.n	8003b54 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003ac4:	4b32      	ldr	r3, [pc, #200]	@ (8003b90 <HAL_RCC_OscConfig+0x330>)
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	2238      	movs	r2, #56	@ 0x38
 8003aca:	4013      	ands	r3, r2
 8003acc:	2b18      	cmp	r3, #24
 8003ace:	d10a      	bne.n	8003ae6 <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003ad0:	4b2f      	ldr	r3, [pc, #188]	@ (8003b90 <HAL_RCC_OscConfig+0x330>)
 8003ad2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ad4:	2202      	movs	r2, #2
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	d03c      	beq.n	8003b54 <HAL_RCC_OscConfig+0x2f4>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	699b      	ldr	r3, [r3, #24]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d138      	bne.n	8003b54 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e216      	b.n	8003f14 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	699b      	ldr	r3, [r3, #24]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d019      	beq.n	8003b22 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003aee:	4b28      	ldr	r3, [pc, #160]	@ (8003b90 <HAL_RCC_OscConfig+0x330>)
 8003af0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003af2:	4b27      	ldr	r3, [pc, #156]	@ (8003b90 <HAL_RCC_OscConfig+0x330>)
 8003af4:	2101      	movs	r1, #1
 8003af6:	430a      	orrs	r2, r1
 8003af8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003afa:	f7fe fb47 	bl	800218c <HAL_GetTick>
 8003afe:	0003      	movs	r3, r0
 8003b00:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b02:	e008      	b.n	8003b16 <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b04:	f7fe fb42 	bl	800218c <HAL_GetTick>
 8003b08:	0002      	movs	r2, r0
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	2b02      	cmp	r3, #2
 8003b10:	d901      	bls.n	8003b16 <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	e1fe      	b.n	8003f14 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b16:	4b1e      	ldr	r3, [pc, #120]	@ (8003b90 <HAL_RCC_OscConfig+0x330>)
 8003b18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b1a:	2202      	movs	r2, #2
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	d0f1      	beq.n	8003b04 <HAL_RCC_OscConfig+0x2a4>
 8003b20:	e018      	b.n	8003b54 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003b22:	4b1b      	ldr	r3, [pc, #108]	@ (8003b90 <HAL_RCC_OscConfig+0x330>)
 8003b24:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003b26:	4b1a      	ldr	r3, [pc, #104]	@ (8003b90 <HAL_RCC_OscConfig+0x330>)
 8003b28:	2101      	movs	r1, #1
 8003b2a:	438a      	bics	r2, r1
 8003b2c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b2e:	f7fe fb2d 	bl	800218c <HAL_GetTick>
 8003b32:	0003      	movs	r3, r0
 8003b34:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b36:	e008      	b.n	8003b4a <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b38:	f7fe fb28 	bl	800218c <HAL_GetTick>
 8003b3c:	0002      	movs	r2, r0
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	1ad3      	subs	r3, r2, r3
 8003b42:	2b02      	cmp	r3, #2
 8003b44:	d901      	bls.n	8003b4a <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	e1e4      	b.n	8003f14 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b4a:	4b11      	ldr	r3, [pc, #68]	@ (8003b90 <HAL_RCC_OscConfig+0x330>)
 8003b4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b4e:	2202      	movs	r2, #2
 8003b50:	4013      	ands	r3, r2
 8003b52:	d1f1      	bne.n	8003b38 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	2204      	movs	r2, #4
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	d100      	bne.n	8003b60 <HAL_RCC_OscConfig+0x300>
 8003b5e:	e0c7      	b.n	8003cf0 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b60:	231f      	movs	r3, #31
 8003b62:	18fb      	adds	r3, r7, r3
 8003b64:	2200      	movs	r2, #0
 8003b66:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003b68:	4b09      	ldr	r3, [pc, #36]	@ (8003b90 <HAL_RCC_OscConfig+0x330>)
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	2238      	movs	r2, #56	@ 0x38
 8003b6e:	4013      	ands	r3, r2
 8003b70:	2b20      	cmp	r3, #32
 8003b72:	d11f      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003b74:	4b06      	ldr	r3, [pc, #24]	@ (8003b90 <HAL_RCC_OscConfig+0x330>)
 8003b76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b78:	2202      	movs	r2, #2
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	d100      	bne.n	8003b80 <HAL_RCC_OscConfig+0x320>
 8003b7e:	e0b7      	b.n	8003cf0 <HAL_RCC_OscConfig+0x490>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d000      	beq.n	8003b8a <HAL_RCC_OscConfig+0x32a>
 8003b88:	e0b2      	b.n	8003cf0 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e1c2      	b.n	8003f14 <HAL_RCC_OscConfig+0x6b4>
 8003b8e:	46c0      	nop			@ (mov r8, r8)
 8003b90:	40021000 	.word	0x40021000
 8003b94:	fffeffff 	.word	0xfffeffff
 8003b98:	fffbffff 	.word	0xfffbffff
 8003b9c:	ffff80ff 	.word	0xffff80ff
 8003ba0:	ffffc7ff 	.word	0xffffc7ff
 8003ba4:	00f42400 	.word	0x00f42400
 8003ba8:	20000010 	.word	0x20000010
 8003bac:	20000014 	.word	0x20000014
 8003bb0:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003bb4:	4bb5      	ldr	r3, [pc, #724]	@ (8003e8c <HAL_RCC_OscConfig+0x62c>)
 8003bb6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003bb8:	2380      	movs	r3, #128	@ 0x80
 8003bba:	055b      	lsls	r3, r3, #21
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	d101      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x364>
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e000      	b.n	8003bc6 <HAL_RCC_OscConfig+0x366>
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d011      	beq.n	8003bee <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003bca:	4bb0      	ldr	r3, [pc, #704]	@ (8003e8c <HAL_RCC_OscConfig+0x62c>)
 8003bcc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003bce:	4baf      	ldr	r3, [pc, #700]	@ (8003e8c <HAL_RCC_OscConfig+0x62c>)
 8003bd0:	2180      	movs	r1, #128	@ 0x80
 8003bd2:	0549      	lsls	r1, r1, #21
 8003bd4:	430a      	orrs	r2, r1
 8003bd6:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003bd8:	4bac      	ldr	r3, [pc, #688]	@ (8003e8c <HAL_RCC_OscConfig+0x62c>)
 8003bda:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003bdc:	2380      	movs	r3, #128	@ 0x80
 8003bde:	055b      	lsls	r3, r3, #21
 8003be0:	4013      	ands	r3, r2
 8003be2:	60fb      	str	r3, [r7, #12]
 8003be4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003be6:	231f      	movs	r3, #31
 8003be8:	18fb      	adds	r3, r7, r3
 8003bea:	2201      	movs	r2, #1
 8003bec:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bee:	4ba8      	ldr	r3, [pc, #672]	@ (8003e90 <HAL_RCC_OscConfig+0x630>)
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	2380      	movs	r3, #128	@ 0x80
 8003bf4:	005b      	lsls	r3, r3, #1
 8003bf6:	4013      	ands	r3, r2
 8003bf8:	d11a      	bne.n	8003c30 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003bfa:	4ba5      	ldr	r3, [pc, #660]	@ (8003e90 <HAL_RCC_OscConfig+0x630>)
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	4ba4      	ldr	r3, [pc, #656]	@ (8003e90 <HAL_RCC_OscConfig+0x630>)
 8003c00:	2180      	movs	r1, #128	@ 0x80
 8003c02:	0049      	lsls	r1, r1, #1
 8003c04:	430a      	orrs	r2, r1
 8003c06:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003c08:	f7fe fac0 	bl	800218c <HAL_GetTick>
 8003c0c:	0003      	movs	r3, r0
 8003c0e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c10:	e008      	b.n	8003c24 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c12:	f7fe fabb 	bl	800218c <HAL_GetTick>
 8003c16:	0002      	movs	r2, r0
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	1ad3      	subs	r3, r2, r3
 8003c1c:	2b02      	cmp	r3, #2
 8003c1e:	d901      	bls.n	8003c24 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8003c20:	2303      	movs	r3, #3
 8003c22:	e177      	b.n	8003f14 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c24:	4b9a      	ldr	r3, [pc, #616]	@ (8003e90 <HAL_RCC_OscConfig+0x630>)
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	2380      	movs	r3, #128	@ 0x80
 8003c2a:	005b      	lsls	r3, r3, #1
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	d0f0      	beq.n	8003c12 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d106      	bne.n	8003c46 <HAL_RCC_OscConfig+0x3e6>
 8003c38:	4b94      	ldr	r3, [pc, #592]	@ (8003e8c <HAL_RCC_OscConfig+0x62c>)
 8003c3a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003c3c:	4b93      	ldr	r3, [pc, #588]	@ (8003e8c <HAL_RCC_OscConfig+0x62c>)
 8003c3e:	2101      	movs	r1, #1
 8003c40:	430a      	orrs	r2, r1
 8003c42:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003c44:	e01c      	b.n	8003c80 <HAL_RCC_OscConfig+0x420>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	2b05      	cmp	r3, #5
 8003c4c:	d10c      	bne.n	8003c68 <HAL_RCC_OscConfig+0x408>
 8003c4e:	4b8f      	ldr	r3, [pc, #572]	@ (8003e8c <HAL_RCC_OscConfig+0x62c>)
 8003c50:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003c52:	4b8e      	ldr	r3, [pc, #568]	@ (8003e8c <HAL_RCC_OscConfig+0x62c>)
 8003c54:	2104      	movs	r1, #4
 8003c56:	430a      	orrs	r2, r1
 8003c58:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003c5a:	4b8c      	ldr	r3, [pc, #560]	@ (8003e8c <HAL_RCC_OscConfig+0x62c>)
 8003c5c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003c5e:	4b8b      	ldr	r3, [pc, #556]	@ (8003e8c <HAL_RCC_OscConfig+0x62c>)
 8003c60:	2101      	movs	r1, #1
 8003c62:	430a      	orrs	r2, r1
 8003c64:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003c66:	e00b      	b.n	8003c80 <HAL_RCC_OscConfig+0x420>
 8003c68:	4b88      	ldr	r3, [pc, #544]	@ (8003e8c <HAL_RCC_OscConfig+0x62c>)
 8003c6a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003c6c:	4b87      	ldr	r3, [pc, #540]	@ (8003e8c <HAL_RCC_OscConfig+0x62c>)
 8003c6e:	2101      	movs	r1, #1
 8003c70:	438a      	bics	r2, r1
 8003c72:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003c74:	4b85      	ldr	r3, [pc, #532]	@ (8003e8c <HAL_RCC_OscConfig+0x62c>)
 8003c76:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003c78:	4b84      	ldr	r3, [pc, #528]	@ (8003e8c <HAL_RCC_OscConfig+0x62c>)
 8003c7a:	2104      	movs	r1, #4
 8003c7c:	438a      	bics	r2, r1
 8003c7e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d014      	beq.n	8003cb2 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c88:	f7fe fa80 	bl	800218c <HAL_GetTick>
 8003c8c:	0003      	movs	r3, r0
 8003c8e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c90:	e009      	b.n	8003ca6 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c92:	f7fe fa7b 	bl	800218c <HAL_GetTick>
 8003c96:	0002      	movs	r2, r0
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	1ad3      	subs	r3, r2, r3
 8003c9c:	4a7d      	ldr	r2, [pc, #500]	@ (8003e94 <HAL_RCC_OscConfig+0x634>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d901      	bls.n	8003ca6 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	e136      	b.n	8003f14 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ca6:	4b79      	ldr	r3, [pc, #484]	@ (8003e8c <HAL_RCC_OscConfig+0x62c>)
 8003ca8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003caa:	2202      	movs	r2, #2
 8003cac:	4013      	ands	r3, r2
 8003cae:	d0f0      	beq.n	8003c92 <HAL_RCC_OscConfig+0x432>
 8003cb0:	e013      	b.n	8003cda <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cb2:	f7fe fa6b 	bl	800218c <HAL_GetTick>
 8003cb6:	0003      	movs	r3, r0
 8003cb8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003cba:	e009      	b.n	8003cd0 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cbc:	f7fe fa66 	bl	800218c <HAL_GetTick>
 8003cc0:	0002      	movs	r2, r0
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	4a73      	ldr	r2, [pc, #460]	@ (8003e94 <HAL_RCC_OscConfig+0x634>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d901      	bls.n	8003cd0 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8003ccc:	2303      	movs	r3, #3
 8003cce:	e121      	b.n	8003f14 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003cd0:	4b6e      	ldr	r3, [pc, #440]	@ (8003e8c <HAL_RCC_OscConfig+0x62c>)
 8003cd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cd4:	2202      	movs	r2, #2
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	d1f0      	bne.n	8003cbc <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003cda:	231f      	movs	r3, #31
 8003cdc:	18fb      	adds	r3, r7, r3
 8003cde:	781b      	ldrb	r3, [r3, #0]
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d105      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003ce4:	4b69      	ldr	r3, [pc, #420]	@ (8003e8c <HAL_RCC_OscConfig+0x62c>)
 8003ce6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003ce8:	4b68      	ldr	r3, [pc, #416]	@ (8003e8c <HAL_RCC_OscConfig+0x62c>)
 8003cea:	496b      	ldr	r1, [pc, #428]	@ (8003e98 <HAL_RCC_OscConfig+0x638>)
 8003cec:	400a      	ands	r2, r1
 8003cee:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	2220      	movs	r2, #32
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	d039      	beq.n	8003d6e <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	69db      	ldr	r3, [r3, #28]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d01b      	beq.n	8003d3a <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003d02:	4b62      	ldr	r3, [pc, #392]	@ (8003e8c <HAL_RCC_OscConfig+0x62c>)
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	4b61      	ldr	r3, [pc, #388]	@ (8003e8c <HAL_RCC_OscConfig+0x62c>)
 8003d08:	2180      	movs	r1, #128	@ 0x80
 8003d0a:	03c9      	lsls	r1, r1, #15
 8003d0c:	430a      	orrs	r2, r1
 8003d0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d10:	f7fe fa3c 	bl	800218c <HAL_GetTick>
 8003d14:	0003      	movs	r3, r0
 8003d16:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003d18:	e008      	b.n	8003d2c <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d1a:	f7fe fa37 	bl	800218c <HAL_GetTick>
 8003d1e:	0002      	movs	r2, r0
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	1ad3      	subs	r3, r2, r3
 8003d24:	2b02      	cmp	r3, #2
 8003d26:	d901      	bls.n	8003d2c <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8003d28:	2303      	movs	r3, #3
 8003d2a:	e0f3      	b.n	8003f14 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003d2c:	4b57      	ldr	r3, [pc, #348]	@ (8003e8c <HAL_RCC_OscConfig+0x62c>)
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	2380      	movs	r3, #128	@ 0x80
 8003d32:	041b      	lsls	r3, r3, #16
 8003d34:	4013      	ands	r3, r2
 8003d36:	d0f0      	beq.n	8003d1a <HAL_RCC_OscConfig+0x4ba>
 8003d38:	e019      	b.n	8003d6e <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003d3a:	4b54      	ldr	r3, [pc, #336]	@ (8003e8c <HAL_RCC_OscConfig+0x62c>)
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	4b53      	ldr	r3, [pc, #332]	@ (8003e8c <HAL_RCC_OscConfig+0x62c>)
 8003d40:	4956      	ldr	r1, [pc, #344]	@ (8003e9c <HAL_RCC_OscConfig+0x63c>)
 8003d42:	400a      	ands	r2, r1
 8003d44:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d46:	f7fe fa21 	bl	800218c <HAL_GetTick>
 8003d4a:	0003      	movs	r3, r0
 8003d4c:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003d4e:	e008      	b.n	8003d62 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d50:	f7fe fa1c 	bl	800218c <HAL_GetTick>
 8003d54:	0002      	movs	r2, r0
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	2b02      	cmp	r3, #2
 8003d5c:	d901      	bls.n	8003d62 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	e0d8      	b.n	8003f14 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003d62:	4b4a      	ldr	r3, [pc, #296]	@ (8003e8c <HAL_RCC_OscConfig+0x62c>)
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	2380      	movs	r3, #128	@ 0x80
 8003d68:	041b      	lsls	r3, r3, #16
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	d1f0      	bne.n	8003d50 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6a1b      	ldr	r3, [r3, #32]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d100      	bne.n	8003d78 <HAL_RCC_OscConfig+0x518>
 8003d76:	e0cc      	b.n	8003f12 <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d78:	4b44      	ldr	r3, [pc, #272]	@ (8003e8c <HAL_RCC_OscConfig+0x62c>)
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	2238      	movs	r2, #56	@ 0x38
 8003d7e:	4013      	ands	r3, r2
 8003d80:	2b10      	cmp	r3, #16
 8003d82:	d100      	bne.n	8003d86 <HAL_RCC_OscConfig+0x526>
 8003d84:	e07b      	b.n	8003e7e <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a1b      	ldr	r3, [r3, #32]
 8003d8a:	2b02      	cmp	r3, #2
 8003d8c:	d156      	bne.n	8003e3c <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d8e:	4b3f      	ldr	r3, [pc, #252]	@ (8003e8c <HAL_RCC_OscConfig+0x62c>)
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	4b3e      	ldr	r3, [pc, #248]	@ (8003e8c <HAL_RCC_OscConfig+0x62c>)
 8003d94:	4942      	ldr	r1, [pc, #264]	@ (8003ea0 <HAL_RCC_OscConfig+0x640>)
 8003d96:	400a      	ands	r2, r1
 8003d98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d9a:	f7fe f9f7 	bl	800218c <HAL_GetTick>
 8003d9e:	0003      	movs	r3, r0
 8003da0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003da2:	e008      	b.n	8003db6 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003da4:	f7fe f9f2 	bl	800218c <HAL_GetTick>
 8003da8:	0002      	movs	r2, r0
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	2b02      	cmp	r3, #2
 8003db0:	d901      	bls.n	8003db6 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8003db2:	2303      	movs	r3, #3
 8003db4:	e0ae      	b.n	8003f14 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003db6:	4b35      	ldr	r3, [pc, #212]	@ (8003e8c <HAL_RCC_OscConfig+0x62c>)
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	2380      	movs	r3, #128	@ 0x80
 8003dbc:	049b      	lsls	r3, r3, #18
 8003dbe:	4013      	ands	r3, r2
 8003dc0:	d1f0      	bne.n	8003da4 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003dc2:	4b32      	ldr	r3, [pc, #200]	@ (8003e8c <HAL_RCC_OscConfig+0x62c>)
 8003dc4:	68db      	ldr	r3, [r3, #12]
 8003dc6:	4a37      	ldr	r2, [pc, #220]	@ (8003ea4 <HAL_RCC_OscConfig+0x644>)
 8003dc8:	4013      	ands	r3, r2
 8003dca:	0019      	movs	r1, r3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dd4:	431a      	orrs	r2, r3
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dda:	021b      	lsls	r3, r3, #8
 8003ddc:	431a      	orrs	r2, r3
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003de2:	431a      	orrs	r2, r3
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003de8:	431a      	orrs	r2, r3
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dee:	431a      	orrs	r2, r3
 8003df0:	4b26      	ldr	r3, [pc, #152]	@ (8003e8c <HAL_RCC_OscConfig+0x62c>)
 8003df2:	430a      	orrs	r2, r1
 8003df4:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003df6:	4b25      	ldr	r3, [pc, #148]	@ (8003e8c <HAL_RCC_OscConfig+0x62c>)
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	4b24      	ldr	r3, [pc, #144]	@ (8003e8c <HAL_RCC_OscConfig+0x62c>)
 8003dfc:	2180      	movs	r1, #128	@ 0x80
 8003dfe:	0449      	lsls	r1, r1, #17
 8003e00:	430a      	orrs	r2, r1
 8003e02:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003e04:	4b21      	ldr	r3, [pc, #132]	@ (8003e8c <HAL_RCC_OscConfig+0x62c>)
 8003e06:	68da      	ldr	r2, [r3, #12]
 8003e08:	4b20      	ldr	r3, [pc, #128]	@ (8003e8c <HAL_RCC_OscConfig+0x62c>)
 8003e0a:	2180      	movs	r1, #128	@ 0x80
 8003e0c:	0549      	lsls	r1, r1, #21
 8003e0e:	430a      	orrs	r2, r1
 8003e10:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e12:	f7fe f9bb 	bl	800218c <HAL_GetTick>
 8003e16:	0003      	movs	r3, r0
 8003e18:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e1a:	e008      	b.n	8003e2e <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e1c:	f7fe f9b6 	bl	800218c <HAL_GetTick>
 8003e20:	0002      	movs	r2, r0
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	2b02      	cmp	r3, #2
 8003e28:	d901      	bls.n	8003e2e <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	e072      	b.n	8003f14 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e2e:	4b17      	ldr	r3, [pc, #92]	@ (8003e8c <HAL_RCC_OscConfig+0x62c>)
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	2380      	movs	r3, #128	@ 0x80
 8003e34:	049b      	lsls	r3, r3, #18
 8003e36:	4013      	ands	r3, r2
 8003e38:	d0f0      	beq.n	8003e1c <HAL_RCC_OscConfig+0x5bc>
 8003e3a:	e06a      	b.n	8003f12 <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e3c:	4b13      	ldr	r3, [pc, #76]	@ (8003e8c <HAL_RCC_OscConfig+0x62c>)
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	4b12      	ldr	r3, [pc, #72]	@ (8003e8c <HAL_RCC_OscConfig+0x62c>)
 8003e42:	4917      	ldr	r1, [pc, #92]	@ (8003ea0 <HAL_RCC_OscConfig+0x640>)
 8003e44:	400a      	ands	r2, r1
 8003e46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e48:	f7fe f9a0 	bl	800218c <HAL_GetTick>
 8003e4c:	0003      	movs	r3, r0
 8003e4e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e50:	e008      	b.n	8003e64 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e52:	f7fe f99b 	bl	800218c <HAL_GetTick>
 8003e56:	0002      	movs	r2, r0
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	1ad3      	subs	r3, r2, r3
 8003e5c:	2b02      	cmp	r3, #2
 8003e5e:	d901      	bls.n	8003e64 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8003e60:	2303      	movs	r3, #3
 8003e62:	e057      	b.n	8003f14 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e64:	4b09      	ldr	r3, [pc, #36]	@ (8003e8c <HAL_RCC_OscConfig+0x62c>)
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	2380      	movs	r3, #128	@ 0x80
 8003e6a:	049b      	lsls	r3, r3, #18
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	d1f0      	bne.n	8003e52 <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8003e70:	4b06      	ldr	r3, [pc, #24]	@ (8003e8c <HAL_RCC_OscConfig+0x62c>)
 8003e72:	68da      	ldr	r2, [r3, #12]
 8003e74:	4b05      	ldr	r3, [pc, #20]	@ (8003e8c <HAL_RCC_OscConfig+0x62c>)
 8003e76:	490c      	ldr	r1, [pc, #48]	@ (8003ea8 <HAL_RCC_OscConfig+0x648>)
 8003e78:	400a      	ands	r2, r1
 8003e7a:	60da      	str	r2, [r3, #12]
 8003e7c:	e049      	b.n	8003f12 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a1b      	ldr	r3, [r3, #32]
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d112      	bne.n	8003eac <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e044      	b.n	8003f14 <HAL_RCC_OscConfig+0x6b4>
 8003e8a:	46c0      	nop			@ (mov r8, r8)
 8003e8c:	40021000 	.word	0x40021000
 8003e90:	40007000 	.word	0x40007000
 8003e94:	00001388 	.word	0x00001388
 8003e98:	efffffff 	.word	0xefffffff
 8003e9c:	ffbfffff 	.word	0xffbfffff
 8003ea0:	feffffff 	.word	0xfeffffff
 8003ea4:	11c1808c 	.word	0x11c1808c
 8003ea8:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003eac:	4b1b      	ldr	r3, [pc, #108]	@ (8003f1c <HAL_RCC_OscConfig+0x6bc>)
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	2203      	movs	r2, #3
 8003eb6:	401a      	ands	r2, r3
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d126      	bne.n	8003f0e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	2270      	movs	r2, #112	@ 0x70
 8003ec4:	401a      	ands	r2, r3
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d11f      	bne.n	8003f0e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ece:	697a      	ldr	r2, [r7, #20]
 8003ed0:	23fe      	movs	r3, #254	@ 0xfe
 8003ed2:	01db      	lsls	r3, r3, #7
 8003ed4:	401a      	ands	r2, r3
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eda:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d116      	bne.n	8003f0e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003ee0:	697a      	ldr	r2, [r7, #20]
 8003ee2:	23f8      	movs	r3, #248	@ 0xf8
 8003ee4:	039b      	lsls	r3, r3, #14
 8003ee6:	401a      	ands	r2, r3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d10e      	bne.n	8003f0e <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003ef0:	697a      	ldr	r2, [r7, #20]
 8003ef2:	23e0      	movs	r3, #224	@ 0xe0
 8003ef4:	051b      	lsls	r3, r3, #20
 8003ef6:	401a      	ands	r2, r3
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d106      	bne.n	8003f0e <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	0f5b      	lsrs	r3, r3, #29
 8003f04:	075a      	lsls	r2, r3, #29
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d001      	beq.n	8003f12 <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e000      	b.n	8003f14 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8003f12:	2300      	movs	r3, #0
}
 8003f14:	0018      	movs	r0, r3
 8003f16:	46bd      	mov	sp, r7
 8003f18:	b008      	add	sp, #32
 8003f1a:	bd80      	pop	{r7, pc}
 8003f1c:	40021000 	.word	0x40021000

08003f20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b084      	sub	sp, #16
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
 8003f28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d101      	bne.n	8003f34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	e0e9      	b.n	8004108 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f34:	4b76      	ldr	r3, [pc, #472]	@ (8004110 <HAL_RCC_ClockConfig+0x1f0>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	2207      	movs	r2, #7
 8003f3a:	4013      	ands	r3, r2
 8003f3c:	683a      	ldr	r2, [r7, #0]
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d91e      	bls.n	8003f80 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f42:	4b73      	ldr	r3, [pc, #460]	@ (8004110 <HAL_RCC_ClockConfig+0x1f0>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	2207      	movs	r2, #7
 8003f48:	4393      	bics	r3, r2
 8003f4a:	0019      	movs	r1, r3
 8003f4c:	4b70      	ldr	r3, [pc, #448]	@ (8004110 <HAL_RCC_ClockConfig+0x1f0>)
 8003f4e:	683a      	ldr	r2, [r7, #0]
 8003f50:	430a      	orrs	r2, r1
 8003f52:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003f54:	f7fe f91a 	bl	800218c <HAL_GetTick>
 8003f58:	0003      	movs	r3, r0
 8003f5a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003f5c:	e009      	b.n	8003f72 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f5e:	f7fe f915 	bl	800218c <HAL_GetTick>
 8003f62:	0002      	movs	r2, r0
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	1ad3      	subs	r3, r2, r3
 8003f68:	4a6a      	ldr	r2, [pc, #424]	@ (8004114 <HAL_RCC_ClockConfig+0x1f4>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d901      	bls.n	8003f72 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003f6e:	2303      	movs	r3, #3
 8003f70:	e0ca      	b.n	8004108 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003f72:	4b67      	ldr	r3, [pc, #412]	@ (8004110 <HAL_RCC_ClockConfig+0x1f0>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	2207      	movs	r2, #7
 8003f78:	4013      	ands	r3, r2
 8003f7a:	683a      	ldr	r2, [r7, #0]
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d1ee      	bne.n	8003f5e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	2202      	movs	r2, #2
 8003f86:	4013      	ands	r3, r2
 8003f88:	d015      	beq.n	8003fb6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	2204      	movs	r2, #4
 8003f90:	4013      	ands	r3, r2
 8003f92:	d006      	beq.n	8003fa2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003f94:	4b60      	ldr	r3, [pc, #384]	@ (8004118 <HAL_RCC_ClockConfig+0x1f8>)
 8003f96:	689a      	ldr	r2, [r3, #8]
 8003f98:	4b5f      	ldr	r3, [pc, #380]	@ (8004118 <HAL_RCC_ClockConfig+0x1f8>)
 8003f9a:	21e0      	movs	r1, #224	@ 0xe0
 8003f9c:	01c9      	lsls	r1, r1, #7
 8003f9e:	430a      	orrs	r2, r1
 8003fa0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fa2:	4b5d      	ldr	r3, [pc, #372]	@ (8004118 <HAL_RCC_ClockConfig+0x1f8>)
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	4a5d      	ldr	r2, [pc, #372]	@ (800411c <HAL_RCC_ClockConfig+0x1fc>)
 8003fa8:	4013      	ands	r3, r2
 8003faa:	0019      	movs	r1, r3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	689a      	ldr	r2, [r3, #8]
 8003fb0:	4b59      	ldr	r3, [pc, #356]	@ (8004118 <HAL_RCC_ClockConfig+0x1f8>)
 8003fb2:	430a      	orrs	r2, r1
 8003fb4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	d057      	beq.n	8004070 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d107      	bne.n	8003fd8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003fc8:	4b53      	ldr	r3, [pc, #332]	@ (8004118 <HAL_RCC_ClockConfig+0x1f8>)
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	2380      	movs	r3, #128	@ 0x80
 8003fce:	029b      	lsls	r3, r3, #10
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	d12b      	bne.n	800402c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e097      	b.n	8004108 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	2b02      	cmp	r3, #2
 8003fde:	d107      	bne.n	8003ff0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fe0:	4b4d      	ldr	r3, [pc, #308]	@ (8004118 <HAL_RCC_ClockConfig+0x1f8>)
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	2380      	movs	r3, #128	@ 0x80
 8003fe6:	049b      	lsls	r3, r3, #18
 8003fe8:	4013      	ands	r3, r2
 8003fea:	d11f      	bne.n	800402c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e08b      	b.n	8004108 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d107      	bne.n	8004008 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ff8:	4b47      	ldr	r3, [pc, #284]	@ (8004118 <HAL_RCC_ClockConfig+0x1f8>)
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	2380      	movs	r3, #128	@ 0x80
 8003ffe:	00db      	lsls	r3, r3, #3
 8004000:	4013      	ands	r3, r2
 8004002:	d113      	bne.n	800402c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	e07f      	b.n	8004108 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	2b03      	cmp	r3, #3
 800400e:	d106      	bne.n	800401e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004010:	4b41      	ldr	r3, [pc, #260]	@ (8004118 <HAL_RCC_ClockConfig+0x1f8>)
 8004012:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004014:	2202      	movs	r2, #2
 8004016:	4013      	ands	r3, r2
 8004018:	d108      	bne.n	800402c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	e074      	b.n	8004108 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800401e:	4b3e      	ldr	r3, [pc, #248]	@ (8004118 <HAL_RCC_ClockConfig+0x1f8>)
 8004020:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004022:	2202      	movs	r2, #2
 8004024:	4013      	ands	r3, r2
 8004026:	d101      	bne.n	800402c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	e06d      	b.n	8004108 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800402c:	4b3a      	ldr	r3, [pc, #232]	@ (8004118 <HAL_RCC_ClockConfig+0x1f8>)
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	2207      	movs	r2, #7
 8004032:	4393      	bics	r3, r2
 8004034:	0019      	movs	r1, r3
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	685a      	ldr	r2, [r3, #4]
 800403a:	4b37      	ldr	r3, [pc, #220]	@ (8004118 <HAL_RCC_ClockConfig+0x1f8>)
 800403c:	430a      	orrs	r2, r1
 800403e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004040:	f7fe f8a4 	bl	800218c <HAL_GetTick>
 8004044:	0003      	movs	r3, r0
 8004046:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004048:	e009      	b.n	800405e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800404a:	f7fe f89f 	bl	800218c <HAL_GetTick>
 800404e:	0002      	movs	r2, r0
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	4a2f      	ldr	r2, [pc, #188]	@ (8004114 <HAL_RCC_ClockConfig+0x1f4>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d901      	bls.n	800405e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800405a:	2303      	movs	r3, #3
 800405c:	e054      	b.n	8004108 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800405e:	4b2e      	ldr	r3, [pc, #184]	@ (8004118 <HAL_RCC_ClockConfig+0x1f8>)
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	2238      	movs	r2, #56	@ 0x38
 8004064:	401a      	ands	r2, r3
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	00db      	lsls	r3, r3, #3
 800406c:	429a      	cmp	r2, r3
 800406e:	d1ec      	bne.n	800404a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004070:	4b27      	ldr	r3, [pc, #156]	@ (8004110 <HAL_RCC_ClockConfig+0x1f0>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	2207      	movs	r2, #7
 8004076:	4013      	ands	r3, r2
 8004078:	683a      	ldr	r2, [r7, #0]
 800407a:	429a      	cmp	r2, r3
 800407c:	d21e      	bcs.n	80040bc <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800407e:	4b24      	ldr	r3, [pc, #144]	@ (8004110 <HAL_RCC_ClockConfig+0x1f0>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	2207      	movs	r2, #7
 8004084:	4393      	bics	r3, r2
 8004086:	0019      	movs	r1, r3
 8004088:	4b21      	ldr	r3, [pc, #132]	@ (8004110 <HAL_RCC_ClockConfig+0x1f0>)
 800408a:	683a      	ldr	r2, [r7, #0]
 800408c:	430a      	orrs	r2, r1
 800408e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004090:	f7fe f87c 	bl	800218c <HAL_GetTick>
 8004094:	0003      	movs	r3, r0
 8004096:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004098:	e009      	b.n	80040ae <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800409a:	f7fe f877 	bl	800218c <HAL_GetTick>
 800409e:	0002      	movs	r2, r0
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	1ad3      	subs	r3, r2, r3
 80040a4:	4a1b      	ldr	r2, [pc, #108]	@ (8004114 <HAL_RCC_ClockConfig+0x1f4>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d901      	bls.n	80040ae <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80040aa:	2303      	movs	r3, #3
 80040ac:	e02c      	b.n	8004108 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80040ae:	4b18      	ldr	r3, [pc, #96]	@ (8004110 <HAL_RCC_ClockConfig+0x1f0>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	2207      	movs	r2, #7
 80040b4:	4013      	ands	r3, r2
 80040b6:	683a      	ldr	r2, [r7, #0]
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d1ee      	bne.n	800409a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	2204      	movs	r2, #4
 80040c2:	4013      	ands	r3, r2
 80040c4:	d009      	beq.n	80040da <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80040c6:	4b14      	ldr	r3, [pc, #80]	@ (8004118 <HAL_RCC_ClockConfig+0x1f8>)
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	4a15      	ldr	r2, [pc, #84]	@ (8004120 <HAL_RCC_ClockConfig+0x200>)
 80040cc:	4013      	ands	r3, r2
 80040ce:	0019      	movs	r1, r3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	68da      	ldr	r2, [r3, #12]
 80040d4:	4b10      	ldr	r3, [pc, #64]	@ (8004118 <HAL_RCC_ClockConfig+0x1f8>)
 80040d6:	430a      	orrs	r2, r1
 80040d8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80040da:	f000 f829 	bl	8004130 <HAL_RCC_GetSysClockFreq>
 80040de:	0001      	movs	r1, r0
 80040e0:	4b0d      	ldr	r3, [pc, #52]	@ (8004118 <HAL_RCC_ClockConfig+0x1f8>)
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	0a1b      	lsrs	r3, r3, #8
 80040e6:	220f      	movs	r2, #15
 80040e8:	401a      	ands	r2, r3
 80040ea:	4b0e      	ldr	r3, [pc, #56]	@ (8004124 <HAL_RCC_ClockConfig+0x204>)
 80040ec:	0092      	lsls	r2, r2, #2
 80040ee:	58d3      	ldr	r3, [r2, r3]
 80040f0:	221f      	movs	r2, #31
 80040f2:	4013      	ands	r3, r2
 80040f4:	000a      	movs	r2, r1
 80040f6:	40da      	lsrs	r2, r3
 80040f8:	4b0b      	ldr	r3, [pc, #44]	@ (8004128 <HAL_RCC_ClockConfig+0x208>)
 80040fa:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80040fc:	4b0b      	ldr	r3, [pc, #44]	@ (800412c <HAL_RCC_ClockConfig+0x20c>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	0018      	movs	r0, r3
 8004102:	f7fd ffe7 	bl	80020d4 <HAL_InitTick>
 8004106:	0003      	movs	r3, r0
}
 8004108:	0018      	movs	r0, r3
 800410a:	46bd      	mov	sp, r7
 800410c:	b004      	add	sp, #16
 800410e:	bd80      	pop	{r7, pc}
 8004110:	40022000 	.word	0x40022000
 8004114:	00001388 	.word	0x00001388
 8004118:	40021000 	.word	0x40021000
 800411c:	fffff0ff 	.word	0xfffff0ff
 8004120:	ffff8fff 	.word	0xffff8fff
 8004124:	08007a6c 	.word	0x08007a6c
 8004128:	20000010 	.word	0x20000010
 800412c:	20000014 	.word	0x20000014

08004130 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b086      	sub	sp, #24
 8004134:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004136:	4b3c      	ldr	r3, [pc, #240]	@ (8004228 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	2238      	movs	r2, #56	@ 0x38
 800413c:	4013      	ands	r3, r2
 800413e:	d10f      	bne.n	8004160 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004140:	4b39      	ldr	r3, [pc, #228]	@ (8004228 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	0adb      	lsrs	r3, r3, #11
 8004146:	2207      	movs	r2, #7
 8004148:	4013      	ands	r3, r2
 800414a:	2201      	movs	r2, #1
 800414c:	409a      	lsls	r2, r3
 800414e:	0013      	movs	r3, r2
 8004150:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004152:	6839      	ldr	r1, [r7, #0]
 8004154:	4835      	ldr	r0, [pc, #212]	@ (800422c <HAL_RCC_GetSysClockFreq+0xfc>)
 8004156:	f7fb ffdf 	bl	8000118 <__udivsi3>
 800415a:	0003      	movs	r3, r0
 800415c:	613b      	str	r3, [r7, #16]
 800415e:	e05d      	b.n	800421c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004160:	4b31      	ldr	r3, [pc, #196]	@ (8004228 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	2238      	movs	r2, #56	@ 0x38
 8004166:	4013      	ands	r3, r2
 8004168:	2b08      	cmp	r3, #8
 800416a:	d102      	bne.n	8004172 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800416c:	4b30      	ldr	r3, [pc, #192]	@ (8004230 <HAL_RCC_GetSysClockFreq+0x100>)
 800416e:	613b      	str	r3, [r7, #16]
 8004170:	e054      	b.n	800421c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004172:	4b2d      	ldr	r3, [pc, #180]	@ (8004228 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	2238      	movs	r2, #56	@ 0x38
 8004178:	4013      	ands	r3, r2
 800417a:	2b10      	cmp	r3, #16
 800417c:	d138      	bne.n	80041f0 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800417e:	4b2a      	ldr	r3, [pc, #168]	@ (8004228 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004180:	68db      	ldr	r3, [r3, #12]
 8004182:	2203      	movs	r2, #3
 8004184:	4013      	ands	r3, r2
 8004186:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004188:	4b27      	ldr	r3, [pc, #156]	@ (8004228 <HAL_RCC_GetSysClockFreq+0xf8>)
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	091b      	lsrs	r3, r3, #4
 800418e:	2207      	movs	r2, #7
 8004190:	4013      	ands	r3, r2
 8004192:	3301      	adds	r3, #1
 8004194:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2b03      	cmp	r3, #3
 800419a:	d10d      	bne.n	80041b8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800419c:	68b9      	ldr	r1, [r7, #8]
 800419e:	4824      	ldr	r0, [pc, #144]	@ (8004230 <HAL_RCC_GetSysClockFreq+0x100>)
 80041a0:	f7fb ffba 	bl	8000118 <__udivsi3>
 80041a4:	0003      	movs	r3, r0
 80041a6:	0019      	movs	r1, r3
 80041a8:	4b1f      	ldr	r3, [pc, #124]	@ (8004228 <HAL_RCC_GetSysClockFreq+0xf8>)
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	0a1b      	lsrs	r3, r3, #8
 80041ae:	227f      	movs	r2, #127	@ 0x7f
 80041b0:	4013      	ands	r3, r2
 80041b2:	434b      	muls	r3, r1
 80041b4:	617b      	str	r3, [r7, #20]
        break;
 80041b6:	e00d      	b.n	80041d4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80041b8:	68b9      	ldr	r1, [r7, #8]
 80041ba:	481c      	ldr	r0, [pc, #112]	@ (800422c <HAL_RCC_GetSysClockFreq+0xfc>)
 80041bc:	f7fb ffac 	bl	8000118 <__udivsi3>
 80041c0:	0003      	movs	r3, r0
 80041c2:	0019      	movs	r1, r3
 80041c4:	4b18      	ldr	r3, [pc, #96]	@ (8004228 <HAL_RCC_GetSysClockFreq+0xf8>)
 80041c6:	68db      	ldr	r3, [r3, #12]
 80041c8:	0a1b      	lsrs	r3, r3, #8
 80041ca:	227f      	movs	r2, #127	@ 0x7f
 80041cc:	4013      	ands	r3, r2
 80041ce:	434b      	muls	r3, r1
 80041d0:	617b      	str	r3, [r7, #20]
        break;
 80041d2:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80041d4:	4b14      	ldr	r3, [pc, #80]	@ (8004228 <HAL_RCC_GetSysClockFreq+0xf8>)
 80041d6:	68db      	ldr	r3, [r3, #12]
 80041d8:	0f5b      	lsrs	r3, r3, #29
 80041da:	2207      	movs	r2, #7
 80041dc:	4013      	ands	r3, r2
 80041de:	3301      	adds	r3, #1
 80041e0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80041e2:	6879      	ldr	r1, [r7, #4]
 80041e4:	6978      	ldr	r0, [r7, #20]
 80041e6:	f7fb ff97 	bl	8000118 <__udivsi3>
 80041ea:	0003      	movs	r3, r0
 80041ec:	613b      	str	r3, [r7, #16]
 80041ee:	e015      	b.n	800421c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80041f0:	4b0d      	ldr	r3, [pc, #52]	@ (8004228 <HAL_RCC_GetSysClockFreq+0xf8>)
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	2238      	movs	r2, #56	@ 0x38
 80041f6:	4013      	ands	r3, r2
 80041f8:	2b20      	cmp	r3, #32
 80041fa:	d103      	bne.n	8004204 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80041fc:	2380      	movs	r3, #128	@ 0x80
 80041fe:	021b      	lsls	r3, r3, #8
 8004200:	613b      	str	r3, [r7, #16]
 8004202:	e00b      	b.n	800421c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004204:	4b08      	ldr	r3, [pc, #32]	@ (8004228 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	2238      	movs	r2, #56	@ 0x38
 800420a:	4013      	ands	r3, r2
 800420c:	2b18      	cmp	r3, #24
 800420e:	d103      	bne.n	8004218 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004210:	23fa      	movs	r3, #250	@ 0xfa
 8004212:	01db      	lsls	r3, r3, #7
 8004214:	613b      	str	r3, [r7, #16]
 8004216:	e001      	b.n	800421c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004218:	2300      	movs	r3, #0
 800421a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800421c:	693b      	ldr	r3, [r7, #16]
}
 800421e:	0018      	movs	r0, r3
 8004220:	46bd      	mov	sp, r7
 8004222:	b006      	add	sp, #24
 8004224:	bd80      	pop	{r7, pc}
 8004226:	46c0      	nop			@ (mov r8, r8)
 8004228:	40021000 	.word	0x40021000
 800422c:	00f42400 	.word	0x00f42400
 8004230:	007a1200 	.word	0x007a1200

08004234 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004238:	4b02      	ldr	r3, [pc, #8]	@ (8004244 <HAL_RCC_GetHCLKFreq+0x10>)
 800423a:	681b      	ldr	r3, [r3, #0]
}
 800423c:	0018      	movs	r0, r3
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}
 8004242:	46c0      	nop			@ (mov r8, r8)
 8004244:	20000010 	.word	0x20000010

08004248 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004248:	b5b0      	push	{r4, r5, r7, lr}
 800424a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800424c:	f7ff fff2 	bl	8004234 <HAL_RCC_GetHCLKFreq>
 8004250:	0004      	movs	r4, r0
 8004252:	f7ff faf9 	bl	8003848 <LL_RCC_GetAPB1Prescaler>
 8004256:	0003      	movs	r3, r0
 8004258:	0b1a      	lsrs	r2, r3, #12
 800425a:	4b05      	ldr	r3, [pc, #20]	@ (8004270 <HAL_RCC_GetPCLK1Freq+0x28>)
 800425c:	0092      	lsls	r2, r2, #2
 800425e:	58d3      	ldr	r3, [r2, r3]
 8004260:	221f      	movs	r2, #31
 8004262:	4013      	ands	r3, r2
 8004264:	40dc      	lsrs	r4, r3
 8004266:	0023      	movs	r3, r4
}
 8004268:	0018      	movs	r0, r3
 800426a:	46bd      	mov	sp, r7
 800426c:	bdb0      	pop	{r4, r5, r7, pc}
 800426e:	46c0      	nop			@ (mov r8, r8)
 8004270:	08007aac 	.word	0x08007aac

08004274 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b086      	sub	sp, #24
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800427c:	2313      	movs	r3, #19
 800427e:	18fb      	adds	r3, r7, r3
 8004280:	2200      	movs	r2, #0
 8004282:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004284:	2312      	movs	r3, #18
 8004286:	18fb      	adds	r3, r7, r3
 8004288:	2200      	movs	r2, #0
 800428a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	2380      	movs	r3, #128	@ 0x80
 8004292:	029b      	lsls	r3, r3, #10
 8004294:	4013      	ands	r3, r2
 8004296:	d100      	bne.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004298:	e0ad      	b.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 800429a:	2011      	movs	r0, #17
 800429c:	183b      	adds	r3, r7, r0
 800429e:	2200      	movs	r2, #0
 80042a0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042a2:	4b47      	ldr	r3, [pc, #284]	@ (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80042a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80042a6:	2380      	movs	r3, #128	@ 0x80
 80042a8:	055b      	lsls	r3, r3, #21
 80042aa:	4013      	ands	r3, r2
 80042ac:	d110      	bne.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042ae:	4b44      	ldr	r3, [pc, #272]	@ (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80042b0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80042b2:	4b43      	ldr	r3, [pc, #268]	@ (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80042b4:	2180      	movs	r1, #128	@ 0x80
 80042b6:	0549      	lsls	r1, r1, #21
 80042b8:	430a      	orrs	r2, r1
 80042ba:	63da      	str	r2, [r3, #60]	@ 0x3c
 80042bc:	4b40      	ldr	r3, [pc, #256]	@ (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80042be:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80042c0:	2380      	movs	r3, #128	@ 0x80
 80042c2:	055b      	lsls	r3, r3, #21
 80042c4:	4013      	ands	r3, r2
 80042c6:	60bb      	str	r3, [r7, #8]
 80042c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042ca:	183b      	adds	r3, r7, r0
 80042cc:	2201      	movs	r2, #1
 80042ce:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042d0:	4b3c      	ldr	r3, [pc, #240]	@ (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	4b3b      	ldr	r3, [pc, #236]	@ (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80042d6:	2180      	movs	r1, #128	@ 0x80
 80042d8:	0049      	lsls	r1, r1, #1
 80042da:	430a      	orrs	r2, r1
 80042dc:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80042de:	f7fd ff55 	bl	800218c <HAL_GetTick>
 80042e2:	0003      	movs	r3, r0
 80042e4:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80042e6:	e00b      	b.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042e8:	f7fd ff50 	bl	800218c <HAL_GetTick>
 80042ec:	0002      	movs	r2, r0
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	1ad3      	subs	r3, r2, r3
 80042f2:	2b02      	cmp	r3, #2
 80042f4:	d904      	bls.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80042f6:	2313      	movs	r3, #19
 80042f8:	18fb      	adds	r3, r7, r3
 80042fa:	2203      	movs	r2, #3
 80042fc:	701a      	strb	r2, [r3, #0]
        break;
 80042fe:	e005      	b.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004300:	4b30      	ldr	r3, [pc, #192]	@ (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	2380      	movs	r3, #128	@ 0x80
 8004306:	005b      	lsls	r3, r3, #1
 8004308:	4013      	ands	r3, r2
 800430a:	d0ed      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800430c:	2313      	movs	r3, #19
 800430e:	18fb      	adds	r3, r7, r3
 8004310:	781b      	ldrb	r3, [r3, #0]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d15e      	bne.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004316:	4b2a      	ldr	r3, [pc, #168]	@ (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004318:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800431a:	23c0      	movs	r3, #192	@ 0xc0
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	4013      	ands	r3, r2
 8004320:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d019      	beq.n	800435c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800432c:	697a      	ldr	r2, [r7, #20]
 800432e:	429a      	cmp	r2, r3
 8004330:	d014      	beq.n	800435c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004332:	4b23      	ldr	r3, [pc, #140]	@ (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004334:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004336:	4a24      	ldr	r2, [pc, #144]	@ (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8004338:	4013      	ands	r3, r2
 800433a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800433c:	4b20      	ldr	r3, [pc, #128]	@ (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800433e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004340:	4b1f      	ldr	r3, [pc, #124]	@ (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004342:	2180      	movs	r1, #128	@ 0x80
 8004344:	0249      	lsls	r1, r1, #9
 8004346:	430a      	orrs	r2, r1
 8004348:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800434a:	4b1d      	ldr	r3, [pc, #116]	@ (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800434c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800434e:	4b1c      	ldr	r3, [pc, #112]	@ (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004350:	491e      	ldr	r1, [pc, #120]	@ (80043cc <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8004352:	400a      	ands	r2, r1
 8004354:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004356:	4b1a      	ldr	r3, [pc, #104]	@ (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004358:	697a      	ldr	r2, [r7, #20]
 800435a:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	2201      	movs	r2, #1
 8004360:	4013      	ands	r3, r2
 8004362:	d016      	beq.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004364:	f7fd ff12 	bl	800218c <HAL_GetTick>
 8004368:	0003      	movs	r3, r0
 800436a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800436c:	e00c      	b.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800436e:	f7fd ff0d 	bl	800218c <HAL_GetTick>
 8004372:	0002      	movs	r2, r0
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	1ad3      	subs	r3, r2, r3
 8004378:	4a15      	ldr	r2, [pc, #84]	@ (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d904      	bls.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800437e:	2313      	movs	r3, #19
 8004380:	18fb      	adds	r3, r7, r3
 8004382:	2203      	movs	r2, #3
 8004384:	701a      	strb	r2, [r3, #0]
            break;
 8004386:	e004      	b.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004388:	4b0d      	ldr	r3, [pc, #52]	@ (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800438a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800438c:	2202      	movs	r2, #2
 800438e:	4013      	ands	r3, r2
 8004390:	d0ed      	beq.n	800436e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8004392:	2313      	movs	r3, #19
 8004394:	18fb      	adds	r3, r7, r3
 8004396:	781b      	ldrb	r3, [r3, #0]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d10a      	bne.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800439c:	4b08      	ldr	r3, [pc, #32]	@ (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800439e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043a0:	4a09      	ldr	r2, [pc, #36]	@ (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80043a2:	4013      	ands	r3, r2
 80043a4:	0019      	movs	r1, r3
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80043aa:	4b05      	ldr	r3, [pc, #20]	@ (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80043ac:	430a      	orrs	r2, r1
 80043ae:	65da      	str	r2, [r3, #92]	@ 0x5c
 80043b0:	e016      	b.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80043b2:	2312      	movs	r3, #18
 80043b4:	18fb      	adds	r3, r7, r3
 80043b6:	2213      	movs	r2, #19
 80043b8:	18ba      	adds	r2, r7, r2
 80043ba:	7812      	ldrb	r2, [r2, #0]
 80043bc:	701a      	strb	r2, [r3, #0]
 80043be:	e00f      	b.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80043c0:	40021000 	.word	0x40021000
 80043c4:	40007000 	.word	0x40007000
 80043c8:	fffffcff 	.word	0xfffffcff
 80043cc:	fffeffff 	.word	0xfffeffff
 80043d0:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043d4:	2312      	movs	r3, #18
 80043d6:	18fb      	adds	r3, r7, r3
 80043d8:	2213      	movs	r2, #19
 80043da:	18ba      	adds	r2, r7, r2
 80043dc:	7812      	ldrb	r2, [r2, #0]
 80043de:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80043e0:	2311      	movs	r3, #17
 80043e2:	18fb      	adds	r3, r7, r3
 80043e4:	781b      	ldrb	r3, [r3, #0]
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d105      	bne.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043ea:	4bb6      	ldr	r3, [pc, #728]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80043ec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80043ee:	4bb5      	ldr	r3, [pc, #724]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80043f0:	49b5      	ldr	r1, [pc, #724]	@ (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80043f2:	400a      	ands	r2, r1
 80043f4:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	2201      	movs	r2, #1
 80043fc:	4013      	ands	r3, r2
 80043fe:	d009      	beq.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004400:	4bb0      	ldr	r3, [pc, #704]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004402:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004404:	2203      	movs	r2, #3
 8004406:	4393      	bics	r3, r2
 8004408:	0019      	movs	r1, r3
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	685a      	ldr	r2, [r3, #4]
 800440e:	4bad      	ldr	r3, [pc, #692]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004410:	430a      	orrs	r2, r1
 8004412:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	2202      	movs	r2, #2
 800441a:	4013      	ands	r3, r2
 800441c:	d009      	beq.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800441e:	4ba9      	ldr	r3, [pc, #676]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004420:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004422:	220c      	movs	r2, #12
 8004424:	4393      	bics	r3, r2
 8004426:	0019      	movs	r1, r3
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	689a      	ldr	r2, [r3, #8]
 800442c:	4ba5      	ldr	r3, [pc, #660]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800442e:	430a      	orrs	r2, r1
 8004430:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	2204      	movs	r2, #4
 8004438:	4013      	ands	r3, r2
 800443a:	d009      	beq.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800443c:	4ba1      	ldr	r3, [pc, #644]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800443e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004440:	2230      	movs	r2, #48	@ 0x30
 8004442:	4393      	bics	r3, r2
 8004444:	0019      	movs	r1, r3
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	68da      	ldr	r2, [r3, #12]
 800444a:	4b9e      	ldr	r3, [pc, #632]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800444c:	430a      	orrs	r2, r1
 800444e:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	2210      	movs	r2, #16
 8004456:	4013      	ands	r3, r2
 8004458:	d009      	beq.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800445a:	4b9a      	ldr	r3, [pc, #616]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800445c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800445e:	4a9b      	ldr	r2, [pc, #620]	@ (80046cc <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8004460:	4013      	ands	r3, r2
 8004462:	0019      	movs	r1, r3
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	691a      	ldr	r2, [r3, #16]
 8004468:	4b96      	ldr	r3, [pc, #600]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800446a:	430a      	orrs	r2, r1
 800446c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	2380      	movs	r3, #128	@ 0x80
 8004474:	015b      	lsls	r3, r3, #5
 8004476:	4013      	ands	r3, r2
 8004478:	d009      	beq.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 800447a:	4b92      	ldr	r3, [pc, #584]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800447c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800447e:	4a94      	ldr	r2, [pc, #592]	@ (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004480:	4013      	ands	r3, r2
 8004482:	0019      	movs	r1, r3
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	695a      	ldr	r2, [r3, #20]
 8004488:	4b8e      	ldr	r3, [pc, #568]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800448a:	430a      	orrs	r2, r1
 800448c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	2380      	movs	r3, #128	@ 0x80
 8004494:	009b      	lsls	r3, r3, #2
 8004496:	4013      	ands	r3, r2
 8004498:	d009      	beq.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800449a:	4b8a      	ldr	r3, [pc, #552]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800449c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800449e:	4a8d      	ldr	r2, [pc, #564]	@ (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 80044a0:	4013      	ands	r3, r2
 80044a2:	0019      	movs	r1, r3
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80044a8:	4b86      	ldr	r3, [pc, #536]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80044aa:	430a      	orrs	r2, r1
 80044ac:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	2380      	movs	r3, #128	@ 0x80
 80044b4:	00db      	lsls	r3, r3, #3
 80044b6:	4013      	ands	r3, r2
 80044b8:	d009      	beq.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80044ba:	4b82      	ldr	r3, [pc, #520]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80044bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044be:	4a86      	ldr	r2, [pc, #536]	@ (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 80044c0:	4013      	ands	r3, r2
 80044c2:	0019      	movs	r1, r3
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044c8:	4b7e      	ldr	r3, [pc, #504]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80044ca:	430a      	orrs	r2, r1
 80044cc:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	2220      	movs	r2, #32
 80044d4:	4013      	ands	r3, r2
 80044d6:	d009      	beq.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80044d8:	4b7a      	ldr	r3, [pc, #488]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80044da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044dc:	4a7f      	ldr	r2, [pc, #508]	@ (80046dc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80044de:	4013      	ands	r3, r2
 80044e0:	0019      	movs	r1, r3
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	699a      	ldr	r2, [r3, #24]
 80044e6:	4b77      	ldr	r3, [pc, #476]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80044e8:	430a      	orrs	r2, r1
 80044ea:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	2240      	movs	r2, #64	@ 0x40
 80044f2:	4013      	ands	r3, r2
 80044f4:	d009      	beq.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80044f6:	4b73      	ldr	r3, [pc, #460]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80044f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044fa:	4a79      	ldr	r2, [pc, #484]	@ (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80044fc:	4013      	ands	r3, r2
 80044fe:	0019      	movs	r1, r3
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	69da      	ldr	r2, [r3, #28]
 8004504:	4b6f      	ldr	r3, [pc, #444]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004506:	430a      	orrs	r2, r1
 8004508:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	2380      	movs	r3, #128	@ 0x80
 8004510:	01db      	lsls	r3, r3, #7
 8004512:	4013      	ands	r3, r2
 8004514:	d015      	beq.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004516:	4b6b      	ldr	r3, [pc, #428]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004518:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800451a:	009b      	lsls	r3, r3, #2
 800451c:	0899      	lsrs	r1, r3, #2
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004522:	4b68      	ldr	r3, [pc, #416]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004524:	430a      	orrs	r2, r1
 8004526:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800452c:	2380      	movs	r3, #128	@ 0x80
 800452e:	05db      	lsls	r3, r3, #23
 8004530:	429a      	cmp	r2, r3
 8004532:	d106      	bne.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004534:	4b63      	ldr	r3, [pc, #396]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004536:	68da      	ldr	r2, [r3, #12]
 8004538:	4b62      	ldr	r3, [pc, #392]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800453a:	2180      	movs	r1, #128	@ 0x80
 800453c:	0249      	lsls	r1, r1, #9
 800453e:	430a      	orrs	r2, r1
 8004540:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	2380      	movs	r3, #128	@ 0x80
 8004548:	031b      	lsls	r3, r3, #12
 800454a:	4013      	ands	r3, r2
 800454c:	d009      	beq.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800454e:	4b5d      	ldr	r3, [pc, #372]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004550:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004552:	2240      	movs	r2, #64	@ 0x40
 8004554:	4393      	bics	r3, r2
 8004556:	0019      	movs	r1, r3
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800455c:	4b59      	ldr	r3, [pc, #356]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800455e:	430a      	orrs	r2, r1
 8004560:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	2380      	movs	r3, #128	@ 0x80
 8004568:	039b      	lsls	r3, r3, #14
 800456a:	4013      	ands	r3, r2
 800456c:	d016      	beq.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800456e:	4b55      	ldr	r3, [pc, #340]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004570:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004572:	4a5c      	ldr	r2, [pc, #368]	@ (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8004574:	4013      	ands	r3, r2
 8004576:	0019      	movs	r1, r3
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800457c:	4b51      	ldr	r3, [pc, #324]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800457e:	430a      	orrs	r2, r1
 8004580:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004586:	2380      	movs	r3, #128	@ 0x80
 8004588:	03db      	lsls	r3, r3, #15
 800458a:	429a      	cmp	r2, r3
 800458c:	d106      	bne.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800458e:	4b4d      	ldr	r3, [pc, #308]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004590:	68da      	ldr	r2, [r3, #12]
 8004592:	4b4c      	ldr	r3, [pc, #304]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004594:	2180      	movs	r1, #128	@ 0x80
 8004596:	0449      	lsls	r1, r1, #17
 8004598:	430a      	orrs	r2, r1
 800459a:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	2380      	movs	r3, #128	@ 0x80
 80045a2:	03db      	lsls	r3, r3, #15
 80045a4:	4013      	ands	r3, r2
 80045a6:	d016      	beq.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80045a8:	4b46      	ldr	r3, [pc, #280]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80045aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045ac:	4a4e      	ldr	r2, [pc, #312]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80045ae:	4013      	ands	r3, r2
 80045b0:	0019      	movs	r1, r3
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80045b6:	4b43      	ldr	r3, [pc, #268]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80045b8:	430a      	orrs	r2, r1
 80045ba:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80045c0:	2380      	movs	r3, #128	@ 0x80
 80045c2:	045b      	lsls	r3, r3, #17
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d106      	bne.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80045c8:	4b3e      	ldr	r3, [pc, #248]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80045ca:	68da      	ldr	r2, [r3, #12]
 80045cc:	4b3d      	ldr	r3, [pc, #244]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80045ce:	2180      	movs	r1, #128	@ 0x80
 80045d0:	0449      	lsls	r1, r1, #17
 80045d2:	430a      	orrs	r2, r1
 80045d4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	2380      	movs	r3, #128	@ 0x80
 80045dc:	011b      	lsls	r3, r3, #4
 80045de:	4013      	ands	r3, r2
 80045e0:	d014      	beq.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80045e2:	4b38      	ldr	r3, [pc, #224]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80045e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045e6:	2203      	movs	r2, #3
 80045e8:	4393      	bics	r3, r2
 80045ea:	0019      	movs	r1, r3
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6a1a      	ldr	r2, [r3, #32]
 80045f0:	4b34      	ldr	r3, [pc, #208]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80045f2:	430a      	orrs	r2, r1
 80045f4:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6a1b      	ldr	r3, [r3, #32]
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d106      	bne.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80045fe:	4b31      	ldr	r3, [pc, #196]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004600:	68da      	ldr	r2, [r3, #12]
 8004602:	4b30      	ldr	r3, [pc, #192]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004604:	2180      	movs	r1, #128	@ 0x80
 8004606:	0249      	lsls	r1, r1, #9
 8004608:	430a      	orrs	r2, r1
 800460a:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	2380      	movs	r3, #128	@ 0x80
 8004612:	019b      	lsls	r3, r3, #6
 8004614:	4013      	ands	r3, r2
 8004616:	d014      	beq.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8004618:	4b2a      	ldr	r3, [pc, #168]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800461a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800461c:	220c      	movs	r2, #12
 800461e:	4393      	bics	r3, r2
 8004620:	0019      	movs	r1, r3
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004626:	4b27      	ldr	r3, [pc, #156]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004628:	430a      	orrs	r2, r1
 800462a:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004630:	2b04      	cmp	r3, #4
 8004632:	d106      	bne.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004634:	4b23      	ldr	r3, [pc, #140]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004636:	68da      	ldr	r2, [r3, #12]
 8004638:	4b22      	ldr	r3, [pc, #136]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800463a:	2180      	movs	r1, #128	@ 0x80
 800463c:	0249      	lsls	r1, r1, #9
 800463e:	430a      	orrs	r2, r1
 8004640:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	2380      	movs	r3, #128	@ 0x80
 8004648:	045b      	lsls	r3, r3, #17
 800464a:	4013      	ands	r3, r2
 800464c:	d016      	beq.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800464e:	4b1d      	ldr	r3, [pc, #116]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004650:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004652:	4a22      	ldr	r2, [pc, #136]	@ (80046dc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8004654:	4013      	ands	r3, r2
 8004656:	0019      	movs	r1, r3
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800465c:	4b19      	ldr	r3, [pc, #100]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800465e:	430a      	orrs	r2, r1
 8004660:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004666:	2380      	movs	r3, #128	@ 0x80
 8004668:	019b      	lsls	r3, r3, #6
 800466a:	429a      	cmp	r2, r3
 800466c:	d106      	bne.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800466e:	4b15      	ldr	r3, [pc, #84]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004670:	68da      	ldr	r2, [r3, #12]
 8004672:	4b14      	ldr	r3, [pc, #80]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004674:	2180      	movs	r1, #128	@ 0x80
 8004676:	0449      	lsls	r1, r1, #17
 8004678:	430a      	orrs	r2, r1
 800467a:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	2380      	movs	r3, #128	@ 0x80
 8004682:	049b      	lsls	r3, r3, #18
 8004684:	4013      	ands	r3, r2
 8004686:	d016      	beq.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004688:	4b0e      	ldr	r3, [pc, #56]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800468a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800468c:	4a10      	ldr	r2, [pc, #64]	@ (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800468e:	4013      	ands	r3, r2
 8004690:	0019      	movs	r1, r3
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004696:	4b0b      	ldr	r3, [pc, #44]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004698:	430a      	orrs	r2, r1
 800469a:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80046a0:	2380      	movs	r3, #128	@ 0x80
 80046a2:	005b      	lsls	r3, r3, #1
 80046a4:	429a      	cmp	r2, r3
 80046a6:	d106      	bne.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80046a8:	4b06      	ldr	r3, [pc, #24]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80046aa:	68da      	ldr	r2, [r3, #12]
 80046ac:	4b05      	ldr	r3, [pc, #20]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80046ae:	2180      	movs	r1, #128	@ 0x80
 80046b0:	0449      	lsls	r1, r1, #17
 80046b2:	430a      	orrs	r2, r1
 80046b4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80046b6:	2312      	movs	r3, #18
 80046b8:	18fb      	adds	r3, r7, r3
 80046ba:	781b      	ldrb	r3, [r3, #0]
}
 80046bc:	0018      	movs	r0, r3
 80046be:	46bd      	mov	sp, r7
 80046c0:	b006      	add	sp, #24
 80046c2:	bd80      	pop	{r7, pc}
 80046c4:	40021000 	.word	0x40021000
 80046c8:	efffffff 	.word	0xefffffff
 80046cc:	fffff3ff 	.word	0xfffff3ff
 80046d0:	fffffcff 	.word	0xfffffcff
 80046d4:	fff3ffff 	.word	0xfff3ffff
 80046d8:	ffcfffff 	.word	0xffcfffff
 80046dc:	ffffcfff 	.word	0xffffcfff
 80046e0:	ffff3fff 	.word	0xffff3fff
 80046e4:	ffbfffff 	.word	0xffbfffff
 80046e8:	feffffff 	.word	0xfeffffff

080046ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b082      	sub	sp, #8
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d101      	bne.n	80046fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e046      	b.n	800478c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2288      	movs	r2, #136	@ 0x88
 8004702:	589b      	ldr	r3, [r3, r2]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d107      	bne.n	8004718 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2284      	movs	r2, #132	@ 0x84
 800470c:	2100      	movs	r1, #0
 800470e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	0018      	movs	r0, r3
 8004714:	f7fd fa66 	bl	8001be4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2288      	movs	r2, #136	@ 0x88
 800471c:	2124      	movs	r1, #36	@ 0x24
 800471e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	2101      	movs	r1, #1
 800472c:	438a      	bics	r2, r1
 800472e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004734:	2b00      	cmp	r3, #0
 8004736:	d003      	beq.n	8004740 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	0018      	movs	r0, r3
 800473c:	f001 f86a 	bl	8005814 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	0018      	movs	r0, r3
 8004744:	f000 fd10 	bl	8005168 <UART_SetConfig>
 8004748:	0003      	movs	r3, r0
 800474a:	2b01      	cmp	r3, #1
 800474c:	d101      	bne.n	8004752 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	e01c      	b.n	800478c <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	685a      	ldr	r2, [r3, #4]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	490d      	ldr	r1, [pc, #52]	@ (8004794 <HAL_UART_Init+0xa8>)
 800475e:	400a      	ands	r2, r1
 8004760:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	689a      	ldr	r2, [r3, #8]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	212a      	movs	r1, #42	@ 0x2a
 800476e:	438a      	bics	r2, r1
 8004770:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	2101      	movs	r1, #1
 800477e:	430a      	orrs	r2, r1
 8004780:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	0018      	movs	r0, r3
 8004786:	f001 f8f9 	bl	800597c <UART_CheckIdleState>
 800478a:	0003      	movs	r3, r0
}
 800478c:	0018      	movs	r0, r3
 800478e:	46bd      	mov	sp, r7
 8004790:	b002      	add	sp, #8
 8004792:	bd80      	pop	{r7, pc}
 8004794:	ffffb7ff 	.word	0xffffb7ff

08004798 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b08a      	sub	sp, #40	@ 0x28
 800479c:	af02      	add	r7, sp, #8
 800479e:	60f8      	str	r0, [r7, #12]
 80047a0:	60b9      	str	r1, [r7, #8]
 80047a2:	603b      	str	r3, [r7, #0]
 80047a4:	1dbb      	adds	r3, r7, #6
 80047a6:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2288      	movs	r2, #136	@ 0x88
 80047ac:	589b      	ldr	r3, [r3, r2]
 80047ae:	2b20      	cmp	r3, #32
 80047b0:	d000      	beq.n	80047b4 <HAL_UART_Transmit+0x1c>
 80047b2:	e090      	b.n	80048d6 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d003      	beq.n	80047c2 <HAL_UART_Transmit+0x2a>
 80047ba:	1dbb      	adds	r3, r7, #6
 80047bc:	881b      	ldrh	r3, [r3, #0]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d101      	bne.n	80047c6 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	e088      	b.n	80048d8 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	689a      	ldr	r2, [r3, #8]
 80047ca:	2380      	movs	r3, #128	@ 0x80
 80047cc:	015b      	lsls	r3, r3, #5
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d109      	bne.n	80047e6 <HAL_UART_Transmit+0x4e>
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	691b      	ldr	r3, [r3, #16]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d105      	bne.n	80047e6 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	2201      	movs	r2, #1
 80047de:	4013      	ands	r3, r2
 80047e0:	d001      	beq.n	80047e6 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e078      	b.n	80048d8 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2290      	movs	r2, #144	@ 0x90
 80047ea:	2100      	movs	r1, #0
 80047ec:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2288      	movs	r2, #136	@ 0x88
 80047f2:	2121      	movs	r1, #33	@ 0x21
 80047f4:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80047f6:	f7fd fcc9 	bl	800218c <HAL_GetTick>
 80047fa:	0003      	movs	r3, r0
 80047fc:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	1dba      	adds	r2, r7, #6
 8004802:	2154      	movs	r1, #84	@ 0x54
 8004804:	8812      	ldrh	r2, [r2, #0]
 8004806:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	1dba      	adds	r2, r7, #6
 800480c:	2156      	movs	r1, #86	@ 0x56
 800480e:	8812      	ldrh	r2, [r2, #0]
 8004810:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	689a      	ldr	r2, [r3, #8]
 8004816:	2380      	movs	r3, #128	@ 0x80
 8004818:	015b      	lsls	r3, r3, #5
 800481a:	429a      	cmp	r2, r3
 800481c:	d108      	bne.n	8004830 <HAL_UART_Transmit+0x98>
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	691b      	ldr	r3, [r3, #16]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d104      	bne.n	8004830 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8004826:	2300      	movs	r3, #0
 8004828:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	61bb      	str	r3, [r7, #24]
 800482e:	e003      	b.n	8004838 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004834:	2300      	movs	r3, #0
 8004836:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004838:	e030      	b.n	800489c <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800483a:	697a      	ldr	r2, [r7, #20]
 800483c:	68f8      	ldr	r0, [r7, #12]
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	9300      	str	r3, [sp, #0]
 8004842:	0013      	movs	r3, r2
 8004844:	2200      	movs	r2, #0
 8004846:	2180      	movs	r1, #128	@ 0x80
 8004848:	f001 f942 	bl	8005ad0 <UART_WaitOnFlagUntilTimeout>
 800484c:	1e03      	subs	r3, r0, #0
 800484e:	d005      	beq.n	800485c <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2288      	movs	r2, #136	@ 0x88
 8004854:	2120      	movs	r1, #32
 8004856:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004858:	2303      	movs	r3, #3
 800485a:	e03d      	b.n	80048d8 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 800485c:	69fb      	ldr	r3, [r7, #28]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d10b      	bne.n	800487a <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004862:	69bb      	ldr	r3, [r7, #24]
 8004864:	881b      	ldrh	r3, [r3, #0]
 8004866:	001a      	movs	r2, r3
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	05d2      	lsls	r2, r2, #23
 800486e:	0dd2      	lsrs	r2, r2, #23
 8004870:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004872:	69bb      	ldr	r3, [r7, #24]
 8004874:	3302      	adds	r3, #2
 8004876:	61bb      	str	r3, [r7, #24]
 8004878:	e007      	b.n	800488a <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800487a:	69fb      	ldr	r3, [r7, #28]
 800487c:	781a      	ldrb	r2, [r3, #0]
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004884:	69fb      	ldr	r3, [r7, #28]
 8004886:	3301      	adds	r3, #1
 8004888:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2256      	movs	r2, #86	@ 0x56
 800488e:	5a9b      	ldrh	r3, [r3, r2]
 8004890:	b29b      	uxth	r3, r3
 8004892:	3b01      	subs	r3, #1
 8004894:	b299      	uxth	r1, r3
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2256      	movs	r2, #86	@ 0x56
 800489a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2256      	movs	r2, #86	@ 0x56
 80048a0:	5a9b      	ldrh	r3, [r3, r2]
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d1c8      	bne.n	800483a <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80048a8:	697a      	ldr	r2, [r7, #20]
 80048aa:	68f8      	ldr	r0, [r7, #12]
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	9300      	str	r3, [sp, #0]
 80048b0:	0013      	movs	r3, r2
 80048b2:	2200      	movs	r2, #0
 80048b4:	2140      	movs	r1, #64	@ 0x40
 80048b6:	f001 f90b 	bl	8005ad0 <UART_WaitOnFlagUntilTimeout>
 80048ba:	1e03      	subs	r3, r0, #0
 80048bc:	d005      	beq.n	80048ca <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2288      	movs	r2, #136	@ 0x88
 80048c2:	2120      	movs	r1, #32
 80048c4:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 80048c6:	2303      	movs	r3, #3
 80048c8:	e006      	b.n	80048d8 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2288      	movs	r2, #136	@ 0x88
 80048ce:	2120      	movs	r1, #32
 80048d0:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80048d2:	2300      	movs	r3, #0
 80048d4:	e000      	b.n	80048d8 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 80048d6:	2302      	movs	r3, #2
  }
}
 80048d8:	0018      	movs	r0, r3
 80048da:	46bd      	mov	sp, r7
 80048dc:	b008      	add	sp, #32
 80048de:	bd80      	pop	{r7, pc}

080048e0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b088      	sub	sp, #32
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	60f8      	str	r0, [r7, #12]
 80048e8:	60b9      	str	r1, [r7, #8]
 80048ea:	1dbb      	adds	r3, r7, #6
 80048ec:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	228c      	movs	r2, #140	@ 0x8c
 80048f2:	589b      	ldr	r3, [r3, r2]
 80048f4:	2b20      	cmp	r3, #32
 80048f6:	d14f      	bne.n	8004998 <HAL_UART_Receive_DMA+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d003      	beq.n	8004906 <HAL_UART_Receive_DMA+0x26>
 80048fe:	1dbb      	adds	r3, r7, #6
 8004900:	881b      	ldrh	r3, [r3, #0]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d101      	bne.n	800490a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	e047      	b.n	800499a <HAL_UART_Receive_DMA+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	689a      	ldr	r2, [r3, #8]
 800490e:	2380      	movs	r3, #128	@ 0x80
 8004910:	015b      	lsls	r3, r3, #5
 8004912:	429a      	cmp	r2, r3
 8004914:	d109      	bne.n	800492a <HAL_UART_Receive_DMA+0x4a>
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	691b      	ldr	r3, [r3, #16]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d105      	bne.n	800492a <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	2201      	movs	r2, #1
 8004922:	4013      	ands	r3, r2
 8004924:	d001      	beq.n	800492a <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e037      	b.n	800499a <HAL_UART_Receive_DMA+0xba>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2200      	movs	r2, #0
 800492e:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a1b      	ldr	r2, [pc, #108]	@ (80049a4 <HAL_UART_Receive_DMA+0xc4>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d025      	beq.n	8004986 <HAL_UART_Receive_DMA+0xa6>
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a1a      	ldr	r2, [pc, #104]	@ (80049a8 <HAL_UART_Receive_DMA+0xc8>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d020      	beq.n	8004986 <HAL_UART_Receive_DMA+0xa6>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	685a      	ldr	r2, [r3, #4]
 800494a:	2380      	movs	r3, #128	@ 0x80
 800494c:	041b      	lsls	r3, r3, #16
 800494e:	4013      	ands	r3, r2
 8004950:	d019      	beq.n	8004986 <HAL_UART_Receive_DMA+0xa6>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004952:	f3ef 8310 	mrs	r3, PRIMASK
 8004956:	613b      	str	r3, [r7, #16]
  return(result);
 8004958:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800495a:	61fb      	str	r3, [r7, #28]
 800495c:	2301      	movs	r3, #1
 800495e:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	f383 8810 	msr	PRIMASK, r3
}
 8004966:	46c0      	nop			@ (mov r8, r8)
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	2180      	movs	r1, #128	@ 0x80
 8004974:	04c9      	lsls	r1, r1, #19
 8004976:	430a      	orrs	r2, r1
 8004978:	601a      	str	r2, [r3, #0]
 800497a:	69fb      	ldr	r3, [r7, #28]
 800497c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800497e:	69bb      	ldr	r3, [r7, #24]
 8004980:	f383 8810 	msr	PRIMASK, r3
}
 8004984:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004986:	1dbb      	adds	r3, r7, #6
 8004988:	881a      	ldrh	r2, [r3, #0]
 800498a:	68b9      	ldr	r1, [r7, #8]
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	0018      	movs	r0, r3
 8004990:	f001 f90e 	bl	8005bb0 <UART_Start_Receive_DMA>
 8004994:	0003      	movs	r3, r0
 8004996:	e000      	b.n	800499a <HAL_UART_Receive_DMA+0xba>
  }
  else
  {
    return HAL_BUSY;
 8004998:	2302      	movs	r3, #2
  }
}
 800499a:	0018      	movs	r0, r3
 800499c:	46bd      	mov	sp, r7
 800499e:	b008      	add	sp, #32
 80049a0:	bd80      	pop	{r7, pc}
 80049a2:	46c0      	nop			@ (mov r8, r8)
 80049a4:	40008000 	.word	0x40008000
 80049a8:	40008400 	.word	0x40008400

080049ac <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b08c      	sub	sp, #48	@ 0x30
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2288      	movs	r2, #136	@ 0x88
 80049b8:	589b      	ldr	r3, [r3, r2]
 80049ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	228c      	movs	r2, #140	@ 0x8c
 80049c0:	589b      	ldr	r3, [r3, r2]
 80049c2:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	2280      	movs	r2, #128	@ 0x80
 80049cc:	4013      	ands	r3, r2
 80049ce:	2b80      	cmp	r3, #128	@ 0x80
 80049d0:	d138      	bne.n	8004a44 <HAL_UART_DMAStop+0x98>
 80049d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049d4:	2b21      	cmp	r3, #33	@ 0x21
 80049d6:	d135      	bne.n	8004a44 <HAL_UART_DMAStop+0x98>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049d8:	f3ef 8310 	mrs	r3, PRIMASK
 80049dc:	617b      	str	r3, [r7, #20]
  return(result);
 80049de:	697b      	ldr	r3, [r7, #20]
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80049e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80049e2:	2301      	movs	r3, #1
 80049e4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049e6:	69bb      	ldr	r3, [r7, #24]
 80049e8:	f383 8810 	msr	PRIMASK, r3
}
 80049ec:	46c0      	nop			@ (mov r8, r8)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	689a      	ldr	r2, [r3, #8]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	2180      	movs	r1, #128	@ 0x80
 80049fa:	438a      	bics	r2, r1
 80049fc:	609a      	str	r2, [r3, #8]
 80049fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a00:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a02:	69fb      	ldr	r3, [r7, #28]
 8004a04:	f383 8810 	msr	PRIMASK, r3
}
 8004a08:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d014      	beq.n	8004a3c <HAL_UART_DMAStop+0x90>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004a16:	0018      	movs	r0, r3
 8004a18:	f7fd fe0c 	bl	8002634 <HAL_DMA_Abort>
 8004a1c:	1e03      	subs	r3, r0, #0
 8004a1e:	d00d      	beq.n	8004a3c <HAL_UART_DMAStop+0x90>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004a24:	0018      	movs	r0, r3
 8004a26:	f7fd ff91 	bl	800294c <HAL_DMA_GetError>
 8004a2a:	0003      	movs	r3, r0
 8004a2c:	2b20      	cmp	r3, #32
 8004a2e:	d105      	bne.n	8004a3c <HAL_UART_DMAStop+0x90>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2290      	movs	r2, #144	@ 0x90
 8004a34:	2110      	movs	r1, #16
 8004a36:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004a38:	2303      	movs	r3, #3
 8004a3a:	e047      	b.n	8004acc <HAL_UART_DMAStop+0x120>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	0018      	movs	r0, r3
 8004a40:	f001 f95c 	bl	8005cfc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	2240      	movs	r2, #64	@ 0x40
 8004a4c:	4013      	ands	r3, r2
 8004a4e:	2b40      	cmp	r3, #64	@ 0x40
 8004a50:	d13b      	bne.n	8004aca <HAL_UART_DMAStop+0x11e>
 8004a52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a54:	2b22      	cmp	r3, #34	@ 0x22
 8004a56:	d138      	bne.n	8004aca <HAL_UART_DMAStop+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a58:	f3ef 8310 	mrs	r3, PRIMASK
 8004a5c:	60bb      	str	r3, [r7, #8]
  return(result);
 8004a5e:	68bb      	ldr	r3, [r7, #8]
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a60:	623b      	str	r3, [r7, #32]
 8004a62:	2301      	movs	r3, #1
 8004a64:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	f383 8810 	msr	PRIMASK, r3
}
 8004a6c:	46c0      	nop			@ (mov r8, r8)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	689a      	ldr	r2, [r3, #8]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	2140      	movs	r1, #64	@ 0x40
 8004a7a:	438a      	bics	r2, r1
 8004a7c:	609a      	str	r2, [r3, #8]
 8004a7e:	6a3b      	ldr	r3, [r7, #32]
 8004a80:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	f383 8810 	msr	PRIMASK, r3
}
 8004a88:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2280      	movs	r2, #128	@ 0x80
 8004a8e:	589b      	ldr	r3, [r3, r2]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d016      	beq.n	8004ac2 <HAL_UART_DMAStop+0x116>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2280      	movs	r2, #128	@ 0x80
 8004a98:	589b      	ldr	r3, [r3, r2]
 8004a9a:	0018      	movs	r0, r3
 8004a9c:	f7fd fdca 	bl	8002634 <HAL_DMA_Abort>
 8004aa0:	1e03      	subs	r3, r0, #0
 8004aa2:	d00e      	beq.n	8004ac2 <HAL_UART_DMAStop+0x116>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2280      	movs	r2, #128	@ 0x80
 8004aa8:	589b      	ldr	r3, [r3, r2]
 8004aaa:	0018      	movs	r0, r3
 8004aac:	f7fd ff4e 	bl	800294c <HAL_DMA_GetError>
 8004ab0:	0003      	movs	r3, r0
 8004ab2:	2b20      	cmp	r3, #32
 8004ab4:	d105      	bne.n	8004ac2 <HAL_UART_DMAStop+0x116>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2290      	movs	r2, #144	@ 0x90
 8004aba:	2110      	movs	r1, #16
 8004abc:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004abe:	2303      	movs	r3, #3
 8004ac0:	e004      	b.n	8004acc <HAL_UART_DMAStop+0x120>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	0018      	movs	r0, r3
 8004ac6:	f001 f959 	bl	8005d7c <UART_EndRxTransfer>
  }

  return HAL_OK;
 8004aca:	2300      	movs	r3, #0
}
 8004acc:	0018      	movs	r0, r3
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	b00c      	add	sp, #48	@ 0x30
 8004ad2:	bd80      	pop	{r7, pc}

08004ad4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004ad4:	b5b0      	push	{r4, r5, r7, lr}
 8004ad6:	b0aa      	sub	sp, #168	@ 0xa8
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	69db      	ldr	r3, [r3, #28]
 8004ae2:	22a4      	movs	r2, #164	@ 0xa4
 8004ae4:	18b9      	adds	r1, r7, r2
 8004ae6:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	20a0      	movs	r0, #160	@ 0xa0
 8004af0:	1839      	adds	r1, r7, r0
 8004af2:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	249c      	movs	r4, #156	@ 0x9c
 8004afc:	1939      	adds	r1, r7, r4
 8004afe:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004b00:	0011      	movs	r1, r2
 8004b02:	18bb      	adds	r3, r7, r2
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4aa2      	ldr	r2, [pc, #648]	@ (8004d90 <HAL_UART_IRQHandler+0x2bc>)
 8004b08:	4013      	ands	r3, r2
 8004b0a:	2298      	movs	r2, #152	@ 0x98
 8004b0c:	18bd      	adds	r5, r7, r2
 8004b0e:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8004b10:	18bb      	adds	r3, r7, r2
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d11a      	bne.n	8004b4e <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004b18:	187b      	adds	r3, r7, r1
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	2220      	movs	r2, #32
 8004b1e:	4013      	ands	r3, r2
 8004b20:	d015      	beq.n	8004b4e <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004b22:	183b      	adds	r3, r7, r0
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	2220      	movs	r2, #32
 8004b28:	4013      	ands	r3, r2
 8004b2a:	d105      	bne.n	8004b38 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004b2c:	193b      	adds	r3, r7, r4
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	2380      	movs	r3, #128	@ 0x80
 8004b32:	055b      	lsls	r3, r3, #21
 8004b34:	4013      	ands	r3, r2
 8004b36:	d00a      	beq.n	8004b4e <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d100      	bne.n	8004b42 <HAL_UART_IRQHandler+0x6e>
 8004b40:	e2dc      	b.n	80050fc <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	0010      	movs	r0, r2
 8004b4a:	4798      	blx	r3
      }
      return;
 8004b4c:	e2d6      	b.n	80050fc <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004b4e:	2398      	movs	r3, #152	@ 0x98
 8004b50:	18fb      	adds	r3, r7, r3
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d100      	bne.n	8004b5a <HAL_UART_IRQHandler+0x86>
 8004b58:	e122      	b.n	8004da0 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004b5a:	239c      	movs	r3, #156	@ 0x9c
 8004b5c:	18fb      	adds	r3, r7, r3
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a8c      	ldr	r2, [pc, #560]	@ (8004d94 <HAL_UART_IRQHandler+0x2c0>)
 8004b62:	4013      	ands	r3, r2
 8004b64:	d106      	bne.n	8004b74 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004b66:	23a0      	movs	r3, #160	@ 0xa0
 8004b68:	18fb      	adds	r3, r7, r3
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a8a      	ldr	r2, [pc, #552]	@ (8004d98 <HAL_UART_IRQHandler+0x2c4>)
 8004b6e:	4013      	ands	r3, r2
 8004b70:	d100      	bne.n	8004b74 <HAL_UART_IRQHandler+0xa0>
 8004b72:	e115      	b.n	8004da0 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004b74:	23a4      	movs	r3, #164	@ 0xa4
 8004b76:	18fb      	adds	r3, r7, r3
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	d012      	beq.n	8004ba6 <HAL_UART_IRQHandler+0xd2>
 8004b80:	23a0      	movs	r3, #160	@ 0xa0
 8004b82:	18fb      	adds	r3, r7, r3
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	2380      	movs	r3, #128	@ 0x80
 8004b88:	005b      	lsls	r3, r3, #1
 8004b8a:	4013      	ands	r3, r2
 8004b8c:	d00b      	beq.n	8004ba6 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	2201      	movs	r2, #1
 8004b94:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2290      	movs	r2, #144	@ 0x90
 8004b9a:	589b      	ldr	r3, [r3, r2]
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	431a      	orrs	r2, r3
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2190      	movs	r1, #144	@ 0x90
 8004ba4:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004ba6:	23a4      	movs	r3, #164	@ 0xa4
 8004ba8:	18fb      	adds	r3, r7, r3
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	2202      	movs	r2, #2
 8004bae:	4013      	ands	r3, r2
 8004bb0:	d011      	beq.n	8004bd6 <HAL_UART_IRQHandler+0x102>
 8004bb2:	239c      	movs	r3, #156	@ 0x9c
 8004bb4:	18fb      	adds	r3, r7, r3
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	2201      	movs	r2, #1
 8004bba:	4013      	ands	r3, r2
 8004bbc:	d00b      	beq.n	8004bd6 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	2202      	movs	r2, #2
 8004bc4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2290      	movs	r2, #144	@ 0x90
 8004bca:	589b      	ldr	r3, [r3, r2]
 8004bcc:	2204      	movs	r2, #4
 8004bce:	431a      	orrs	r2, r3
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2190      	movs	r1, #144	@ 0x90
 8004bd4:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004bd6:	23a4      	movs	r3, #164	@ 0xa4
 8004bd8:	18fb      	adds	r3, r7, r3
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	2204      	movs	r2, #4
 8004bde:	4013      	ands	r3, r2
 8004be0:	d011      	beq.n	8004c06 <HAL_UART_IRQHandler+0x132>
 8004be2:	239c      	movs	r3, #156	@ 0x9c
 8004be4:	18fb      	adds	r3, r7, r3
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	2201      	movs	r2, #1
 8004bea:	4013      	ands	r3, r2
 8004bec:	d00b      	beq.n	8004c06 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	2204      	movs	r2, #4
 8004bf4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2290      	movs	r2, #144	@ 0x90
 8004bfa:	589b      	ldr	r3, [r3, r2]
 8004bfc:	2202      	movs	r2, #2
 8004bfe:	431a      	orrs	r2, r3
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2190      	movs	r1, #144	@ 0x90
 8004c04:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004c06:	23a4      	movs	r3, #164	@ 0xa4
 8004c08:	18fb      	adds	r3, r7, r3
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	2208      	movs	r2, #8
 8004c0e:	4013      	ands	r3, r2
 8004c10:	d017      	beq.n	8004c42 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004c12:	23a0      	movs	r3, #160	@ 0xa0
 8004c14:	18fb      	adds	r3, r7, r3
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	2220      	movs	r2, #32
 8004c1a:	4013      	ands	r3, r2
 8004c1c:	d105      	bne.n	8004c2a <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004c1e:	239c      	movs	r3, #156	@ 0x9c
 8004c20:	18fb      	adds	r3, r7, r3
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a5b      	ldr	r2, [pc, #364]	@ (8004d94 <HAL_UART_IRQHandler+0x2c0>)
 8004c26:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004c28:	d00b      	beq.n	8004c42 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	2208      	movs	r2, #8
 8004c30:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2290      	movs	r2, #144	@ 0x90
 8004c36:	589b      	ldr	r3, [r3, r2]
 8004c38:	2208      	movs	r2, #8
 8004c3a:	431a      	orrs	r2, r3
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2190      	movs	r1, #144	@ 0x90
 8004c40:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004c42:	23a4      	movs	r3, #164	@ 0xa4
 8004c44:	18fb      	adds	r3, r7, r3
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	2380      	movs	r3, #128	@ 0x80
 8004c4a:	011b      	lsls	r3, r3, #4
 8004c4c:	4013      	ands	r3, r2
 8004c4e:	d013      	beq.n	8004c78 <HAL_UART_IRQHandler+0x1a4>
 8004c50:	23a0      	movs	r3, #160	@ 0xa0
 8004c52:	18fb      	adds	r3, r7, r3
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	2380      	movs	r3, #128	@ 0x80
 8004c58:	04db      	lsls	r3, r3, #19
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	d00c      	beq.n	8004c78 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	2280      	movs	r2, #128	@ 0x80
 8004c64:	0112      	lsls	r2, r2, #4
 8004c66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2290      	movs	r2, #144	@ 0x90
 8004c6c:	589b      	ldr	r3, [r3, r2]
 8004c6e:	2220      	movs	r2, #32
 8004c70:	431a      	orrs	r2, r3
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2190      	movs	r1, #144	@ 0x90
 8004c76:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2290      	movs	r2, #144	@ 0x90
 8004c7c:	589b      	ldr	r3, [r3, r2]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d100      	bne.n	8004c84 <HAL_UART_IRQHandler+0x1b0>
 8004c82:	e23d      	b.n	8005100 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004c84:	23a4      	movs	r3, #164	@ 0xa4
 8004c86:	18fb      	adds	r3, r7, r3
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	2220      	movs	r2, #32
 8004c8c:	4013      	ands	r3, r2
 8004c8e:	d015      	beq.n	8004cbc <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004c90:	23a0      	movs	r3, #160	@ 0xa0
 8004c92:	18fb      	adds	r3, r7, r3
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	2220      	movs	r2, #32
 8004c98:	4013      	ands	r3, r2
 8004c9a:	d106      	bne.n	8004caa <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004c9c:	239c      	movs	r3, #156	@ 0x9c
 8004c9e:	18fb      	adds	r3, r7, r3
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	2380      	movs	r3, #128	@ 0x80
 8004ca4:	055b      	lsls	r3, r3, #21
 8004ca6:	4013      	ands	r3, r2
 8004ca8:	d008      	beq.n	8004cbc <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d004      	beq.n	8004cbc <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004cb6:	687a      	ldr	r2, [r7, #4]
 8004cb8:	0010      	movs	r0, r2
 8004cba:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2290      	movs	r2, #144	@ 0x90
 8004cc0:	589b      	ldr	r3, [r3, r2]
 8004cc2:	2194      	movs	r1, #148	@ 0x94
 8004cc4:	187a      	adds	r2, r7, r1
 8004cc6:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	2240      	movs	r2, #64	@ 0x40
 8004cd0:	4013      	ands	r3, r2
 8004cd2:	2b40      	cmp	r3, #64	@ 0x40
 8004cd4:	d004      	beq.n	8004ce0 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004cd6:	187b      	adds	r3, r7, r1
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	2228      	movs	r2, #40	@ 0x28
 8004cdc:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004cde:	d04c      	beq.n	8004d7a <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	0018      	movs	r0, r3
 8004ce4:	f001 f84a 	bl	8005d7c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	2240      	movs	r2, #64	@ 0x40
 8004cf0:	4013      	ands	r3, r2
 8004cf2:	2b40      	cmp	r3, #64	@ 0x40
 8004cf4:	d13c      	bne.n	8004d70 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cf6:	f3ef 8310 	mrs	r3, PRIMASK
 8004cfa:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8004cfc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004cfe:	2090      	movs	r0, #144	@ 0x90
 8004d00:	183a      	adds	r2, r7, r0
 8004d02:	6013      	str	r3, [r2, #0]
 8004d04:	2301      	movs	r3, #1
 8004d06:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d08:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004d0a:	f383 8810 	msr	PRIMASK, r3
}
 8004d0e:	46c0      	nop			@ (mov r8, r8)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	689a      	ldr	r2, [r3, #8]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	2140      	movs	r1, #64	@ 0x40
 8004d1c:	438a      	bics	r2, r1
 8004d1e:	609a      	str	r2, [r3, #8]
 8004d20:	183b      	adds	r3, r7, r0
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d26:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004d28:	f383 8810 	msr	PRIMASK, r3
}
 8004d2c:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2280      	movs	r2, #128	@ 0x80
 8004d32:	589b      	ldr	r3, [r3, r2]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d016      	beq.n	8004d66 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2280      	movs	r2, #128	@ 0x80
 8004d3c:	589b      	ldr	r3, [r3, r2]
 8004d3e:	4a17      	ldr	r2, [pc, #92]	@ (8004d9c <HAL_UART_IRQHandler+0x2c8>)
 8004d40:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2280      	movs	r2, #128	@ 0x80
 8004d46:	589b      	ldr	r3, [r3, r2]
 8004d48:	0018      	movs	r0, r3
 8004d4a:	f7fd fcd3 	bl	80026f4 <HAL_DMA_Abort_IT>
 8004d4e:	1e03      	subs	r3, r0, #0
 8004d50:	d01c      	beq.n	8004d8c <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2280      	movs	r2, #128	@ 0x80
 8004d56:	589b      	ldr	r3, [r3, r2]
 8004d58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	2180      	movs	r1, #128	@ 0x80
 8004d5e:	5852      	ldr	r2, [r2, r1]
 8004d60:	0010      	movs	r0, r2
 8004d62:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d64:	e012      	b.n	8004d8c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	0018      	movs	r0, r3
 8004d6a:	f000 f9e9 	bl	8005140 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d6e:	e00d      	b.n	8004d8c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	0018      	movs	r0, r3
 8004d74:	f000 f9e4 	bl	8005140 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d78:	e008      	b.n	8004d8c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	0018      	movs	r0, r3
 8004d7e:	f000 f9df 	bl	8005140 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2290      	movs	r2, #144	@ 0x90
 8004d86:	2100      	movs	r1, #0
 8004d88:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8004d8a:	e1b9      	b.n	8005100 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d8c:	46c0      	nop			@ (mov r8, r8)
    return;
 8004d8e:	e1b7      	b.n	8005100 <HAL_UART_IRQHandler+0x62c>
 8004d90:	0000080f 	.word	0x0000080f
 8004d94:	10000001 	.word	0x10000001
 8004d98:	04000120 	.word	0x04000120
 8004d9c:	08006041 	.word	0x08006041

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d000      	beq.n	8004daa <HAL_UART_IRQHandler+0x2d6>
 8004da8:	e13e      	b.n	8005028 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004daa:	23a4      	movs	r3, #164	@ 0xa4
 8004dac:	18fb      	adds	r3, r7, r3
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	2210      	movs	r2, #16
 8004db2:	4013      	ands	r3, r2
 8004db4:	d100      	bne.n	8004db8 <HAL_UART_IRQHandler+0x2e4>
 8004db6:	e137      	b.n	8005028 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004db8:	23a0      	movs	r3, #160	@ 0xa0
 8004dba:	18fb      	adds	r3, r7, r3
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	2210      	movs	r2, #16
 8004dc0:	4013      	ands	r3, r2
 8004dc2:	d100      	bne.n	8004dc6 <HAL_UART_IRQHandler+0x2f2>
 8004dc4:	e130      	b.n	8005028 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	2210      	movs	r2, #16
 8004dcc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	2240      	movs	r2, #64	@ 0x40
 8004dd6:	4013      	ands	r3, r2
 8004dd8:	2b40      	cmp	r3, #64	@ 0x40
 8004dda:	d000      	beq.n	8004dde <HAL_UART_IRQHandler+0x30a>
 8004ddc:	e0a4      	b.n	8004f28 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2280      	movs	r2, #128	@ 0x80
 8004de2:	589b      	ldr	r3, [r3, r2]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	685a      	ldr	r2, [r3, #4]
 8004de8:	217e      	movs	r1, #126	@ 0x7e
 8004dea:	187b      	adds	r3, r7, r1
 8004dec:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8004dee:	187b      	adds	r3, r7, r1
 8004df0:	881b      	ldrh	r3, [r3, #0]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d100      	bne.n	8004df8 <HAL_UART_IRQHandler+0x324>
 8004df6:	e185      	b.n	8005104 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	225c      	movs	r2, #92	@ 0x5c
 8004dfc:	5a9b      	ldrh	r3, [r3, r2]
 8004dfe:	187a      	adds	r2, r7, r1
 8004e00:	8812      	ldrh	r2, [r2, #0]
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d300      	bcc.n	8004e08 <HAL_UART_IRQHandler+0x334>
 8004e06:	e17d      	b.n	8005104 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	187a      	adds	r2, r7, r1
 8004e0c:	215e      	movs	r1, #94	@ 0x5e
 8004e0e:	8812      	ldrh	r2, [r2, #0]
 8004e10:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2280      	movs	r2, #128	@ 0x80
 8004e16:	589b      	ldr	r3, [r3, r2]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	2220      	movs	r2, #32
 8004e1e:	4013      	ands	r3, r2
 8004e20:	d170      	bne.n	8004f04 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e22:	f3ef 8310 	mrs	r3, PRIMASK
 8004e26:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8004e28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e2a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e32:	f383 8810 	msr	PRIMASK, r3
}
 8004e36:	46c0      	nop			@ (mov r8, r8)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	49b4      	ldr	r1, [pc, #720]	@ (8005114 <HAL_UART_IRQHandler+0x640>)
 8004e44:	400a      	ands	r2, r1
 8004e46:	601a      	str	r2, [r3, #0]
 8004e48:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004e4a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e4e:	f383 8810 	msr	PRIMASK, r3
}
 8004e52:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e54:	f3ef 8310 	mrs	r3, PRIMASK
 8004e58:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8004e5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e5c:	677b      	str	r3, [r7, #116]	@ 0x74
 8004e5e:	2301      	movs	r3, #1
 8004e60:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e64:	f383 8810 	msr	PRIMASK, r3
}
 8004e68:	46c0      	nop			@ (mov r8, r8)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	689a      	ldr	r2, [r3, #8]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	2101      	movs	r1, #1
 8004e76:	438a      	bics	r2, r1
 8004e78:	609a      	str	r2, [r3, #8]
 8004e7a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004e7c:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e80:	f383 8810 	msr	PRIMASK, r3
}
 8004e84:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e86:	f3ef 8310 	mrs	r3, PRIMASK
 8004e8a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8004e8c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e8e:	673b      	str	r3, [r7, #112]	@ 0x70
 8004e90:	2301      	movs	r3, #1
 8004e92:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e96:	f383 8810 	msr	PRIMASK, r3
}
 8004e9a:	46c0      	nop			@ (mov r8, r8)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	689a      	ldr	r2, [r3, #8]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	2140      	movs	r1, #64	@ 0x40
 8004ea8:	438a      	bics	r2, r1
 8004eaa:	609a      	str	r2, [r3, #8]
 8004eac:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004eae:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004eb0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004eb2:	f383 8810 	msr	PRIMASK, r3
}
 8004eb6:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	228c      	movs	r2, #140	@ 0x8c
 8004ebc:	2120      	movs	r1, #32
 8004ebe:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ec6:	f3ef 8310 	mrs	r3, PRIMASK
 8004eca:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8004ecc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ece:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ed4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004ed6:	f383 8810 	msr	PRIMASK, r3
}
 8004eda:	46c0      	nop			@ (mov r8, r8)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	2110      	movs	r1, #16
 8004ee8:	438a      	bics	r2, r1
 8004eea:	601a      	str	r2, [r3, #0]
 8004eec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004eee:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ef0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004ef2:	f383 8810 	msr	PRIMASK, r3
}
 8004ef6:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2280      	movs	r2, #128	@ 0x80
 8004efc:	589b      	ldr	r3, [r3, r2]
 8004efe:	0018      	movs	r0, r3
 8004f00:	f7fd fb98 	bl	8002634 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2202      	movs	r2, #2
 8004f08:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	225c      	movs	r2, #92	@ 0x5c
 8004f0e:	5a9a      	ldrh	r2, [r3, r2]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	215e      	movs	r1, #94	@ 0x5e
 8004f14:	5a5b      	ldrh	r3, [r3, r1]
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	1ad3      	subs	r3, r2, r3
 8004f1a:	b29a      	uxth	r2, r3
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	0011      	movs	r1, r2
 8004f20:	0018      	movs	r0, r3
 8004f22:	f000 f915 	bl	8005150 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004f26:	e0ed      	b.n	8005104 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	225c      	movs	r2, #92	@ 0x5c
 8004f2c:	5a99      	ldrh	r1, [r3, r2]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	225e      	movs	r2, #94	@ 0x5e
 8004f32:	5a9b      	ldrh	r3, [r3, r2]
 8004f34:	b29a      	uxth	r2, r3
 8004f36:	208e      	movs	r0, #142	@ 0x8e
 8004f38:	183b      	adds	r3, r7, r0
 8004f3a:	1a8a      	subs	r2, r1, r2
 8004f3c:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	225e      	movs	r2, #94	@ 0x5e
 8004f42:	5a9b      	ldrh	r3, [r3, r2]
 8004f44:	b29b      	uxth	r3, r3
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d100      	bne.n	8004f4c <HAL_UART_IRQHandler+0x478>
 8004f4a:	e0dd      	b.n	8005108 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8004f4c:	183b      	adds	r3, r7, r0
 8004f4e:	881b      	ldrh	r3, [r3, #0]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d100      	bne.n	8004f56 <HAL_UART_IRQHandler+0x482>
 8004f54:	e0d8      	b.n	8005108 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f56:	f3ef 8310 	mrs	r3, PRIMASK
 8004f5a:	60fb      	str	r3, [r7, #12]
  return(result);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004f5e:	2488      	movs	r4, #136	@ 0x88
 8004f60:	193a      	adds	r2, r7, r4
 8004f62:	6013      	str	r3, [r2, #0]
 8004f64:	2301      	movs	r3, #1
 8004f66:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	f383 8810 	msr	PRIMASK, r3
}
 8004f6e:	46c0      	nop			@ (mov r8, r8)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4967      	ldr	r1, [pc, #412]	@ (8005118 <HAL_UART_IRQHandler+0x644>)
 8004f7c:	400a      	ands	r2, r1
 8004f7e:	601a      	str	r2, [r3, #0]
 8004f80:	193b      	adds	r3, r7, r4
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	f383 8810 	msr	PRIMASK, r3
}
 8004f8c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f8e:	f3ef 8310 	mrs	r3, PRIMASK
 8004f92:	61bb      	str	r3, [r7, #24]
  return(result);
 8004f94:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004f96:	2484      	movs	r4, #132	@ 0x84
 8004f98:	193a      	adds	r2, r7, r4
 8004f9a:	6013      	str	r3, [r2, #0]
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fa0:	69fb      	ldr	r3, [r7, #28]
 8004fa2:	f383 8810 	msr	PRIMASK, r3
}
 8004fa6:	46c0      	nop			@ (mov r8, r8)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	689a      	ldr	r2, [r3, #8]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	495a      	ldr	r1, [pc, #360]	@ (800511c <HAL_UART_IRQHandler+0x648>)
 8004fb4:	400a      	ands	r2, r1
 8004fb6:	609a      	str	r2, [r3, #8]
 8004fb8:	193b      	adds	r3, r7, r4
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fbe:	6a3b      	ldr	r3, [r7, #32]
 8004fc0:	f383 8810 	msr	PRIMASK, r3
}
 8004fc4:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	228c      	movs	r2, #140	@ 0x8c
 8004fca:	2120      	movs	r1, #32
 8004fcc:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fda:	f3ef 8310 	mrs	r3, PRIMASK
 8004fde:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fe2:	2480      	movs	r4, #128	@ 0x80
 8004fe4:	193a      	adds	r2, r7, r4
 8004fe6:	6013      	str	r3, [r2, #0]
 8004fe8:	2301      	movs	r3, #1
 8004fea:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fee:	f383 8810 	msr	PRIMASK, r3
}
 8004ff2:	46c0      	nop			@ (mov r8, r8)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	681a      	ldr	r2, [r3, #0]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	2110      	movs	r1, #16
 8005000:	438a      	bics	r2, r1
 8005002:	601a      	str	r2, [r3, #0]
 8005004:	193b      	adds	r3, r7, r4
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800500a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800500c:	f383 8810 	msr	PRIMASK, r3
}
 8005010:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2202      	movs	r2, #2
 8005016:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005018:	183b      	adds	r3, r7, r0
 800501a:	881a      	ldrh	r2, [r3, #0]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	0011      	movs	r1, r2
 8005020:	0018      	movs	r0, r3
 8005022:	f000 f895 	bl	8005150 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005026:	e06f      	b.n	8005108 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005028:	23a4      	movs	r3, #164	@ 0xa4
 800502a:	18fb      	adds	r3, r7, r3
 800502c:	681a      	ldr	r2, [r3, #0]
 800502e:	2380      	movs	r3, #128	@ 0x80
 8005030:	035b      	lsls	r3, r3, #13
 8005032:	4013      	ands	r3, r2
 8005034:	d010      	beq.n	8005058 <HAL_UART_IRQHandler+0x584>
 8005036:	239c      	movs	r3, #156	@ 0x9c
 8005038:	18fb      	adds	r3, r7, r3
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	2380      	movs	r3, #128	@ 0x80
 800503e:	03db      	lsls	r3, r3, #15
 8005040:	4013      	ands	r3, r2
 8005042:	d009      	beq.n	8005058 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	2280      	movs	r2, #128	@ 0x80
 800504a:	0352      	lsls	r2, r2, #13
 800504c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	0018      	movs	r0, r3
 8005052:	f001 f8ab 	bl	80061ac <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005056:	e05a      	b.n	800510e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005058:	23a4      	movs	r3, #164	@ 0xa4
 800505a:	18fb      	adds	r3, r7, r3
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	2280      	movs	r2, #128	@ 0x80
 8005060:	4013      	ands	r3, r2
 8005062:	d016      	beq.n	8005092 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005064:	23a0      	movs	r3, #160	@ 0xa0
 8005066:	18fb      	adds	r3, r7, r3
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	2280      	movs	r2, #128	@ 0x80
 800506c:	4013      	ands	r3, r2
 800506e:	d106      	bne.n	800507e <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005070:	239c      	movs	r3, #156	@ 0x9c
 8005072:	18fb      	adds	r3, r7, r3
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	2380      	movs	r3, #128	@ 0x80
 8005078:	041b      	lsls	r3, r3, #16
 800507a:	4013      	ands	r3, r2
 800507c:	d009      	beq.n	8005092 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005082:	2b00      	cmp	r3, #0
 8005084:	d042      	beq.n	800510c <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800508a:	687a      	ldr	r2, [r7, #4]
 800508c:	0010      	movs	r0, r2
 800508e:	4798      	blx	r3
    }
    return;
 8005090:	e03c      	b.n	800510c <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005092:	23a4      	movs	r3, #164	@ 0xa4
 8005094:	18fb      	adds	r3, r7, r3
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	2240      	movs	r2, #64	@ 0x40
 800509a:	4013      	ands	r3, r2
 800509c:	d00a      	beq.n	80050b4 <HAL_UART_IRQHandler+0x5e0>
 800509e:	23a0      	movs	r3, #160	@ 0xa0
 80050a0:	18fb      	adds	r3, r7, r3
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	2240      	movs	r2, #64	@ 0x40
 80050a6:	4013      	ands	r3, r2
 80050a8:	d004      	beq.n	80050b4 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	0018      	movs	r0, r3
 80050ae:	f000 ffde 	bl	800606e <UART_EndTransmit_IT>
    return;
 80050b2:	e02c      	b.n	800510e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80050b4:	23a4      	movs	r3, #164	@ 0xa4
 80050b6:	18fb      	adds	r3, r7, r3
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	2380      	movs	r3, #128	@ 0x80
 80050bc:	041b      	lsls	r3, r3, #16
 80050be:	4013      	ands	r3, r2
 80050c0:	d00b      	beq.n	80050da <HAL_UART_IRQHandler+0x606>
 80050c2:	23a0      	movs	r3, #160	@ 0xa0
 80050c4:	18fb      	adds	r3, r7, r3
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	2380      	movs	r3, #128	@ 0x80
 80050ca:	05db      	lsls	r3, r3, #23
 80050cc:	4013      	ands	r3, r2
 80050ce:	d004      	beq.n	80050da <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	0018      	movs	r0, r3
 80050d4:	f001 f87a 	bl	80061cc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80050d8:	e019      	b.n	800510e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80050da:	23a4      	movs	r3, #164	@ 0xa4
 80050dc:	18fb      	adds	r3, r7, r3
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	2380      	movs	r3, #128	@ 0x80
 80050e2:	045b      	lsls	r3, r3, #17
 80050e4:	4013      	ands	r3, r2
 80050e6:	d012      	beq.n	800510e <HAL_UART_IRQHandler+0x63a>
 80050e8:	23a0      	movs	r3, #160	@ 0xa0
 80050ea:	18fb      	adds	r3, r7, r3
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	da0d      	bge.n	800510e <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	0018      	movs	r0, r3
 80050f6:	f001 f861 	bl	80061bc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80050fa:	e008      	b.n	800510e <HAL_UART_IRQHandler+0x63a>
      return;
 80050fc:	46c0      	nop			@ (mov r8, r8)
 80050fe:	e006      	b.n	800510e <HAL_UART_IRQHandler+0x63a>
    return;
 8005100:	46c0      	nop			@ (mov r8, r8)
 8005102:	e004      	b.n	800510e <HAL_UART_IRQHandler+0x63a>
      return;
 8005104:	46c0      	nop			@ (mov r8, r8)
 8005106:	e002      	b.n	800510e <HAL_UART_IRQHandler+0x63a>
      return;
 8005108:	46c0      	nop			@ (mov r8, r8)
 800510a:	e000      	b.n	800510e <HAL_UART_IRQHandler+0x63a>
    return;
 800510c:	46c0      	nop			@ (mov r8, r8)
  }
}
 800510e:	46bd      	mov	sp, r7
 8005110:	b02a      	add	sp, #168	@ 0xa8
 8005112:	bdb0      	pop	{r4, r5, r7, pc}
 8005114:	fffffeff 	.word	0xfffffeff
 8005118:	fffffedf 	.word	0xfffffedf
 800511c:	effffffe 	.word	0xeffffffe

08005120 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b082      	sub	sp, #8
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005128:	46c0      	nop			@ (mov r8, r8)
 800512a:	46bd      	mov	sp, r7
 800512c:	b002      	add	sp, #8
 800512e:	bd80      	pop	{r7, pc}

08005130 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b082      	sub	sp, #8
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8005138:	46c0      	nop			@ (mov r8, r8)
 800513a:	46bd      	mov	sp, r7
 800513c:	b002      	add	sp, #8
 800513e:	bd80      	pop	{r7, pc}

08005140 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b082      	sub	sp, #8
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005148:	46c0      	nop			@ (mov r8, r8)
 800514a:	46bd      	mov	sp, r7
 800514c:	b002      	add	sp, #8
 800514e:	bd80      	pop	{r7, pc}

08005150 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b082      	sub	sp, #8
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	000a      	movs	r2, r1
 800515a:	1cbb      	adds	r3, r7, #2
 800515c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800515e:	46c0      	nop			@ (mov r8, r8)
 8005160:	46bd      	mov	sp, r7
 8005162:	b002      	add	sp, #8
 8005164:	bd80      	pop	{r7, pc}
	...

08005168 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005168:	b5b0      	push	{r4, r5, r7, lr}
 800516a:	b090      	sub	sp, #64	@ 0x40
 800516c:	af00      	add	r7, sp, #0
 800516e:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005170:	231a      	movs	r3, #26
 8005172:	2220      	movs	r2, #32
 8005174:	189b      	adds	r3, r3, r2
 8005176:	19db      	adds	r3, r3, r7
 8005178:	2200      	movs	r2, #0
 800517a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800517c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800517e:	689a      	ldr	r2, [r3, #8]
 8005180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005182:	691b      	ldr	r3, [r3, #16]
 8005184:	431a      	orrs	r2, r3
 8005186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005188:	695b      	ldr	r3, [r3, #20]
 800518a:	431a      	orrs	r2, r3
 800518c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800518e:	69db      	ldr	r3, [r3, #28]
 8005190:	4313      	orrs	r3, r2
 8005192:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4ac1      	ldr	r2, [pc, #772]	@ (80054a0 <UART_SetConfig+0x338>)
 800519c:	4013      	ands	r3, r2
 800519e:	0019      	movs	r1, r3
 80051a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051a2:	681a      	ldr	r2, [r3, #0]
 80051a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051a6:	430b      	orrs	r3, r1
 80051a8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	4abc      	ldr	r2, [pc, #752]	@ (80054a4 <UART_SetConfig+0x33c>)
 80051b2:	4013      	ands	r3, r2
 80051b4:	0018      	movs	r0, r3
 80051b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051b8:	68d9      	ldr	r1, [r3, #12]
 80051ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	0003      	movs	r3, r0
 80051c0:	430b      	orrs	r3, r1
 80051c2:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80051c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051c6:	699b      	ldr	r3, [r3, #24]
 80051c8:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80051ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4ab6      	ldr	r2, [pc, #728]	@ (80054a8 <UART_SetConfig+0x340>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d009      	beq.n	80051e8 <UART_SetConfig+0x80>
 80051d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4ab4      	ldr	r2, [pc, #720]	@ (80054ac <UART_SetConfig+0x344>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d004      	beq.n	80051e8 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80051de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051e0:	6a1b      	ldr	r3, [r3, #32]
 80051e2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80051e4:	4313      	orrs	r3, r2
 80051e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80051e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	4ab0      	ldr	r2, [pc, #704]	@ (80054b0 <UART_SetConfig+0x348>)
 80051f0:	4013      	ands	r3, r2
 80051f2:	0019      	movs	r1, r3
 80051f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051f6:	681a      	ldr	r2, [r3, #0]
 80051f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051fa:	430b      	orrs	r3, r1
 80051fc:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80051fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005204:	220f      	movs	r2, #15
 8005206:	4393      	bics	r3, r2
 8005208:	0018      	movs	r0, r3
 800520a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800520c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800520e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	0003      	movs	r3, r0
 8005214:	430b      	orrs	r3, r1
 8005216:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4aa5      	ldr	r2, [pc, #660]	@ (80054b4 <UART_SetConfig+0x34c>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d131      	bne.n	8005286 <UART_SetConfig+0x11e>
 8005222:	4ba5      	ldr	r3, [pc, #660]	@ (80054b8 <UART_SetConfig+0x350>)
 8005224:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005226:	2203      	movs	r2, #3
 8005228:	4013      	ands	r3, r2
 800522a:	2b03      	cmp	r3, #3
 800522c:	d01d      	beq.n	800526a <UART_SetConfig+0x102>
 800522e:	d823      	bhi.n	8005278 <UART_SetConfig+0x110>
 8005230:	2b02      	cmp	r3, #2
 8005232:	d00c      	beq.n	800524e <UART_SetConfig+0xe6>
 8005234:	d820      	bhi.n	8005278 <UART_SetConfig+0x110>
 8005236:	2b00      	cmp	r3, #0
 8005238:	d002      	beq.n	8005240 <UART_SetConfig+0xd8>
 800523a:	2b01      	cmp	r3, #1
 800523c:	d00e      	beq.n	800525c <UART_SetConfig+0xf4>
 800523e:	e01b      	b.n	8005278 <UART_SetConfig+0x110>
 8005240:	231b      	movs	r3, #27
 8005242:	2220      	movs	r2, #32
 8005244:	189b      	adds	r3, r3, r2
 8005246:	19db      	adds	r3, r3, r7
 8005248:	2200      	movs	r2, #0
 800524a:	701a      	strb	r2, [r3, #0]
 800524c:	e154      	b.n	80054f8 <UART_SetConfig+0x390>
 800524e:	231b      	movs	r3, #27
 8005250:	2220      	movs	r2, #32
 8005252:	189b      	adds	r3, r3, r2
 8005254:	19db      	adds	r3, r3, r7
 8005256:	2202      	movs	r2, #2
 8005258:	701a      	strb	r2, [r3, #0]
 800525a:	e14d      	b.n	80054f8 <UART_SetConfig+0x390>
 800525c:	231b      	movs	r3, #27
 800525e:	2220      	movs	r2, #32
 8005260:	189b      	adds	r3, r3, r2
 8005262:	19db      	adds	r3, r3, r7
 8005264:	2204      	movs	r2, #4
 8005266:	701a      	strb	r2, [r3, #0]
 8005268:	e146      	b.n	80054f8 <UART_SetConfig+0x390>
 800526a:	231b      	movs	r3, #27
 800526c:	2220      	movs	r2, #32
 800526e:	189b      	adds	r3, r3, r2
 8005270:	19db      	adds	r3, r3, r7
 8005272:	2208      	movs	r2, #8
 8005274:	701a      	strb	r2, [r3, #0]
 8005276:	e13f      	b.n	80054f8 <UART_SetConfig+0x390>
 8005278:	231b      	movs	r3, #27
 800527a:	2220      	movs	r2, #32
 800527c:	189b      	adds	r3, r3, r2
 800527e:	19db      	adds	r3, r3, r7
 8005280:	2210      	movs	r2, #16
 8005282:	701a      	strb	r2, [r3, #0]
 8005284:	e138      	b.n	80054f8 <UART_SetConfig+0x390>
 8005286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a8c      	ldr	r2, [pc, #560]	@ (80054bc <UART_SetConfig+0x354>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d131      	bne.n	80052f4 <UART_SetConfig+0x18c>
 8005290:	4b89      	ldr	r3, [pc, #548]	@ (80054b8 <UART_SetConfig+0x350>)
 8005292:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005294:	220c      	movs	r2, #12
 8005296:	4013      	ands	r3, r2
 8005298:	2b0c      	cmp	r3, #12
 800529a:	d01d      	beq.n	80052d8 <UART_SetConfig+0x170>
 800529c:	d823      	bhi.n	80052e6 <UART_SetConfig+0x17e>
 800529e:	2b08      	cmp	r3, #8
 80052a0:	d00c      	beq.n	80052bc <UART_SetConfig+0x154>
 80052a2:	d820      	bhi.n	80052e6 <UART_SetConfig+0x17e>
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d002      	beq.n	80052ae <UART_SetConfig+0x146>
 80052a8:	2b04      	cmp	r3, #4
 80052aa:	d00e      	beq.n	80052ca <UART_SetConfig+0x162>
 80052ac:	e01b      	b.n	80052e6 <UART_SetConfig+0x17e>
 80052ae:	231b      	movs	r3, #27
 80052b0:	2220      	movs	r2, #32
 80052b2:	189b      	adds	r3, r3, r2
 80052b4:	19db      	adds	r3, r3, r7
 80052b6:	2200      	movs	r2, #0
 80052b8:	701a      	strb	r2, [r3, #0]
 80052ba:	e11d      	b.n	80054f8 <UART_SetConfig+0x390>
 80052bc:	231b      	movs	r3, #27
 80052be:	2220      	movs	r2, #32
 80052c0:	189b      	adds	r3, r3, r2
 80052c2:	19db      	adds	r3, r3, r7
 80052c4:	2202      	movs	r2, #2
 80052c6:	701a      	strb	r2, [r3, #0]
 80052c8:	e116      	b.n	80054f8 <UART_SetConfig+0x390>
 80052ca:	231b      	movs	r3, #27
 80052cc:	2220      	movs	r2, #32
 80052ce:	189b      	adds	r3, r3, r2
 80052d0:	19db      	adds	r3, r3, r7
 80052d2:	2204      	movs	r2, #4
 80052d4:	701a      	strb	r2, [r3, #0]
 80052d6:	e10f      	b.n	80054f8 <UART_SetConfig+0x390>
 80052d8:	231b      	movs	r3, #27
 80052da:	2220      	movs	r2, #32
 80052dc:	189b      	adds	r3, r3, r2
 80052de:	19db      	adds	r3, r3, r7
 80052e0:	2208      	movs	r2, #8
 80052e2:	701a      	strb	r2, [r3, #0]
 80052e4:	e108      	b.n	80054f8 <UART_SetConfig+0x390>
 80052e6:	231b      	movs	r3, #27
 80052e8:	2220      	movs	r2, #32
 80052ea:	189b      	adds	r3, r3, r2
 80052ec:	19db      	adds	r3, r3, r7
 80052ee:	2210      	movs	r2, #16
 80052f0:	701a      	strb	r2, [r3, #0]
 80052f2:	e101      	b.n	80054f8 <UART_SetConfig+0x390>
 80052f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a71      	ldr	r2, [pc, #452]	@ (80054c0 <UART_SetConfig+0x358>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d131      	bne.n	8005362 <UART_SetConfig+0x1fa>
 80052fe:	4b6e      	ldr	r3, [pc, #440]	@ (80054b8 <UART_SetConfig+0x350>)
 8005300:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005302:	2230      	movs	r2, #48	@ 0x30
 8005304:	4013      	ands	r3, r2
 8005306:	2b30      	cmp	r3, #48	@ 0x30
 8005308:	d01d      	beq.n	8005346 <UART_SetConfig+0x1de>
 800530a:	d823      	bhi.n	8005354 <UART_SetConfig+0x1ec>
 800530c:	2b20      	cmp	r3, #32
 800530e:	d00c      	beq.n	800532a <UART_SetConfig+0x1c2>
 8005310:	d820      	bhi.n	8005354 <UART_SetConfig+0x1ec>
 8005312:	2b00      	cmp	r3, #0
 8005314:	d002      	beq.n	800531c <UART_SetConfig+0x1b4>
 8005316:	2b10      	cmp	r3, #16
 8005318:	d00e      	beq.n	8005338 <UART_SetConfig+0x1d0>
 800531a:	e01b      	b.n	8005354 <UART_SetConfig+0x1ec>
 800531c:	231b      	movs	r3, #27
 800531e:	2220      	movs	r2, #32
 8005320:	189b      	adds	r3, r3, r2
 8005322:	19db      	adds	r3, r3, r7
 8005324:	2200      	movs	r2, #0
 8005326:	701a      	strb	r2, [r3, #0]
 8005328:	e0e6      	b.n	80054f8 <UART_SetConfig+0x390>
 800532a:	231b      	movs	r3, #27
 800532c:	2220      	movs	r2, #32
 800532e:	189b      	adds	r3, r3, r2
 8005330:	19db      	adds	r3, r3, r7
 8005332:	2202      	movs	r2, #2
 8005334:	701a      	strb	r2, [r3, #0]
 8005336:	e0df      	b.n	80054f8 <UART_SetConfig+0x390>
 8005338:	231b      	movs	r3, #27
 800533a:	2220      	movs	r2, #32
 800533c:	189b      	adds	r3, r3, r2
 800533e:	19db      	adds	r3, r3, r7
 8005340:	2204      	movs	r2, #4
 8005342:	701a      	strb	r2, [r3, #0]
 8005344:	e0d8      	b.n	80054f8 <UART_SetConfig+0x390>
 8005346:	231b      	movs	r3, #27
 8005348:	2220      	movs	r2, #32
 800534a:	189b      	adds	r3, r3, r2
 800534c:	19db      	adds	r3, r3, r7
 800534e:	2208      	movs	r2, #8
 8005350:	701a      	strb	r2, [r3, #0]
 8005352:	e0d1      	b.n	80054f8 <UART_SetConfig+0x390>
 8005354:	231b      	movs	r3, #27
 8005356:	2220      	movs	r2, #32
 8005358:	189b      	adds	r3, r3, r2
 800535a:	19db      	adds	r3, r3, r7
 800535c:	2210      	movs	r2, #16
 800535e:	701a      	strb	r2, [r3, #0]
 8005360:	e0ca      	b.n	80054f8 <UART_SetConfig+0x390>
 8005362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a57      	ldr	r2, [pc, #348]	@ (80054c4 <UART_SetConfig+0x35c>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d106      	bne.n	800537a <UART_SetConfig+0x212>
 800536c:	231b      	movs	r3, #27
 800536e:	2220      	movs	r2, #32
 8005370:	189b      	adds	r3, r3, r2
 8005372:	19db      	adds	r3, r3, r7
 8005374:	2200      	movs	r2, #0
 8005376:	701a      	strb	r2, [r3, #0]
 8005378:	e0be      	b.n	80054f8 <UART_SetConfig+0x390>
 800537a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a52      	ldr	r2, [pc, #328]	@ (80054c8 <UART_SetConfig+0x360>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d106      	bne.n	8005392 <UART_SetConfig+0x22a>
 8005384:	231b      	movs	r3, #27
 8005386:	2220      	movs	r2, #32
 8005388:	189b      	adds	r3, r3, r2
 800538a:	19db      	adds	r3, r3, r7
 800538c:	2200      	movs	r2, #0
 800538e:	701a      	strb	r2, [r3, #0]
 8005390:	e0b2      	b.n	80054f8 <UART_SetConfig+0x390>
 8005392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a4d      	ldr	r2, [pc, #308]	@ (80054cc <UART_SetConfig+0x364>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d106      	bne.n	80053aa <UART_SetConfig+0x242>
 800539c:	231b      	movs	r3, #27
 800539e:	2220      	movs	r2, #32
 80053a0:	189b      	adds	r3, r3, r2
 80053a2:	19db      	adds	r3, r3, r7
 80053a4:	2200      	movs	r2, #0
 80053a6:	701a      	strb	r2, [r3, #0]
 80053a8:	e0a6      	b.n	80054f8 <UART_SetConfig+0x390>
 80053aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a3e      	ldr	r2, [pc, #248]	@ (80054a8 <UART_SetConfig+0x340>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d13e      	bne.n	8005432 <UART_SetConfig+0x2ca>
 80053b4:	4b40      	ldr	r3, [pc, #256]	@ (80054b8 <UART_SetConfig+0x350>)
 80053b6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80053b8:	23c0      	movs	r3, #192	@ 0xc0
 80053ba:	011b      	lsls	r3, r3, #4
 80053bc:	4013      	ands	r3, r2
 80053be:	22c0      	movs	r2, #192	@ 0xc0
 80053c0:	0112      	lsls	r2, r2, #4
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d027      	beq.n	8005416 <UART_SetConfig+0x2ae>
 80053c6:	22c0      	movs	r2, #192	@ 0xc0
 80053c8:	0112      	lsls	r2, r2, #4
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d82a      	bhi.n	8005424 <UART_SetConfig+0x2bc>
 80053ce:	2280      	movs	r2, #128	@ 0x80
 80053d0:	0112      	lsls	r2, r2, #4
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d011      	beq.n	80053fa <UART_SetConfig+0x292>
 80053d6:	2280      	movs	r2, #128	@ 0x80
 80053d8:	0112      	lsls	r2, r2, #4
 80053da:	4293      	cmp	r3, r2
 80053dc:	d822      	bhi.n	8005424 <UART_SetConfig+0x2bc>
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d004      	beq.n	80053ec <UART_SetConfig+0x284>
 80053e2:	2280      	movs	r2, #128	@ 0x80
 80053e4:	00d2      	lsls	r2, r2, #3
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d00e      	beq.n	8005408 <UART_SetConfig+0x2a0>
 80053ea:	e01b      	b.n	8005424 <UART_SetConfig+0x2bc>
 80053ec:	231b      	movs	r3, #27
 80053ee:	2220      	movs	r2, #32
 80053f0:	189b      	adds	r3, r3, r2
 80053f2:	19db      	adds	r3, r3, r7
 80053f4:	2200      	movs	r2, #0
 80053f6:	701a      	strb	r2, [r3, #0]
 80053f8:	e07e      	b.n	80054f8 <UART_SetConfig+0x390>
 80053fa:	231b      	movs	r3, #27
 80053fc:	2220      	movs	r2, #32
 80053fe:	189b      	adds	r3, r3, r2
 8005400:	19db      	adds	r3, r3, r7
 8005402:	2202      	movs	r2, #2
 8005404:	701a      	strb	r2, [r3, #0]
 8005406:	e077      	b.n	80054f8 <UART_SetConfig+0x390>
 8005408:	231b      	movs	r3, #27
 800540a:	2220      	movs	r2, #32
 800540c:	189b      	adds	r3, r3, r2
 800540e:	19db      	adds	r3, r3, r7
 8005410:	2204      	movs	r2, #4
 8005412:	701a      	strb	r2, [r3, #0]
 8005414:	e070      	b.n	80054f8 <UART_SetConfig+0x390>
 8005416:	231b      	movs	r3, #27
 8005418:	2220      	movs	r2, #32
 800541a:	189b      	adds	r3, r3, r2
 800541c:	19db      	adds	r3, r3, r7
 800541e:	2208      	movs	r2, #8
 8005420:	701a      	strb	r2, [r3, #0]
 8005422:	e069      	b.n	80054f8 <UART_SetConfig+0x390>
 8005424:	231b      	movs	r3, #27
 8005426:	2220      	movs	r2, #32
 8005428:	189b      	adds	r3, r3, r2
 800542a:	19db      	adds	r3, r3, r7
 800542c:	2210      	movs	r2, #16
 800542e:	701a      	strb	r2, [r3, #0]
 8005430:	e062      	b.n	80054f8 <UART_SetConfig+0x390>
 8005432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a1d      	ldr	r2, [pc, #116]	@ (80054ac <UART_SetConfig+0x344>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d157      	bne.n	80054ec <UART_SetConfig+0x384>
 800543c:	4b1e      	ldr	r3, [pc, #120]	@ (80054b8 <UART_SetConfig+0x350>)
 800543e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005440:	23c0      	movs	r3, #192	@ 0xc0
 8005442:	009b      	lsls	r3, r3, #2
 8005444:	4013      	ands	r3, r2
 8005446:	22c0      	movs	r2, #192	@ 0xc0
 8005448:	0092      	lsls	r2, r2, #2
 800544a:	4293      	cmp	r3, r2
 800544c:	d040      	beq.n	80054d0 <UART_SetConfig+0x368>
 800544e:	22c0      	movs	r2, #192	@ 0xc0
 8005450:	0092      	lsls	r2, r2, #2
 8005452:	4293      	cmp	r3, r2
 8005454:	d843      	bhi.n	80054de <UART_SetConfig+0x376>
 8005456:	2280      	movs	r2, #128	@ 0x80
 8005458:	0092      	lsls	r2, r2, #2
 800545a:	4293      	cmp	r3, r2
 800545c:	d011      	beq.n	8005482 <UART_SetConfig+0x31a>
 800545e:	2280      	movs	r2, #128	@ 0x80
 8005460:	0092      	lsls	r2, r2, #2
 8005462:	4293      	cmp	r3, r2
 8005464:	d83b      	bhi.n	80054de <UART_SetConfig+0x376>
 8005466:	2b00      	cmp	r3, #0
 8005468:	d004      	beq.n	8005474 <UART_SetConfig+0x30c>
 800546a:	2280      	movs	r2, #128	@ 0x80
 800546c:	0052      	lsls	r2, r2, #1
 800546e:	4293      	cmp	r3, r2
 8005470:	d00e      	beq.n	8005490 <UART_SetConfig+0x328>
 8005472:	e034      	b.n	80054de <UART_SetConfig+0x376>
 8005474:	231b      	movs	r3, #27
 8005476:	2220      	movs	r2, #32
 8005478:	189b      	adds	r3, r3, r2
 800547a:	19db      	adds	r3, r3, r7
 800547c:	2200      	movs	r2, #0
 800547e:	701a      	strb	r2, [r3, #0]
 8005480:	e03a      	b.n	80054f8 <UART_SetConfig+0x390>
 8005482:	231b      	movs	r3, #27
 8005484:	2220      	movs	r2, #32
 8005486:	189b      	adds	r3, r3, r2
 8005488:	19db      	adds	r3, r3, r7
 800548a:	2202      	movs	r2, #2
 800548c:	701a      	strb	r2, [r3, #0]
 800548e:	e033      	b.n	80054f8 <UART_SetConfig+0x390>
 8005490:	231b      	movs	r3, #27
 8005492:	2220      	movs	r2, #32
 8005494:	189b      	adds	r3, r3, r2
 8005496:	19db      	adds	r3, r3, r7
 8005498:	2204      	movs	r2, #4
 800549a:	701a      	strb	r2, [r3, #0]
 800549c:	e02c      	b.n	80054f8 <UART_SetConfig+0x390>
 800549e:	46c0      	nop			@ (mov r8, r8)
 80054a0:	cfff69f3 	.word	0xcfff69f3
 80054a4:	ffffcfff 	.word	0xffffcfff
 80054a8:	40008000 	.word	0x40008000
 80054ac:	40008400 	.word	0x40008400
 80054b0:	11fff4ff 	.word	0x11fff4ff
 80054b4:	40013800 	.word	0x40013800
 80054b8:	40021000 	.word	0x40021000
 80054bc:	40004400 	.word	0x40004400
 80054c0:	40004800 	.word	0x40004800
 80054c4:	40004c00 	.word	0x40004c00
 80054c8:	40005000 	.word	0x40005000
 80054cc:	40013c00 	.word	0x40013c00
 80054d0:	231b      	movs	r3, #27
 80054d2:	2220      	movs	r2, #32
 80054d4:	189b      	adds	r3, r3, r2
 80054d6:	19db      	adds	r3, r3, r7
 80054d8:	2208      	movs	r2, #8
 80054da:	701a      	strb	r2, [r3, #0]
 80054dc:	e00c      	b.n	80054f8 <UART_SetConfig+0x390>
 80054de:	231b      	movs	r3, #27
 80054e0:	2220      	movs	r2, #32
 80054e2:	189b      	adds	r3, r3, r2
 80054e4:	19db      	adds	r3, r3, r7
 80054e6:	2210      	movs	r2, #16
 80054e8:	701a      	strb	r2, [r3, #0]
 80054ea:	e005      	b.n	80054f8 <UART_SetConfig+0x390>
 80054ec:	231b      	movs	r3, #27
 80054ee:	2220      	movs	r2, #32
 80054f0:	189b      	adds	r3, r3, r2
 80054f2:	19db      	adds	r3, r3, r7
 80054f4:	2210      	movs	r2, #16
 80054f6:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80054f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4ac1      	ldr	r2, [pc, #772]	@ (8005804 <UART_SetConfig+0x69c>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d005      	beq.n	800550e <UART_SetConfig+0x3a6>
 8005502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4ac0      	ldr	r2, [pc, #768]	@ (8005808 <UART_SetConfig+0x6a0>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d000      	beq.n	800550e <UART_SetConfig+0x3a6>
 800550c:	e093      	b.n	8005636 <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800550e:	231b      	movs	r3, #27
 8005510:	2220      	movs	r2, #32
 8005512:	189b      	adds	r3, r3, r2
 8005514:	19db      	adds	r3, r3, r7
 8005516:	781b      	ldrb	r3, [r3, #0]
 8005518:	2b08      	cmp	r3, #8
 800551a:	d015      	beq.n	8005548 <UART_SetConfig+0x3e0>
 800551c:	dc18      	bgt.n	8005550 <UART_SetConfig+0x3e8>
 800551e:	2b04      	cmp	r3, #4
 8005520:	d00d      	beq.n	800553e <UART_SetConfig+0x3d6>
 8005522:	dc15      	bgt.n	8005550 <UART_SetConfig+0x3e8>
 8005524:	2b00      	cmp	r3, #0
 8005526:	d002      	beq.n	800552e <UART_SetConfig+0x3c6>
 8005528:	2b02      	cmp	r3, #2
 800552a:	d005      	beq.n	8005538 <UART_SetConfig+0x3d0>
 800552c:	e010      	b.n	8005550 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800552e:	f7fe fe8b 	bl	8004248 <HAL_RCC_GetPCLK1Freq>
 8005532:	0003      	movs	r3, r0
 8005534:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005536:	e014      	b.n	8005562 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005538:	4bb4      	ldr	r3, [pc, #720]	@ (800580c <UART_SetConfig+0x6a4>)
 800553a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800553c:	e011      	b.n	8005562 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800553e:	f7fe fdf7 	bl	8004130 <HAL_RCC_GetSysClockFreq>
 8005542:	0003      	movs	r3, r0
 8005544:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005546:	e00c      	b.n	8005562 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005548:	2380      	movs	r3, #128	@ 0x80
 800554a:	021b      	lsls	r3, r3, #8
 800554c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800554e:	e008      	b.n	8005562 <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 8005550:	2300      	movs	r3, #0
 8005552:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8005554:	231a      	movs	r3, #26
 8005556:	2220      	movs	r2, #32
 8005558:	189b      	adds	r3, r3, r2
 800555a:	19db      	adds	r3, r3, r7
 800555c:	2201      	movs	r2, #1
 800555e:	701a      	strb	r2, [r3, #0]
        break;
 8005560:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005562:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005564:	2b00      	cmp	r3, #0
 8005566:	d100      	bne.n	800556a <UART_SetConfig+0x402>
 8005568:	e135      	b.n	80057d6 <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800556a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800556c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800556e:	4ba8      	ldr	r3, [pc, #672]	@ (8005810 <UART_SetConfig+0x6a8>)
 8005570:	0052      	lsls	r2, r2, #1
 8005572:	5ad3      	ldrh	r3, [r2, r3]
 8005574:	0019      	movs	r1, r3
 8005576:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8005578:	f7fa fdce 	bl	8000118 <__udivsi3>
 800557c:	0003      	movs	r3, r0
 800557e:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005582:	685a      	ldr	r2, [r3, #4]
 8005584:	0013      	movs	r3, r2
 8005586:	005b      	lsls	r3, r3, #1
 8005588:	189b      	adds	r3, r3, r2
 800558a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800558c:	429a      	cmp	r2, r3
 800558e:	d305      	bcc.n	800559c <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005596:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005598:	429a      	cmp	r2, r3
 800559a:	d906      	bls.n	80055aa <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 800559c:	231a      	movs	r3, #26
 800559e:	2220      	movs	r2, #32
 80055a0:	189b      	adds	r3, r3, r2
 80055a2:	19db      	adds	r3, r3, r7
 80055a4:	2201      	movs	r2, #1
 80055a6:	701a      	strb	r2, [r3, #0]
 80055a8:	e044      	b.n	8005634 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80055aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055ac:	61bb      	str	r3, [r7, #24]
 80055ae:	2300      	movs	r3, #0
 80055b0:	61fb      	str	r3, [r7, #28]
 80055b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80055b6:	4b96      	ldr	r3, [pc, #600]	@ (8005810 <UART_SetConfig+0x6a8>)
 80055b8:	0052      	lsls	r2, r2, #1
 80055ba:	5ad3      	ldrh	r3, [r2, r3]
 80055bc:	613b      	str	r3, [r7, #16]
 80055be:	2300      	movs	r3, #0
 80055c0:	617b      	str	r3, [r7, #20]
 80055c2:	693a      	ldr	r2, [r7, #16]
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	69b8      	ldr	r0, [r7, #24]
 80055c8:	69f9      	ldr	r1, [r7, #28]
 80055ca:	f7fa ff1b 	bl	8000404 <__aeabi_uldivmod>
 80055ce:	0002      	movs	r2, r0
 80055d0:	000b      	movs	r3, r1
 80055d2:	0e11      	lsrs	r1, r2, #24
 80055d4:	021d      	lsls	r5, r3, #8
 80055d6:	430d      	orrs	r5, r1
 80055d8:	0214      	lsls	r4, r2, #8
 80055da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	085b      	lsrs	r3, r3, #1
 80055e0:	60bb      	str	r3, [r7, #8]
 80055e2:	2300      	movs	r3, #0
 80055e4:	60fb      	str	r3, [r7, #12]
 80055e6:	68b8      	ldr	r0, [r7, #8]
 80055e8:	68f9      	ldr	r1, [r7, #12]
 80055ea:	1900      	adds	r0, r0, r4
 80055ec:	4169      	adcs	r1, r5
 80055ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	603b      	str	r3, [r7, #0]
 80055f4:	2300      	movs	r3, #0
 80055f6:	607b      	str	r3, [r7, #4]
 80055f8:	683a      	ldr	r2, [r7, #0]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	f7fa ff02 	bl	8000404 <__aeabi_uldivmod>
 8005600:	0002      	movs	r2, r0
 8005602:	000b      	movs	r3, r1
 8005604:	0013      	movs	r3, r2
 8005606:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005608:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800560a:	23c0      	movs	r3, #192	@ 0xc0
 800560c:	009b      	lsls	r3, r3, #2
 800560e:	429a      	cmp	r2, r3
 8005610:	d309      	bcc.n	8005626 <UART_SetConfig+0x4be>
 8005612:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005614:	2380      	movs	r3, #128	@ 0x80
 8005616:	035b      	lsls	r3, r3, #13
 8005618:	429a      	cmp	r2, r3
 800561a:	d204      	bcs.n	8005626 <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 800561c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005622:	60da      	str	r2, [r3, #12]
 8005624:	e006      	b.n	8005634 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 8005626:	231a      	movs	r3, #26
 8005628:	2220      	movs	r2, #32
 800562a:	189b      	adds	r3, r3, r2
 800562c:	19db      	adds	r3, r3, r7
 800562e:	2201      	movs	r2, #1
 8005630:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 8005632:	e0d0      	b.n	80057d6 <UART_SetConfig+0x66e>
 8005634:	e0cf      	b.n	80057d6 <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005638:	69da      	ldr	r2, [r3, #28]
 800563a:	2380      	movs	r3, #128	@ 0x80
 800563c:	021b      	lsls	r3, r3, #8
 800563e:	429a      	cmp	r2, r3
 8005640:	d000      	beq.n	8005644 <UART_SetConfig+0x4dc>
 8005642:	e070      	b.n	8005726 <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 8005644:	231b      	movs	r3, #27
 8005646:	2220      	movs	r2, #32
 8005648:	189b      	adds	r3, r3, r2
 800564a:	19db      	adds	r3, r3, r7
 800564c:	781b      	ldrb	r3, [r3, #0]
 800564e:	2b08      	cmp	r3, #8
 8005650:	d015      	beq.n	800567e <UART_SetConfig+0x516>
 8005652:	dc18      	bgt.n	8005686 <UART_SetConfig+0x51e>
 8005654:	2b04      	cmp	r3, #4
 8005656:	d00d      	beq.n	8005674 <UART_SetConfig+0x50c>
 8005658:	dc15      	bgt.n	8005686 <UART_SetConfig+0x51e>
 800565a:	2b00      	cmp	r3, #0
 800565c:	d002      	beq.n	8005664 <UART_SetConfig+0x4fc>
 800565e:	2b02      	cmp	r3, #2
 8005660:	d005      	beq.n	800566e <UART_SetConfig+0x506>
 8005662:	e010      	b.n	8005686 <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005664:	f7fe fdf0 	bl	8004248 <HAL_RCC_GetPCLK1Freq>
 8005668:	0003      	movs	r3, r0
 800566a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800566c:	e014      	b.n	8005698 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800566e:	4b67      	ldr	r3, [pc, #412]	@ (800580c <UART_SetConfig+0x6a4>)
 8005670:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005672:	e011      	b.n	8005698 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005674:	f7fe fd5c 	bl	8004130 <HAL_RCC_GetSysClockFreq>
 8005678:	0003      	movs	r3, r0
 800567a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800567c:	e00c      	b.n	8005698 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800567e:	2380      	movs	r3, #128	@ 0x80
 8005680:	021b      	lsls	r3, r3, #8
 8005682:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005684:	e008      	b.n	8005698 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 8005686:	2300      	movs	r3, #0
 8005688:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800568a:	231a      	movs	r3, #26
 800568c:	2220      	movs	r2, #32
 800568e:	189b      	adds	r3, r3, r2
 8005690:	19db      	adds	r3, r3, r7
 8005692:	2201      	movs	r2, #1
 8005694:	701a      	strb	r2, [r3, #0]
        break;
 8005696:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005698:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800569a:	2b00      	cmp	r3, #0
 800569c:	d100      	bne.n	80056a0 <UART_SetConfig+0x538>
 800569e:	e09a      	b.n	80057d6 <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80056a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056a2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80056a4:	4b5a      	ldr	r3, [pc, #360]	@ (8005810 <UART_SetConfig+0x6a8>)
 80056a6:	0052      	lsls	r2, r2, #1
 80056a8:	5ad3      	ldrh	r3, [r2, r3]
 80056aa:	0019      	movs	r1, r3
 80056ac:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80056ae:	f7fa fd33 	bl	8000118 <__udivsi3>
 80056b2:	0003      	movs	r3, r0
 80056b4:	005a      	lsls	r2, r3, #1
 80056b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	085b      	lsrs	r3, r3, #1
 80056bc:	18d2      	adds	r2, r2, r3
 80056be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	0019      	movs	r1, r3
 80056c4:	0010      	movs	r0, r2
 80056c6:	f7fa fd27 	bl	8000118 <__udivsi3>
 80056ca:	0003      	movs	r3, r0
 80056cc:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056d0:	2b0f      	cmp	r3, #15
 80056d2:	d921      	bls.n	8005718 <UART_SetConfig+0x5b0>
 80056d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80056d6:	2380      	movs	r3, #128	@ 0x80
 80056d8:	025b      	lsls	r3, r3, #9
 80056da:	429a      	cmp	r2, r3
 80056dc:	d21c      	bcs.n	8005718 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80056de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056e0:	b29a      	uxth	r2, r3
 80056e2:	200e      	movs	r0, #14
 80056e4:	2420      	movs	r4, #32
 80056e6:	1903      	adds	r3, r0, r4
 80056e8:	19db      	adds	r3, r3, r7
 80056ea:	210f      	movs	r1, #15
 80056ec:	438a      	bics	r2, r1
 80056ee:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80056f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056f2:	085b      	lsrs	r3, r3, #1
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	2207      	movs	r2, #7
 80056f8:	4013      	ands	r3, r2
 80056fa:	b299      	uxth	r1, r3
 80056fc:	1903      	adds	r3, r0, r4
 80056fe:	19db      	adds	r3, r3, r7
 8005700:	1902      	adds	r2, r0, r4
 8005702:	19d2      	adds	r2, r2, r7
 8005704:	8812      	ldrh	r2, [r2, #0]
 8005706:	430a      	orrs	r2, r1
 8005708:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800570a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	1902      	adds	r2, r0, r4
 8005710:	19d2      	adds	r2, r2, r7
 8005712:	8812      	ldrh	r2, [r2, #0]
 8005714:	60da      	str	r2, [r3, #12]
 8005716:	e05e      	b.n	80057d6 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8005718:	231a      	movs	r3, #26
 800571a:	2220      	movs	r2, #32
 800571c:	189b      	adds	r3, r3, r2
 800571e:	19db      	adds	r3, r3, r7
 8005720:	2201      	movs	r2, #1
 8005722:	701a      	strb	r2, [r3, #0]
 8005724:	e057      	b.n	80057d6 <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005726:	231b      	movs	r3, #27
 8005728:	2220      	movs	r2, #32
 800572a:	189b      	adds	r3, r3, r2
 800572c:	19db      	adds	r3, r3, r7
 800572e:	781b      	ldrb	r3, [r3, #0]
 8005730:	2b08      	cmp	r3, #8
 8005732:	d015      	beq.n	8005760 <UART_SetConfig+0x5f8>
 8005734:	dc18      	bgt.n	8005768 <UART_SetConfig+0x600>
 8005736:	2b04      	cmp	r3, #4
 8005738:	d00d      	beq.n	8005756 <UART_SetConfig+0x5ee>
 800573a:	dc15      	bgt.n	8005768 <UART_SetConfig+0x600>
 800573c:	2b00      	cmp	r3, #0
 800573e:	d002      	beq.n	8005746 <UART_SetConfig+0x5de>
 8005740:	2b02      	cmp	r3, #2
 8005742:	d005      	beq.n	8005750 <UART_SetConfig+0x5e8>
 8005744:	e010      	b.n	8005768 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005746:	f7fe fd7f 	bl	8004248 <HAL_RCC_GetPCLK1Freq>
 800574a:	0003      	movs	r3, r0
 800574c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800574e:	e014      	b.n	800577a <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005750:	4b2e      	ldr	r3, [pc, #184]	@ (800580c <UART_SetConfig+0x6a4>)
 8005752:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005754:	e011      	b.n	800577a <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005756:	f7fe fceb 	bl	8004130 <HAL_RCC_GetSysClockFreq>
 800575a:	0003      	movs	r3, r0
 800575c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800575e:	e00c      	b.n	800577a <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005760:	2380      	movs	r3, #128	@ 0x80
 8005762:	021b      	lsls	r3, r3, #8
 8005764:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005766:	e008      	b.n	800577a <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 8005768:	2300      	movs	r3, #0
 800576a:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800576c:	231a      	movs	r3, #26
 800576e:	2220      	movs	r2, #32
 8005770:	189b      	adds	r3, r3, r2
 8005772:	19db      	adds	r3, r3, r7
 8005774:	2201      	movs	r2, #1
 8005776:	701a      	strb	r2, [r3, #0]
        break;
 8005778:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800577a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800577c:	2b00      	cmp	r3, #0
 800577e:	d02a      	beq.n	80057d6 <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005782:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005784:	4b22      	ldr	r3, [pc, #136]	@ (8005810 <UART_SetConfig+0x6a8>)
 8005786:	0052      	lsls	r2, r2, #1
 8005788:	5ad3      	ldrh	r3, [r2, r3]
 800578a:	0019      	movs	r1, r3
 800578c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800578e:	f7fa fcc3 	bl	8000118 <__udivsi3>
 8005792:	0003      	movs	r3, r0
 8005794:	001a      	movs	r2, r3
 8005796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	085b      	lsrs	r3, r3, #1
 800579c:	18d2      	adds	r2, r2, r3
 800579e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	0019      	movs	r1, r3
 80057a4:	0010      	movs	r0, r2
 80057a6:	f7fa fcb7 	bl	8000118 <__udivsi3>
 80057aa:	0003      	movs	r3, r0
 80057ac:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057b0:	2b0f      	cmp	r3, #15
 80057b2:	d90a      	bls.n	80057ca <UART_SetConfig+0x662>
 80057b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80057b6:	2380      	movs	r3, #128	@ 0x80
 80057b8:	025b      	lsls	r3, r3, #9
 80057ba:	429a      	cmp	r2, r3
 80057bc:	d205      	bcs.n	80057ca <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80057be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057c0:	b29a      	uxth	r2, r3
 80057c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	60da      	str	r2, [r3, #12]
 80057c8:	e005      	b.n	80057d6 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 80057ca:	231a      	movs	r3, #26
 80057cc:	2220      	movs	r2, #32
 80057ce:	189b      	adds	r3, r3, r2
 80057d0:	19db      	adds	r3, r3, r7
 80057d2:	2201      	movs	r2, #1
 80057d4:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80057d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057d8:	226a      	movs	r2, #106	@ 0x6a
 80057da:	2101      	movs	r1, #1
 80057dc:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80057de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057e0:	2268      	movs	r2, #104	@ 0x68
 80057e2:	2101      	movs	r1, #1
 80057e4:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80057e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057e8:	2200      	movs	r2, #0
 80057ea:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80057ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ee:	2200      	movs	r2, #0
 80057f0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80057f2:	231a      	movs	r3, #26
 80057f4:	2220      	movs	r2, #32
 80057f6:	189b      	adds	r3, r3, r2
 80057f8:	19db      	adds	r3, r3, r7
 80057fa:	781b      	ldrb	r3, [r3, #0]
}
 80057fc:	0018      	movs	r0, r3
 80057fe:	46bd      	mov	sp, r7
 8005800:	b010      	add	sp, #64	@ 0x40
 8005802:	bdb0      	pop	{r4, r5, r7, pc}
 8005804:	40008000 	.word	0x40008000
 8005808:	40008400 	.word	0x40008400
 800580c:	00f42400 	.word	0x00f42400
 8005810:	08007adc 	.word	0x08007adc

08005814 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b082      	sub	sp, #8
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005820:	2208      	movs	r2, #8
 8005822:	4013      	ands	r3, r2
 8005824:	d00b      	beq.n	800583e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	4a4a      	ldr	r2, [pc, #296]	@ (8005958 <UART_AdvFeatureConfig+0x144>)
 800582e:	4013      	ands	r3, r2
 8005830:	0019      	movs	r1, r3
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	430a      	orrs	r2, r1
 800583c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005842:	2201      	movs	r2, #1
 8005844:	4013      	ands	r3, r2
 8005846:	d00b      	beq.n	8005860 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	4a43      	ldr	r2, [pc, #268]	@ (800595c <UART_AdvFeatureConfig+0x148>)
 8005850:	4013      	ands	r3, r2
 8005852:	0019      	movs	r1, r3
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	430a      	orrs	r2, r1
 800585e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005864:	2202      	movs	r2, #2
 8005866:	4013      	ands	r3, r2
 8005868:	d00b      	beq.n	8005882 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	4a3b      	ldr	r2, [pc, #236]	@ (8005960 <UART_AdvFeatureConfig+0x14c>)
 8005872:	4013      	ands	r3, r2
 8005874:	0019      	movs	r1, r3
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	430a      	orrs	r2, r1
 8005880:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005886:	2204      	movs	r2, #4
 8005888:	4013      	ands	r3, r2
 800588a:	d00b      	beq.n	80058a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	4a34      	ldr	r2, [pc, #208]	@ (8005964 <UART_AdvFeatureConfig+0x150>)
 8005894:	4013      	ands	r3, r2
 8005896:	0019      	movs	r1, r3
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	430a      	orrs	r2, r1
 80058a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058a8:	2210      	movs	r2, #16
 80058aa:	4013      	ands	r3, r2
 80058ac:	d00b      	beq.n	80058c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	4a2c      	ldr	r2, [pc, #176]	@ (8005968 <UART_AdvFeatureConfig+0x154>)
 80058b6:	4013      	ands	r3, r2
 80058b8:	0019      	movs	r1, r3
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	430a      	orrs	r2, r1
 80058c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058ca:	2220      	movs	r2, #32
 80058cc:	4013      	ands	r3, r2
 80058ce:	d00b      	beq.n	80058e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	4a25      	ldr	r2, [pc, #148]	@ (800596c <UART_AdvFeatureConfig+0x158>)
 80058d8:	4013      	ands	r3, r2
 80058da:	0019      	movs	r1, r3
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	430a      	orrs	r2, r1
 80058e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058ec:	2240      	movs	r2, #64	@ 0x40
 80058ee:	4013      	ands	r3, r2
 80058f0:	d01d      	beq.n	800592e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	4a1d      	ldr	r2, [pc, #116]	@ (8005970 <UART_AdvFeatureConfig+0x15c>)
 80058fa:	4013      	ands	r3, r2
 80058fc:	0019      	movs	r1, r3
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	430a      	orrs	r2, r1
 8005908:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800590e:	2380      	movs	r3, #128	@ 0x80
 8005910:	035b      	lsls	r3, r3, #13
 8005912:	429a      	cmp	r2, r3
 8005914:	d10b      	bne.n	800592e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	4a15      	ldr	r2, [pc, #84]	@ (8005974 <UART_AdvFeatureConfig+0x160>)
 800591e:	4013      	ands	r3, r2
 8005920:	0019      	movs	r1, r3
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	430a      	orrs	r2, r1
 800592c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005932:	2280      	movs	r2, #128	@ 0x80
 8005934:	4013      	ands	r3, r2
 8005936:	d00b      	beq.n	8005950 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	4a0e      	ldr	r2, [pc, #56]	@ (8005978 <UART_AdvFeatureConfig+0x164>)
 8005940:	4013      	ands	r3, r2
 8005942:	0019      	movs	r1, r3
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	430a      	orrs	r2, r1
 800594e:	605a      	str	r2, [r3, #4]
  }
}
 8005950:	46c0      	nop			@ (mov r8, r8)
 8005952:	46bd      	mov	sp, r7
 8005954:	b002      	add	sp, #8
 8005956:	bd80      	pop	{r7, pc}
 8005958:	ffff7fff 	.word	0xffff7fff
 800595c:	fffdffff 	.word	0xfffdffff
 8005960:	fffeffff 	.word	0xfffeffff
 8005964:	fffbffff 	.word	0xfffbffff
 8005968:	ffffefff 	.word	0xffffefff
 800596c:	ffffdfff 	.word	0xffffdfff
 8005970:	ffefffff 	.word	0xffefffff
 8005974:	ff9fffff 	.word	0xff9fffff
 8005978:	fff7ffff 	.word	0xfff7ffff

0800597c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b092      	sub	sp, #72	@ 0x48
 8005980:	af02      	add	r7, sp, #8
 8005982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2290      	movs	r2, #144	@ 0x90
 8005988:	2100      	movs	r1, #0
 800598a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800598c:	f7fc fbfe 	bl	800218c <HAL_GetTick>
 8005990:	0003      	movs	r3, r0
 8005992:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	2208      	movs	r2, #8
 800599c:	4013      	ands	r3, r2
 800599e:	2b08      	cmp	r3, #8
 80059a0:	d12d      	bne.n	80059fe <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80059a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059a4:	2280      	movs	r2, #128	@ 0x80
 80059a6:	0391      	lsls	r1, r2, #14
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	4a47      	ldr	r2, [pc, #284]	@ (8005ac8 <UART_CheckIdleState+0x14c>)
 80059ac:	9200      	str	r2, [sp, #0]
 80059ae:	2200      	movs	r2, #0
 80059b0:	f000 f88e 	bl	8005ad0 <UART_WaitOnFlagUntilTimeout>
 80059b4:	1e03      	subs	r3, r0, #0
 80059b6:	d022      	beq.n	80059fe <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059b8:	f3ef 8310 	mrs	r3, PRIMASK
 80059bc:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80059be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80059c0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80059c2:	2301      	movs	r3, #1
 80059c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059c8:	f383 8810 	msr	PRIMASK, r3
}
 80059cc:	46c0      	nop			@ (mov r8, r8)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	681a      	ldr	r2, [r3, #0]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	2180      	movs	r1, #128	@ 0x80
 80059da:	438a      	bics	r2, r1
 80059dc:	601a      	str	r2, [r3, #0]
 80059de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059e4:	f383 8810 	msr	PRIMASK, r3
}
 80059e8:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2288      	movs	r2, #136	@ 0x88
 80059ee:	2120      	movs	r1, #32
 80059f0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2284      	movs	r2, #132	@ 0x84
 80059f6:	2100      	movs	r1, #0
 80059f8:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059fa:	2303      	movs	r3, #3
 80059fc:	e060      	b.n	8005ac0 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	2204      	movs	r2, #4
 8005a06:	4013      	ands	r3, r2
 8005a08:	2b04      	cmp	r3, #4
 8005a0a:	d146      	bne.n	8005a9a <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a0e:	2280      	movs	r2, #128	@ 0x80
 8005a10:	03d1      	lsls	r1, r2, #15
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	4a2c      	ldr	r2, [pc, #176]	@ (8005ac8 <UART_CheckIdleState+0x14c>)
 8005a16:	9200      	str	r2, [sp, #0]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	f000 f859 	bl	8005ad0 <UART_WaitOnFlagUntilTimeout>
 8005a1e:	1e03      	subs	r3, r0, #0
 8005a20:	d03b      	beq.n	8005a9a <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a22:	f3ef 8310 	mrs	r3, PRIMASK
 8005a26:	60fb      	str	r3, [r7, #12]
  return(result);
 8005a28:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005a2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	f383 8810 	msr	PRIMASK, r3
}
 8005a36:	46c0      	nop			@ (mov r8, r8)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4922      	ldr	r1, [pc, #136]	@ (8005acc <UART_CheckIdleState+0x150>)
 8005a44:	400a      	ands	r2, r1
 8005a46:	601a      	str	r2, [r3, #0]
 8005a48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a4a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	f383 8810 	msr	PRIMASK, r3
}
 8005a52:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a54:	f3ef 8310 	mrs	r3, PRIMASK
 8005a58:	61bb      	str	r3, [r7, #24]
  return(result);
 8005a5a:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a5c:	633b      	str	r3, [r7, #48]	@ 0x30
 8005a5e:	2301      	movs	r3, #1
 8005a60:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a62:	69fb      	ldr	r3, [r7, #28]
 8005a64:	f383 8810 	msr	PRIMASK, r3
}
 8005a68:	46c0      	nop			@ (mov r8, r8)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	689a      	ldr	r2, [r3, #8]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	2101      	movs	r1, #1
 8005a76:	438a      	bics	r2, r1
 8005a78:	609a      	str	r2, [r3, #8]
 8005a7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a7c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a7e:	6a3b      	ldr	r3, [r7, #32]
 8005a80:	f383 8810 	msr	PRIMASK, r3
}
 8005a84:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	228c      	movs	r2, #140	@ 0x8c
 8005a8a:	2120      	movs	r1, #32
 8005a8c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2284      	movs	r2, #132	@ 0x84
 8005a92:	2100      	movs	r1, #0
 8005a94:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a96:	2303      	movs	r3, #3
 8005a98:	e012      	b.n	8005ac0 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2288      	movs	r2, #136	@ 0x88
 8005a9e:	2120      	movs	r1, #32
 8005aa0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	228c      	movs	r2, #140	@ 0x8c
 8005aa6:	2120      	movs	r1, #32
 8005aa8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2200      	movs	r2, #0
 8005aae:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2284      	movs	r2, #132	@ 0x84
 8005aba:	2100      	movs	r1, #0
 8005abc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005abe:	2300      	movs	r3, #0
}
 8005ac0:	0018      	movs	r0, r3
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	b010      	add	sp, #64	@ 0x40
 8005ac6:	bd80      	pop	{r7, pc}
 8005ac8:	01ffffff 	.word	0x01ffffff
 8005acc:	fffffedf 	.word	0xfffffedf

08005ad0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b084      	sub	sp, #16
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	60f8      	str	r0, [r7, #12]
 8005ad8:	60b9      	str	r1, [r7, #8]
 8005ada:	603b      	str	r3, [r7, #0]
 8005adc:	1dfb      	adds	r3, r7, #7
 8005ade:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ae0:	e051      	b.n	8005b86 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ae2:	69bb      	ldr	r3, [r7, #24]
 8005ae4:	3301      	adds	r3, #1
 8005ae6:	d04e      	beq.n	8005b86 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ae8:	f7fc fb50 	bl	800218c <HAL_GetTick>
 8005aec:	0002      	movs	r2, r0
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	1ad3      	subs	r3, r2, r3
 8005af2:	69ba      	ldr	r2, [r7, #24]
 8005af4:	429a      	cmp	r2, r3
 8005af6:	d302      	bcc.n	8005afe <UART_WaitOnFlagUntilTimeout+0x2e>
 8005af8:	69bb      	ldr	r3, [r7, #24]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d101      	bne.n	8005b02 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8005afe:	2303      	movs	r3, #3
 8005b00:	e051      	b.n	8005ba6 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	2204      	movs	r2, #4
 8005b0a:	4013      	ands	r3, r2
 8005b0c:	d03b      	beq.n	8005b86 <UART_WaitOnFlagUntilTimeout+0xb6>
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	2b80      	cmp	r3, #128	@ 0x80
 8005b12:	d038      	beq.n	8005b86 <UART_WaitOnFlagUntilTimeout+0xb6>
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	2b40      	cmp	r3, #64	@ 0x40
 8005b18:	d035      	beq.n	8005b86 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	69db      	ldr	r3, [r3, #28]
 8005b20:	2208      	movs	r2, #8
 8005b22:	4013      	ands	r3, r2
 8005b24:	2b08      	cmp	r3, #8
 8005b26:	d111      	bne.n	8005b4c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	2208      	movs	r2, #8
 8005b2e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	0018      	movs	r0, r3
 8005b34:	f000 f922 	bl	8005d7c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2290      	movs	r2, #144	@ 0x90
 8005b3c:	2108      	movs	r1, #8
 8005b3e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2284      	movs	r2, #132	@ 0x84
 8005b44:	2100      	movs	r1, #0
 8005b46:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005b48:	2301      	movs	r3, #1
 8005b4a:	e02c      	b.n	8005ba6 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	69da      	ldr	r2, [r3, #28]
 8005b52:	2380      	movs	r3, #128	@ 0x80
 8005b54:	011b      	lsls	r3, r3, #4
 8005b56:	401a      	ands	r2, r3
 8005b58:	2380      	movs	r3, #128	@ 0x80
 8005b5a:	011b      	lsls	r3, r3, #4
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d112      	bne.n	8005b86 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	2280      	movs	r2, #128	@ 0x80
 8005b66:	0112      	lsls	r2, r2, #4
 8005b68:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	0018      	movs	r0, r3
 8005b6e:	f000 f905 	bl	8005d7c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	2290      	movs	r2, #144	@ 0x90
 8005b76:	2120      	movs	r1, #32
 8005b78:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2284      	movs	r2, #132	@ 0x84
 8005b7e:	2100      	movs	r1, #0
 8005b80:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005b82:	2303      	movs	r3, #3
 8005b84:	e00f      	b.n	8005ba6 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	69db      	ldr	r3, [r3, #28]
 8005b8c:	68ba      	ldr	r2, [r7, #8]
 8005b8e:	4013      	ands	r3, r2
 8005b90:	68ba      	ldr	r2, [r7, #8]
 8005b92:	1ad3      	subs	r3, r2, r3
 8005b94:	425a      	negs	r2, r3
 8005b96:	4153      	adcs	r3, r2
 8005b98:	b2db      	uxtb	r3, r3
 8005b9a:	001a      	movs	r2, r3
 8005b9c:	1dfb      	adds	r3, r7, #7
 8005b9e:	781b      	ldrb	r3, [r3, #0]
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	d09e      	beq.n	8005ae2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ba4:	2300      	movs	r3, #0
}
 8005ba6:	0018      	movs	r0, r3
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	b004      	add	sp, #16
 8005bac:	bd80      	pop	{r7, pc}
	...

08005bb0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b090      	sub	sp, #64	@ 0x40
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	60f8      	str	r0, [r7, #12]
 8005bb8:	60b9      	str	r1, [r7, #8]
 8005bba:	1dbb      	adds	r3, r7, #6
 8005bbc:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	68ba      	ldr	r2, [r7, #8]
 8005bc2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	1dba      	adds	r2, r7, #6
 8005bc8:	215c      	movs	r1, #92	@ 0x5c
 8005bca:	8812      	ldrh	r2, [r2, #0]
 8005bcc:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2290      	movs	r2, #144	@ 0x90
 8005bd2:	2100      	movs	r1, #0
 8005bd4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	228c      	movs	r2, #140	@ 0x8c
 8005bda:	2122      	movs	r1, #34	@ 0x22
 8005bdc:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2280      	movs	r2, #128	@ 0x80
 8005be2:	589b      	ldr	r3, [r3, r2]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d02d      	beq.n	8005c44 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2280      	movs	r2, #128	@ 0x80
 8005bec:	589b      	ldr	r3, [r3, r2]
 8005bee:	4a40      	ldr	r2, [pc, #256]	@ (8005cf0 <UART_Start_Receive_DMA+0x140>)
 8005bf0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2280      	movs	r2, #128	@ 0x80
 8005bf6:	589b      	ldr	r3, [r3, r2]
 8005bf8:	4a3e      	ldr	r2, [pc, #248]	@ (8005cf4 <UART_Start_Receive_DMA+0x144>)
 8005bfa:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2280      	movs	r2, #128	@ 0x80
 8005c00:	589b      	ldr	r3, [r3, r2]
 8005c02:	4a3d      	ldr	r2, [pc, #244]	@ (8005cf8 <UART_Start_Receive_DMA+0x148>)
 8005c04:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2280      	movs	r2, #128	@ 0x80
 8005c0a:	589b      	ldr	r3, [r3, r2]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2280      	movs	r2, #128	@ 0x80
 8005c14:	5898      	ldr	r0, [r3, r2]
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	3324      	adds	r3, #36	@ 0x24
 8005c1c:	0019      	movs	r1, r3
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c22:	001a      	movs	r2, r3
 8005c24:	1dbb      	adds	r3, r7, #6
 8005c26:	881b      	ldrh	r3, [r3, #0]
 8005c28:	f7fc fc7e 	bl	8002528 <HAL_DMA_Start_IT>
 8005c2c:	1e03      	subs	r3, r0, #0
 8005c2e:	d009      	beq.n	8005c44 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2290      	movs	r2, #144	@ 0x90
 8005c34:	2110      	movs	r1, #16
 8005c36:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	228c      	movs	r2, #140	@ 0x8c
 8005c3c:	2120      	movs	r1, #32
 8005c3e:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8005c40:	2301      	movs	r3, #1
 8005c42:	e050      	b.n	8005ce6 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	691b      	ldr	r3, [r3, #16]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d019      	beq.n	8005c80 <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c4c:	f3ef 8310 	mrs	r3, PRIMASK
 8005c50:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8005c52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c54:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c56:	2301      	movs	r3, #1
 8005c58:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c5c:	f383 8810 	msr	PRIMASK, r3
}
 8005c60:	46c0      	nop			@ (mov r8, r8)
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	681a      	ldr	r2, [r3, #0]
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	2180      	movs	r1, #128	@ 0x80
 8005c6e:	0049      	lsls	r1, r1, #1
 8005c70:	430a      	orrs	r2, r1
 8005c72:	601a      	str	r2, [r3, #0]
 8005c74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c76:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c7a:	f383 8810 	msr	PRIMASK, r3
}
 8005c7e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c80:	f3ef 8310 	mrs	r3, PRIMASK
 8005c84:	613b      	str	r3, [r7, #16]
  return(result);
 8005c86:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c88:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	f383 8810 	msr	PRIMASK, r3
}
 8005c94:	46c0      	nop			@ (mov r8, r8)
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	689a      	ldr	r2, [r3, #8]
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	2101      	movs	r1, #1
 8005ca2:	430a      	orrs	r2, r1
 8005ca4:	609a      	str	r2, [r3, #8]
 8005ca6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ca8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005caa:	69bb      	ldr	r3, [r7, #24]
 8005cac:	f383 8810 	msr	PRIMASK, r3
}
 8005cb0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005cb2:	f3ef 8310 	mrs	r3, PRIMASK
 8005cb6:	61fb      	str	r3, [r7, #28]
  return(result);
 8005cb8:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005cba:	637b      	str	r3, [r7, #52]	@ 0x34
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cc0:	6a3b      	ldr	r3, [r7, #32]
 8005cc2:	f383 8810 	msr	PRIMASK, r3
}
 8005cc6:	46c0      	nop			@ (mov r8, r8)
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	689a      	ldr	r2, [r3, #8]
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	2140      	movs	r1, #64	@ 0x40
 8005cd4:	430a      	orrs	r2, r1
 8005cd6:	609a      	str	r2, [r3, #8]
 8005cd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cda:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cde:	f383 8810 	msr	PRIMASK, r3
}
 8005ce2:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8005ce4:	2300      	movs	r3, #0
}
 8005ce6:	0018      	movs	r0, r3
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	b010      	add	sp, #64	@ 0x40
 8005cec:	bd80      	pop	{r7, pc}
 8005cee:	46c0      	nop			@ (mov r8, r8)
 8005cf0:	08005e49 	.word	0x08005e49
 8005cf4:	08005f79 	.word	0x08005f79
 8005cf8:	08005fbb 	.word	0x08005fbb

08005cfc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b08a      	sub	sp, #40	@ 0x28
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d04:	f3ef 8310 	mrs	r3, PRIMASK
 8005d08:	60bb      	str	r3, [r7, #8]
  return(result);
 8005d0a:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8005d0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d0e:	2301      	movs	r3, #1
 8005d10:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	f383 8810 	msr	PRIMASK, r3
}
 8005d18:	46c0      	nop			@ (mov r8, r8)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	681a      	ldr	r2, [r3, #0]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	21c0      	movs	r1, #192	@ 0xc0
 8005d26:	438a      	bics	r2, r1
 8005d28:	601a      	str	r2, [r3, #0]
 8005d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d2c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d2e:	693b      	ldr	r3, [r7, #16]
 8005d30:	f383 8810 	msr	PRIMASK, r3
}
 8005d34:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d36:	f3ef 8310 	mrs	r3, PRIMASK
 8005d3a:	617b      	str	r3, [r7, #20]
  return(result);
 8005d3c:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8005d3e:	623b      	str	r3, [r7, #32]
 8005d40:	2301      	movs	r3, #1
 8005d42:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d44:	69bb      	ldr	r3, [r7, #24]
 8005d46:	f383 8810 	msr	PRIMASK, r3
}
 8005d4a:	46c0      	nop			@ (mov r8, r8)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	689a      	ldr	r2, [r3, #8]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4908      	ldr	r1, [pc, #32]	@ (8005d78 <UART_EndTxTransfer+0x7c>)
 8005d58:	400a      	ands	r2, r1
 8005d5a:	609a      	str	r2, [r3, #8]
 8005d5c:	6a3b      	ldr	r3, [r7, #32]
 8005d5e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d60:	69fb      	ldr	r3, [r7, #28]
 8005d62:	f383 8810 	msr	PRIMASK, r3
}
 8005d66:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2288      	movs	r2, #136	@ 0x88
 8005d6c:	2120      	movs	r1, #32
 8005d6e:	5099      	str	r1, [r3, r2]
}
 8005d70:	46c0      	nop			@ (mov r8, r8)
 8005d72:	46bd      	mov	sp, r7
 8005d74:	b00a      	add	sp, #40	@ 0x28
 8005d76:	bd80      	pop	{r7, pc}
 8005d78:	ff7fffff 	.word	0xff7fffff

08005d7c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b08e      	sub	sp, #56	@ 0x38
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d84:	f3ef 8310 	mrs	r3, PRIMASK
 8005d88:	617b      	str	r3, [r7, #20]
  return(result);
 8005d8a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005d8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d8e:	2301      	movs	r3, #1
 8005d90:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d92:	69bb      	ldr	r3, [r7, #24]
 8005d94:	f383 8810 	msr	PRIMASK, r3
}
 8005d98:	46c0      	nop			@ (mov r8, r8)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	681a      	ldr	r2, [r3, #0]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4926      	ldr	r1, [pc, #152]	@ (8005e40 <UART_EndRxTransfer+0xc4>)
 8005da6:	400a      	ands	r2, r1
 8005da8:	601a      	str	r2, [r3, #0]
 8005daa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dae:	69fb      	ldr	r3, [r7, #28]
 8005db0:	f383 8810 	msr	PRIMASK, r3
}
 8005db4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005db6:	f3ef 8310 	mrs	r3, PRIMASK
 8005dba:	623b      	str	r3, [r7, #32]
  return(result);
 8005dbc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005dbe:	633b      	str	r3, [r7, #48]	@ 0x30
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dc6:	f383 8810 	msr	PRIMASK, r3
}
 8005dca:	46c0      	nop			@ (mov r8, r8)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	689a      	ldr	r2, [r3, #8]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	491b      	ldr	r1, [pc, #108]	@ (8005e44 <UART_EndRxTransfer+0xc8>)
 8005dd8:	400a      	ands	r2, r1
 8005dda:	609a      	str	r2, [r3, #8]
 8005ddc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dde:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005de0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005de2:	f383 8810 	msr	PRIMASK, r3
}
 8005de6:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005dec:	2b01      	cmp	r3, #1
 8005dee:	d118      	bne.n	8005e22 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005df0:	f3ef 8310 	mrs	r3, PRIMASK
 8005df4:	60bb      	str	r3, [r7, #8]
  return(result);
 8005df6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005df8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	f383 8810 	msr	PRIMASK, r3
}
 8005e04:	46c0      	nop			@ (mov r8, r8)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	2110      	movs	r1, #16
 8005e12:	438a      	bics	r2, r1
 8005e14:	601a      	str	r2, [r3, #0]
 8005e16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e18:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	f383 8810 	msr	PRIMASK, r3
}
 8005e20:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	228c      	movs	r2, #140	@ 0x8c
 8005e26:	2120      	movs	r1, #32
 8005e28:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2200      	movs	r2, #0
 8005e34:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005e36:	46c0      	nop			@ (mov r8, r8)
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	b00e      	add	sp, #56	@ 0x38
 8005e3c:	bd80      	pop	{r7, pc}
 8005e3e:	46c0      	nop			@ (mov r8, r8)
 8005e40:	fffffedf 	.word	0xfffffedf
 8005e44:	effffffe 	.word	0xeffffffe

08005e48 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b094      	sub	sp, #80	@ 0x50
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e54:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	2220      	movs	r2, #32
 8005e5e:	4013      	ands	r3, r2
 8005e60:	d16f      	bne.n	8005f42 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8005e62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e64:	225e      	movs	r2, #94	@ 0x5e
 8005e66:	2100      	movs	r1, #0
 8005e68:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e6a:	f3ef 8310 	mrs	r3, PRIMASK
 8005e6e:	61bb      	str	r3, [r7, #24]
  return(result);
 8005e70:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e72:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e74:	2301      	movs	r3, #1
 8005e76:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e78:	69fb      	ldr	r3, [r7, #28]
 8005e7a:	f383 8810 	msr	PRIMASK, r3
}
 8005e7e:	46c0      	nop			@ (mov r8, r8)
 8005e80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	681a      	ldr	r2, [r3, #0]
 8005e86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	493a      	ldr	r1, [pc, #232]	@ (8005f74 <UART_DMAReceiveCplt+0x12c>)
 8005e8c:	400a      	ands	r2, r1
 8005e8e:	601a      	str	r2, [r3, #0]
 8005e90:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e92:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e94:	6a3b      	ldr	r3, [r7, #32]
 8005e96:	f383 8810 	msr	PRIMASK, r3
}
 8005e9a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e9c:	f3ef 8310 	mrs	r3, PRIMASK
 8005ea0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ea4:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005eaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eac:	f383 8810 	msr	PRIMASK, r3
}
 8005eb0:	46c0      	nop			@ (mov r8, r8)
 8005eb2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	689a      	ldr	r2, [r3, #8]
 8005eb8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	2101      	movs	r1, #1
 8005ebe:	438a      	bics	r2, r1
 8005ec0:	609a      	str	r2, [r3, #8]
 8005ec2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ec4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ec6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ec8:	f383 8810 	msr	PRIMASK, r3
}
 8005ecc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ece:	f3ef 8310 	mrs	r3, PRIMASK
 8005ed2:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8005ed4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ed6:	643b      	str	r3, [r7, #64]	@ 0x40
 8005ed8:	2301      	movs	r3, #1
 8005eda:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005edc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ede:	f383 8810 	msr	PRIMASK, r3
}
 8005ee2:	46c0      	nop			@ (mov r8, r8)
 8005ee4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	689a      	ldr	r2, [r3, #8]
 8005eea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	2140      	movs	r1, #64	@ 0x40
 8005ef0:	438a      	bics	r2, r1
 8005ef2:	609a      	str	r2, [r3, #8]
 8005ef4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ef6:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ef8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005efa:	f383 8810 	msr	PRIMASK, r3
}
 8005efe:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005f00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f02:	228c      	movs	r2, #140	@ 0x8c
 8005f04:	2120      	movs	r1, #32
 8005f06:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	d118      	bne.n	8005f42 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f10:	f3ef 8310 	mrs	r3, PRIMASK
 8005f14:	60fb      	str	r3, [r7, #12]
  return(result);
 8005f16:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f18:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	f383 8810 	msr	PRIMASK, r3
}
 8005f24:	46c0      	nop			@ (mov r8, r8)
 8005f26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	681a      	ldr	r2, [r3, #0]
 8005f2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	2110      	movs	r1, #16
 8005f32:	438a      	bics	r2, r1
 8005f34:	601a      	str	r2, [r3, #0]
 8005f36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f38:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	f383 8810 	msr	PRIMASK, r3
}
 8005f40:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f44:	2200      	movs	r2, #0
 8005f46:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d108      	bne.n	8005f62 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005f50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f52:	225c      	movs	r2, #92	@ 0x5c
 8005f54:	5a9a      	ldrh	r2, [r3, r2]
 8005f56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f58:	0011      	movs	r1, r2
 8005f5a:	0018      	movs	r0, r3
 8005f5c:	f7ff f8f8 	bl	8005150 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005f60:	e003      	b.n	8005f6a <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 8005f62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f64:	0018      	movs	r0, r3
 8005f66:	f7fb fcef 	bl	8001948 <HAL_UART_RxCpltCallback>
}
 8005f6a:	46c0      	nop			@ (mov r8, r8)
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	b014      	add	sp, #80	@ 0x50
 8005f70:	bd80      	pop	{r7, pc}
 8005f72:	46c0      	nop			@ (mov r8, r8)
 8005f74:	fffffeff 	.word	0xfffffeff

08005f78 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b084      	sub	sp, #16
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f84:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2201      	movs	r2, #1
 8005f8a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f90:	2b01      	cmp	r3, #1
 8005f92:	d10a      	bne.n	8005faa <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	225c      	movs	r2, #92	@ 0x5c
 8005f98:	5a9b      	ldrh	r3, [r3, r2]
 8005f9a:	085b      	lsrs	r3, r3, #1
 8005f9c:	b29a      	uxth	r2, r3
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	0011      	movs	r1, r2
 8005fa2:	0018      	movs	r0, r3
 8005fa4:	f7ff f8d4 	bl	8005150 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005fa8:	e003      	b.n	8005fb2 <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	0018      	movs	r0, r3
 8005fae:	f7ff f8bf 	bl	8005130 <HAL_UART_RxHalfCpltCallback>
}
 8005fb2:	46c0      	nop			@ (mov r8, r8)
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	b004      	add	sp, #16
 8005fb8:	bd80      	pop	{r7, pc}

08005fba <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005fba:	b580      	push	{r7, lr}
 8005fbc:	b086      	sub	sp, #24
 8005fbe:	af00      	add	r7, sp, #0
 8005fc0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fc6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	2288      	movs	r2, #136	@ 0x88
 8005fcc:	589b      	ldr	r3, [r3, r2]
 8005fce:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	228c      	movs	r2, #140	@ 0x8c
 8005fd4:	589b      	ldr	r3, [r3, r2]
 8005fd6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	2280      	movs	r2, #128	@ 0x80
 8005fe0:	4013      	ands	r3, r2
 8005fe2:	2b80      	cmp	r3, #128	@ 0x80
 8005fe4:	d10a      	bne.n	8005ffc <UART_DMAError+0x42>
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	2b21      	cmp	r3, #33	@ 0x21
 8005fea:	d107      	bne.n	8005ffc <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	2256      	movs	r2, #86	@ 0x56
 8005ff0:	2100      	movs	r1, #0
 8005ff2:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8005ff4:	697b      	ldr	r3, [r7, #20]
 8005ff6:	0018      	movs	r0, r3
 8005ff8:	f7ff fe80 	bl	8005cfc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	689b      	ldr	r3, [r3, #8]
 8006002:	2240      	movs	r2, #64	@ 0x40
 8006004:	4013      	ands	r3, r2
 8006006:	2b40      	cmp	r3, #64	@ 0x40
 8006008:	d10a      	bne.n	8006020 <UART_DMAError+0x66>
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2b22      	cmp	r3, #34	@ 0x22
 800600e:	d107      	bne.n	8006020 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	225e      	movs	r2, #94	@ 0x5e
 8006014:	2100      	movs	r1, #0
 8006016:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	0018      	movs	r0, r3
 800601c:	f7ff feae 	bl	8005d7c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	2290      	movs	r2, #144	@ 0x90
 8006024:	589b      	ldr	r3, [r3, r2]
 8006026:	2210      	movs	r2, #16
 8006028:	431a      	orrs	r2, r3
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	2190      	movs	r1, #144	@ 0x90
 800602e:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	0018      	movs	r0, r3
 8006034:	f7ff f884 	bl	8005140 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006038:	46c0      	nop			@ (mov r8, r8)
 800603a:	46bd      	mov	sp, r7
 800603c:	b006      	add	sp, #24
 800603e:	bd80      	pop	{r7, pc}

08006040 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b084      	sub	sp, #16
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800604c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	225e      	movs	r2, #94	@ 0x5e
 8006052:	2100      	movs	r1, #0
 8006054:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2256      	movs	r2, #86	@ 0x56
 800605a:	2100      	movs	r1, #0
 800605c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	0018      	movs	r0, r3
 8006062:	f7ff f86d 	bl	8005140 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006066:	46c0      	nop			@ (mov r8, r8)
 8006068:	46bd      	mov	sp, r7
 800606a:	b004      	add	sp, #16
 800606c:	bd80      	pop	{r7, pc}

0800606e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800606e:	b580      	push	{r7, lr}
 8006070:	b086      	sub	sp, #24
 8006072:	af00      	add	r7, sp, #0
 8006074:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006076:	f3ef 8310 	mrs	r3, PRIMASK
 800607a:	60bb      	str	r3, [r7, #8]
  return(result);
 800607c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800607e:	617b      	str	r3, [r7, #20]
 8006080:	2301      	movs	r3, #1
 8006082:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f383 8810 	msr	PRIMASK, r3
}
 800608a:	46c0      	nop			@ (mov r8, r8)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	681a      	ldr	r2, [r3, #0]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	2140      	movs	r1, #64	@ 0x40
 8006098:	438a      	bics	r2, r1
 800609a:	601a      	str	r2, [r3, #0]
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	f383 8810 	msr	PRIMASK, r3
}
 80060a6:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2288      	movs	r2, #136	@ 0x88
 80060ac:	2120      	movs	r1, #32
 80060ae:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2200      	movs	r2, #0
 80060b4:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	0018      	movs	r0, r3
 80060ba:	f7ff f831 	bl	8005120 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80060be:	46c0      	nop			@ (mov r8, r8)
 80060c0:	46bd      	mov	sp, r7
 80060c2:	b006      	add	sp, #24
 80060c4:	bd80      	pop	{r7, pc}
	...

080060c8 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b086      	sub	sp, #24
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	60f8      	str	r0, [r7, #12]
 80060d0:	60b9      	str	r1, [r7, #8]
 80060d2:	607a      	str	r2, [r7, #4]
 80060d4:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d101      	bne.n	80060e0 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 80060dc:	2301      	movs	r3, #1
 80060de:	e05d      	b.n	800619c <HAL_RS485Ex_Init+0xd4>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2288      	movs	r2, #136	@ 0x88
 80060e4:	589b      	ldr	r3, [r3, r2]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d107      	bne.n	80060fa <HAL_RS485Ex_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2284      	movs	r2, #132	@ 0x84
 80060ee:	2100      	movs	r1, #0
 80060f0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	0018      	movs	r0, r3
 80060f6:	f7fb fd75 	bl	8001be4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2288      	movs	r2, #136	@ 0x88
 80060fe:	2124      	movs	r1, #36	@ 0x24
 8006100:	5099      	str	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	681a      	ldr	r2, [r3, #0]
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	2101      	movs	r1, #1
 800610e:	438a      	bics	r2, r1
 8006110:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006116:	2b00      	cmp	r3, #0
 8006118:	d003      	beq.n	8006122 <HAL_RS485Ex_Init+0x5a>
  {
    UART_AdvFeatureConfig(huart);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	0018      	movs	r0, r3
 800611e:	f7ff fb79 	bl	8005814 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	0018      	movs	r0, r3
 8006126:	f7ff f81f 	bl	8005168 <UART_SetConfig>
 800612a:	0003      	movs	r3, r0
 800612c:	2b01      	cmp	r3, #1
 800612e:	d101      	bne.n	8006134 <HAL_RS485Ex_Init+0x6c>
  {
    return HAL_ERROR;
 8006130:	2301      	movs	r3, #1
 8006132:	e033      	b.n	800619c <HAL_RS485Ex_Init+0xd4>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	689a      	ldr	r2, [r3, #8]
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	2180      	movs	r1, #128	@ 0x80
 8006140:	01c9      	lsls	r1, r1, #7
 8006142:	430a      	orrs	r2, r1
 8006144:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	689b      	ldr	r3, [r3, #8]
 800614c:	4a15      	ldr	r2, [pc, #84]	@ (80061a4 <HAL_RS485Ex_Init+0xdc>)
 800614e:	4013      	ands	r3, r2
 8006150:	0019      	movs	r1, r3
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	68ba      	ldr	r2, [r7, #8]
 8006158:	430a      	orrs	r2, r1
 800615a:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	055b      	lsls	r3, r3, #21
 8006160:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	041b      	lsls	r3, r3, #16
 8006166:	697a      	ldr	r2, [r7, #20]
 8006168:	4313      	orrs	r3, r2
 800616a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a0d      	ldr	r2, [pc, #52]	@ (80061a8 <HAL_RS485Ex_Init+0xe0>)
 8006174:	4013      	ands	r3, r2
 8006176:	0019      	movs	r1, r3
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	697a      	ldr	r2, [r7, #20]
 800617e:	430a      	orrs	r2, r1
 8006180:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	681a      	ldr	r2, [r3, #0]
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	2101      	movs	r1, #1
 800618e:	430a      	orrs	r2, r1
 8006190:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	0018      	movs	r0, r3
 8006196:	f7ff fbf1 	bl	800597c <UART_CheckIdleState>
 800619a:	0003      	movs	r3, r0
}
 800619c:	0018      	movs	r0, r3
 800619e:	46bd      	mov	sp, r7
 80061a0:	b006      	add	sp, #24
 80061a2:	bd80      	pop	{r7, pc}
 80061a4:	ffff7fff 	.word	0xffff7fff
 80061a8:	fc00ffff 	.word	0xfc00ffff

080061ac <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b082      	sub	sp, #8
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80061b4:	46c0      	nop			@ (mov r8, r8)
 80061b6:	46bd      	mov	sp, r7
 80061b8:	b002      	add	sp, #8
 80061ba:	bd80      	pop	{r7, pc}

080061bc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b082      	sub	sp, #8
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80061c4:	46c0      	nop			@ (mov r8, r8)
 80061c6:	46bd      	mov	sp, r7
 80061c8:	b002      	add	sp, #8
 80061ca:	bd80      	pop	{r7, pc}

080061cc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b082      	sub	sp, #8
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80061d4:	46c0      	nop			@ (mov r8, r8)
 80061d6:	46bd      	mov	sp, r7
 80061d8:	b002      	add	sp, #8
 80061da:	bd80      	pop	{r7, pc}

080061dc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b084      	sub	sp, #16
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2284      	movs	r2, #132	@ 0x84
 80061e8:	5c9b      	ldrb	r3, [r3, r2]
 80061ea:	2b01      	cmp	r3, #1
 80061ec:	d101      	bne.n	80061f2 <HAL_UARTEx_DisableFifoMode+0x16>
 80061ee:	2302      	movs	r3, #2
 80061f0:	e027      	b.n	8006242 <HAL_UARTEx_DisableFifoMode+0x66>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2284      	movs	r2, #132	@ 0x84
 80061f6:	2101      	movs	r1, #1
 80061f8:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2288      	movs	r2, #136	@ 0x88
 80061fe:	2124      	movs	r1, #36	@ 0x24
 8006200:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	681a      	ldr	r2, [r3, #0]
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	2101      	movs	r1, #1
 8006216:	438a      	bics	r2, r1
 8006218:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	4a0b      	ldr	r2, [pc, #44]	@ (800624c <HAL_UARTEx_DisableFifoMode+0x70>)
 800621e:	4013      	ands	r3, r2
 8006220:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2200      	movs	r2, #0
 8006226:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	68fa      	ldr	r2, [r7, #12]
 800622e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2288      	movs	r2, #136	@ 0x88
 8006234:	2120      	movs	r1, #32
 8006236:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2284      	movs	r2, #132	@ 0x84
 800623c:	2100      	movs	r1, #0
 800623e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006240:	2300      	movs	r3, #0
}
 8006242:	0018      	movs	r0, r3
 8006244:	46bd      	mov	sp, r7
 8006246:	b004      	add	sp, #16
 8006248:	bd80      	pop	{r7, pc}
 800624a:	46c0      	nop			@ (mov r8, r8)
 800624c:	dfffffff 	.word	0xdfffffff

08006250 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b084      	sub	sp, #16
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
 8006258:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2284      	movs	r2, #132	@ 0x84
 800625e:	5c9b      	ldrb	r3, [r3, r2]
 8006260:	2b01      	cmp	r3, #1
 8006262:	d101      	bne.n	8006268 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006264:	2302      	movs	r3, #2
 8006266:	e02e      	b.n	80062c6 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2284      	movs	r2, #132	@ 0x84
 800626c:	2101      	movs	r1, #1
 800626e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2288      	movs	r2, #136	@ 0x88
 8006274:	2124      	movs	r1, #36	@ 0x24
 8006276:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	681a      	ldr	r2, [r3, #0]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	2101      	movs	r1, #1
 800628c:	438a      	bics	r2, r1
 800628e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	689b      	ldr	r3, [r3, #8]
 8006296:	00db      	lsls	r3, r3, #3
 8006298:	08d9      	lsrs	r1, r3, #3
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	683a      	ldr	r2, [r7, #0]
 80062a0:	430a      	orrs	r2, r1
 80062a2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	0018      	movs	r0, r3
 80062a8:	f000 f854 	bl	8006354 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	68fa      	ldr	r2, [r7, #12]
 80062b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2288      	movs	r2, #136	@ 0x88
 80062b8:	2120      	movs	r1, #32
 80062ba:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2284      	movs	r2, #132	@ 0x84
 80062c0:	2100      	movs	r1, #0
 80062c2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80062c4:	2300      	movs	r3, #0
}
 80062c6:	0018      	movs	r0, r3
 80062c8:	46bd      	mov	sp, r7
 80062ca:	b004      	add	sp, #16
 80062cc:	bd80      	pop	{r7, pc}
	...

080062d0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b084      	sub	sp, #16
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
 80062d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2284      	movs	r2, #132	@ 0x84
 80062de:	5c9b      	ldrb	r3, [r3, r2]
 80062e0:	2b01      	cmp	r3, #1
 80062e2:	d101      	bne.n	80062e8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80062e4:	2302      	movs	r3, #2
 80062e6:	e02f      	b.n	8006348 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2284      	movs	r2, #132	@ 0x84
 80062ec:	2101      	movs	r1, #1
 80062ee:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2288      	movs	r2, #136	@ 0x88
 80062f4:	2124      	movs	r1, #36	@ 0x24
 80062f6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	681a      	ldr	r2, [r3, #0]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	2101      	movs	r1, #1
 800630c:	438a      	bics	r2, r1
 800630e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	689b      	ldr	r3, [r3, #8]
 8006316:	4a0e      	ldr	r2, [pc, #56]	@ (8006350 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8006318:	4013      	ands	r3, r2
 800631a:	0019      	movs	r1, r3
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	683a      	ldr	r2, [r7, #0]
 8006322:	430a      	orrs	r2, r1
 8006324:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	0018      	movs	r0, r3
 800632a:	f000 f813 	bl	8006354 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	68fa      	ldr	r2, [r7, #12]
 8006334:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2288      	movs	r2, #136	@ 0x88
 800633a:	2120      	movs	r1, #32
 800633c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2284      	movs	r2, #132	@ 0x84
 8006342:	2100      	movs	r1, #0
 8006344:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006346:	2300      	movs	r3, #0
}
 8006348:	0018      	movs	r0, r3
 800634a:	46bd      	mov	sp, r7
 800634c:	b004      	add	sp, #16
 800634e:	bd80      	pop	{r7, pc}
 8006350:	f1ffffff 	.word	0xf1ffffff

08006354 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006354:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006356:	b085      	sub	sp, #20
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006360:	2b00      	cmp	r3, #0
 8006362:	d108      	bne.n	8006376 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	226a      	movs	r2, #106	@ 0x6a
 8006368:	2101      	movs	r1, #1
 800636a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2268      	movs	r2, #104	@ 0x68
 8006370:	2101      	movs	r1, #1
 8006372:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006374:	e043      	b.n	80063fe <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006376:	260f      	movs	r6, #15
 8006378:	19bb      	adds	r3, r7, r6
 800637a:	2208      	movs	r2, #8
 800637c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800637e:	200e      	movs	r0, #14
 8006380:	183b      	adds	r3, r7, r0
 8006382:	2208      	movs	r2, #8
 8006384:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	689b      	ldr	r3, [r3, #8]
 800638c:	0e5b      	lsrs	r3, r3, #25
 800638e:	b2da      	uxtb	r2, r3
 8006390:	240d      	movs	r4, #13
 8006392:	193b      	adds	r3, r7, r4
 8006394:	2107      	movs	r1, #7
 8006396:	400a      	ands	r2, r1
 8006398:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	689b      	ldr	r3, [r3, #8]
 80063a0:	0f5b      	lsrs	r3, r3, #29
 80063a2:	b2da      	uxtb	r2, r3
 80063a4:	250c      	movs	r5, #12
 80063a6:	197b      	adds	r3, r7, r5
 80063a8:	2107      	movs	r1, #7
 80063aa:	400a      	ands	r2, r1
 80063ac:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80063ae:	183b      	adds	r3, r7, r0
 80063b0:	781b      	ldrb	r3, [r3, #0]
 80063b2:	197a      	adds	r2, r7, r5
 80063b4:	7812      	ldrb	r2, [r2, #0]
 80063b6:	4914      	ldr	r1, [pc, #80]	@ (8006408 <UARTEx_SetNbDataToProcess+0xb4>)
 80063b8:	5c8a      	ldrb	r2, [r1, r2]
 80063ba:	435a      	muls	r2, r3
 80063bc:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80063be:	197b      	adds	r3, r7, r5
 80063c0:	781b      	ldrb	r3, [r3, #0]
 80063c2:	4a12      	ldr	r2, [pc, #72]	@ (800640c <UARTEx_SetNbDataToProcess+0xb8>)
 80063c4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80063c6:	0019      	movs	r1, r3
 80063c8:	f7f9 ff30 	bl	800022c <__divsi3>
 80063cc:	0003      	movs	r3, r0
 80063ce:	b299      	uxth	r1, r3
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	226a      	movs	r2, #106	@ 0x6a
 80063d4:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80063d6:	19bb      	adds	r3, r7, r6
 80063d8:	781b      	ldrb	r3, [r3, #0]
 80063da:	193a      	adds	r2, r7, r4
 80063dc:	7812      	ldrb	r2, [r2, #0]
 80063de:	490a      	ldr	r1, [pc, #40]	@ (8006408 <UARTEx_SetNbDataToProcess+0xb4>)
 80063e0:	5c8a      	ldrb	r2, [r1, r2]
 80063e2:	435a      	muls	r2, r3
 80063e4:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80063e6:	193b      	adds	r3, r7, r4
 80063e8:	781b      	ldrb	r3, [r3, #0]
 80063ea:	4a08      	ldr	r2, [pc, #32]	@ (800640c <UARTEx_SetNbDataToProcess+0xb8>)
 80063ec:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80063ee:	0019      	movs	r1, r3
 80063f0:	f7f9 ff1c 	bl	800022c <__divsi3>
 80063f4:	0003      	movs	r3, r0
 80063f6:	b299      	uxth	r1, r3
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2268      	movs	r2, #104	@ 0x68
 80063fc:	5299      	strh	r1, [r3, r2]
}
 80063fe:	46c0      	nop			@ (mov r8, r8)
 8006400:	46bd      	mov	sp, r7
 8006402:	b005      	add	sp, #20
 8006404:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006406:	46c0      	nop			@ (mov r8, r8)
 8006408:	08007af4 	.word	0x08007af4
 800640c:	08007afc 	.word	0x08007afc

08006410 <std>:
 8006410:	2300      	movs	r3, #0
 8006412:	b510      	push	{r4, lr}
 8006414:	0004      	movs	r4, r0
 8006416:	6003      	str	r3, [r0, #0]
 8006418:	6043      	str	r3, [r0, #4]
 800641a:	6083      	str	r3, [r0, #8]
 800641c:	8181      	strh	r1, [r0, #12]
 800641e:	6643      	str	r3, [r0, #100]	@ 0x64
 8006420:	81c2      	strh	r2, [r0, #14]
 8006422:	6103      	str	r3, [r0, #16]
 8006424:	6143      	str	r3, [r0, #20]
 8006426:	6183      	str	r3, [r0, #24]
 8006428:	0019      	movs	r1, r3
 800642a:	2208      	movs	r2, #8
 800642c:	305c      	adds	r0, #92	@ 0x5c
 800642e:	f000 fa4d 	bl	80068cc <memset>
 8006432:	4b0b      	ldr	r3, [pc, #44]	@ (8006460 <std+0x50>)
 8006434:	6224      	str	r4, [r4, #32]
 8006436:	6263      	str	r3, [r4, #36]	@ 0x24
 8006438:	4b0a      	ldr	r3, [pc, #40]	@ (8006464 <std+0x54>)
 800643a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800643c:	4b0a      	ldr	r3, [pc, #40]	@ (8006468 <std+0x58>)
 800643e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006440:	4b0a      	ldr	r3, [pc, #40]	@ (800646c <std+0x5c>)
 8006442:	6323      	str	r3, [r4, #48]	@ 0x30
 8006444:	4b0a      	ldr	r3, [pc, #40]	@ (8006470 <std+0x60>)
 8006446:	429c      	cmp	r4, r3
 8006448:	d005      	beq.n	8006456 <std+0x46>
 800644a:	4b0a      	ldr	r3, [pc, #40]	@ (8006474 <std+0x64>)
 800644c:	429c      	cmp	r4, r3
 800644e:	d002      	beq.n	8006456 <std+0x46>
 8006450:	4b09      	ldr	r3, [pc, #36]	@ (8006478 <std+0x68>)
 8006452:	429c      	cmp	r4, r3
 8006454:	d103      	bne.n	800645e <std+0x4e>
 8006456:	0020      	movs	r0, r4
 8006458:	3058      	adds	r0, #88	@ 0x58
 800645a:	f000 fab7 	bl	80069cc <__retarget_lock_init_recursive>
 800645e:	bd10      	pop	{r4, pc}
 8006460:	080066f5 	.word	0x080066f5
 8006464:	0800671d 	.word	0x0800671d
 8006468:	08006755 	.word	0x08006755
 800646c:	08006781 	.word	0x08006781
 8006470:	20000490 	.word	0x20000490
 8006474:	200004f8 	.word	0x200004f8
 8006478:	20000560 	.word	0x20000560

0800647c <stdio_exit_handler>:
 800647c:	b510      	push	{r4, lr}
 800647e:	4a03      	ldr	r2, [pc, #12]	@ (800648c <stdio_exit_handler+0x10>)
 8006480:	4903      	ldr	r1, [pc, #12]	@ (8006490 <stdio_exit_handler+0x14>)
 8006482:	4804      	ldr	r0, [pc, #16]	@ (8006494 <stdio_exit_handler+0x18>)
 8006484:	f000 f86c 	bl	8006560 <_fwalk_sglue>
 8006488:	bd10      	pop	{r4, pc}
 800648a:	46c0      	nop			@ (mov r8, r8)
 800648c:	2000001c 	.word	0x2000001c
 8006490:	08007519 	.word	0x08007519
 8006494:	2000002c 	.word	0x2000002c

08006498 <cleanup_stdio>:
 8006498:	6841      	ldr	r1, [r0, #4]
 800649a:	4b0b      	ldr	r3, [pc, #44]	@ (80064c8 <cleanup_stdio+0x30>)
 800649c:	b510      	push	{r4, lr}
 800649e:	0004      	movs	r4, r0
 80064a0:	4299      	cmp	r1, r3
 80064a2:	d001      	beq.n	80064a8 <cleanup_stdio+0x10>
 80064a4:	f001 f838 	bl	8007518 <_fflush_r>
 80064a8:	68a1      	ldr	r1, [r4, #8]
 80064aa:	4b08      	ldr	r3, [pc, #32]	@ (80064cc <cleanup_stdio+0x34>)
 80064ac:	4299      	cmp	r1, r3
 80064ae:	d002      	beq.n	80064b6 <cleanup_stdio+0x1e>
 80064b0:	0020      	movs	r0, r4
 80064b2:	f001 f831 	bl	8007518 <_fflush_r>
 80064b6:	68e1      	ldr	r1, [r4, #12]
 80064b8:	4b05      	ldr	r3, [pc, #20]	@ (80064d0 <cleanup_stdio+0x38>)
 80064ba:	4299      	cmp	r1, r3
 80064bc:	d002      	beq.n	80064c4 <cleanup_stdio+0x2c>
 80064be:	0020      	movs	r0, r4
 80064c0:	f001 f82a 	bl	8007518 <_fflush_r>
 80064c4:	bd10      	pop	{r4, pc}
 80064c6:	46c0      	nop			@ (mov r8, r8)
 80064c8:	20000490 	.word	0x20000490
 80064cc:	200004f8 	.word	0x200004f8
 80064d0:	20000560 	.word	0x20000560

080064d4 <global_stdio_init.part.0>:
 80064d4:	b510      	push	{r4, lr}
 80064d6:	4b09      	ldr	r3, [pc, #36]	@ (80064fc <global_stdio_init.part.0+0x28>)
 80064d8:	4a09      	ldr	r2, [pc, #36]	@ (8006500 <global_stdio_init.part.0+0x2c>)
 80064da:	2104      	movs	r1, #4
 80064dc:	601a      	str	r2, [r3, #0]
 80064de:	4809      	ldr	r0, [pc, #36]	@ (8006504 <global_stdio_init.part.0+0x30>)
 80064e0:	2200      	movs	r2, #0
 80064e2:	f7ff ff95 	bl	8006410 <std>
 80064e6:	2201      	movs	r2, #1
 80064e8:	2109      	movs	r1, #9
 80064ea:	4807      	ldr	r0, [pc, #28]	@ (8006508 <global_stdio_init.part.0+0x34>)
 80064ec:	f7ff ff90 	bl	8006410 <std>
 80064f0:	2202      	movs	r2, #2
 80064f2:	2112      	movs	r1, #18
 80064f4:	4805      	ldr	r0, [pc, #20]	@ (800650c <global_stdio_init.part.0+0x38>)
 80064f6:	f7ff ff8b 	bl	8006410 <std>
 80064fa:	bd10      	pop	{r4, pc}
 80064fc:	200005c8 	.word	0x200005c8
 8006500:	0800647d 	.word	0x0800647d
 8006504:	20000490 	.word	0x20000490
 8006508:	200004f8 	.word	0x200004f8
 800650c:	20000560 	.word	0x20000560

08006510 <__sfp_lock_acquire>:
 8006510:	b510      	push	{r4, lr}
 8006512:	4802      	ldr	r0, [pc, #8]	@ (800651c <__sfp_lock_acquire+0xc>)
 8006514:	f000 fa5b 	bl	80069ce <__retarget_lock_acquire_recursive>
 8006518:	bd10      	pop	{r4, pc}
 800651a:	46c0      	nop			@ (mov r8, r8)
 800651c:	200005d1 	.word	0x200005d1

08006520 <__sfp_lock_release>:
 8006520:	b510      	push	{r4, lr}
 8006522:	4802      	ldr	r0, [pc, #8]	@ (800652c <__sfp_lock_release+0xc>)
 8006524:	f000 fa54 	bl	80069d0 <__retarget_lock_release_recursive>
 8006528:	bd10      	pop	{r4, pc}
 800652a:	46c0      	nop			@ (mov r8, r8)
 800652c:	200005d1 	.word	0x200005d1

08006530 <__sinit>:
 8006530:	b510      	push	{r4, lr}
 8006532:	0004      	movs	r4, r0
 8006534:	f7ff ffec 	bl	8006510 <__sfp_lock_acquire>
 8006538:	6a23      	ldr	r3, [r4, #32]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d002      	beq.n	8006544 <__sinit+0x14>
 800653e:	f7ff ffef 	bl	8006520 <__sfp_lock_release>
 8006542:	bd10      	pop	{r4, pc}
 8006544:	4b04      	ldr	r3, [pc, #16]	@ (8006558 <__sinit+0x28>)
 8006546:	6223      	str	r3, [r4, #32]
 8006548:	4b04      	ldr	r3, [pc, #16]	@ (800655c <__sinit+0x2c>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d1f6      	bne.n	800653e <__sinit+0xe>
 8006550:	f7ff ffc0 	bl	80064d4 <global_stdio_init.part.0>
 8006554:	e7f3      	b.n	800653e <__sinit+0xe>
 8006556:	46c0      	nop			@ (mov r8, r8)
 8006558:	08006499 	.word	0x08006499
 800655c:	200005c8 	.word	0x200005c8

08006560 <_fwalk_sglue>:
 8006560:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006562:	0014      	movs	r4, r2
 8006564:	2600      	movs	r6, #0
 8006566:	9000      	str	r0, [sp, #0]
 8006568:	9101      	str	r1, [sp, #4]
 800656a:	68a5      	ldr	r5, [r4, #8]
 800656c:	6867      	ldr	r7, [r4, #4]
 800656e:	3f01      	subs	r7, #1
 8006570:	d504      	bpl.n	800657c <_fwalk_sglue+0x1c>
 8006572:	6824      	ldr	r4, [r4, #0]
 8006574:	2c00      	cmp	r4, #0
 8006576:	d1f8      	bne.n	800656a <_fwalk_sglue+0xa>
 8006578:	0030      	movs	r0, r6
 800657a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800657c:	89ab      	ldrh	r3, [r5, #12]
 800657e:	2b01      	cmp	r3, #1
 8006580:	d908      	bls.n	8006594 <_fwalk_sglue+0x34>
 8006582:	220e      	movs	r2, #14
 8006584:	5eab      	ldrsh	r3, [r5, r2]
 8006586:	3301      	adds	r3, #1
 8006588:	d004      	beq.n	8006594 <_fwalk_sglue+0x34>
 800658a:	0029      	movs	r1, r5
 800658c:	9800      	ldr	r0, [sp, #0]
 800658e:	9b01      	ldr	r3, [sp, #4]
 8006590:	4798      	blx	r3
 8006592:	4306      	orrs	r6, r0
 8006594:	3568      	adds	r5, #104	@ 0x68
 8006596:	e7ea      	b.n	800656e <_fwalk_sglue+0xe>

08006598 <iprintf>:
 8006598:	b40f      	push	{r0, r1, r2, r3}
 800659a:	b507      	push	{r0, r1, r2, lr}
 800659c:	4905      	ldr	r1, [pc, #20]	@ (80065b4 <iprintf+0x1c>)
 800659e:	ab04      	add	r3, sp, #16
 80065a0:	6808      	ldr	r0, [r1, #0]
 80065a2:	cb04      	ldmia	r3!, {r2}
 80065a4:	6881      	ldr	r1, [r0, #8]
 80065a6:	9301      	str	r3, [sp, #4]
 80065a8:	f000 fc96 	bl	8006ed8 <_vfiprintf_r>
 80065ac:	b003      	add	sp, #12
 80065ae:	bc08      	pop	{r3}
 80065b0:	b004      	add	sp, #16
 80065b2:	4718      	bx	r3
 80065b4:	20000028 	.word	0x20000028

080065b8 <putchar>:
 80065b8:	b510      	push	{r4, lr}
 80065ba:	4b03      	ldr	r3, [pc, #12]	@ (80065c8 <putchar+0x10>)
 80065bc:	0001      	movs	r1, r0
 80065be:	6818      	ldr	r0, [r3, #0]
 80065c0:	6882      	ldr	r2, [r0, #8]
 80065c2:	f001 f840 	bl	8007646 <_putc_r>
 80065c6:	bd10      	pop	{r4, pc}
 80065c8:	20000028 	.word	0x20000028

080065cc <_puts_r>:
 80065cc:	6a03      	ldr	r3, [r0, #32]
 80065ce:	b570      	push	{r4, r5, r6, lr}
 80065d0:	0005      	movs	r5, r0
 80065d2:	000e      	movs	r6, r1
 80065d4:	6884      	ldr	r4, [r0, #8]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d101      	bne.n	80065de <_puts_r+0x12>
 80065da:	f7ff ffa9 	bl	8006530 <__sinit>
 80065de:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80065e0:	07db      	lsls	r3, r3, #31
 80065e2:	d405      	bmi.n	80065f0 <_puts_r+0x24>
 80065e4:	89a3      	ldrh	r3, [r4, #12]
 80065e6:	059b      	lsls	r3, r3, #22
 80065e8:	d402      	bmi.n	80065f0 <_puts_r+0x24>
 80065ea:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80065ec:	f000 f9ef 	bl	80069ce <__retarget_lock_acquire_recursive>
 80065f0:	89a3      	ldrh	r3, [r4, #12]
 80065f2:	071b      	lsls	r3, r3, #28
 80065f4:	d502      	bpl.n	80065fc <_puts_r+0x30>
 80065f6:	6923      	ldr	r3, [r4, #16]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d11f      	bne.n	800663c <_puts_r+0x70>
 80065fc:	0021      	movs	r1, r4
 80065fe:	0028      	movs	r0, r5
 8006600:	f000 f906 	bl	8006810 <__swsetup_r>
 8006604:	2800      	cmp	r0, #0
 8006606:	d019      	beq.n	800663c <_puts_r+0x70>
 8006608:	2501      	movs	r5, #1
 800660a:	426d      	negs	r5, r5
 800660c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800660e:	07db      	lsls	r3, r3, #31
 8006610:	d405      	bmi.n	800661e <_puts_r+0x52>
 8006612:	89a3      	ldrh	r3, [r4, #12]
 8006614:	059b      	lsls	r3, r3, #22
 8006616:	d402      	bmi.n	800661e <_puts_r+0x52>
 8006618:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800661a:	f000 f9d9 	bl	80069d0 <__retarget_lock_release_recursive>
 800661e:	0028      	movs	r0, r5
 8006620:	bd70      	pop	{r4, r5, r6, pc}
 8006622:	3601      	adds	r6, #1
 8006624:	60a3      	str	r3, [r4, #8]
 8006626:	2b00      	cmp	r3, #0
 8006628:	da04      	bge.n	8006634 <_puts_r+0x68>
 800662a:	69a2      	ldr	r2, [r4, #24]
 800662c:	429a      	cmp	r2, r3
 800662e:	dc16      	bgt.n	800665e <_puts_r+0x92>
 8006630:	290a      	cmp	r1, #10
 8006632:	d014      	beq.n	800665e <_puts_r+0x92>
 8006634:	6823      	ldr	r3, [r4, #0]
 8006636:	1c5a      	adds	r2, r3, #1
 8006638:	6022      	str	r2, [r4, #0]
 800663a:	7019      	strb	r1, [r3, #0]
 800663c:	68a3      	ldr	r3, [r4, #8]
 800663e:	7831      	ldrb	r1, [r6, #0]
 8006640:	3b01      	subs	r3, #1
 8006642:	2900      	cmp	r1, #0
 8006644:	d1ed      	bne.n	8006622 <_puts_r+0x56>
 8006646:	60a3      	str	r3, [r4, #8]
 8006648:	2b00      	cmp	r3, #0
 800664a:	da0f      	bge.n	800666c <_puts_r+0xa0>
 800664c:	0022      	movs	r2, r4
 800664e:	0028      	movs	r0, r5
 8006650:	310a      	adds	r1, #10
 8006652:	f000 f89b 	bl	800678c <__swbuf_r>
 8006656:	3001      	adds	r0, #1
 8006658:	d0d6      	beq.n	8006608 <_puts_r+0x3c>
 800665a:	250a      	movs	r5, #10
 800665c:	e7d6      	b.n	800660c <_puts_r+0x40>
 800665e:	0022      	movs	r2, r4
 8006660:	0028      	movs	r0, r5
 8006662:	f000 f893 	bl	800678c <__swbuf_r>
 8006666:	3001      	adds	r0, #1
 8006668:	d1e8      	bne.n	800663c <_puts_r+0x70>
 800666a:	e7cd      	b.n	8006608 <_puts_r+0x3c>
 800666c:	6823      	ldr	r3, [r4, #0]
 800666e:	1c5a      	adds	r2, r3, #1
 8006670:	6022      	str	r2, [r4, #0]
 8006672:	220a      	movs	r2, #10
 8006674:	701a      	strb	r2, [r3, #0]
 8006676:	e7f0      	b.n	800665a <_puts_r+0x8e>

08006678 <puts>:
 8006678:	b510      	push	{r4, lr}
 800667a:	4b03      	ldr	r3, [pc, #12]	@ (8006688 <puts+0x10>)
 800667c:	0001      	movs	r1, r0
 800667e:	6818      	ldr	r0, [r3, #0]
 8006680:	f7ff ffa4 	bl	80065cc <_puts_r>
 8006684:	bd10      	pop	{r4, pc}
 8006686:	46c0      	nop			@ (mov r8, r8)
 8006688:	20000028 	.word	0x20000028

0800668c <sniprintf>:
 800668c:	b40c      	push	{r2, r3}
 800668e:	b530      	push	{r4, r5, lr}
 8006690:	4b17      	ldr	r3, [pc, #92]	@ (80066f0 <sniprintf+0x64>)
 8006692:	000c      	movs	r4, r1
 8006694:	681d      	ldr	r5, [r3, #0]
 8006696:	b09d      	sub	sp, #116	@ 0x74
 8006698:	2900      	cmp	r1, #0
 800669a:	da08      	bge.n	80066ae <sniprintf+0x22>
 800669c:	238b      	movs	r3, #139	@ 0x8b
 800669e:	2001      	movs	r0, #1
 80066a0:	602b      	str	r3, [r5, #0]
 80066a2:	4240      	negs	r0, r0
 80066a4:	b01d      	add	sp, #116	@ 0x74
 80066a6:	bc30      	pop	{r4, r5}
 80066a8:	bc08      	pop	{r3}
 80066aa:	b002      	add	sp, #8
 80066ac:	4718      	bx	r3
 80066ae:	2382      	movs	r3, #130	@ 0x82
 80066b0:	466a      	mov	r2, sp
 80066b2:	009b      	lsls	r3, r3, #2
 80066b4:	8293      	strh	r3, [r2, #20]
 80066b6:	2300      	movs	r3, #0
 80066b8:	9002      	str	r0, [sp, #8]
 80066ba:	9006      	str	r0, [sp, #24]
 80066bc:	4299      	cmp	r1, r3
 80066be:	d000      	beq.n	80066c2 <sniprintf+0x36>
 80066c0:	1e4b      	subs	r3, r1, #1
 80066c2:	9304      	str	r3, [sp, #16]
 80066c4:	9307      	str	r3, [sp, #28]
 80066c6:	2301      	movs	r3, #1
 80066c8:	466a      	mov	r2, sp
 80066ca:	425b      	negs	r3, r3
 80066cc:	82d3      	strh	r3, [r2, #22]
 80066ce:	0028      	movs	r0, r5
 80066d0:	ab21      	add	r3, sp, #132	@ 0x84
 80066d2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80066d4:	a902      	add	r1, sp, #8
 80066d6:	9301      	str	r3, [sp, #4]
 80066d8:	f000 fad8 	bl	8006c8c <_svfiprintf_r>
 80066dc:	1c43      	adds	r3, r0, #1
 80066de:	da01      	bge.n	80066e4 <sniprintf+0x58>
 80066e0:	238b      	movs	r3, #139	@ 0x8b
 80066e2:	602b      	str	r3, [r5, #0]
 80066e4:	2c00      	cmp	r4, #0
 80066e6:	d0dd      	beq.n	80066a4 <sniprintf+0x18>
 80066e8:	2200      	movs	r2, #0
 80066ea:	9b02      	ldr	r3, [sp, #8]
 80066ec:	701a      	strb	r2, [r3, #0]
 80066ee:	e7d9      	b.n	80066a4 <sniprintf+0x18>
 80066f0:	20000028 	.word	0x20000028

080066f4 <__sread>:
 80066f4:	b570      	push	{r4, r5, r6, lr}
 80066f6:	000c      	movs	r4, r1
 80066f8:	250e      	movs	r5, #14
 80066fa:	5f49      	ldrsh	r1, [r1, r5]
 80066fc:	f000 f914 	bl	8006928 <_read_r>
 8006700:	2800      	cmp	r0, #0
 8006702:	db03      	blt.n	800670c <__sread+0x18>
 8006704:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8006706:	181b      	adds	r3, r3, r0
 8006708:	6563      	str	r3, [r4, #84]	@ 0x54
 800670a:	bd70      	pop	{r4, r5, r6, pc}
 800670c:	89a3      	ldrh	r3, [r4, #12]
 800670e:	4a02      	ldr	r2, [pc, #8]	@ (8006718 <__sread+0x24>)
 8006710:	4013      	ands	r3, r2
 8006712:	81a3      	strh	r3, [r4, #12]
 8006714:	e7f9      	b.n	800670a <__sread+0x16>
 8006716:	46c0      	nop			@ (mov r8, r8)
 8006718:	ffffefff 	.word	0xffffefff

0800671c <__swrite>:
 800671c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800671e:	001f      	movs	r7, r3
 8006720:	898b      	ldrh	r3, [r1, #12]
 8006722:	0005      	movs	r5, r0
 8006724:	000c      	movs	r4, r1
 8006726:	0016      	movs	r6, r2
 8006728:	05db      	lsls	r3, r3, #23
 800672a:	d505      	bpl.n	8006738 <__swrite+0x1c>
 800672c:	230e      	movs	r3, #14
 800672e:	5ec9      	ldrsh	r1, [r1, r3]
 8006730:	2200      	movs	r2, #0
 8006732:	2302      	movs	r3, #2
 8006734:	f000 f8e4 	bl	8006900 <_lseek_r>
 8006738:	89a3      	ldrh	r3, [r4, #12]
 800673a:	4a05      	ldr	r2, [pc, #20]	@ (8006750 <__swrite+0x34>)
 800673c:	0028      	movs	r0, r5
 800673e:	4013      	ands	r3, r2
 8006740:	81a3      	strh	r3, [r4, #12]
 8006742:	0032      	movs	r2, r6
 8006744:	230e      	movs	r3, #14
 8006746:	5ee1      	ldrsh	r1, [r4, r3]
 8006748:	003b      	movs	r3, r7
 800674a:	f000 f901 	bl	8006950 <_write_r>
 800674e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006750:	ffffefff 	.word	0xffffefff

08006754 <__sseek>:
 8006754:	b570      	push	{r4, r5, r6, lr}
 8006756:	000c      	movs	r4, r1
 8006758:	250e      	movs	r5, #14
 800675a:	5f49      	ldrsh	r1, [r1, r5]
 800675c:	f000 f8d0 	bl	8006900 <_lseek_r>
 8006760:	89a3      	ldrh	r3, [r4, #12]
 8006762:	1c42      	adds	r2, r0, #1
 8006764:	d103      	bne.n	800676e <__sseek+0x1a>
 8006766:	4a05      	ldr	r2, [pc, #20]	@ (800677c <__sseek+0x28>)
 8006768:	4013      	ands	r3, r2
 800676a:	81a3      	strh	r3, [r4, #12]
 800676c:	bd70      	pop	{r4, r5, r6, pc}
 800676e:	2280      	movs	r2, #128	@ 0x80
 8006770:	0152      	lsls	r2, r2, #5
 8006772:	4313      	orrs	r3, r2
 8006774:	81a3      	strh	r3, [r4, #12]
 8006776:	6560      	str	r0, [r4, #84]	@ 0x54
 8006778:	e7f8      	b.n	800676c <__sseek+0x18>
 800677a:	46c0      	nop			@ (mov r8, r8)
 800677c:	ffffefff 	.word	0xffffefff

08006780 <__sclose>:
 8006780:	b510      	push	{r4, lr}
 8006782:	230e      	movs	r3, #14
 8006784:	5ec9      	ldrsh	r1, [r1, r3]
 8006786:	f000 f8a9 	bl	80068dc <_close_r>
 800678a:	bd10      	pop	{r4, pc}

0800678c <__swbuf_r>:
 800678c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800678e:	0006      	movs	r6, r0
 8006790:	000d      	movs	r5, r1
 8006792:	0014      	movs	r4, r2
 8006794:	2800      	cmp	r0, #0
 8006796:	d004      	beq.n	80067a2 <__swbuf_r+0x16>
 8006798:	6a03      	ldr	r3, [r0, #32]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d101      	bne.n	80067a2 <__swbuf_r+0x16>
 800679e:	f7ff fec7 	bl	8006530 <__sinit>
 80067a2:	69a3      	ldr	r3, [r4, #24]
 80067a4:	60a3      	str	r3, [r4, #8]
 80067a6:	89a3      	ldrh	r3, [r4, #12]
 80067a8:	071b      	lsls	r3, r3, #28
 80067aa:	d502      	bpl.n	80067b2 <__swbuf_r+0x26>
 80067ac:	6923      	ldr	r3, [r4, #16]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d109      	bne.n	80067c6 <__swbuf_r+0x3a>
 80067b2:	0021      	movs	r1, r4
 80067b4:	0030      	movs	r0, r6
 80067b6:	f000 f82b 	bl	8006810 <__swsetup_r>
 80067ba:	2800      	cmp	r0, #0
 80067bc:	d003      	beq.n	80067c6 <__swbuf_r+0x3a>
 80067be:	2501      	movs	r5, #1
 80067c0:	426d      	negs	r5, r5
 80067c2:	0028      	movs	r0, r5
 80067c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067c6:	6923      	ldr	r3, [r4, #16]
 80067c8:	6820      	ldr	r0, [r4, #0]
 80067ca:	b2ef      	uxtb	r7, r5
 80067cc:	1ac0      	subs	r0, r0, r3
 80067ce:	6963      	ldr	r3, [r4, #20]
 80067d0:	b2ed      	uxtb	r5, r5
 80067d2:	4283      	cmp	r3, r0
 80067d4:	dc05      	bgt.n	80067e2 <__swbuf_r+0x56>
 80067d6:	0021      	movs	r1, r4
 80067d8:	0030      	movs	r0, r6
 80067da:	f000 fe9d 	bl	8007518 <_fflush_r>
 80067de:	2800      	cmp	r0, #0
 80067e0:	d1ed      	bne.n	80067be <__swbuf_r+0x32>
 80067e2:	68a3      	ldr	r3, [r4, #8]
 80067e4:	3001      	adds	r0, #1
 80067e6:	3b01      	subs	r3, #1
 80067e8:	60a3      	str	r3, [r4, #8]
 80067ea:	6823      	ldr	r3, [r4, #0]
 80067ec:	1c5a      	adds	r2, r3, #1
 80067ee:	6022      	str	r2, [r4, #0]
 80067f0:	701f      	strb	r7, [r3, #0]
 80067f2:	6963      	ldr	r3, [r4, #20]
 80067f4:	4283      	cmp	r3, r0
 80067f6:	d004      	beq.n	8006802 <__swbuf_r+0x76>
 80067f8:	89a3      	ldrh	r3, [r4, #12]
 80067fa:	07db      	lsls	r3, r3, #31
 80067fc:	d5e1      	bpl.n	80067c2 <__swbuf_r+0x36>
 80067fe:	2d0a      	cmp	r5, #10
 8006800:	d1df      	bne.n	80067c2 <__swbuf_r+0x36>
 8006802:	0021      	movs	r1, r4
 8006804:	0030      	movs	r0, r6
 8006806:	f000 fe87 	bl	8007518 <_fflush_r>
 800680a:	2800      	cmp	r0, #0
 800680c:	d0d9      	beq.n	80067c2 <__swbuf_r+0x36>
 800680e:	e7d6      	b.n	80067be <__swbuf_r+0x32>

08006810 <__swsetup_r>:
 8006810:	4b2d      	ldr	r3, [pc, #180]	@ (80068c8 <__swsetup_r+0xb8>)
 8006812:	b570      	push	{r4, r5, r6, lr}
 8006814:	0005      	movs	r5, r0
 8006816:	6818      	ldr	r0, [r3, #0]
 8006818:	000c      	movs	r4, r1
 800681a:	2800      	cmp	r0, #0
 800681c:	d004      	beq.n	8006828 <__swsetup_r+0x18>
 800681e:	6a03      	ldr	r3, [r0, #32]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d101      	bne.n	8006828 <__swsetup_r+0x18>
 8006824:	f7ff fe84 	bl	8006530 <__sinit>
 8006828:	230c      	movs	r3, #12
 800682a:	5ee2      	ldrsh	r2, [r4, r3]
 800682c:	0713      	lsls	r3, r2, #28
 800682e:	d423      	bmi.n	8006878 <__swsetup_r+0x68>
 8006830:	06d3      	lsls	r3, r2, #27
 8006832:	d407      	bmi.n	8006844 <__swsetup_r+0x34>
 8006834:	2309      	movs	r3, #9
 8006836:	602b      	str	r3, [r5, #0]
 8006838:	2340      	movs	r3, #64	@ 0x40
 800683a:	2001      	movs	r0, #1
 800683c:	4313      	orrs	r3, r2
 800683e:	81a3      	strh	r3, [r4, #12]
 8006840:	4240      	negs	r0, r0
 8006842:	e03a      	b.n	80068ba <__swsetup_r+0xaa>
 8006844:	0752      	lsls	r2, r2, #29
 8006846:	d513      	bpl.n	8006870 <__swsetup_r+0x60>
 8006848:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800684a:	2900      	cmp	r1, #0
 800684c:	d008      	beq.n	8006860 <__swsetup_r+0x50>
 800684e:	0023      	movs	r3, r4
 8006850:	3344      	adds	r3, #68	@ 0x44
 8006852:	4299      	cmp	r1, r3
 8006854:	d002      	beq.n	800685c <__swsetup_r+0x4c>
 8006856:	0028      	movs	r0, r5
 8006858:	f000 f8bc 	bl	80069d4 <_free_r>
 800685c:	2300      	movs	r3, #0
 800685e:	6363      	str	r3, [r4, #52]	@ 0x34
 8006860:	2224      	movs	r2, #36	@ 0x24
 8006862:	89a3      	ldrh	r3, [r4, #12]
 8006864:	4393      	bics	r3, r2
 8006866:	81a3      	strh	r3, [r4, #12]
 8006868:	2300      	movs	r3, #0
 800686a:	6063      	str	r3, [r4, #4]
 800686c:	6923      	ldr	r3, [r4, #16]
 800686e:	6023      	str	r3, [r4, #0]
 8006870:	2308      	movs	r3, #8
 8006872:	89a2      	ldrh	r2, [r4, #12]
 8006874:	4313      	orrs	r3, r2
 8006876:	81a3      	strh	r3, [r4, #12]
 8006878:	6923      	ldr	r3, [r4, #16]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d10b      	bne.n	8006896 <__swsetup_r+0x86>
 800687e:	21a0      	movs	r1, #160	@ 0xa0
 8006880:	2280      	movs	r2, #128	@ 0x80
 8006882:	89a3      	ldrh	r3, [r4, #12]
 8006884:	0089      	lsls	r1, r1, #2
 8006886:	0092      	lsls	r2, r2, #2
 8006888:	400b      	ands	r3, r1
 800688a:	4293      	cmp	r3, r2
 800688c:	d003      	beq.n	8006896 <__swsetup_r+0x86>
 800688e:	0021      	movs	r1, r4
 8006890:	0028      	movs	r0, r5
 8006892:	f000 fe97 	bl	80075c4 <__smakebuf_r>
 8006896:	230c      	movs	r3, #12
 8006898:	5ee2      	ldrsh	r2, [r4, r3]
 800689a:	2101      	movs	r1, #1
 800689c:	0013      	movs	r3, r2
 800689e:	400b      	ands	r3, r1
 80068a0:	420a      	tst	r2, r1
 80068a2:	d00b      	beq.n	80068bc <__swsetup_r+0xac>
 80068a4:	2300      	movs	r3, #0
 80068a6:	60a3      	str	r3, [r4, #8]
 80068a8:	6963      	ldr	r3, [r4, #20]
 80068aa:	425b      	negs	r3, r3
 80068ac:	61a3      	str	r3, [r4, #24]
 80068ae:	2000      	movs	r0, #0
 80068b0:	6923      	ldr	r3, [r4, #16]
 80068b2:	4283      	cmp	r3, r0
 80068b4:	d101      	bne.n	80068ba <__swsetup_r+0xaa>
 80068b6:	0613      	lsls	r3, r2, #24
 80068b8:	d4be      	bmi.n	8006838 <__swsetup_r+0x28>
 80068ba:	bd70      	pop	{r4, r5, r6, pc}
 80068bc:	0791      	lsls	r1, r2, #30
 80068be:	d400      	bmi.n	80068c2 <__swsetup_r+0xb2>
 80068c0:	6963      	ldr	r3, [r4, #20]
 80068c2:	60a3      	str	r3, [r4, #8]
 80068c4:	e7f3      	b.n	80068ae <__swsetup_r+0x9e>
 80068c6:	46c0      	nop			@ (mov r8, r8)
 80068c8:	20000028 	.word	0x20000028

080068cc <memset>:
 80068cc:	0003      	movs	r3, r0
 80068ce:	1882      	adds	r2, r0, r2
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d100      	bne.n	80068d6 <memset+0xa>
 80068d4:	4770      	bx	lr
 80068d6:	7019      	strb	r1, [r3, #0]
 80068d8:	3301      	adds	r3, #1
 80068da:	e7f9      	b.n	80068d0 <memset+0x4>

080068dc <_close_r>:
 80068dc:	2300      	movs	r3, #0
 80068de:	b570      	push	{r4, r5, r6, lr}
 80068e0:	4d06      	ldr	r5, [pc, #24]	@ (80068fc <_close_r+0x20>)
 80068e2:	0004      	movs	r4, r0
 80068e4:	0008      	movs	r0, r1
 80068e6:	602b      	str	r3, [r5, #0]
 80068e8:	f7fb fb41 	bl	8001f6e <_close>
 80068ec:	1c43      	adds	r3, r0, #1
 80068ee:	d103      	bne.n	80068f8 <_close_r+0x1c>
 80068f0:	682b      	ldr	r3, [r5, #0]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d000      	beq.n	80068f8 <_close_r+0x1c>
 80068f6:	6023      	str	r3, [r4, #0]
 80068f8:	bd70      	pop	{r4, r5, r6, pc}
 80068fa:	46c0      	nop			@ (mov r8, r8)
 80068fc:	200005cc 	.word	0x200005cc

08006900 <_lseek_r>:
 8006900:	b570      	push	{r4, r5, r6, lr}
 8006902:	0004      	movs	r4, r0
 8006904:	0008      	movs	r0, r1
 8006906:	0011      	movs	r1, r2
 8006908:	001a      	movs	r2, r3
 800690a:	2300      	movs	r3, #0
 800690c:	4d05      	ldr	r5, [pc, #20]	@ (8006924 <_lseek_r+0x24>)
 800690e:	602b      	str	r3, [r5, #0]
 8006910:	f7fb fb4e 	bl	8001fb0 <_lseek>
 8006914:	1c43      	adds	r3, r0, #1
 8006916:	d103      	bne.n	8006920 <_lseek_r+0x20>
 8006918:	682b      	ldr	r3, [r5, #0]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d000      	beq.n	8006920 <_lseek_r+0x20>
 800691e:	6023      	str	r3, [r4, #0]
 8006920:	bd70      	pop	{r4, r5, r6, pc}
 8006922:	46c0      	nop			@ (mov r8, r8)
 8006924:	200005cc 	.word	0x200005cc

08006928 <_read_r>:
 8006928:	b570      	push	{r4, r5, r6, lr}
 800692a:	0004      	movs	r4, r0
 800692c:	0008      	movs	r0, r1
 800692e:	0011      	movs	r1, r2
 8006930:	001a      	movs	r2, r3
 8006932:	2300      	movs	r3, #0
 8006934:	4d05      	ldr	r5, [pc, #20]	@ (800694c <_read_r+0x24>)
 8006936:	602b      	str	r3, [r5, #0]
 8006938:	f7fb fafc 	bl	8001f34 <_read>
 800693c:	1c43      	adds	r3, r0, #1
 800693e:	d103      	bne.n	8006948 <_read_r+0x20>
 8006940:	682b      	ldr	r3, [r5, #0]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d000      	beq.n	8006948 <_read_r+0x20>
 8006946:	6023      	str	r3, [r4, #0]
 8006948:	bd70      	pop	{r4, r5, r6, pc}
 800694a:	46c0      	nop			@ (mov r8, r8)
 800694c:	200005cc 	.word	0x200005cc

08006950 <_write_r>:
 8006950:	b570      	push	{r4, r5, r6, lr}
 8006952:	0004      	movs	r4, r0
 8006954:	0008      	movs	r0, r1
 8006956:	0011      	movs	r1, r2
 8006958:	001a      	movs	r2, r3
 800695a:	2300      	movs	r3, #0
 800695c:	4d05      	ldr	r5, [pc, #20]	@ (8006974 <_write_r+0x24>)
 800695e:	602b      	str	r3, [r5, #0]
 8006960:	f7fa ff62 	bl	8001828 <_write>
 8006964:	1c43      	adds	r3, r0, #1
 8006966:	d103      	bne.n	8006970 <_write_r+0x20>
 8006968:	682b      	ldr	r3, [r5, #0]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d000      	beq.n	8006970 <_write_r+0x20>
 800696e:	6023      	str	r3, [r4, #0]
 8006970:	bd70      	pop	{r4, r5, r6, pc}
 8006972:	46c0      	nop			@ (mov r8, r8)
 8006974:	200005cc 	.word	0x200005cc

08006978 <__errno>:
 8006978:	4b01      	ldr	r3, [pc, #4]	@ (8006980 <__errno+0x8>)
 800697a:	6818      	ldr	r0, [r3, #0]
 800697c:	4770      	bx	lr
 800697e:	46c0      	nop			@ (mov r8, r8)
 8006980:	20000028 	.word	0x20000028

08006984 <__libc_init_array>:
 8006984:	b570      	push	{r4, r5, r6, lr}
 8006986:	2600      	movs	r6, #0
 8006988:	4c0c      	ldr	r4, [pc, #48]	@ (80069bc <__libc_init_array+0x38>)
 800698a:	4d0d      	ldr	r5, [pc, #52]	@ (80069c0 <__libc_init_array+0x3c>)
 800698c:	1b64      	subs	r4, r4, r5
 800698e:	10a4      	asrs	r4, r4, #2
 8006990:	42a6      	cmp	r6, r4
 8006992:	d109      	bne.n	80069a8 <__libc_init_array+0x24>
 8006994:	2600      	movs	r6, #0
 8006996:	f000 ff21 	bl	80077dc <_init>
 800699a:	4c0a      	ldr	r4, [pc, #40]	@ (80069c4 <__libc_init_array+0x40>)
 800699c:	4d0a      	ldr	r5, [pc, #40]	@ (80069c8 <__libc_init_array+0x44>)
 800699e:	1b64      	subs	r4, r4, r5
 80069a0:	10a4      	asrs	r4, r4, #2
 80069a2:	42a6      	cmp	r6, r4
 80069a4:	d105      	bne.n	80069b2 <__libc_init_array+0x2e>
 80069a6:	bd70      	pop	{r4, r5, r6, pc}
 80069a8:	00b3      	lsls	r3, r6, #2
 80069aa:	58eb      	ldr	r3, [r5, r3]
 80069ac:	4798      	blx	r3
 80069ae:	3601      	adds	r6, #1
 80069b0:	e7ee      	b.n	8006990 <__libc_init_array+0xc>
 80069b2:	00b3      	lsls	r3, r6, #2
 80069b4:	58eb      	ldr	r3, [r5, r3]
 80069b6:	4798      	blx	r3
 80069b8:	3601      	adds	r6, #1
 80069ba:	e7f2      	b.n	80069a2 <__libc_init_array+0x1e>
 80069bc:	08007b40 	.word	0x08007b40
 80069c0:	08007b40 	.word	0x08007b40
 80069c4:	08007b44 	.word	0x08007b44
 80069c8:	08007b40 	.word	0x08007b40

080069cc <__retarget_lock_init_recursive>:
 80069cc:	4770      	bx	lr

080069ce <__retarget_lock_acquire_recursive>:
 80069ce:	4770      	bx	lr

080069d0 <__retarget_lock_release_recursive>:
 80069d0:	4770      	bx	lr
	...

080069d4 <_free_r>:
 80069d4:	b570      	push	{r4, r5, r6, lr}
 80069d6:	0005      	movs	r5, r0
 80069d8:	1e0c      	subs	r4, r1, #0
 80069da:	d010      	beq.n	80069fe <_free_r+0x2a>
 80069dc:	3c04      	subs	r4, #4
 80069de:	6823      	ldr	r3, [r4, #0]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	da00      	bge.n	80069e6 <_free_r+0x12>
 80069e4:	18e4      	adds	r4, r4, r3
 80069e6:	0028      	movs	r0, r5
 80069e8:	f000 f8e0 	bl	8006bac <__malloc_lock>
 80069ec:	4a1d      	ldr	r2, [pc, #116]	@ (8006a64 <_free_r+0x90>)
 80069ee:	6813      	ldr	r3, [r2, #0]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d105      	bne.n	8006a00 <_free_r+0x2c>
 80069f4:	6063      	str	r3, [r4, #4]
 80069f6:	6014      	str	r4, [r2, #0]
 80069f8:	0028      	movs	r0, r5
 80069fa:	f000 f8df 	bl	8006bbc <__malloc_unlock>
 80069fe:	bd70      	pop	{r4, r5, r6, pc}
 8006a00:	42a3      	cmp	r3, r4
 8006a02:	d908      	bls.n	8006a16 <_free_r+0x42>
 8006a04:	6820      	ldr	r0, [r4, #0]
 8006a06:	1821      	adds	r1, r4, r0
 8006a08:	428b      	cmp	r3, r1
 8006a0a:	d1f3      	bne.n	80069f4 <_free_r+0x20>
 8006a0c:	6819      	ldr	r1, [r3, #0]
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	1809      	adds	r1, r1, r0
 8006a12:	6021      	str	r1, [r4, #0]
 8006a14:	e7ee      	b.n	80069f4 <_free_r+0x20>
 8006a16:	001a      	movs	r2, r3
 8006a18:	685b      	ldr	r3, [r3, #4]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d001      	beq.n	8006a22 <_free_r+0x4e>
 8006a1e:	42a3      	cmp	r3, r4
 8006a20:	d9f9      	bls.n	8006a16 <_free_r+0x42>
 8006a22:	6811      	ldr	r1, [r2, #0]
 8006a24:	1850      	adds	r0, r2, r1
 8006a26:	42a0      	cmp	r0, r4
 8006a28:	d10b      	bne.n	8006a42 <_free_r+0x6e>
 8006a2a:	6820      	ldr	r0, [r4, #0]
 8006a2c:	1809      	adds	r1, r1, r0
 8006a2e:	1850      	adds	r0, r2, r1
 8006a30:	6011      	str	r1, [r2, #0]
 8006a32:	4283      	cmp	r3, r0
 8006a34:	d1e0      	bne.n	80069f8 <_free_r+0x24>
 8006a36:	6818      	ldr	r0, [r3, #0]
 8006a38:	685b      	ldr	r3, [r3, #4]
 8006a3a:	1841      	adds	r1, r0, r1
 8006a3c:	6011      	str	r1, [r2, #0]
 8006a3e:	6053      	str	r3, [r2, #4]
 8006a40:	e7da      	b.n	80069f8 <_free_r+0x24>
 8006a42:	42a0      	cmp	r0, r4
 8006a44:	d902      	bls.n	8006a4c <_free_r+0x78>
 8006a46:	230c      	movs	r3, #12
 8006a48:	602b      	str	r3, [r5, #0]
 8006a4a:	e7d5      	b.n	80069f8 <_free_r+0x24>
 8006a4c:	6820      	ldr	r0, [r4, #0]
 8006a4e:	1821      	adds	r1, r4, r0
 8006a50:	428b      	cmp	r3, r1
 8006a52:	d103      	bne.n	8006a5c <_free_r+0x88>
 8006a54:	6819      	ldr	r1, [r3, #0]
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	1809      	adds	r1, r1, r0
 8006a5a:	6021      	str	r1, [r4, #0]
 8006a5c:	6063      	str	r3, [r4, #4]
 8006a5e:	6054      	str	r4, [r2, #4]
 8006a60:	e7ca      	b.n	80069f8 <_free_r+0x24>
 8006a62:	46c0      	nop			@ (mov r8, r8)
 8006a64:	200005d8 	.word	0x200005d8

08006a68 <sbrk_aligned>:
 8006a68:	b570      	push	{r4, r5, r6, lr}
 8006a6a:	4e0f      	ldr	r6, [pc, #60]	@ (8006aa8 <sbrk_aligned+0x40>)
 8006a6c:	000d      	movs	r5, r1
 8006a6e:	6831      	ldr	r1, [r6, #0]
 8006a70:	0004      	movs	r4, r0
 8006a72:	2900      	cmp	r1, #0
 8006a74:	d102      	bne.n	8006a7c <sbrk_aligned+0x14>
 8006a76:	f000 fe53 	bl	8007720 <_sbrk_r>
 8006a7a:	6030      	str	r0, [r6, #0]
 8006a7c:	0029      	movs	r1, r5
 8006a7e:	0020      	movs	r0, r4
 8006a80:	f000 fe4e 	bl	8007720 <_sbrk_r>
 8006a84:	1c43      	adds	r3, r0, #1
 8006a86:	d103      	bne.n	8006a90 <sbrk_aligned+0x28>
 8006a88:	2501      	movs	r5, #1
 8006a8a:	426d      	negs	r5, r5
 8006a8c:	0028      	movs	r0, r5
 8006a8e:	bd70      	pop	{r4, r5, r6, pc}
 8006a90:	2303      	movs	r3, #3
 8006a92:	1cc5      	adds	r5, r0, #3
 8006a94:	439d      	bics	r5, r3
 8006a96:	42a8      	cmp	r0, r5
 8006a98:	d0f8      	beq.n	8006a8c <sbrk_aligned+0x24>
 8006a9a:	1a29      	subs	r1, r5, r0
 8006a9c:	0020      	movs	r0, r4
 8006a9e:	f000 fe3f 	bl	8007720 <_sbrk_r>
 8006aa2:	3001      	adds	r0, #1
 8006aa4:	d1f2      	bne.n	8006a8c <sbrk_aligned+0x24>
 8006aa6:	e7ef      	b.n	8006a88 <sbrk_aligned+0x20>
 8006aa8:	200005d4 	.word	0x200005d4

08006aac <_malloc_r>:
 8006aac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006aae:	2203      	movs	r2, #3
 8006ab0:	1ccb      	adds	r3, r1, #3
 8006ab2:	4393      	bics	r3, r2
 8006ab4:	3308      	adds	r3, #8
 8006ab6:	0005      	movs	r5, r0
 8006ab8:	001f      	movs	r7, r3
 8006aba:	2b0c      	cmp	r3, #12
 8006abc:	d234      	bcs.n	8006b28 <_malloc_r+0x7c>
 8006abe:	270c      	movs	r7, #12
 8006ac0:	42b9      	cmp	r1, r7
 8006ac2:	d833      	bhi.n	8006b2c <_malloc_r+0x80>
 8006ac4:	0028      	movs	r0, r5
 8006ac6:	f000 f871 	bl	8006bac <__malloc_lock>
 8006aca:	4e37      	ldr	r6, [pc, #220]	@ (8006ba8 <_malloc_r+0xfc>)
 8006acc:	6833      	ldr	r3, [r6, #0]
 8006ace:	001c      	movs	r4, r3
 8006ad0:	2c00      	cmp	r4, #0
 8006ad2:	d12f      	bne.n	8006b34 <_malloc_r+0x88>
 8006ad4:	0039      	movs	r1, r7
 8006ad6:	0028      	movs	r0, r5
 8006ad8:	f7ff ffc6 	bl	8006a68 <sbrk_aligned>
 8006adc:	0004      	movs	r4, r0
 8006ade:	1c43      	adds	r3, r0, #1
 8006ae0:	d15f      	bne.n	8006ba2 <_malloc_r+0xf6>
 8006ae2:	6834      	ldr	r4, [r6, #0]
 8006ae4:	9400      	str	r4, [sp, #0]
 8006ae6:	9b00      	ldr	r3, [sp, #0]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d14a      	bne.n	8006b82 <_malloc_r+0xd6>
 8006aec:	2c00      	cmp	r4, #0
 8006aee:	d052      	beq.n	8006b96 <_malloc_r+0xea>
 8006af0:	6823      	ldr	r3, [r4, #0]
 8006af2:	0028      	movs	r0, r5
 8006af4:	18e3      	adds	r3, r4, r3
 8006af6:	9900      	ldr	r1, [sp, #0]
 8006af8:	9301      	str	r3, [sp, #4]
 8006afa:	f000 fe11 	bl	8007720 <_sbrk_r>
 8006afe:	9b01      	ldr	r3, [sp, #4]
 8006b00:	4283      	cmp	r3, r0
 8006b02:	d148      	bne.n	8006b96 <_malloc_r+0xea>
 8006b04:	6823      	ldr	r3, [r4, #0]
 8006b06:	0028      	movs	r0, r5
 8006b08:	1aff      	subs	r7, r7, r3
 8006b0a:	0039      	movs	r1, r7
 8006b0c:	f7ff ffac 	bl	8006a68 <sbrk_aligned>
 8006b10:	3001      	adds	r0, #1
 8006b12:	d040      	beq.n	8006b96 <_malloc_r+0xea>
 8006b14:	6823      	ldr	r3, [r4, #0]
 8006b16:	19db      	adds	r3, r3, r7
 8006b18:	6023      	str	r3, [r4, #0]
 8006b1a:	6833      	ldr	r3, [r6, #0]
 8006b1c:	685a      	ldr	r2, [r3, #4]
 8006b1e:	2a00      	cmp	r2, #0
 8006b20:	d133      	bne.n	8006b8a <_malloc_r+0xde>
 8006b22:	9b00      	ldr	r3, [sp, #0]
 8006b24:	6033      	str	r3, [r6, #0]
 8006b26:	e019      	b.n	8006b5c <_malloc_r+0xb0>
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	dac9      	bge.n	8006ac0 <_malloc_r+0x14>
 8006b2c:	230c      	movs	r3, #12
 8006b2e:	602b      	str	r3, [r5, #0]
 8006b30:	2000      	movs	r0, #0
 8006b32:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006b34:	6821      	ldr	r1, [r4, #0]
 8006b36:	1bc9      	subs	r1, r1, r7
 8006b38:	d420      	bmi.n	8006b7c <_malloc_r+0xd0>
 8006b3a:	290b      	cmp	r1, #11
 8006b3c:	d90a      	bls.n	8006b54 <_malloc_r+0xa8>
 8006b3e:	19e2      	adds	r2, r4, r7
 8006b40:	6027      	str	r7, [r4, #0]
 8006b42:	42a3      	cmp	r3, r4
 8006b44:	d104      	bne.n	8006b50 <_malloc_r+0xa4>
 8006b46:	6032      	str	r2, [r6, #0]
 8006b48:	6863      	ldr	r3, [r4, #4]
 8006b4a:	6011      	str	r1, [r2, #0]
 8006b4c:	6053      	str	r3, [r2, #4]
 8006b4e:	e005      	b.n	8006b5c <_malloc_r+0xb0>
 8006b50:	605a      	str	r2, [r3, #4]
 8006b52:	e7f9      	b.n	8006b48 <_malloc_r+0x9c>
 8006b54:	6862      	ldr	r2, [r4, #4]
 8006b56:	42a3      	cmp	r3, r4
 8006b58:	d10e      	bne.n	8006b78 <_malloc_r+0xcc>
 8006b5a:	6032      	str	r2, [r6, #0]
 8006b5c:	0028      	movs	r0, r5
 8006b5e:	f000 f82d 	bl	8006bbc <__malloc_unlock>
 8006b62:	0020      	movs	r0, r4
 8006b64:	2207      	movs	r2, #7
 8006b66:	300b      	adds	r0, #11
 8006b68:	1d23      	adds	r3, r4, #4
 8006b6a:	4390      	bics	r0, r2
 8006b6c:	1ac2      	subs	r2, r0, r3
 8006b6e:	4298      	cmp	r0, r3
 8006b70:	d0df      	beq.n	8006b32 <_malloc_r+0x86>
 8006b72:	1a1b      	subs	r3, r3, r0
 8006b74:	50a3      	str	r3, [r4, r2]
 8006b76:	e7dc      	b.n	8006b32 <_malloc_r+0x86>
 8006b78:	605a      	str	r2, [r3, #4]
 8006b7a:	e7ef      	b.n	8006b5c <_malloc_r+0xb0>
 8006b7c:	0023      	movs	r3, r4
 8006b7e:	6864      	ldr	r4, [r4, #4]
 8006b80:	e7a6      	b.n	8006ad0 <_malloc_r+0x24>
 8006b82:	9c00      	ldr	r4, [sp, #0]
 8006b84:	6863      	ldr	r3, [r4, #4]
 8006b86:	9300      	str	r3, [sp, #0]
 8006b88:	e7ad      	b.n	8006ae6 <_malloc_r+0x3a>
 8006b8a:	001a      	movs	r2, r3
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	42a3      	cmp	r3, r4
 8006b90:	d1fb      	bne.n	8006b8a <_malloc_r+0xde>
 8006b92:	2300      	movs	r3, #0
 8006b94:	e7da      	b.n	8006b4c <_malloc_r+0xa0>
 8006b96:	230c      	movs	r3, #12
 8006b98:	0028      	movs	r0, r5
 8006b9a:	602b      	str	r3, [r5, #0]
 8006b9c:	f000 f80e 	bl	8006bbc <__malloc_unlock>
 8006ba0:	e7c6      	b.n	8006b30 <_malloc_r+0x84>
 8006ba2:	6007      	str	r7, [r0, #0]
 8006ba4:	e7da      	b.n	8006b5c <_malloc_r+0xb0>
 8006ba6:	46c0      	nop			@ (mov r8, r8)
 8006ba8:	200005d8 	.word	0x200005d8

08006bac <__malloc_lock>:
 8006bac:	b510      	push	{r4, lr}
 8006bae:	4802      	ldr	r0, [pc, #8]	@ (8006bb8 <__malloc_lock+0xc>)
 8006bb0:	f7ff ff0d 	bl	80069ce <__retarget_lock_acquire_recursive>
 8006bb4:	bd10      	pop	{r4, pc}
 8006bb6:	46c0      	nop			@ (mov r8, r8)
 8006bb8:	200005d0 	.word	0x200005d0

08006bbc <__malloc_unlock>:
 8006bbc:	b510      	push	{r4, lr}
 8006bbe:	4802      	ldr	r0, [pc, #8]	@ (8006bc8 <__malloc_unlock+0xc>)
 8006bc0:	f7ff ff06 	bl	80069d0 <__retarget_lock_release_recursive>
 8006bc4:	bd10      	pop	{r4, pc}
 8006bc6:	46c0      	nop			@ (mov r8, r8)
 8006bc8:	200005d0 	.word	0x200005d0

08006bcc <__ssputs_r>:
 8006bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006bce:	688e      	ldr	r6, [r1, #8]
 8006bd0:	b085      	sub	sp, #20
 8006bd2:	001f      	movs	r7, r3
 8006bd4:	000c      	movs	r4, r1
 8006bd6:	680b      	ldr	r3, [r1, #0]
 8006bd8:	9002      	str	r0, [sp, #8]
 8006bda:	9203      	str	r2, [sp, #12]
 8006bdc:	42be      	cmp	r6, r7
 8006bde:	d830      	bhi.n	8006c42 <__ssputs_r+0x76>
 8006be0:	210c      	movs	r1, #12
 8006be2:	5e62      	ldrsh	r2, [r4, r1]
 8006be4:	2190      	movs	r1, #144	@ 0x90
 8006be6:	00c9      	lsls	r1, r1, #3
 8006be8:	420a      	tst	r2, r1
 8006bea:	d028      	beq.n	8006c3e <__ssputs_r+0x72>
 8006bec:	2003      	movs	r0, #3
 8006bee:	6921      	ldr	r1, [r4, #16]
 8006bf0:	1a5b      	subs	r3, r3, r1
 8006bf2:	9301      	str	r3, [sp, #4]
 8006bf4:	6963      	ldr	r3, [r4, #20]
 8006bf6:	4343      	muls	r3, r0
 8006bf8:	9801      	ldr	r0, [sp, #4]
 8006bfa:	0fdd      	lsrs	r5, r3, #31
 8006bfc:	18ed      	adds	r5, r5, r3
 8006bfe:	1c7b      	adds	r3, r7, #1
 8006c00:	181b      	adds	r3, r3, r0
 8006c02:	106d      	asrs	r5, r5, #1
 8006c04:	42ab      	cmp	r3, r5
 8006c06:	d900      	bls.n	8006c0a <__ssputs_r+0x3e>
 8006c08:	001d      	movs	r5, r3
 8006c0a:	0552      	lsls	r2, r2, #21
 8006c0c:	d528      	bpl.n	8006c60 <__ssputs_r+0x94>
 8006c0e:	0029      	movs	r1, r5
 8006c10:	9802      	ldr	r0, [sp, #8]
 8006c12:	f7ff ff4b 	bl	8006aac <_malloc_r>
 8006c16:	1e06      	subs	r6, r0, #0
 8006c18:	d02c      	beq.n	8006c74 <__ssputs_r+0xa8>
 8006c1a:	9a01      	ldr	r2, [sp, #4]
 8006c1c:	6921      	ldr	r1, [r4, #16]
 8006c1e:	f000 fd9c 	bl	800775a <memcpy>
 8006c22:	89a2      	ldrh	r2, [r4, #12]
 8006c24:	4b18      	ldr	r3, [pc, #96]	@ (8006c88 <__ssputs_r+0xbc>)
 8006c26:	401a      	ands	r2, r3
 8006c28:	2380      	movs	r3, #128	@ 0x80
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	81a3      	strh	r3, [r4, #12]
 8006c2e:	9b01      	ldr	r3, [sp, #4]
 8006c30:	6126      	str	r6, [r4, #16]
 8006c32:	18f6      	adds	r6, r6, r3
 8006c34:	6026      	str	r6, [r4, #0]
 8006c36:	003e      	movs	r6, r7
 8006c38:	6165      	str	r5, [r4, #20]
 8006c3a:	1aed      	subs	r5, r5, r3
 8006c3c:	60a5      	str	r5, [r4, #8]
 8006c3e:	42be      	cmp	r6, r7
 8006c40:	d900      	bls.n	8006c44 <__ssputs_r+0x78>
 8006c42:	003e      	movs	r6, r7
 8006c44:	0032      	movs	r2, r6
 8006c46:	9903      	ldr	r1, [sp, #12]
 8006c48:	6820      	ldr	r0, [r4, #0]
 8006c4a:	f000 fd32 	bl	80076b2 <memmove>
 8006c4e:	2000      	movs	r0, #0
 8006c50:	68a3      	ldr	r3, [r4, #8]
 8006c52:	1b9b      	subs	r3, r3, r6
 8006c54:	60a3      	str	r3, [r4, #8]
 8006c56:	6823      	ldr	r3, [r4, #0]
 8006c58:	199b      	adds	r3, r3, r6
 8006c5a:	6023      	str	r3, [r4, #0]
 8006c5c:	b005      	add	sp, #20
 8006c5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c60:	002a      	movs	r2, r5
 8006c62:	9802      	ldr	r0, [sp, #8]
 8006c64:	f000 fd82 	bl	800776c <_realloc_r>
 8006c68:	1e06      	subs	r6, r0, #0
 8006c6a:	d1e0      	bne.n	8006c2e <__ssputs_r+0x62>
 8006c6c:	6921      	ldr	r1, [r4, #16]
 8006c6e:	9802      	ldr	r0, [sp, #8]
 8006c70:	f7ff feb0 	bl	80069d4 <_free_r>
 8006c74:	230c      	movs	r3, #12
 8006c76:	2001      	movs	r0, #1
 8006c78:	9a02      	ldr	r2, [sp, #8]
 8006c7a:	4240      	negs	r0, r0
 8006c7c:	6013      	str	r3, [r2, #0]
 8006c7e:	89a2      	ldrh	r2, [r4, #12]
 8006c80:	3334      	adds	r3, #52	@ 0x34
 8006c82:	4313      	orrs	r3, r2
 8006c84:	81a3      	strh	r3, [r4, #12]
 8006c86:	e7e9      	b.n	8006c5c <__ssputs_r+0x90>
 8006c88:	fffffb7f 	.word	0xfffffb7f

08006c8c <_svfiprintf_r>:
 8006c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c8e:	b0a1      	sub	sp, #132	@ 0x84
 8006c90:	9003      	str	r0, [sp, #12]
 8006c92:	001d      	movs	r5, r3
 8006c94:	898b      	ldrh	r3, [r1, #12]
 8006c96:	000f      	movs	r7, r1
 8006c98:	0016      	movs	r6, r2
 8006c9a:	061b      	lsls	r3, r3, #24
 8006c9c:	d511      	bpl.n	8006cc2 <_svfiprintf_r+0x36>
 8006c9e:	690b      	ldr	r3, [r1, #16]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d10e      	bne.n	8006cc2 <_svfiprintf_r+0x36>
 8006ca4:	2140      	movs	r1, #64	@ 0x40
 8006ca6:	f7ff ff01 	bl	8006aac <_malloc_r>
 8006caa:	6038      	str	r0, [r7, #0]
 8006cac:	6138      	str	r0, [r7, #16]
 8006cae:	2800      	cmp	r0, #0
 8006cb0:	d105      	bne.n	8006cbe <_svfiprintf_r+0x32>
 8006cb2:	230c      	movs	r3, #12
 8006cb4:	9a03      	ldr	r2, [sp, #12]
 8006cb6:	6013      	str	r3, [r2, #0]
 8006cb8:	2001      	movs	r0, #1
 8006cba:	4240      	negs	r0, r0
 8006cbc:	e0cf      	b.n	8006e5e <_svfiprintf_r+0x1d2>
 8006cbe:	2340      	movs	r3, #64	@ 0x40
 8006cc0:	617b      	str	r3, [r7, #20]
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	ac08      	add	r4, sp, #32
 8006cc6:	6163      	str	r3, [r4, #20]
 8006cc8:	3320      	adds	r3, #32
 8006cca:	7663      	strb	r3, [r4, #25]
 8006ccc:	3310      	adds	r3, #16
 8006cce:	76a3      	strb	r3, [r4, #26]
 8006cd0:	9507      	str	r5, [sp, #28]
 8006cd2:	0035      	movs	r5, r6
 8006cd4:	782b      	ldrb	r3, [r5, #0]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d001      	beq.n	8006cde <_svfiprintf_r+0x52>
 8006cda:	2b25      	cmp	r3, #37	@ 0x25
 8006cdc:	d148      	bne.n	8006d70 <_svfiprintf_r+0xe4>
 8006cde:	1bab      	subs	r3, r5, r6
 8006ce0:	9305      	str	r3, [sp, #20]
 8006ce2:	42b5      	cmp	r5, r6
 8006ce4:	d00b      	beq.n	8006cfe <_svfiprintf_r+0x72>
 8006ce6:	0032      	movs	r2, r6
 8006ce8:	0039      	movs	r1, r7
 8006cea:	9803      	ldr	r0, [sp, #12]
 8006cec:	f7ff ff6e 	bl	8006bcc <__ssputs_r>
 8006cf0:	3001      	adds	r0, #1
 8006cf2:	d100      	bne.n	8006cf6 <_svfiprintf_r+0x6a>
 8006cf4:	e0ae      	b.n	8006e54 <_svfiprintf_r+0x1c8>
 8006cf6:	6963      	ldr	r3, [r4, #20]
 8006cf8:	9a05      	ldr	r2, [sp, #20]
 8006cfa:	189b      	adds	r3, r3, r2
 8006cfc:	6163      	str	r3, [r4, #20]
 8006cfe:	782b      	ldrb	r3, [r5, #0]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d100      	bne.n	8006d06 <_svfiprintf_r+0x7a>
 8006d04:	e0a6      	b.n	8006e54 <_svfiprintf_r+0x1c8>
 8006d06:	2201      	movs	r2, #1
 8006d08:	2300      	movs	r3, #0
 8006d0a:	4252      	negs	r2, r2
 8006d0c:	6062      	str	r2, [r4, #4]
 8006d0e:	a904      	add	r1, sp, #16
 8006d10:	3254      	adds	r2, #84	@ 0x54
 8006d12:	1852      	adds	r2, r2, r1
 8006d14:	1c6e      	adds	r6, r5, #1
 8006d16:	6023      	str	r3, [r4, #0]
 8006d18:	60e3      	str	r3, [r4, #12]
 8006d1a:	60a3      	str	r3, [r4, #8]
 8006d1c:	7013      	strb	r3, [r2, #0]
 8006d1e:	65a3      	str	r3, [r4, #88]	@ 0x58
 8006d20:	4b54      	ldr	r3, [pc, #336]	@ (8006e74 <_svfiprintf_r+0x1e8>)
 8006d22:	2205      	movs	r2, #5
 8006d24:	0018      	movs	r0, r3
 8006d26:	7831      	ldrb	r1, [r6, #0]
 8006d28:	9305      	str	r3, [sp, #20]
 8006d2a:	f000 fd0b 	bl	8007744 <memchr>
 8006d2e:	1c75      	adds	r5, r6, #1
 8006d30:	2800      	cmp	r0, #0
 8006d32:	d11f      	bne.n	8006d74 <_svfiprintf_r+0xe8>
 8006d34:	6822      	ldr	r2, [r4, #0]
 8006d36:	06d3      	lsls	r3, r2, #27
 8006d38:	d504      	bpl.n	8006d44 <_svfiprintf_r+0xb8>
 8006d3a:	2353      	movs	r3, #83	@ 0x53
 8006d3c:	a904      	add	r1, sp, #16
 8006d3e:	185b      	adds	r3, r3, r1
 8006d40:	2120      	movs	r1, #32
 8006d42:	7019      	strb	r1, [r3, #0]
 8006d44:	0713      	lsls	r3, r2, #28
 8006d46:	d504      	bpl.n	8006d52 <_svfiprintf_r+0xc6>
 8006d48:	2353      	movs	r3, #83	@ 0x53
 8006d4a:	a904      	add	r1, sp, #16
 8006d4c:	185b      	adds	r3, r3, r1
 8006d4e:	212b      	movs	r1, #43	@ 0x2b
 8006d50:	7019      	strb	r1, [r3, #0]
 8006d52:	7833      	ldrb	r3, [r6, #0]
 8006d54:	2b2a      	cmp	r3, #42	@ 0x2a
 8006d56:	d016      	beq.n	8006d86 <_svfiprintf_r+0xfa>
 8006d58:	0035      	movs	r5, r6
 8006d5a:	2100      	movs	r1, #0
 8006d5c:	200a      	movs	r0, #10
 8006d5e:	68e3      	ldr	r3, [r4, #12]
 8006d60:	782a      	ldrb	r2, [r5, #0]
 8006d62:	1c6e      	adds	r6, r5, #1
 8006d64:	3a30      	subs	r2, #48	@ 0x30
 8006d66:	2a09      	cmp	r2, #9
 8006d68:	d950      	bls.n	8006e0c <_svfiprintf_r+0x180>
 8006d6a:	2900      	cmp	r1, #0
 8006d6c:	d111      	bne.n	8006d92 <_svfiprintf_r+0x106>
 8006d6e:	e017      	b.n	8006da0 <_svfiprintf_r+0x114>
 8006d70:	3501      	adds	r5, #1
 8006d72:	e7af      	b.n	8006cd4 <_svfiprintf_r+0x48>
 8006d74:	9b05      	ldr	r3, [sp, #20]
 8006d76:	6822      	ldr	r2, [r4, #0]
 8006d78:	1ac0      	subs	r0, r0, r3
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	4083      	lsls	r3, r0
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	002e      	movs	r6, r5
 8006d82:	6023      	str	r3, [r4, #0]
 8006d84:	e7cc      	b.n	8006d20 <_svfiprintf_r+0x94>
 8006d86:	9b07      	ldr	r3, [sp, #28]
 8006d88:	1d19      	adds	r1, r3, #4
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	9107      	str	r1, [sp, #28]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	db01      	blt.n	8006d96 <_svfiprintf_r+0x10a>
 8006d92:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006d94:	e004      	b.n	8006da0 <_svfiprintf_r+0x114>
 8006d96:	425b      	negs	r3, r3
 8006d98:	60e3      	str	r3, [r4, #12]
 8006d9a:	2302      	movs	r3, #2
 8006d9c:	4313      	orrs	r3, r2
 8006d9e:	6023      	str	r3, [r4, #0]
 8006da0:	782b      	ldrb	r3, [r5, #0]
 8006da2:	2b2e      	cmp	r3, #46	@ 0x2e
 8006da4:	d10c      	bne.n	8006dc0 <_svfiprintf_r+0x134>
 8006da6:	786b      	ldrb	r3, [r5, #1]
 8006da8:	2b2a      	cmp	r3, #42	@ 0x2a
 8006daa:	d134      	bne.n	8006e16 <_svfiprintf_r+0x18a>
 8006dac:	9b07      	ldr	r3, [sp, #28]
 8006dae:	3502      	adds	r5, #2
 8006db0:	1d1a      	adds	r2, r3, #4
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	9207      	str	r2, [sp, #28]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	da01      	bge.n	8006dbe <_svfiprintf_r+0x132>
 8006dba:	2301      	movs	r3, #1
 8006dbc:	425b      	negs	r3, r3
 8006dbe:	9309      	str	r3, [sp, #36]	@ 0x24
 8006dc0:	4e2d      	ldr	r6, [pc, #180]	@ (8006e78 <_svfiprintf_r+0x1ec>)
 8006dc2:	2203      	movs	r2, #3
 8006dc4:	0030      	movs	r0, r6
 8006dc6:	7829      	ldrb	r1, [r5, #0]
 8006dc8:	f000 fcbc 	bl	8007744 <memchr>
 8006dcc:	2800      	cmp	r0, #0
 8006dce:	d006      	beq.n	8006dde <_svfiprintf_r+0x152>
 8006dd0:	2340      	movs	r3, #64	@ 0x40
 8006dd2:	1b80      	subs	r0, r0, r6
 8006dd4:	4083      	lsls	r3, r0
 8006dd6:	6822      	ldr	r2, [r4, #0]
 8006dd8:	3501      	adds	r5, #1
 8006dda:	4313      	orrs	r3, r2
 8006ddc:	6023      	str	r3, [r4, #0]
 8006dde:	7829      	ldrb	r1, [r5, #0]
 8006de0:	2206      	movs	r2, #6
 8006de2:	4826      	ldr	r0, [pc, #152]	@ (8006e7c <_svfiprintf_r+0x1f0>)
 8006de4:	1c6e      	adds	r6, r5, #1
 8006de6:	7621      	strb	r1, [r4, #24]
 8006de8:	f000 fcac 	bl	8007744 <memchr>
 8006dec:	2800      	cmp	r0, #0
 8006dee:	d038      	beq.n	8006e62 <_svfiprintf_r+0x1d6>
 8006df0:	4b23      	ldr	r3, [pc, #140]	@ (8006e80 <_svfiprintf_r+0x1f4>)
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d122      	bne.n	8006e3c <_svfiprintf_r+0x1b0>
 8006df6:	2207      	movs	r2, #7
 8006df8:	9b07      	ldr	r3, [sp, #28]
 8006dfa:	3307      	adds	r3, #7
 8006dfc:	4393      	bics	r3, r2
 8006dfe:	3308      	adds	r3, #8
 8006e00:	9307      	str	r3, [sp, #28]
 8006e02:	6963      	ldr	r3, [r4, #20]
 8006e04:	9a04      	ldr	r2, [sp, #16]
 8006e06:	189b      	adds	r3, r3, r2
 8006e08:	6163      	str	r3, [r4, #20]
 8006e0a:	e762      	b.n	8006cd2 <_svfiprintf_r+0x46>
 8006e0c:	4343      	muls	r3, r0
 8006e0e:	0035      	movs	r5, r6
 8006e10:	2101      	movs	r1, #1
 8006e12:	189b      	adds	r3, r3, r2
 8006e14:	e7a4      	b.n	8006d60 <_svfiprintf_r+0xd4>
 8006e16:	2300      	movs	r3, #0
 8006e18:	200a      	movs	r0, #10
 8006e1a:	0019      	movs	r1, r3
 8006e1c:	3501      	adds	r5, #1
 8006e1e:	6063      	str	r3, [r4, #4]
 8006e20:	782a      	ldrb	r2, [r5, #0]
 8006e22:	1c6e      	adds	r6, r5, #1
 8006e24:	3a30      	subs	r2, #48	@ 0x30
 8006e26:	2a09      	cmp	r2, #9
 8006e28:	d903      	bls.n	8006e32 <_svfiprintf_r+0x1a6>
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d0c8      	beq.n	8006dc0 <_svfiprintf_r+0x134>
 8006e2e:	9109      	str	r1, [sp, #36]	@ 0x24
 8006e30:	e7c6      	b.n	8006dc0 <_svfiprintf_r+0x134>
 8006e32:	4341      	muls	r1, r0
 8006e34:	0035      	movs	r5, r6
 8006e36:	2301      	movs	r3, #1
 8006e38:	1889      	adds	r1, r1, r2
 8006e3a:	e7f1      	b.n	8006e20 <_svfiprintf_r+0x194>
 8006e3c:	aa07      	add	r2, sp, #28
 8006e3e:	9200      	str	r2, [sp, #0]
 8006e40:	0021      	movs	r1, r4
 8006e42:	003a      	movs	r2, r7
 8006e44:	4b0f      	ldr	r3, [pc, #60]	@ (8006e84 <_svfiprintf_r+0x1f8>)
 8006e46:	9803      	ldr	r0, [sp, #12]
 8006e48:	e000      	b.n	8006e4c <_svfiprintf_r+0x1c0>
 8006e4a:	bf00      	nop
 8006e4c:	9004      	str	r0, [sp, #16]
 8006e4e:	9b04      	ldr	r3, [sp, #16]
 8006e50:	3301      	adds	r3, #1
 8006e52:	d1d6      	bne.n	8006e02 <_svfiprintf_r+0x176>
 8006e54:	89bb      	ldrh	r3, [r7, #12]
 8006e56:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8006e58:	065b      	lsls	r3, r3, #25
 8006e5a:	d500      	bpl.n	8006e5e <_svfiprintf_r+0x1d2>
 8006e5c:	e72c      	b.n	8006cb8 <_svfiprintf_r+0x2c>
 8006e5e:	b021      	add	sp, #132	@ 0x84
 8006e60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e62:	aa07      	add	r2, sp, #28
 8006e64:	9200      	str	r2, [sp, #0]
 8006e66:	0021      	movs	r1, r4
 8006e68:	003a      	movs	r2, r7
 8006e6a:	4b06      	ldr	r3, [pc, #24]	@ (8006e84 <_svfiprintf_r+0x1f8>)
 8006e6c:	9803      	ldr	r0, [sp, #12]
 8006e6e:	f000 f9bf 	bl	80071f0 <_printf_i>
 8006e72:	e7eb      	b.n	8006e4c <_svfiprintf_r+0x1c0>
 8006e74:	08007b04 	.word	0x08007b04
 8006e78:	08007b0a 	.word	0x08007b0a
 8006e7c:	08007b0e 	.word	0x08007b0e
 8006e80:	00000000 	.word	0x00000000
 8006e84:	08006bcd 	.word	0x08006bcd

08006e88 <__sfputc_r>:
 8006e88:	6893      	ldr	r3, [r2, #8]
 8006e8a:	b510      	push	{r4, lr}
 8006e8c:	3b01      	subs	r3, #1
 8006e8e:	6093      	str	r3, [r2, #8]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	da04      	bge.n	8006e9e <__sfputc_r+0x16>
 8006e94:	6994      	ldr	r4, [r2, #24]
 8006e96:	42a3      	cmp	r3, r4
 8006e98:	db07      	blt.n	8006eaa <__sfputc_r+0x22>
 8006e9a:	290a      	cmp	r1, #10
 8006e9c:	d005      	beq.n	8006eaa <__sfputc_r+0x22>
 8006e9e:	6813      	ldr	r3, [r2, #0]
 8006ea0:	1c58      	adds	r0, r3, #1
 8006ea2:	6010      	str	r0, [r2, #0]
 8006ea4:	7019      	strb	r1, [r3, #0]
 8006ea6:	0008      	movs	r0, r1
 8006ea8:	bd10      	pop	{r4, pc}
 8006eaa:	f7ff fc6f 	bl	800678c <__swbuf_r>
 8006eae:	0001      	movs	r1, r0
 8006eb0:	e7f9      	b.n	8006ea6 <__sfputc_r+0x1e>

08006eb2 <__sfputs_r>:
 8006eb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eb4:	0006      	movs	r6, r0
 8006eb6:	000f      	movs	r7, r1
 8006eb8:	0014      	movs	r4, r2
 8006eba:	18d5      	adds	r5, r2, r3
 8006ebc:	42ac      	cmp	r4, r5
 8006ebe:	d101      	bne.n	8006ec4 <__sfputs_r+0x12>
 8006ec0:	2000      	movs	r0, #0
 8006ec2:	e007      	b.n	8006ed4 <__sfputs_r+0x22>
 8006ec4:	7821      	ldrb	r1, [r4, #0]
 8006ec6:	003a      	movs	r2, r7
 8006ec8:	0030      	movs	r0, r6
 8006eca:	f7ff ffdd 	bl	8006e88 <__sfputc_r>
 8006ece:	3401      	adds	r4, #1
 8006ed0:	1c43      	adds	r3, r0, #1
 8006ed2:	d1f3      	bne.n	8006ebc <__sfputs_r+0xa>
 8006ed4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006ed8 <_vfiprintf_r>:
 8006ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006eda:	b0a1      	sub	sp, #132	@ 0x84
 8006edc:	000f      	movs	r7, r1
 8006ede:	0015      	movs	r5, r2
 8006ee0:	001e      	movs	r6, r3
 8006ee2:	9003      	str	r0, [sp, #12]
 8006ee4:	2800      	cmp	r0, #0
 8006ee6:	d004      	beq.n	8006ef2 <_vfiprintf_r+0x1a>
 8006ee8:	6a03      	ldr	r3, [r0, #32]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d101      	bne.n	8006ef2 <_vfiprintf_r+0x1a>
 8006eee:	f7ff fb1f 	bl	8006530 <__sinit>
 8006ef2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006ef4:	07db      	lsls	r3, r3, #31
 8006ef6:	d405      	bmi.n	8006f04 <_vfiprintf_r+0x2c>
 8006ef8:	89bb      	ldrh	r3, [r7, #12]
 8006efa:	059b      	lsls	r3, r3, #22
 8006efc:	d402      	bmi.n	8006f04 <_vfiprintf_r+0x2c>
 8006efe:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8006f00:	f7ff fd65 	bl	80069ce <__retarget_lock_acquire_recursive>
 8006f04:	89bb      	ldrh	r3, [r7, #12]
 8006f06:	071b      	lsls	r3, r3, #28
 8006f08:	d502      	bpl.n	8006f10 <_vfiprintf_r+0x38>
 8006f0a:	693b      	ldr	r3, [r7, #16]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d113      	bne.n	8006f38 <_vfiprintf_r+0x60>
 8006f10:	0039      	movs	r1, r7
 8006f12:	9803      	ldr	r0, [sp, #12]
 8006f14:	f7ff fc7c 	bl	8006810 <__swsetup_r>
 8006f18:	2800      	cmp	r0, #0
 8006f1a:	d00d      	beq.n	8006f38 <_vfiprintf_r+0x60>
 8006f1c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006f1e:	07db      	lsls	r3, r3, #31
 8006f20:	d503      	bpl.n	8006f2a <_vfiprintf_r+0x52>
 8006f22:	2001      	movs	r0, #1
 8006f24:	4240      	negs	r0, r0
 8006f26:	b021      	add	sp, #132	@ 0x84
 8006f28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f2a:	89bb      	ldrh	r3, [r7, #12]
 8006f2c:	059b      	lsls	r3, r3, #22
 8006f2e:	d4f8      	bmi.n	8006f22 <_vfiprintf_r+0x4a>
 8006f30:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8006f32:	f7ff fd4d 	bl	80069d0 <__retarget_lock_release_recursive>
 8006f36:	e7f4      	b.n	8006f22 <_vfiprintf_r+0x4a>
 8006f38:	2300      	movs	r3, #0
 8006f3a:	ac08      	add	r4, sp, #32
 8006f3c:	6163      	str	r3, [r4, #20]
 8006f3e:	3320      	adds	r3, #32
 8006f40:	7663      	strb	r3, [r4, #25]
 8006f42:	3310      	adds	r3, #16
 8006f44:	76a3      	strb	r3, [r4, #26]
 8006f46:	9607      	str	r6, [sp, #28]
 8006f48:	002e      	movs	r6, r5
 8006f4a:	7833      	ldrb	r3, [r6, #0]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d001      	beq.n	8006f54 <_vfiprintf_r+0x7c>
 8006f50:	2b25      	cmp	r3, #37	@ 0x25
 8006f52:	d148      	bne.n	8006fe6 <_vfiprintf_r+0x10e>
 8006f54:	1b73      	subs	r3, r6, r5
 8006f56:	9305      	str	r3, [sp, #20]
 8006f58:	42ae      	cmp	r6, r5
 8006f5a:	d00b      	beq.n	8006f74 <_vfiprintf_r+0x9c>
 8006f5c:	002a      	movs	r2, r5
 8006f5e:	0039      	movs	r1, r7
 8006f60:	9803      	ldr	r0, [sp, #12]
 8006f62:	f7ff ffa6 	bl	8006eb2 <__sfputs_r>
 8006f66:	3001      	adds	r0, #1
 8006f68:	d100      	bne.n	8006f6c <_vfiprintf_r+0x94>
 8006f6a:	e0ae      	b.n	80070ca <_vfiprintf_r+0x1f2>
 8006f6c:	6963      	ldr	r3, [r4, #20]
 8006f6e:	9a05      	ldr	r2, [sp, #20]
 8006f70:	189b      	adds	r3, r3, r2
 8006f72:	6163      	str	r3, [r4, #20]
 8006f74:	7833      	ldrb	r3, [r6, #0]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d100      	bne.n	8006f7c <_vfiprintf_r+0xa4>
 8006f7a:	e0a6      	b.n	80070ca <_vfiprintf_r+0x1f2>
 8006f7c:	2201      	movs	r2, #1
 8006f7e:	2300      	movs	r3, #0
 8006f80:	4252      	negs	r2, r2
 8006f82:	6062      	str	r2, [r4, #4]
 8006f84:	a904      	add	r1, sp, #16
 8006f86:	3254      	adds	r2, #84	@ 0x54
 8006f88:	1852      	adds	r2, r2, r1
 8006f8a:	1c75      	adds	r5, r6, #1
 8006f8c:	6023      	str	r3, [r4, #0]
 8006f8e:	60e3      	str	r3, [r4, #12]
 8006f90:	60a3      	str	r3, [r4, #8]
 8006f92:	7013      	strb	r3, [r2, #0]
 8006f94:	65a3      	str	r3, [r4, #88]	@ 0x58
 8006f96:	4b59      	ldr	r3, [pc, #356]	@ (80070fc <_vfiprintf_r+0x224>)
 8006f98:	2205      	movs	r2, #5
 8006f9a:	0018      	movs	r0, r3
 8006f9c:	7829      	ldrb	r1, [r5, #0]
 8006f9e:	9305      	str	r3, [sp, #20]
 8006fa0:	f000 fbd0 	bl	8007744 <memchr>
 8006fa4:	1c6e      	adds	r6, r5, #1
 8006fa6:	2800      	cmp	r0, #0
 8006fa8:	d11f      	bne.n	8006fea <_vfiprintf_r+0x112>
 8006faa:	6822      	ldr	r2, [r4, #0]
 8006fac:	06d3      	lsls	r3, r2, #27
 8006fae:	d504      	bpl.n	8006fba <_vfiprintf_r+0xe2>
 8006fb0:	2353      	movs	r3, #83	@ 0x53
 8006fb2:	a904      	add	r1, sp, #16
 8006fb4:	185b      	adds	r3, r3, r1
 8006fb6:	2120      	movs	r1, #32
 8006fb8:	7019      	strb	r1, [r3, #0]
 8006fba:	0713      	lsls	r3, r2, #28
 8006fbc:	d504      	bpl.n	8006fc8 <_vfiprintf_r+0xf0>
 8006fbe:	2353      	movs	r3, #83	@ 0x53
 8006fc0:	a904      	add	r1, sp, #16
 8006fc2:	185b      	adds	r3, r3, r1
 8006fc4:	212b      	movs	r1, #43	@ 0x2b
 8006fc6:	7019      	strb	r1, [r3, #0]
 8006fc8:	782b      	ldrb	r3, [r5, #0]
 8006fca:	2b2a      	cmp	r3, #42	@ 0x2a
 8006fcc:	d016      	beq.n	8006ffc <_vfiprintf_r+0x124>
 8006fce:	002e      	movs	r6, r5
 8006fd0:	2100      	movs	r1, #0
 8006fd2:	200a      	movs	r0, #10
 8006fd4:	68e3      	ldr	r3, [r4, #12]
 8006fd6:	7832      	ldrb	r2, [r6, #0]
 8006fd8:	1c75      	adds	r5, r6, #1
 8006fda:	3a30      	subs	r2, #48	@ 0x30
 8006fdc:	2a09      	cmp	r2, #9
 8006fde:	d950      	bls.n	8007082 <_vfiprintf_r+0x1aa>
 8006fe0:	2900      	cmp	r1, #0
 8006fe2:	d111      	bne.n	8007008 <_vfiprintf_r+0x130>
 8006fe4:	e017      	b.n	8007016 <_vfiprintf_r+0x13e>
 8006fe6:	3601      	adds	r6, #1
 8006fe8:	e7af      	b.n	8006f4a <_vfiprintf_r+0x72>
 8006fea:	9b05      	ldr	r3, [sp, #20]
 8006fec:	6822      	ldr	r2, [r4, #0]
 8006fee:	1ac0      	subs	r0, r0, r3
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	4083      	lsls	r3, r0
 8006ff4:	4313      	orrs	r3, r2
 8006ff6:	0035      	movs	r5, r6
 8006ff8:	6023      	str	r3, [r4, #0]
 8006ffa:	e7cc      	b.n	8006f96 <_vfiprintf_r+0xbe>
 8006ffc:	9b07      	ldr	r3, [sp, #28]
 8006ffe:	1d19      	adds	r1, r3, #4
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	9107      	str	r1, [sp, #28]
 8007004:	2b00      	cmp	r3, #0
 8007006:	db01      	blt.n	800700c <_vfiprintf_r+0x134>
 8007008:	930b      	str	r3, [sp, #44]	@ 0x2c
 800700a:	e004      	b.n	8007016 <_vfiprintf_r+0x13e>
 800700c:	425b      	negs	r3, r3
 800700e:	60e3      	str	r3, [r4, #12]
 8007010:	2302      	movs	r3, #2
 8007012:	4313      	orrs	r3, r2
 8007014:	6023      	str	r3, [r4, #0]
 8007016:	7833      	ldrb	r3, [r6, #0]
 8007018:	2b2e      	cmp	r3, #46	@ 0x2e
 800701a:	d10c      	bne.n	8007036 <_vfiprintf_r+0x15e>
 800701c:	7873      	ldrb	r3, [r6, #1]
 800701e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007020:	d134      	bne.n	800708c <_vfiprintf_r+0x1b4>
 8007022:	9b07      	ldr	r3, [sp, #28]
 8007024:	3602      	adds	r6, #2
 8007026:	1d1a      	adds	r2, r3, #4
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	9207      	str	r2, [sp, #28]
 800702c:	2b00      	cmp	r3, #0
 800702e:	da01      	bge.n	8007034 <_vfiprintf_r+0x15c>
 8007030:	2301      	movs	r3, #1
 8007032:	425b      	negs	r3, r3
 8007034:	9309      	str	r3, [sp, #36]	@ 0x24
 8007036:	4d32      	ldr	r5, [pc, #200]	@ (8007100 <_vfiprintf_r+0x228>)
 8007038:	2203      	movs	r2, #3
 800703a:	0028      	movs	r0, r5
 800703c:	7831      	ldrb	r1, [r6, #0]
 800703e:	f000 fb81 	bl	8007744 <memchr>
 8007042:	2800      	cmp	r0, #0
 8007044:	d006      	beq.n	8007054 <_vfiprintf_r+0x17c>
 8007046:	2340      	movs	r3, #64	@ 0x40
 8007048:	1b40      	subs	r0, r0, r5
 800704a:	4083      	lsls	r3, r0
 800704c:	6822      	ldr	r2, [r4, #0]
 800704e:	3601      	adds	r6, #1
 8007050:	4313      	orrs	r3, r2
 8007052:	6023      	str	r3, [r4, #0]
 8007054:	7831      	ldrb	r1, [r6, #0]
 8007056:	2206      	movs	r2, #6
 8007058:	482a      	ldr	r0, [pc, #168]	@ (8007104 <_vfiprintf_r+0x22c>)
 800705a:	1c75      	adds	r5, r6, #1
 800705c:	7621      	strb	r1, [r4, #24]
 800705e:	f000 fb71 	bl	8007744 <memchr>
 8007062:	2800      	cmp	r0, #0
 8007064:	d040      	beq.n	80070e8 <_vfiprintf_r+0x210>
 8007066:	4b28      	ldr	r3, [pc, #160]	@ (8007108 <_vfiprintf_r+0x230>)
 8007068:	2b00      	cmp	r3, #0
 800706a:	d122      	bne.n	80070b2 <_vfiprintf_r+0x1da>
 800706c:	2207      	movs	r2, #7
 800706e:	9b07      	ldr	r3, [sp, #28]
 8007070:	3307      	adds	r3, #7
 8007072:	4393      	bics	r3, r2
 8007074:	3308      	adds	r3, #8
 8007076:	9307      	str	r3, [sp, #28]
 8007078:	6963      	ldr	r3, [r4, #20]
 800707a:	9a04      	ldr	r2, [sp, #16]
 800707c:	189b      	adds	r3, r3, r2
 800707e:	6163      	str	r3, [r4, #20]
 8007080:	e762      	b.n	8006f48 <_vfiprintf_r+0x70>
 8007082:	4343      	muls	r3, r0
 8007084:	002e      	movs	r6, r5
 8007086:	2101      	movs	r1, #1
 8007088:	189b      	adds	r3, r3, r2
 800708a:	e7a4      	b.n	8006fd6 <_vfiprintf_r+0xfe>
 800708c:	2300      	movs	r3, #0
 800708e:	200a      	movs	r0, #10
 8007090:	0019      	movs	r1, r3
 8007092:	3601      	adds	r6, #1
 8007094:	6063      	str	r3, [r4, #4]
 8007096:	7832      	ldrb	r2, [r6, #0]
 8007098:	1c75      	adds	r5, r6, #1
 800709a:	3a30      	subs	r2, #48	@ 0x30
 800709c:	2a09      	cmp	r2, #9
 800709e:	d903      	bls.n	80070a8 <_vfiprintf_r+0x1d0>
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d0c8      	beq.n	8007036 <_vfiprintf_r+0x15e>
 80070a4:	9109      	str	r1, [sp, #36]	@ 0x24
 80070a6:	e7c6      	b.n	8007036 <_vfiprintf_r+0x15e>
 80070a8:	4341      	muls	r1, r0
 80070aa:	002e      	movs	r6, r5
 80070ac:	2301      	movs	r3, #1
 80070ae:	1889      	adds	r1, r1, r2
 80070b0:	e7f1      	b.n	8007096 <_vfiprintf_r+0x1be>
 80070b2:	aa07      	add	r2, sp, #28
 80070b4:	9200      	str	r2, [sp, #0]
 80070b6:	0021      	movs	r1, r4
 80070b8:	003a      	movs	r2, r7
 80070ba:	4b14      	ldr	r3, [pc, #80]	@ (800710c <_vfiprintf_r+0x234>)
 80070bc:	9803      	ldr	r0, [sp, #12]
 80070be:	e000      	b.n	80070c2 <_vfiprintf_r+0x1ea>
 80070c0:	bf00      	nop
 80070c2:	9004      	str	r0, [sp, #16]
 80070c4:	9b04      	ldr	r3, [sp, #16]
 80070c6:	3301      	adds	r3, #1
 80070c8:	d1d6      	bne.n	8007078 <_vfiprintf_r+0x1a0>
 80070ca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80070cc:	07db      	lsls	r3, r3, #31
 80070ce:	d405      	bmi.n	80070dc <_vfiprintf_r+0x204>
 80070d0:	89bb      	ldrh	r3, [r7, #12]
 80070d2:	059b      	lsls	r3, r3, #22
 80070d4:	d402      	bmi.n	80070dc <_vfiprintf_r+0x204>
 80070d6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80070d8:	f7ff fc7a 	bl	80069d0 <__retarget_lock_release_recursive>
 80070dc:	89bb      	ldrh	r3, [r7, #12]
 80070de:	065b      	lsls	r3, r3, #25
 80070e0:	d500      	bpl.n	80070e4 <_vfiprintf_r+0x20c>
 80070e2:	e71e      	b.n	8006f22 <_vfiprintf_r+0x4a>
 80070e4:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80070e6:	e71e      	b.n	8006f26 <_vfiprintf_r+0x4e>
 80070e8:	aa07      	add	r2, sp, #28
 80070ea:	9200      	str	r2, [sp, #0]
 80070ec:	0021      	movs	r1, r4
 80070ee:	003a      	movs	r2, r7
 80070f0:	4b06      	ldr	r3, [pc, #24]	@ (800710c <_vfiprintf_r+0x234>)
 80070f2:	9803      	ldr	r0, [sp, #12]
 80070f4:	f000 f87c 	bl	80071f0 <_printf_i>
 80070f8:	e7e3      	b.n	80070c2 <_vfiprintf_r+0x1ea>
 80070fa:	46c0      	nop			@ (mov r8, r8)
 80070fc:	08007b04 	.word	0x08007b04
 8007100:	08007b0a 	.word	0x08007b0a
 8007104:	08007b0e 	.word	0x08007b0e
 8007108:	00000000 	.word	0x00000000
 800710c:	08006eb3 	.word	0x08006eb3

08007110 <_printf_common>:
 8007110:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007112:	0016      	movs	r6, r2
 8007114:	9301      	str	r3, [sp, #4]
 8007116:	688a      	ldr	r2, [r1, #8]
 8007118:	690b      	ldr	r3, [r1, #16]
 800711a:	000c      	movs	r4, r1
 800711c:	9000      	str	r0, [sp, #0]
 800711e:	4293      	cmp	r3, r2
 8007120:	da00      	bge.n	8007124 <_printf_common+0x14>
 8007122:	0013      	movs	r3, r2
 8007124:	0022      	movs	r2, r4
 8007126:	6033      	str	r3, [r6, #0]
 8007128:	3243      	adds	r2, #67	@ 0x43
 800712a:	7812      	ldrb	r2, [r2, #0]
 800712c:	2a00      	cmp	r2, #0
 800712e:	d001      	beq.n	8007134 <_printf_common+0x24>
 8007130:	3301      	adds	r3, #1
 8007132:	6033      	str	r3, [r6, #0]
 8007134:	6823      	ldr	r3, [r4, #0]
 8007136:	069b      	lsls	r3, r3, #26
 8007138:	d502      	bpl.n	8007140 <_printf_common+0x30>
 800713a:	6833      	ldr	r3, [r6, #0]
 800713c:	3302      	adds	r3, #2
 800713e:	6033      	str	r3, [r6, #0]
 8007140:	6822      	ldr	r2, [r4, #0]
 8007142:	2306      	movs	r3, #6
 8007144:	0015      	movs	r5, r2
 8007146:	401d      	ands	r5, r3
 8007148:	421a      	tst	r2, r3
 800714a:	d027      	beq.n	800719c <_printf_common+0x8c>
 800714c:	0023      	movs	r3, r4
 800714e:	3343      	adds	r3, #67	@ 0x43
 8007150:	781b      	ldrb	r3, [r3, #0]
 8007152:	1e5a      	subs	r2, r3, #1
 8007154:	4193      	sbcs	r3, r2
 8007156:	6822      	ldr	r2, [r4, #0]
 8007158:	0692      	lsls	r2, r2, #26
 800715a:	d430      	bmi.n	80071be <_printf_common+0xae>
 800715c:	0022      	movs	r2, r4
 800715e:	9901      	ldr	r1, [sp, #4]
 8007160:	9800      	ldr	r0, [sp, #0]
 8007162:	9d08      	ldr	r5, [sp, #32]
 8007164:	3243      	adds	r2, #67	@ 0x43
 8007166:	47a8      	blx	r5
 8007168:	3001      	adds	r0, #1
 800716a:	d025      	beq.n	80071b8 <_printf_common+0xa8>
 800716c:	2206      	movs	r2, #6
 800716e:	6823      	ldr	r3, [r4, #0]
 8007170:	2500      	movs	r5, #0
 8007172:	4013      	ands	r3, r2
 8007174:	2b04      	cmp	r3, #4
 8007176:	d105      	bne.n	8007184 <_printf_common+0x74>
 8007178:	6833      	ldr	r3, [r6, #0]
 800717a:	68e5      	ldr	r5, [r4, #12]
 800717c:	1aed      	subs	r5, r5, r3
 800717e:	43eb      	mvns	r3, r5
 8007180:	17db      	asrs	r3, r3, #31
 8007182:	401d      	ands	r5, r3
 8007184:	68a3      	ldr	r3, [r4, #8]
 8007186:	6922      	ldr	r2, [r4, #16]
 8007188:	4293      	cmp	r3, r2
 800718a:	dd01      	ble.n	8007190 <_printf_common+0x80>
 800718c:	1a9b      	subs	r3, r3, r2
 800718e:	18ed      	adds	r5, r5, r3
 8007190:	2600      	movs	r6, #0
 8007192:	42b5      	cmp	r5, r6
 8007194:	d120      	bne.n	80071d8 <_printf_common+0xc8>
 8007196:	2000      	movs	r0, #0
 8007198:	e010      	b.n	80071bc <_printf_common+0xac>
 800719a:	3501      	adds	r5, #1
 800719c:	68e3      	ldr	r3, [r4, #12]
 800719e:	6832      	ldr	r2, [r6, #0]
 80071a0:	1a9b      	subs	r3, r3, r2
 80071a2:	42ab      	cmp	r3, r5
 80071a4:	ddd2      	ble.n	800714c <_printf_common+0x3c>
 80071a6:	0022      	movs	r2, r4
 80071a8:	2301      	movs	r3, #1
 80071aa:	9901      	ldr	r1, [sp, #4]
 80071ac:	9800      	ldr	r0, [sp, #0]
 80071ae:	9f08      	ldr	r7, [sp, #32]
 80071b0:	3219      	adds	r2, #25
 80071b2:	47b8      	blx	r7
 80071b4:	3001      	adds	r0, #1
 80071b6:	d1f0      	bne.n	800719a <_printf_common+0x8a>
 80071b8:	2001      	movs	r0, #1
 80071ba:	4240      	negs	r0, r0
 80071bc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80071be:	2030      	movs	r0, #48	@ 0x30
 80071c0:	18e1      	adds	r1, r4, r3
 80071c2:	3143      	adds	r1, #67	@ 0x43
 80071c4:	7008      	strb	r0, [r1, #0]
 80071c6:	0021      	movs	r1, r4
 80071c8:	1c5a      	adds	r2, r3, #1
 80071ca:	3145      	adds	r1, #69	@ 0x45
 80071cc:	7809      	ldrb	r1, [r1, #0]
 80071ce:	18a2      	adds	r2, r4, r2
 80071d0:	3243      	adds	r2, #67	@ 0x43
 80071d2:	3302      	adds	r3, #2
 80071d4:	7011      	strb	r1, [r2, #0]
 80071d6:	e7c1      	b.n	800715c <_printf_common+0x4c>
 80071d8:	0022      	movs	r2, r4
 80071da:	2301      	movs	r3, #1
 80071dc:	9901      	ldr	r1, [sp, #4]
 80071de:	9800      	ldr	r0, [sp, #0]
 80071e0:	9f08      	ldr	r7, [sp, #32]
 80071e2:	321a      	adds	r2, #26
 80071e4:	47b8      	blx	r7
 80071e6:	3001      	adds	r0, #1
 80071e8:	d0e6      	beq.n	80071b8 <_printf_common+0xa8>
 80071ea:	3601      	adds	r6, #1
 80071ec:	e7d1      	b.n	8007192 <_printf_common+0x82>
	...

080071f0 <_printf_i>:
 80071f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071f2:	b08b      	sub	sp, #44	@ 0x2c
 80071f4:	9206      	str	r2, [sp, #24]
 80071f6:	000a      	movs	r2, r1
 80071f8:	3243      	adds	r2, #67	@ 0x43
 80071fa:	9307      	str	r3, [sp, #28]
 80071fc:	9005      	str	r0, [sp, #20]
 80071fe:	9203      	str	r2, [sp, #12]
 8007200:	7e0a      	ldrb	r2, [r1, #24]
 8007202:	000c      	movs	r4, r1
 8007204:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007206:	2a78      	cmp	r2, #120	@ 0x78
 8007208:	d809      	bhi.n	800721e <_printf_i+0x2e>
 800720a:	2a62      	cmp	r2, #98	@ 0x62
 800720c:	d80b      	bhi.n	8007226 <_printf_i+0x36>
 800720e:	2a00      	cmp	r2, #0
 8007210:	d100      	bne.n	8007214 <_printf_i+0x24>
 8007212:	e0bc      	b.n	800738e <_printf_i+0x19e>
 8007214:	497b      	ldr	r1, [pc, #492]	@ (8007404 <_printf_i+0x214>)
 8007216:	9104      	str	r1, [sp, #16]
 8007218:	2a58      	cmp	r2, #88	@ 0x58
 800721a:	d100      	bne.n	800721e <_printf_i+0x2e>
 800721c:	e090      	b.n	8007340 <_printf_i+0x150>
 800721e:	0025      	movs	r5, r4
 8007220:	3542      	adds	r5, #66	@ 0x42
 8007222:	702a      	strb	r2, [r5, #0]
 8007224:	e022      	b.n	800726c <_printf_i+0x7c>
 8007226:	0010      	movs	r0, r2
 8007228:	3863      	subs	r0, #99	@ 0x63
 800722a:	2815      	cmp	r0, #21
 800722c:	d8f7      	bhi.n	800721e <_printf_i+0x2e>
 800722e:	f7f8 ff69 	bl	8000104 <__gnu_thumb1_case_shi>
 8007232:	0016      	.short	0x0016
 8007234:	fff6001f 	.word	0xfff6001f
 8007238:	fff6fff6 	.word	0xfff6fff6
 800723c:	001ffff6 	.word	0x001ffff6
 8007240:	fff6fff6 	.word	0xfff6fff6
 8007244:	fff6fff6 	.word	0xfff6fff6
 8007248:	003600a1 	.word	0x003600a1
 800724c:	fff60080 	.word	0xfff60080
 8007250:	00b2fff6 	.word	0x00b2fff6
 8007254:	0036fff6 	.word	0x0036fff6
 8007258:	fff6fff6 	.word	0xfff6fff6
 800725c:	0084      	.short	0x0084
 800725e:	0025      	movs	r5, r4
 8007260:	681a      	ldr	r2, [r3, #0]
 8007262:	3542      	adds	r5, #66	@ 0x42
 8007264:	1d11      	adds	r1, r2, #4
 8007266:	6019      	str	r1, [r3, #0]
 8007268:	6813      	ldr	r3, [r2, #0]
 800726a:	702b      	strb	r3, [r5, #0]
 800726c:	2301      	movs	r3, #1
 800726e:	e0a0      	b.n	80073b2 <_printf_i+0x1c2>
 8007270:	6818      	ldr	r0, [r3, #0]
 8007272:	6809      	ldr	r1, [r1, #0]
 8007274:	1d02      	adds	r2, r0, #4
 8007276:	060d      	lsls	r5, r1, #24
 8007278:	d50b      	bpl.n	8007292 <_printf_i+0xa2>
 800727a:	6806      	ldr	r6, [r0, #0]
 800727c:	601a      	str	r2, [r3, #0]
 800727e:	2e00      	cmp	r6, #0
 8007280:	da03      	bge.n	800728a <_printf_i+0x9a>
 8007282:	232d      	movs	r3, #45	@ 0x2d
 8007284:	9a03      	ldr	r2, [sp, #12]
 8007286:	4276      	negs	r6, r6
 8007288:	7013      	strb	r3, [r2, #0]
 800728a:	4b5e      	ldr	r3, [pc, #376]	@ (8007404 <_printf_i+0x214>)
 800728c:	270a      	movs	r7, #10
 800728e:	9304      	str	r3, [sp, #16]
 8007290:	e018      	b.n	80072c4 <_printf_i+0xd4>
 8007292:	6806      	ldr	r6, [r0, #0]
 8007294:	601a      	str	r2, [r3, #0]
 8007296:	0649      	lsls	r1, r1, #25
 8007298:	d5f1      	bpl.n	800727e <_printf_i+0x8e>
 800729a:	b236      	sxth	r6, r6
 800729c:	e7ef      	b.n	800727e <_printf_i+0x8e>
 800729e:	6808      	ldr	r0, [r1, #0]
 80072a0:	6819      	ldr	r1, [r3, #0]
 80072a2:	c940      	ldmia	r1!, {r6}
 80072a4:	0605      	lsls	r5, r0, #24
 80072a6:	d402      	bmi.n	80072ae <_printf_i+0xbe>
 80072a8:	0640      	lsls	r0, r0, #25
 80072aa:	d500      	bpl.n	80072ae <_printf_i+0xbe>
 80072ac:	b2b6      	uxth	r6, r6
 80072ae:	6019      	str	r1, [r3, #0]
 80072b0:	4b54      	ldr	r3, [pc, #336]	@ (8007404 <_printf_i+0x214>)
 80072b2:	270a      	movs	r7, #10
 80072b4:	9304      	str	r3, [sp, #16]
 80072b6:	2a6f      	cmp	r2, #111	@ 0x6f
 80072b8:	d100      	bne.n	80072bc <_printf_i+0xcc>
 80072ba:	3f02      	subs	r7, #2
 80072bc:	0023      	movs	r3, r4
 80072be:	2200      	movs	r2, #0
 80072c0:	3343      	adds	r3, #67	@ 0x43
 80072c2:	701a      	strb	r2, [r3, #0]
 80072c4:	6863      	ldr	r3, [r4, #4]
 80072c6:	60a3      	str	r3, [r4, #8]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	db03      	blt.n	80072d4 <_printf_i+0xe4>
 80072cc:	2104      	movs	r1, #4
 80072ce:	6822      	ldr	r2, [r4, #0]
 80072d0:	438a      	bics	r2, r1
 80072d2:	6022      	str	r2, [r4, #0]
 80072d4:	2e00      	cmp	r6, #0
 80072d6:	d102      	bne.n	80072de <_printf_i+0xee>
 80072d8:	9d03      	ldr	r5, [sp, #12]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d00c      	beq.n	80072f8 <_printf_i+0x108>
 80072de:	9d03      	ldr	r5, [sp, #12]
 80072e0:	0030      	movs	r0, r6
 80072e2:	0039      	movs	r1, r7
 80072e4:	f7f8 ff9e 	bl	8000224 <__aeabi_uidivmod>
 80072e8:	9b04      	ldr	r3, [sp, #16]
 80072ea:	3d01      	subs	r5, #1
 80072ec:	5c5b      	ldrb	r3, [r3, r1]
 80072ee:	702b      	strb	r3, [r5, #0]
 80072f0:	0033      	movs	r3, r6
 80072f2:	0006      	movs	r6, r0
 80072f4:	429f      	cmp	r7, r3
 80072f6:	d9f3      	bls.n	80072e0 <_printf_i+0xf0>
 80072f8:	2f08      	cmp	r7, #8
 80072fa:	d109      	bne.n	8007310 <_printf_i+0x120>
 80072fc:	6823      	ldr	r3, [r4, #0]
 80072fe:	07db      	lsls	r3, r3, #31
 8007300:	d506      	bpl.n	8007310 <_printf_i+0x120>
 8007302:	6862      	ldr	r2, [r4, #4]
 8007304:	6923      	ldr	r3, [r4, #16]
 8007306:	429a      	cmp	r2, r3
 8007308:	dc02      	bgt.n	8007310 <_printf_i+0x120>
 800730a:	2330      	movs	r3, #48	@ 0x30
 800730c:	3d01      	subs	r5, #1
 800730e:	702b      	strb	r3, [r5, #0]
 8007310:	9b03      	ldr	r3, [sp, #12]
 8007312:	1b5b      	subs	r3, r3, r5
 8007314:	6123      	str	r3, [r4, #16]
 8007316:	9b07      	ldr	r3, [sp, #28]
 8007318:	0021      	movs	r1, r4
 800731a:	9300      	str	r3, [sp, #0]
 800731c:	9805      	ldr	r0, [sp, #20]
 800731e:	9b06      	ldr	r3, [sp, #24]
 8007320:	aa09      	add	r2, sp, #36	@ 0x24
 8007322:	f7ff fef5 	bl	8007110 <_printf_common>
 8007326:	3001      	adds	r0, #1
 8007328:	d148      	bne.n	80073bc <_printf_i+0x1cc>
 800732a:	2001      	movs	r0, #1
 800732c:	4240      	negs	r0, r0
 800732e:	b00b      	add	sp, #44	@ 0x2c
 8007330:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007332:	2220      	movs	r2, #32
 8007334:	6809      	ldr	r1, [r1, #0]
 8007336:	430a      	orrs	r2, r1
 8007338:	6022      	str	r2, [r4, #0]
 800733a:	2278      	movs	r2, #120	@ 0x78
 800733c:	4932      	ldr	r1, [pc, #200]	@ (8007408 <_printf_i+0x218>)
 800733e:	9104      	str	r1, [sp, #16]
 8007340:	0021      	movs	r1, r4
 8007342:	3145      	adds	r1, #69	@ 0x45
 8007344:	700a      	strb	r2, [r1, #0]
 8007346:	6819      	ldr	r1, [r3, #0]
 8007348:	6822      	ldr	r2, [r4, #0]
 800734a:	c940      	ldmia	r1!, {r6}
 800734c:	0610      	lsls	r0, r2, #24
 800734e:	d402      	bmi.n	8007356 <_printf_i+0x166>
 8007350:	0650      	lsls	r0, r2, #25
 8007352:	d500      	bpl.n	8007356 <_printf_i+0x166>
 8007354:	b2b6      	uxth	r6, r6
 8007356:	6019      	str	r1, [r3, #0]
 8007358:	07d3      	lsls	r3, r2, #31
 800735a:	d502      	bpl.n	8007362 <_printf_i+0x172>
 800735c:	2320      	movs	r3, #32
 800735e:	4313      	orrs	r3, r2
 8007360:	6023      	str	r3, [r4, #0]
 8007362:	2e00      	cmp	r6, #0
 8007364:	d001      	beq.n	800736a <_printf_i+0x17a>
 8007366:	2710      	movs	r7, #16
 8007368:	e7a8      	b.n	80072bc <_printf_i+0xcc>
 800736a:	2220      	movs	r2, #32
 800736c:	6823      	ldr	r3, [r4, #0]
 800736e:	4393      	bics	r3, r2
 8007370:	6023      	str	r3, [r4, #0]
 8007372:	e7f8      	b.n	8007366 <_printf_i+0x176>
 8007374:	681a      	ldr	r2, [r3, #0]
 8007376:	680d      	ldr	r5, [r1, #0]
 8007378:	1d10      	adds	r0, r2, #4
 800737a:	6949      	ldr	r1, [r1, #20]
 800737c:	6018      	str	r0, [r3, #0]
 800737e:	6813      	ldr	r3, [r2, #0]
 8007380:	062e      	lsls	r6, r5, #24
 8007382:	d501      	bpl.n	8007388 <_printf_i+0x198>
 8007384:	6019      	str	r1, [r3, #0]
 8007386:	e002      	b.n	800738e <_printf_i+0x19e>
 8007388:	066d      	lsls	r5, r5, #25
 800738a:	d5fb      	bpl.n	8007384 <_printf_i+0x194>
 800738c:	8019      	strh	r1, [r3, #0]
 800738e:	2300      	movs	r3, #0
 8007390:	9d03      	ldr	r5, [sp, #12]
 8007392:	6123      	str	r3, [r4, #16]
 8007394:	e7bf      	b.n	8007316 <_printf_i+0x126>
 8007396:	681a      	ldr	r2, [r3, #0]
 8007398:	1d11      	adds	r1, r2, #4
 800739a:	6019      	str	r1, [r3, #0]
 800739c:	6815      	ldr	r5, [r2, #0]
 800739e:	2100      	movs	r1, #0
 80073a0:	0028      	movs	r0, r5
 80073a2:	6862      	ldr	r2, [r4, #4]
 80073a4:	f000 f9ce 	bl	8007744 <memchr>
 80073a8:	2800      	cmp	r0, #0
 80073aa:	d001      	beq.n	80073b0 <_printf_i+0x1c0>
 80073ac:	1b40      	subs	r0, r0, r5
 80073ae:	6060      	str	r0, [r4, #4]
 80073b0:	6863      	ldr	r3, [r4, #4]
 80073b2:	6123      	str	r3, [r4, #16]
 80073b4:	2300      	movs	r3, #0
 80073b6:	9a03      	ldr	r2, [sp, #12]
 80073b8:	7013      	strb	r3, [r2, #0]
 80073ba:	e7ac      	b.n	8007316 <_printf_i+0x126>
 80073bc:	002a      	movs	r2, r5
 80073be:	6923      	ldr	r3, [r4, #16]
 80073c0:	9906      	ldr	r1, [sp, #24]
 80073c2:	9805      	ldr	r0, [sp, #20]
 80073c4:	9d07      	ldr	r5, [sp, #28]
 80073c6:	47a8      	blx	r5
 80073c8:	3001      	adds	r0, #1
 80073ca:	d0ae      	beq.n	800732a <_printf_i+0x13a>
 80073cc:	6823      	ldr	r3, [r4, #0]
 80073ce:	079b      	lsls	r3, r3, #30
 80073d0:	d415      	bmi.n	80073fe <_printf_i+0x20e>
 80073d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073d4:	68e0      	ldr	r0, [r4, #12]
 80073d6:	4298      	cmp	r0, r3
 80073d8:	daa9      	bge.n	800732e <_printf_i+0x13e>
 80073da:	0018      	movs	r0, r3
 80073dc:	e7a7      	b.n	800732e <_printf_i+0x13e>
 80073de:	0022      	movs	r2, r4
 80073e0:	2301      	movs	r3, #1
 80073e2:	9906      	ldr	r1, [sp, #24]
 80073e4:	9805      	ldr	r0, [sp, #20]
 80073e6:	9e07      	ldr	r6, [sp, #28]
 80073e8:	3219      	adds	r2, #25
 80073ea:	47b0      	blx	r6
 80073ec:	3001      	adds	r0, #1
 80073ee:	d09c      	beq.n	800732a <_printf_i+0x13a>
 80073f0:	3501      	adds	r5, #1
 80073f2:	68e3      	ldr	r3, [r4, #12]
 80073f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80073f6:	1a9b      	subs	r3, r3, r2
 80073f8:	42ab      	cmp	r3, r5
 80073fa:	dcf0      	bgt.n	80073de <_printf_i+0x1ee>
 80073fc:	e7e9      	b.n	80073d2 <_printf_i+0x1e2>
 80073fe:	2500      	movs	r5, #0
 8007400:	e7f7      	b.n	80073f2 <_printf_i+0x202>
 8007402:	46c0      	nop			@ (mov r8, r8)
 8007404:	08007b15 	.word	0x08007b15
 8007408:	08007b26 	.word	0x08007b26

0800740c <__sflush_r>:
 800740c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800740e:	220c      	movs	r2, #12
 8007410:	5e8b      	ldrsh	r3, [r1, r2]
 8007412:	0005      	movs	r5, r0
 8007414:	000c      	movs	r4, r1
 8007416:	071a      	lsls	r2, r3, #28
 8007418:	d456      	bmi.n	80074c8 <__sflush_r+0xbc>
 800741a:	684a      	ldr	r2, [r1, #4]
 800741c:	2a00      	cmp	r2, #0
 800741e:	dc02      	bgt.n	8007426 <__sflush_r+0x1a>
 8007420:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8007422:	2a00      	cmp	r2, #0
 8007424:	dd4e      	ble.n	80074c4 <__sflush_r+0xb8>
 8007426:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8007428:	2f00      	cmp	r7, #0
 800742a:	d04b      	beq.n	80074c4 <__sflush_r+0xb8>
 800742c:	2200      	movs	r2, #0
 800742e:	2080      	movs	r0, #128	@ 0x80
 8007430:	682e      	ldr	r6, [r5, #0]
 8007432:	602a      	str	r2, [r5, #0]
 8007434:	001a      	movs	r2, r3
 8007436:	0140      	lsls	r0, r0, #5
 8007438:	6a21      	ldr	r1, [r4, #32]
 800743a:	4002      	ands	r2, r0
 800743c:	4203      	tst	r3, r0
 800743e:	d033      	beq.n	80074a8 <__sflush_r+0x9c>
 8007440:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007442:	89a3      	ldrh	r3, [r4, #12]
 8007444:	075b      	lsls	r3, r3, #29
 8007446:	d506      	bpl.n	8007456 <__sflush_r+0x4a>
 8007448:	6863      	ldr	r3, [r4, #4]
 800744a:	1ad2      	subs	r2, r2, r3
 800744c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800744e:	2b00      	cmp	r3, #0
 8007450:	d001      	beq.n	8007456 <__sflush_r+0x4a>
 8007452:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007454:	1ad2      	subs	r2, r2, r3
 8007456:	2300      	movs	r3, #0
 8007458:	0028      	movs	r0, r5
 800745a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800745c:	6a21      	ldr	r1, [r4, #32]
 800745e:	47b8      	blx	r7
 8007460:	89a2      	ldrh	r2, [r4, #12]
 8007462:	1c43      	adds	r3, r0, #1
 8007464:	d106      	bne.n	8007474 <__sflush_r+0x68>
 8007466:	6829      	ldr	r1, [r5, #0]
 8007468:	291d      	cmp	r1, #29
 800746a:	d846      	bhi.n	80074fa <__sflush_r+0xee>
 800746c:	4b29      	ldr	r3, [pc, #164]	@ (8007514 <__sflush_r+0x108>)
 800746e:	410b      	asrs	r3, r1
 8007470:	07db      	lsls	r3, r3, #31
 8007472:	d442      	bmi.n	80074fa <__sflush_r+0xee>
 8007474:	2300      	movs	r3, #0
 8007476:	6063      	str	r3, [r4, #4]
 8007478:	6923      	ldr	r3, [r4, #16]
 800747a:	6023      	str	r3, [r4, #0]
 800747c:	04d2      	lsls	r2, r2, #19
 800747e:	d505      	bpl.n	800748c <__sflush_r+0x80>
 8007480:	1c43      	adds	r3, r0, #1
 8007482:	d102      	bne.n	800748a <__sflush_r+0x7e>
 8007484:	682b      	ldr	r3, [r5, #0]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d100      	bne.n	800748c <__sflush_r+0x80>
 800748a:	6560      	str	r0, [r4, #84]	@ 0x54
 800748c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800748e:	602e      	str	r6, [r5, #0]
 8007490:	2900      	cmp	r1, #0
 8007492:	d017      	beq.n	80074c4 <__sflush_r+0xb8>
 8007494:	0023      	movs	r3, r4
 8007496:	3344      	adds	r3, #68	@ 0x44
 8007498:	4299      	cmp	r1, r3
 800749a:	d002      	beq.n	80074a2 <__sflush_r+0x96>
 800749c:	0028      	movs	r0, r5
 800749e:	f7ff fa99 	bl	80069d4 <_free_r>
 80074a2:	2300      	movs	r3, #0
 80074a4:	6363      	str	r3, [r4, #52]	@ 0x34
 80074a6:	e00d      	b.n	80074c4 <__sflush_r+0xb8>
 80074a8:	2301      	movs	r3, #1
 80074aa:	0028      	movs	r0, r5
 80074ac:	47b8      	blx	r7
 80074ae:	0002      	movs	r2, r0
 80074b0:	1c43      	adds	r3, r0, #1
 80074b2:	d1c6      	bne.n	8007442 <__sflush_r+0x36>
 80074b4:	682b      	ldr	r3, [r5, #0]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d0c3      	beq.n	8007442 <__sflush_r+0x36>
 80074ba:	2b1d      	cmp	r3, #29
 80074bc:	d001      	beq.n	80074c2 <__sflush_r+0xb6>
 80074be:	2b16      	cmp	r3, #22
 80074c0:	d11a      	bne.n	80074f8 <__sflush_r+0xec>
 80074c2:	602e      	str	r6, [r5, #0]
 80074c4:	2000      	movs	r0, #0
 80074c6:	e01e      	b.n	8007506 <__sflush_r+0xfa>
 80074c8:	690e      	ldr	r6, [r1, #16]
 80074ca:	2e00      	cmp	r6, #0
 80074cc:	d0fa      	beq.n	80074c4 <__sflush_r+0xb8>
 80074ce:	680f      	ldr	r7, [r1, #0]
 80074d0:	600e      	str	r6, [r1, #0]
 80074d2:	1bba      	subs	r2, r7, r6
 80074d4:	9201      	str	r2, [sp, #4]
 80074d6:	2200      	movs	r2, #0
 80074d8:	079b      	lsls	r3, r3, #30
 80074da:	d100      	bne.n	80074de <__sflush_r+0xd2>
 80074dc:	694a      	ldr	r2, [r1, #20]
 80074de:	60a2      	str	r2, [r4, #8]
 80074e0:	9b01      	ldr	r3, [sp, #4]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	ddee      	ble.n	80074c4 <__sflush_r+0xb8>
 80074e6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80074e8:	0032      	movs	r2, r6
 80074ea:	001f      	movs	r7, r3
 80074ec:	0028      	movs	r0, r5
 80074ee:	9b01      	ldr	r3, [sp, #4]
 80074f0:	6a21      	ldr	r1, [r4, #32]
 80074f2:	47b8      	blx	r7
 80074f4:	2800      	cmp	r0, #0
 80074f6:	dc07      	bgt.n	8007508 <__sflush_r+0xfc>
 80074f8:	89a2      	ldrh	r2, [r4, #12]
 80074fa:	2340      	movs	r3, #64	@ 0x40
 80074fc:	2001      	movs	r0, #1
 80074fe:	4313      	orrs	r3, r2
 8007500:	b21b      	sxth	r3, r3
 8007502:	81a3      	strh	r3, [r4, #12]
 8007504:	4240      	negs	r0, r0
 8007506:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007508:	9b01      	ldr	r3, [sp, #4]
 800750a:	1836      	adds	r6, r6, r0
 800750c:	1a1b      	subs	r3, r3, r0
 800750e:	9301      	str	r3, [sp, #4]
 8007510:	e7e6      	b.n	80074e0 <__sflush_r+0xd4>
 8007512:	46c0      	nop			@ (mov r8, r8)
 8007514:	dfbffffe 	.word	0xdfbffffe

08007518 <_fflush_r>:
 8007518:	690b      	ldr	r3, [r1, #16]
 800751a:	b570      	push	{r4, r5, r6, lr}
 800751c:	0005      	movs	r5, r0
 800751e:	000c      	movs	r4, r1
 8007520:	2b00      	cmp	r3, #0
 8007522:	d102      	bne.n	800752a <_fflush_r+0x12>
 8007524:	2500      	movs	r5, #0
 8007526:	0028      	movs	r0, r5
 8007528:	bd70      	pop	{r4, r5, r6, pc}
 800752a:	2800      	cmp	r0, #0
 800752c:	d004      	beq.n	8007538 <_fflush_r+0x20>
 800752e:	6a03      	ldr	r3, [r0, #32]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d101      	bne.n	8007538 <_fflush_r+0x20>
 8007534:	f7fe fffc 	bl	8006530 <__sinit>
 8007538:	220c      	movs	r2, #12
 800753a:	5ea3      	ldrsh	r3, [r4, r2]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d0f1      	beq.n	8007524 <_fflush_r+0xc>
 8007540:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007542:	07d2      	lsls	r2, r2, #31
 8007544:	d404      	bmi.n	8007550 <_fflush_r+0x38>
 8007546:	059b      	lsls	r3, r3, #22
 8007548:	d402      	bmi.n	8007550 <_fflush_r+0x38>
 800754a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800754c:	f7ff fa3f 	bl	80069ce <__retarget_lock_acquire_recursive>
 8007550:	0028      	movs	r0, r5
 8007552:	0021      	movs	r1, r4
 8007554:	f7ff ff5a 	bl	800740c <__sflush_r>
 8007558:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800755a:	0005      	movs	r5, r0
 800755c:	07db      	lsls	r3, r3, #31
 800755e:	d4e2      	bmi.n	8007526 <_fflush_r+0xe>
 8007560:	89a3      	ldrh	r3, [r4, #12]
 8007562:	059b      	lsls	r3, r3, #22
 8007564:	d4df      	bmi.n	8007526 <_fflush_r+0xe>
 8007566:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007568:	f7ff fa32 	bl	80069d0 <__retarget_lock_release_recursive>
 800756c:	e7db      	b.n	8007526 <_fflush_r+0xe>
	...

08007570 <__swhatbuf_r>:
 8007570:	b570      	push	{r4, r5, r6, lr}
 8007572:	000e      	movs	r6, r1
 8007574:	001d      	movs	r5, r3
 8007576:	230e      	movs	r3, #14
 8007578:	5ec9      	ldrsh	r1, [r1, r3]
 800757a:	0014      	movs	r4, r2
 800757c:	b096      	sub	sp, #88	@ 0x58
 800757e:	2900      	cmp	r1, #0
 8007580:	da0c      	bge.n	800759c <__swhatbuf_r+0x2c>
 8007582:	89b2      	ldrh	r2, [r6, #12]
 8007584:	2380      	movs	r3, #128	@ 0x80
 8007586:	0011      	movs	r1, r2
 8007588:	4019      	ands	r1, r3
 800758a:	421a      	tst	r2, r3
 800758c:	d114      	bne.n	80075b8 <__swhatbuf_r+0x48>
 800758e:	2380      	movs	r3, #128	@ 0x80
 8007590:	00db      	lsls	r3, r3, #3
 8007592:	2000      	movs	r0, #0
 8007594:	6029      	str	r1, [r5, #0]
 8007596:	6023      	str	r3, [r4, #0]
 8007598:	b016      	add	sp, #88	@ 0x58
 800759a:	bd70      	pop	{r4, r5, r6, pc}
 800759c:	466a      	mov	r2, sp
 800759e:	f000 f89b 	bl	80076d8 <_fstat_r>
 80075a2:	2800      	cmp	r0, #0
 80075a4:	dbed      	blt.n	8007582 <__swhatbuf_r+0x12>
 80075a6:	23f0      	movs	r3, #240	@ 0xf0
 80075a8:	9901      	ldr	r1, [sp, #4]
 80075aa:	021b      	lsls	r3, r3, #8
 80075ac:	4019      	ands	r1, r3
 80075ae:	4b04      	ldr	r3, [pc, #16]	@ (80075c0 <__swhatbuf_r+0x50>)
 80075b0:	18c9      	adds	r1, r1, r3
 80075b2:	424b      	negs	r3, r1
 80075b4:	4159      	adcs	r1, r3
 80075b6:	e7ea      	b.n	800758e <__swhatbuf_r+0x1e>
 80075b8:	2100      	movs	r1, #0
 80075ba:	2340      	movs	r3, #64	@ 0x40
 80075bc:	e7e9      	b.n	8007592 <__swhatbuf_r+0x22>
 80075be:	46c0      	nop			@ (mov r8, r8)
 80075c0:	ffffe000 	.word	0xffffe000

080075c4 <__smakebuf_r>:
 80075c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075c6:	2602      	movs	r6, #2
 80075c8:	898b      	ldrh	r3, [r1, #12]
 80075ca:	0005      	movs	r5, r0
 80075cc:	000c      	movs	r4, r1
 80075ce:	b085      	sub	sp, #20
 80075d0:	4233      	tst	r3, r6
 80075d2:	d007      	beq.n	80075e4 <__smakebuf_r+0x20>
 80075d4:	0023      	movs	r3, r4
 80075d6:	3347      	adds	r3, #71	@ 0x47
 80075d8:	6023      	str	r3, [r4, #0]
 80075da:	6123      	str	r3, [r4, #16]
 80075dc:	2301      	movs	r3, #1
 80075de:	6163      	str	r3, [r4, #20]
 80075e0:	b005      	add	sp, #20
 80075e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075e4:	ab03      	add	r3, sp, #12
 80075e6:	aa02      	add	r2, sp, #8
 80075e8:	f7ff ffc2 	bl	8007570 <__swhatbuf_r>
 80075ec:	9f02      	ldr	r7, [sp, #8]
 80075ee:	9001      	str	r0, [sp, #4]
 80075f0:	0039      	movs	r1, r7
 80075f2:	0028      	movs	r0, r5
 80075f4:	f7ff fa5a 	bl	8006aac <_malloc_r>
 80075f8:	2800      	cmp	r0, #0
 80075fa:	d108      	bne.n	800760e <__smakebuf_r+0x4a>
 80075fc:	220c      	movs	r2, #12
 80075fe:	5ea3      	ldrsh	r3, [r4, r2]
 8007600:	059a      	lsls	r2, r3, #22
 8007602:	d4ed      	bmi.n	80075e0 <__smakebuf_r+0x1c>
 8007604:	2203      	movs	r2, #3
 8007606:	4393      	bics	r3, r2
 8007608:	431e      	orrs	r6, r3
 800760a:	81a6      	strh	r6, [r4, #12]
 800760c:	e7e2      	b.n	80075d4 <__smakebuf_r+0x10>
 800760e:	2380      	movs	r3, #128	@ 0x80
 8007610:	89a2      	ldrh	r2, [r4, #12]
 8007612:	6020      	str	r0, [r4, #0]
 8007614:	4313      	orrs	r3, r2
 8007616:	81a3      	strh	r3, [r4, #12]
 8007618:	9b03      	ldr	r3, [sp, #12]
 800761a:	6120      	str	r0, [r4, #16]
 800761c:	6167      	str	r7, [r4, #20]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d00c      	beq.n	800763c <__smakebuf_r+0x78>
 8007622:	0028      	movs	r0, r5
 8007624:	230e      	movs	r3, #14
 8007626:	5ee1      	ldrsh	r1, [r4, r3]
 8007628:	f000 f868 	bl	80076fc <_isatty_r>
 800762c:	2800      	cmp	r0, #0
 800762e:	d005      	beq.n	800763c <__smakebuf_r+0x78>
 8007630:	2303      	movs	r3, #3
 8007632:	89a2      	ldrh	r2, [r4, #12]
 8007634:	439a      	bics	r2, r3
 8007636:	3b02      	subs	r3, #2
 8007638:	4313      	orrs	r3, r2
 800763a:	81a3      	strh	r3, [r4, #12]
 800763c:	89a3      	ldrh	r3, [r4, #12]
 800763e:	9a01      	ldr	r2, [sp, #4]
 8007640:	4313      	orrs	r3, r2
 8007642:	81a3      	strh	r3, [r4, #12]
 8007644:	e7cc      	b.n	80075e0 <__smakebuf_r+0x1c>

08007646 <_putc_r>:
 8007646:	b570      	push	{r4, r5, r6, lr}
 8007648:	0006      	movs	r6, r0
 800764a:	000d      	movs	r5, r1
 800764c:	0014      	movs	r4, r2
 800764e:	2800      	cmp	r0, #0
 8007650:	d004      	beq.n	800765c <_putc_r+0x16>
 8007652:	6a03      	ldr	r3, [r0, #32]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d101      	bne.n	800765c <_putc_r+0x16>
 8007658:	f7fe ff6a 	bl	8006530 <__sinit>
 800765c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800765e:	07db      	lsls	r3, r3, #31
 8007660:	d405      	bmi.n	800766e <_putc_r+0x28>
 8007662:	89a3      	ldrh	r3, [r4, #12]
 8007664:	059b      	lsls	r3, r3, #22
 8007666:	d402      	bmi.n	800766e <_putc_r+0x28>
 8007668:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800766a:	f7ff f9b0 	bl	80069ce <__retarget_lock_acquire_recursive>
 800766e:	68a3      	ldr	r3, [r4, #8]
 8007670:	3b01      	subs	r3, #1
 8007672:	60a3      	str	r3, [r4, #8]
 8007674:	2b00      	cmp	r3, #0
 8007676:	da05      	bge.n	8007684 <_putc_r+0x3e>
 8007678:	69a2      	ldr	r2, [r4, #24]
 800767a:	4293      	cmp	r3, r2
 800767c:	db12      	blt.n	80076a4 <_putc_r+0x5e>
 800767e:	b2eb      	uxtb	r3, r5
 8007680:	2b0a      	cmp	r3, #10
 8007682:	d00f      	beq.n	80076a4 <_putc_r+0x5e>
 8007684:	6823      	ldr	r3, [r4, #0]
 8007686:	1c5a      	adds	r2, r3, #1
 8007688:	6022      	str	r2, [r4, #0]
 800768a:	701d      	strb	r5, [r3, #0]
 800768c:	b2ed      	uxtb	r5, r5
 800768e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007690:	07db      	lsls	r3, r3, #31
 8007692:	d405      	bmi.n	80076a0 <_putc_r+0x5a>
 8007694:	89a3      	ldrh	r3, [r4, #12]
 8007696:	059b      	lsls	r3, r3, #22
 8007698:	d402      	bmi.n	80076a0 <_putc_r+0x5a>
 800769a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800769c:	f7ff f998 	bl	80069d0 <__retarget_lock_release_recursive>
 80076a0:	0028      	movs	r0, r5
 80076a2:	bd70      	pop	{r4, r5, r6, pc}
 80076a4:	0029      	movs	r1, r5
 80076a6:	0022      	movs	r2, r4
 80076a8:	0030      	movs	r0, r6
 80076aa:	f7ff f86f 	bl	800678c <__swbuf_r>
 80076ae:	0005      	movs	r5, r0
 80076b0:	e7ed      	b.n	800768e <_putc_r+0x48>

080076b2 <memmove>:
 80076b2:	b510      	push	{r4, lr}
 80076b4:	4288      	cmp	r0, r1
 80076b6:	d806      	bhi.n	80076c6 <memmove+0x14>
 80076b8:	2300      	movs	r3, #0
 80076ba:	429a      	cmp	r2, r3
 80076bc:	d008      	beq.n	80076d0 <memmove+0x1e>
 80076be:	5ccc      	ldrb	r4, [r1, r3]
 80076c0:	54c4      	strb	r4, [r0, r3]
 80076c2:	3301      	adds	r3, #1
 80076c4:	e7f9      	b.n	80076ba <memmove+0x8>
 80076c6:	188b      	adds	r3, r1, r2
 80076c8:	4298      	cmp	r0, r3
 80076ca:	d2f5      	bcs.n	80076b8 <memmove+0x6>
 80076cc:	3a01      	subs	r2, #1
 80076ce:	d200      	bcs.n	80076d2 <memmove+0x20>
 80076d0:	bd10      	pop	{r4, pc}
 80076d2:	5c8b      	ldrb	r3, [r1, r2]
 80076d4:	5483      	strb	r3, [r0, r2]
 80076d6:	e7f9      	b.n	80076cc <memmove+0x1a>

080076d8 <_fstat_r>:
 80076d8:	2300      	movs	r3, #0
 80076da:	b570      	push	{r4, r5, r6, lr}
 80076dc:	4d06      	ldr	r5, [pc, #24]	@ (80076f8 <_fstat_r+0x20>)
 80076de:	0004      	movs	r4, r0
 80076e0:	0008      	movs	r0, r1
 80076e2:	0011      	movs	r1, r2
 80076e4:	602b      	str	r3, [r5, #0]
 80076e6:	f7fa fc4c 	bl	8001f82 <_fstat>
 80076ea:	1c43      	adds	r3, r0, #1
 80076ec:	d103      	bne.n	80076f6 <_fstat_r+0x1e>
 80076ee:	682b      	ldr	r3, [r5, #0]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d000      	beq.n	80076f6 <_fstat_r+0x1e>
 80076f4:	6023      	str	r3, [r4, #0]
 80076f6:	bd70      	pop	{r4, r5, r6, pc}
 80076f8:	200005cc 	.word	0x200005cc

080076fc <_isatty_r>:
 80076fc:	2300      	movs	r3, #0
 80076fe:	b570      	push	{r4, r5, r6, lr}
 8007700:	4d06      	ldr	r5, [pc, #24]	@ (800771c <_isatty_r+0x20>)
 8007702:	0004      	movs	r4, r0
 8007704:	0008      	movs	r0, r1
 8007706:	602b      	str	r3, [r5, #0]
 8007708:	f7fa fc49 	bl	8001f9e <_isatty>
 800770c:	1c43      	adds	r3, r0, #1
 800770e:	d103      	bne.n	8007718 <_isatty_r+0x1c>
 8007710:	682b      	ldr	r3, [r5, #0]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d000      	beq.n	8007718 <_isatty_r+0x1c>
 8007716:	6023      	str	r3, [r4, #0]
 8007718:	bd70      	pop	{r4, r5, r6, pc}
 800771a:	46c0      	nop			@ (mov r8, r8)
 800771c:	200005cc 	.word	0x200005cc

08007720 <_sbrk_r>:
 8007720:	2300      	movs	r3, #0
 8007722:	b570      	push	{r4, r5, r6, lr}
 8007724:	4d06      	ldr	r5, [pc, #24]	@ (8007740 <_sbrk_r+0x20>)
 8007726:	0004      	movs	r4, r0
 8007728:	0008      	movs	r0, r1
 800772a:	602b      	str	r3, [r5, #0]
 800772c:	f7fa fc4c 	bl	8001fc8 <_sbrk>
 8007730:	1c43      	adds	r3, r0, #1
 8007732:	d103      	bne.n	800773c <_sbrk_r+0x1c>
 8007734:	682b      	ldr	r3, [r5, #0]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d000      	beq.n	800773c <_sbrk_r+0x1c>
 800773a:	6023      	str	r3, [r4, #0]
 800773c:	bd70      	pop	{r4, r5, r6, pc}
 800773e:	46c0      	nop			@ (mov r8, r8)
 8007740:	200005cc 	.word	0x200005cc

08007744 <memchr>:
 8007744:	b2c9      	uxtb	r1, r1
 8007746:	1882      	adds	r2, r0, r2
 8007748:	4290      	cmp	r0, r2
 800774a:	d101      	bne.n	8007750 <memchr+0xc>
 800774c:	2000      	movs	r0, #0
 800774e:	4770      	bx	lr
 8007750:	7803      	ldrb	r3, [r0, #0]
 8007752:	428b      	cmp	r3, r1
 8007754:	d0fb      	beq.n	800774e <memchr+0xa>
 8007756:	3001      	adds	r0, #1
 8007758:	e7f6      	b.n	8007748 <memchr+0x4>

0800775a <memcpy>:
 800775a:	2300      	movs	r3, #0
 800775c:	b510      	push	{r4, lr}
 800775e:	429a      	cmp	r2, r3
 8007760:	d100      	bne.n	8007764 <memcpy+0xa>
 8007762:	bd10      	pop	{r4, pc}
 8007764:	5ccc      	ldrb	r4, [r1, r3]
 8007766:	54c4      	strb	r4, [r0, r3]
 8007768:	3301      	adds	r3, #1
 800776a:	e7f8      	b.n	800775e <memcpy+0x4>

0800776c <_realloc_r>:
 800776c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800776e:	0006      	movs	r6, r0
 8007770:	000c      	movs	r4, r1
 8007772:	0015      	movs	r5, r2
 8007774:	2900      	cmp	r1, #0
 8007776:	d105      	bne.n	8007784 <_realloc_r+0x18>
 8007778:	0011      	movs	r1, r2
 800777a:	f7ff f997 	bl	8006aac <_malloc_r>
 800777e:	0004      	movs	r4, r0
 8007780:	0020      	movs	r0, r4
 8007782:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007784:	2a00      	cmp	r2, #0
 8007786:	d103      	bne.n	8007790 <_realloc_r+0x24>
 8007788:	f7ff f924 	bl	80069d4 <_free_r>
 800778c:	2400      	movs	r4, #0
 800778e:	e7f7      	b.n	8007780 <_realloc_r+0x14>
 8007790:	f000 f81b 	bl	80077ca <_malloc_usable_size_r>
 8007794:	0007      	movs	r7, r0
 8007796:	4285      	cmp	r5, r0
 8007798:	d802      	bhi.n	80077a0 <_realloc_r+0x34>
 800779a:	0843      	lsrs	r3, r0, #1
 800779c:	42ab      	cmp	r3, r5
 800779e:	d3ef      	bcc.n	8007780 <_realloc_r+0x14>
 80077a0:	0029      	movs	r1, r5
 80077a2:	0030      	movs	r0, r6
 80077a4:	f7ff f982 	bl	8006aac <_malloc_r>
 80077a8:	9001      	str	r0, [sp, #4]
 80077aa:	2800      	cmp	r0, #0
 80077ac:	d0ee      	beq.n	800778c <_realloc_r+0x20>
 80077ae:	002a      	movs	r2, r5
 80077b0:	42bd      	cmp	r5, r7
 80077b2:	d900      	bls.n	80077b6 <_realloc_r+0x4a>
 80077b4:	003a      	movs	r2, r7
 80077b6:	0021      	movs	r1, r4
 80077b8:	9801      	ldr	r0, [sp, #4]
 80077ba:	f7ff ffce 	bl	800775a <memcpy>
 80077be:	0021      	movs	r1, r4
 80077c0:	0030      	movs	r0, r6
 80077c2:	f7ff f907 	bl	80069d4 <_free_r>
 80077c6:	9c01      	ldr	r4, [sp, #4]
 80077c8:	e7da      	b.n	8007780 <_realloc_r+0x14>

080077ca <_malloc_usable_size_r>:
 80077ca:	1f0b      	subs	r3, r1, #4
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	1f18      	subs	r0, r3, #4
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	da01      	bge.n	80077d8 <_malloc_usable_size_r+0xe>
 80077d4:	580b      	ldr	r3, [r1, r0]
 80077d6:	18c0      	adds	r0, r0, r3
 80077d8:	4770      	bx	lr
	...

080077dc <_init>:
 80077dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077de:	46c0      	nop			@ (mov r8, r8)
 80077e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077e2:	bc08      	pop	{r3}
 80077e4:	469e      	mov	lr, r3
 80077e6:	4770      	bx	lr

080077e8 <_fini>:
 80077e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077ea:	46c0      	nop			@ (mov r8, r8)
 80077ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077ee:	bc08      	pop	{r3}
 80077f0:	469e      	mov	lr, r3
 80077f2:	4770      	bx	lr
