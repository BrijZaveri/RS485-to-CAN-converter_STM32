
rs485_to_can.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000070c8  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  08007184  08007184  00008184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080072ec  080072ec  00009074  2**0
                  CONTENTS
  4 .ARM          00000008  080072ec  080072ec  000082ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080072f4  080072f4  00009074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080072f4  080072f4  000082f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080072f8  080072f8  000082f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  080072fc  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000464  20000074  08007370  00009074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004d8  08007370  000094d8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00009074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fe1e  00000000  00000000  0000909c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000246c  00000000  00000000  00018eba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cf0  00000000  00000000  0001b328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009ec  00000000  00000000  0001c018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cfe5  00000000  00000000  0001ca04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fbd3  00000000  00000000  000399e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b832f  00000000  00000000  000495bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001018eb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003710  00000000  00000000  00101930  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  00105040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000074 	.word	0x20000074
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800716c 	.word	0x0800716c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000078 	.word	0x20000078
 8000100:	0800716c 	.word	0x0800716c

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	@ 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			@ (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	@ 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	@ 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			@ (mov r8, r8)

08000404 <__aeabi_uldivmod>:
 8000404:	2b00      	cmp	r3, #0
 8000406:	d111      	bne.n	800042c <__aeabi_uldivmod+0x28>
 8000408:	2a00      	cmp	r2, #0
 800040a:	d10f      	bne.n	800042c <__aeabi_uldivmod+0x28>
 800040c:	2900      	cmp	r1, #0
 800040e:	d100      	bne.n	8000412 <__aeabi_uldivmod+0xe>
 8000410:	2800      	cmp	r0, #0
 8000412:	d002      	beq.n	800041a <__aeabi_uldivmod+0x16>
 8000414:	2100      	movs	r1, #0
 8000416:	43c9      	mvns	r1, r1
 8000418:	0008      	movs	r0, r1
 800041a:	b407      	push	{r0, r1, r2}
 800041c:	4802      	ldr	r0, [pc, #8]	@ (8000428 <__aeabi_uldivmod+0x24>)
 800041e:	a102      	add	r1, pc, #8	@ (adr r1, 8000428 <__aeabi_uldivmod+0x24>)
 8000420:	1840      	adds	r0, r0, r1
 8000422:	9002      	str	r0, [sp, #8]
 8000424:	bd03      	pop	{r0, r1, pc}
 8000426:	46c0      	nop			@ (mov r8, r8)
 8000428:	ffffffd9 	.word	0xffffffd9
 800042c:	b403      	push	{r0, r1}
 800042e:	4668      	mov	r0, sp
 8000430:	b501      	push	{r0, lr}
 8000432:	9802      	ldr	r0, [sp, #8]
 8000434:	f000 f806 	bl	8000444 <__udivmoddi4>
 8000438:	9b01      	ldr	r3, [sp, #4]
 800043a:	469e      	mov	lr, r3
 800043c:	b002      	add	sp, #8
 800043e:	bc0c      	pop	{r2, r3}
 8000440:	4770      	bx	lr
 8000442:	46c0      	nop			@ (mov r8, r8)

08000444 <__udivmoddi4>:
 8000444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000446:	4657      	mov	r7, sl
 8000448:	464e      	mov	r6, r9
 800044a:	4645      	mov	r5, r8
 800044c:	46de      	mov	lr, fp
 800044e:	b5e0      	push	{r5, r6, r7, lr}
 8000450:	0004      	movs	r4, r0
 8000452:	000d      	movs	r5, r1
 8000454:	4692      	mov	sl, r2
 8000456:	4699      	mov	r9, r3
 8000458:	b083      	sub	sp, #12
 800045a:	428b      	cmp	r3, r1
 800045c:	d830      	bhi.n	80004c0 <__udivmoddi4+0x7c>
 800045e:	d02d      	beq.n	80004bc <__udivmoddi4+0x78>
 8000460:	4649      	mov	r1, r9
 8000462:	4650      	mov	r0, sl
 8000464:	f000 fc0a 	bl	8000c7c <__clzdi2>
 8000468:	0029      	movs	r1, r5
 800046a:	0006      	movs	r6, r0
 800046c:	0020      	movs	r0, r4
 800046e:	f000 fc05 	bl	8000c7c <__clzdi2>
 8000472:	1a33      	subs	r3, r6, r0
 8000474:	4698      	mov	r8, r3
 8000476:	3b20      	subs	r3, #32
 8000478:	d434      	bmi.n	80004e4 <__udivmoddi4+0xa0>
 800047a:	469b      	mov	fp, r3
 800047c:	4653      	mov	r3, sl
 800047e:	465a      	mov	r2, fp
 8000480:	4093      	lsls	r3, r2
 8000482:	4642      	mov	r2, r8
 8000484:	001f      	movs	r7, r3
 8000486:	4653      	mov	r3, sl
 8000488:	4093      	lsls	r3, r2
 800048a:	001e      	movs	r6, r3
 800048c:	42af      	cmp	r7, r5
 800048e:	d83b      	bhi.n	8000508 <__udivmoddi4+0xc4>
 8000490:	42af      	cmp	r7, r5
 8000492:	d100      	bne.n	8000496 <__udivmoddi4+0x52>
 8000494:	e079      	b.n	800058a <__udivmoddi4+0x146>
 8000496:	465b      	mov	r3, fp
 8000498:	1ba4      	subs	r4, r4, r6
 800049a:	41bd      	sbcs	r5, r7
 800049c:	2b00      	cmp	r3, #0
 800049e:	da00      	bge.n	80004a2 <__udivmoddi4+0x5e>
 80004a0:	e076      	b.n	8000590 <__udivmoddi4+0x14c>
 80004a2:	2200      	movs	r2, #0
 80004a4:	2300      	movs	r3, #0
 80004a6:	9200      	str	r2, [sp, #0]
 80004a8:	9301      	str	r3, [sp, #4]
 80004aa:	2301      	movs	r3, #1
 80004ac:	465a      	mov	r2, fp
 80004ae:	4093      	lsls	r3, r2
 80004b0:	9301      	str	r3, [sp, #4]
 80004b2:	2301      	movs	r3, #1
 80004b4:	4642      	mov	r2, r8
 80004b6:	4093      	lsls	r3, r2
 80004b8:	9300      	str	r3, [sp, #0]
 80004ba:	e029      	b.n	8000510 <__udivmoddi4+0xcc>
 80004bc:	4282      	cmp	r2, r0
 80004be:	d9cf      	bls.n	8000460 <__udivmoddi4+0x1c>
 80004c0:	2200      	movs	r2, #0
 80004c2:	2300      	movs	r3, #0
 80004c4:	9200      	str	r2, [sp, #0]
 80004c6:	9301      	str	r3, [sp, #4]
 80004c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d001      	beq.n	80004d2 <__udivmoddi4+0x8e>
 80004ce:	601c      	str	r4, [r3, #0]
 80004d0:	605d      	str	r5, [r3, #4]
 80004d2:	9800      	ldr	r0, [sp, #0]
 80004d4:	9901      	ldr	r1, [sp, #4]
 80004d6:	b003      	add	sp, #12
 80004d8:	bcf0      	pop	{r4, r5, r6, r7}
 80004da:	46bb      	mov	fp, r7
 80004dc:	46b2      	mov	sl, r6
 80004de:	46a9      	mov	r9, r5
 80004e0:	46a0      	mov	r8, r4
 80004e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004e4:	4642      	mov	r2, r8
 80004e6:	469b      	mov	fp, r3
 80004e8:	2320      	movs	r3, #32
 80004ea:	1a9b      	subs	r3, r3, r2
 80004ec:	4652      	mov	r2, sl
 80004ee:	40da      	lsrs	r2, r3
 80004f0:	4641      	mov	r1, r8
 80004f2:	0013      	movs	r3, r2
 80004f4:	464a      	mov	r2, r9
 80004f6:	408a      	lsls	r2, r1
 80004f8:	0017      	movs	r7, r2
 80004fa:	4642      	mov	r2, r8
 80004fc:	431f      	orrs	r7, r3
 80004fe:	4653      	mov	r3, sl
 8000500:	4093      	lsls	r3, r2
 8000502:	001e      	movs	r6, r3
 8000504:	42af      	cmp	r7, r5
 8000506:	d9c3      	bls.n	8000490 <__udivmoddi4+0x4c>
 8000508:	2200      	movs	r2, #0
 800050a:	2300      	movs	r3, #0
 800050c:	9200      	str	r2, [sp, #0]
 800050e:	9301      	str	r3, [sp, #4]
 8000510:	4643      	mov	r3, r8
 8000512:	2b00      	cmp	r3, #0
 8000514:	d0d8      	beq.n	80004c8 <__udivmoddi4+0x84>
 8000516:	07fb      	lsls	r3, r7, #31
 8000518:	0872      	lsrs	r2, r6, #1
 800051a:	431a      	orrs	r2, r3
 800051c:	4646      	mov	r6, r8
 800051e:	087b      	lsrs	r3, r7, #1
 8000520:	e00e      	b.n	8000540 <__udivmoddi4+0xfc>
 8000522:	42ab      	cmp	r3, r5
 8000524:	d101      	bne.n	800052a <__udivmoddi4+0xe6>
 8000526:	42a2      	cmp	r2, r4
 8000528:	d80c      	bhi.n	8000544 <__udivmoddi4+0x100>
 800052a:	1aa4      	subs	r4, r4, r2
 800052c:	419d      	sbcs	r5, r3
 800052e:	2001      	movs	r0, #1
 8000530:	1924      	adds	r4, r4, r4
 8000532:	416d      	adcs	r5, r5
 8000534:	2100      	movs	r1, #0
 8000536:	3e01      	subs	r6, #1
 8000538:	1824      	adds	r4, r4, r0
 800053a:	414d      	adcs	r5, r1
 800053c:	2e00      	cmp	r6, #0
 800053e:	d006      	beq.n	800054e <__udivmoddi4+0x10a>
 8000540:	42ab      	cmp	r3, r5
 8000542:	d9ee      	bls.n	8000522 <__udivmoddi4+0xde>
 8000544:	3e01      	subs	r6, #1
 8000546:	1924      	adds	r4, r4, r4
 8000548:	416d      	adcs	r5, r5
 800054a:	2e00      	cmp	r6, #0
 800054c:	d1f8      	bne.n	8000540 <__udivmoddi4+0xfc>
 800054e:	9800      	ldr	r0, [sp, #0]
 8000550:	9901      	ldr	r1, [sp, #4]
 8000552:	465b      	mov	r3, fp
 8000554:	1900      	adds	r0, r0, r4
 8000556:	4169      	adcs	r1, r5
 8000558:	2b00      	cmp	r3, #0
 800055a:	db24      	blt.n	80005a6 <__udivmoddi4+0x162>
 800055c:	002b      	movs	r3, r5
 800055e:	465a      	mov	r2, fp
 8000560:	4644      	mov	r4, r8
 8000562:	40d3      	lsrs	r3, r2
 8000564:	002a      	movs	r2, r5
 8000566:	40e2      	lsrs	r2, r4
 8000568:	001c      	movs	r4, r3
 800056a:	465b      	mov	r3, fp
 800056c:	0015      	movs	r5, r2
 800056e:	2b00      	cmp	r3, #0
 8000570:	db2a      	blt.n	80005c8 <__udivmoddi4+0x184>
 8000572:	0026      	movs	r6, r4
 8000574:	409e      	lsls	r6, r3
 8000576:	0033      	movs	r3, r6
 8000578:	0026      	movs	r6, r4
 800057a:	4647      	mov	r7, r8
 800057c:	40be      	lsls	r6, r7
 800057e:	0032      	movs	r2, r6
 8000580:	1a80      	subs	r0, r0, r2
 8000582:	4199      	sbcs	r1, r3
 8000584:	9000      	str	r0, [sp, #0]
 8000586:	9101      	str	r1, [sp, #4]
 8000588:	e79e      	b.n	80004c8 <__udivmoddi4+0x84>
 800058a:	42a3      	cmp	r3, r4
 800058c:	d8bc      	bhi.n	8000508 <__udivmoddi4+0xc4>
 800058e:	e782      	b.n	8000496 <__udivmoddi4+0x52>
 8000590:	4642      	mov	r2, r8
 8000592:	2320      	movs	r3, #32
 8000594:	2100      	movs	r1, #0
 8000596:	1a9b      	subs	r3, r3, r2
 8000598:	2200      	movs	r2, #0
 800059a:	9100      	str	r1, [sp, #0]
 800059c:	9201      	str	r2, [sp, #4]
 800059e:	2201      	movs	r2, #1
 80005a0:	40da      	lsrs	r2, r3
 80005a2:	9201      	str	r2, [sp, #4]
 80005a4:	e785      	b.n	80004b2 <__udivmoddi4+0x6e>
 80005a6:	4642      	mov	r2, r8
 80005a8:	2320      	movs	r3, #32
 80005aa:	1a9b      	subs	r3, r3, r2
 80005ac:	002a      	movs	r2, r5
 80005ae:	4646      	mov	r6, r8
 80005b0:	409a      	lsls	r2, r3
 80005b2:	0023      	movs	r3, r4
 80005b4:	40f3      	lsrs	r3, r6
 80005b6:	4644      	mov	r4, r8
 80005b8:	4313      	orrs	r3, r2
 80005ba:	002a      	movs	r2, r5
 80005bc:	40e2      	lsrs	r2, r4
 80005be:	001c      	movs	r4, r3
 80005c0:	465b      	mov	r3, fp
 80005c2:	0015      	movs	r5, r2
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	dad4      	bge.n	8000572 <__udivmoddi4+0x12e>
 80005c8:	4642      	mov	r2, r8
 80005ca:	002f      	movs	r7, r5
 80005cc:	2320      	movs	r3, #32
 80005ce:	0026      	movs	r6, r4
 80005d0:	4097      	lsls	r7, r2
 80005d2:	1a9b      	subs	r3, r3, r2
 80005d4:	40de      	lsrs	r6, r3
 80005d6:	003b      	movs	r3, r7
 80005d8:	4333      	orrs	r3, r6
 80005da:	e7cd      	b.n	8000578 <__udivmoddi4+0x134>

080005dc <__aeabi_dmul>:
 80005dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005de:	4657      	mov	r7, sl
 80005e0:	46de      	mov	lr, fp
 80005e2:	464e      	mov	r6, r9
 80005e4:	4645      	mov	r5, r8
 80005e6:	b5e0      	push	{r5, r6, r7, lr}
 80005e8:	001f      	movs	r7, r3
 80005ea:	030b      	lsls	r3, r1, #12
 80005ec:	0b1b      	lsrs	r3, r3, #12
 80005ee:	0016      	movs	r6, r2
 80005f0:	469a      	mov	sl, r3
 80005f2:	0fca      	lsrs	r2, r1, #31
 80005f4:	004b      	lsls	r3, r1, #1
 80005f6:	0004      	movs	r4, r0
 80005f8:	4693      	mov	fp, r2
 80005fa:	b087      	sub	sp, #28
 80005fc:	0d5b      	lsrs	r3, r3, #21
 80005fe:	d100      	bne.n	8000602 <__aeabi_dmul+0x26>
 8000600:	e0d5      	b.n	80007ae <__aeabi_dmul+0x1d2>
 8000602:	4abb      	ldr	r2, [pc, #748]	@ (80008f0 <__aeabi_dmul+0x314>)
 8000604:	4293      	cmp	r3, r2
 8000606:	d100      	bne.n	800060a <__aeabi_dmul+0x2e>
 8000608:	e0f8      	b.n	80007fc <__aeabi_dmul+0x220>
 800060a:	4651      	mov	r1, sl
 800060c:	0f42      	lsrs	r2, r0, #29
 800060e:	00c9      	lsls	r1, r1, #3
 8000610:	430a      	orrs	r2, r1
 8000612:	2180      	movs	r1, #128	@ 0x80
 8000614:	0409      	lsls	r1, r1, #16
 8000616:	4311      	orrs	r1, r2
 8000618:	00c2      	lsls	r2, r0, #3
 800061a:	4691      	mov	r9, r2
 800061c:	4ab5      	ldr	r2, [pc, #724]	@ (80008f4 <__aeabi_dmul+0x318>)
 800061e:	468a      	mov	sl, r1
 8000620:	189d      	adds	r5, r3, r2
 8000622:	2300      	movs	r3, #0
 8000624:	4698      	mov	r8, r3
 8000626:	9302      	str	r3, [sp, #8]
 8000628:	033c      	lsls	r4, r7, #12
 800062a:	007b      	lsls	r3, r7, #1
 800062c:	0ffa      	lsrs	r2, r7, #31
 800062e:	0030      	movs	r0, r6
 8000630:	0b24      	lsrs	r4, r4, #12
 8000632:	0d5b      	lsrs	r3, r3, #21
 8000634:	9200      	str	r2, [sp, #0]
 8000636:	d100      	bne.n	800063a <__aeabi_dmul+0x5e>
 8000638:	e096      	b.n	8000768 <__aeabi_dmul+0x18c>
 800063a:	4aad      	ldr	r2, [pc, #692]	@ (80008f0 <__aeabi_dmul+0x314>)
 800063c:	4293      	cmp	r3, r2
 800063e:	d031      	beq.n	80006a4 <__aeabi_dmul+0xc8>
 8000640:	0f72      	lsrs	r2, r6, #29
 8000642:	00e4      	lsls	r4, r4, #3
 8000644:	4322      	orrs	r2, r4
 8000646:	2480      	movs	r4, #128	@ 0x80
 8000648:	0424      	lsls	r4, r4, #16
 800064a:	4314      	orrs	r4, r2
 800064c:	4aa9      	ldr	r2, [pc, #676]	@ (80008f4 <__aeabi_dmul+0x318>)
 800064e:	00f0      	lsls	r0, r6, #3
 8000650:	4694      	mov	ip, r2
 8000652:	4463      	add	r3, ip
 8000654:	195b      	adds	r3, r3, r5
 8000656:	1c5a      	adds	r2, r3, #1
 8000658:	9201      	str	r2, [sp, #4]
 800065a:	4642      	mov	r2, r8
 800065c:	2600      	movs	r6, #0
 800065e:	2a0a      	cmp	r2, #10
 8000660:	dc42      	bgt.n	80006e8 <__aeabi_dmul+0x10c>
 8000662:	465a      	mov	r2, fp
 8000664:	9900      	ldr	r1, [sp, #0]
 8000666:	404a      	eors	r2, r1
 8000668:	4693      	mov	fp, r2
 800066a:	4642      	mov	r2, r8
 800066c:	2a02      	cmp	r2, #2
 800066e:	dc32      	bgt.n	80006d6 <__aeabi_dmul+0xfa>
 8000670:	3a01      	subs	r2, #1
 8000672:	2a01      	cmp	r2, #1
 8000674:	d900      	bls.n	8000678 <__aeabi_dmul+0x9c>
 8000676:	e149      	b.n	800090c <__aeabi_dmul+0x330>
 8000678:	2e02      	cmp	r6, #2
 800067a:	d100      	bne.n	800067e <__aeabi_dmul+0xa2>
 800067c:	e0ca      	b.n	8000814 <__aeabi_dmul+0x238>
 800067e:	2e01      	cmp	r6, #1
 8000680:	d13d      	bne.n	80006fe <__aeabi_dmul+0x122>
 8000682:	2300      	movs	r3, #0
 8000684:	2400      	movs	r4, #0
 8000686:	2200      	movs	r2, #0
 8000688:	0010      	movs	r0, r2
 800068a:	465a      	mov	r2, fp
 800068c:	051b      	lsls	r3, r3, #20
 800068e:	4323      	orrs	r3, r4
 8000690:	07d2      	lsls	r2, r2, #31
 8000692:	4313      	orrs	r3, r2
 8000694:	0019      	movs	r1, r3
 8000696:	b007      	add	sp, #28
 8000698:	bcf0      	pop	{r4, r5, r6, r7}
 800069a:	46bb      	mov	fp, r7
 800069c:	46b2      	mov	sl, r6
 800069e:	46a9      	mov	r9, r5
 80006a0:	46a0      	mov	r8, r4
 80006a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006a4:	4b92      	ldr	r3, [pc, #584]	@ (80008f0 <__aeabi_dmul+0x314>)
 80006a6:	4326      	orrs	r6, r4
 80006a8:	18eb      	adds	r3, r5, r3
 80006aa:	2e00      	cmp	r6, #0
 80006ac:	d100      	bne.n	80006b0 <__aeabi_dmul+0xd4>
 80006ae:	e0bb      	b.n	8000828 <__aeabi_dmul+0x24c>
 80006b0:	2203      	movs	r2, #3
 80006b2:	4641      	mov	r1, r8
 80006b4:	4311      	orrs	r1, r2
 80006b6:	465a      	mov	r2, fp
 80006b8:	4688      	mov	r8, r1
 80006ba:	9900      	ldr	r1, [sp, #0]
 80006bc:	404a      	eors	r2, r1
 80006be:	2180      	movs	r1, #128	@ 0x80
 80006c0:	0109      	lsls	r1, r1, #4
 80006c2:	468c      	mov	ip, r1
 80006c4:	0029      	movs	r1, r5
 80006c6:	4461      	add	r1, ip
 80006c8:	9101      	str	r1, [sp, #4]
 80006ca:	4641      	mov	r1, r8
 80006cc:	290a      	cmp	r1, #10
 80006ce:	dd00      	ble.n	80006d2 <__aeabi_dmul+0xf6>
 80006d0:	e233      	b.n	8000b3a <__aeabi_dmul+0x55e>
 80006d2:	4693      	mov	fp, r2
 80006d4:	2603      	movs	r6, #3
 80006d6:	4642      	mov	r2, r8
 80006d8:	2701      	movs	r7, #1
 80006da:	4097      	lsls	r7, r2
 80006dc:	21a6      	movs	r1, #166	@ 0xa6
 80006de:	003a      	movs	r2, r7
 80006e0:	00c9      	lsls	r1, r1, #3
 80006e2:	400a      	ands	r2, r1
 80006e4:	420f      	tst	r7, r1
 80006e6:	d031      	beq.n	800074c <__aeabi_dmul+0x170>
 80006e8:	9e02      	ldr	r6, [sp, #8]
 80006ea:	2e02      	cmp	r6, #2
 80006ec:	d100      	bne.n	80006f0 <__aeabi_dmul+0x114>
 80006ee:	e235      	b.n	8000b5c <__aeabi_dmul+0x580>
 80006f0:	2e03      	cmp	r6, #3
 80006f2:	d100      	bne.n	80006f6 <__aeabi_dmul+0x11a>
 80006f4:	e1d2      	b.n	8000a9c <__aeabi_dmul+0x4c0>
 80006f6:	4654      	mov	r4, sl
 80006f8:	4648      	mov	r0, r9
 80006fa:	2e01      	cmp	r6, #1
 80006fc:	d0c1      	beq.n	8000682 <__aeabi_dmul+0xa6>
 80006fe:	9a01      	ldr	r2, [sp, #4]
 8000700:	4b7d      	ldr	r3, [pc, #500]	@ (80008f8 <__aeabi_dmul+0x31c>)
 8000702:	4694      	mov	ip, r2
 8000704:	4463      	add	r3, ip
 8000706:	2b00      	cmp	r3, #0
 8000708:	dc00      	bgt.n	800070c <__aeabi_dmul+0x130>
 800070a:	e0c0      	b.n	800088e <__aeabi_dmul+0x2b2>
 800070c:	0742      	lsls	r2, r0, #29
 800070e:	d009      	beq.n	8000724 <__aeabi_dmul+0x148>
 8000710:	220f      	movs	r2, #15
 8000712:	4002      	ands	r2, r0
 8000714:	2a04      	cmp	r2, #4
 8000716:	d005      	beq.n	8000724 <__aeabi_dmul+0x148>
 8000718:	1d02      	adds	r2, r0, #4
 800071a:	4282      	cmp	r2, r0
 800071c:	4180      	sbcs	r0, r0
 800071e:	4240      	negs	r0, r0
 8000720:	1824      	adds	r4, r4, r0
 8000722:	0010      	movs	r0, r2
 8000724:	01e2      	lsls	r2, r4, #7
 8000726:	d506      	bpl.n	8000736 <__aeabi_dmul+0x15a>
 8000728:	4b74      	ldr	r3, [pc, #464]	@ (80008fc <__aeabi_dmul+0x320>)
 800072a:	9a01      	ldr	r2, [sp, #4]
 800072c:	401c      	ands	r4, r3
 800072e:	2380      	movs	r3, #128	@ 0x80
 8000730:	4694      	mov	ip, r2
 8000732:	00db      	lsls	r3, r3, #3
 8000734:	4463      	add	r3, ip
 8000736:	4a72      	ldr	r2, [pc, #456]	@ (8000900 <__aeabi_dmul+0x324>)
 8000738:	4293      	cmp	r3, r2
 800073a:	dc6b      	bgt.n	8000814 <__aeabi_dmul+0x238>
 800073c:	0762      	lsls	r2, r4, #29
 800073e:	08c0      	lsrs	r0, r0, #3
 8000740:	0264      	lsls	r4, r4, #9
 8000742:	055b      	lsls	r3, r3, #21
 8000744:	4302      	orrs	r2, r0
 8000746:	0b24      	lsrs	r4, r4, #12
 8000748:	0d5b      	lsrs	r3, r3, #21
 800074a:	e79d      	b.n	8000688 <__aeabi_dmul+0xac>
 800074c:	2190      	movs	r1, #144	@ 0x90
 800074e:	0089      	lsls	r1, r1, #2
 8000750:	420f      	tst	r7, r1
 8000752:	d163      	bne.n	800081c <__aeabi_dmul+0x240>
 8000754:	2288      	movs	r2, #136	@ 0x88
 8000756:	423a      	tst	r2, r7
 8000758:	d100      	bne.n	800075c <__aeabi_dmul+0x180>
 800075a:	e0d7      	b.n	800090c <__aeabi_dmul+0x330>
 800075c:	9b00      	ldr	r3, [sp, #0]
 800075e:	46a2      	mov	sl, r4
 8000760:	469b      	mov	fp, r3
 8000762:	4681      	mov	r9, r0
 8000764:	9602      	str	r6, [sp, #8]
 8000766:	e7bf      	b.n	80006e8 <__aeabi_dmul+0x10c>
 8000768:	0023      	movs	r3, r4
 800076a:	4333      	orrs	r3, r6
 800076c:	d100      	bne.n	8000770 <__aeabi_dmul+0x194>
 800076e:	e07f      	b.n	8000870 <__aeabi_dmul+0x294>
 8000770:	2c00      	cmp	r4, #0
 8000772:	d100      	bne.n	8000776 <__aeabi_dmul+0x19a>
 8000774:	e1ad      	b.n	8000ad2 <__aeabi_dmul+0x4f6>
 8000776:	0020      	movs	r0, r4
 8000778:	f000 fa62 	bl	8000c40 <__clzsi2>
 800077c:	0002      	movs	r2, r0
 800077e:	0003      	movs	r3, r0
 8000780:	3a0b      	subs	r2, #11
 8000782:	201d      	movs	r0, #29
 8000784:	0019      	movs	r1, r3
 8000786:	1a82      	subs	r2, r0, r2
 8000788:	0030      	movs	r0, r6
 800078a:	3908      	subs	r1, #8
 800078c:	40d0      	lsrs	r0, r2
 800078e:	408c      	lsls	r4, r1
 8000790:	4304      	orrs	r4, r0
 8000792:	0030      	movs	r0, r6
 8000794:	4088      	lsls	r0, r1
 8000796:	4a5b      	ldr	r2, [pc, #364]	@ (8000904 <__aeabi_dmul+0x328>)
 8000798:	1aeb      	subs	r3, r5, r3
 800079a:	4694      	mov	ip, r2
 800079c:	4463      	add	r3, ip
 800079e:	1c5a      	adds	r2, r3, #1
 80007a0:	9201      	str	r2, [sp, #4]
 80007a2:	4642      	mov	r2, r8
 80007a4:	2600      	movs	r6, #0
 80007a6:	2a0a      	cmp	r2, #10
 80007a8:	dc00      	bgt.n	80007ac <__aeabi_dmul+0x1d0>
 80007aa:	e75a      	b.n	8000662 <__aeabi_dmul+0x86>
 80007ac:	e79c      	b.n	80006e8 <__aeabi_dmul+0x10c>
 80007ae:	4653      	mov	r3, sl
 80007b0:	4303      	orrs	r3, r0
 80007b2:	4699      	mov	r9, r3
 80007b4:	d054      	beq.n	8000860 <__aeabi_dmul+0x284>
 80007b6:	4653      	mov	r3, sl
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d100      	bne.n	80007be <__aeabi_dmul+0x1e2>
 80007bc:	e177      	b.n	8000aae <__aeabi_dmul+0x4d2>
 80007be:	4650      	mov	r0, sl
 80007c0:	f000 fa3e 	bl	8000c40 <__clzsi2>
 80007c4:	230b      	movs	r3, #11
 80007c6:	425b      	negs	r3, r3
 80007c8:	469c      	mov	ip, r3
 80007ca:	0002      	movs	r2, r0
 80007cc:	4484      	add	ip, r0
 80007ce:	0011      	movs	r1, r2
 80007d0:	4650      	mov	r0, sl
 80007d2:	3908      	subs	r1, #8
 80007d4:	4088      	lsls	r0, r1
 80007d6:	231d      	movs	r3, #29
 80007d8:	4680      	mov	r8, r0
 80007da:	4660      	mov	r0, ip
 80007dc:	1a1b      	subs	r3, r3, r0
 80007de:	0020      	movs	r0, r4
 80007e0:	40d8      	lsrs	r0, r3
 80007e2:	0003      	movs	r3, r0
 80007e4:	4640      	mov	r0, r8
 80007e6:	4303      	orrs	r3, r0
 80007e8:	469a      	mov	sl, r3
 80007ea:	0023      	movs	r3, r4
 80007ec:	408b      	lsls	r3, r1
 80007ee:	4699      	mov	r9, r3
 80007f0:	2300      	movs	r3, #0
 80007f2:	4d44      	ldr	r5, [pc, #272]	@ (8000904 <__aeabi_dmul+0x328>)
 80007f4:	4698      	mov	r8, r3
 80007f6:	1aad      	subs	r5, r5, r2
 80007f8:	9302      	str	r3, [sp, #8]
 80007fa:	e715      	b.n	8000628 <__aeabi_dmul+0x4c>
 80007fc:	4652      	mov	r2, sl
 80007fe:	4302      	orrs	r2, r0
 8000800:	4691      	mov	r9, r2
 8000802:	d126      	bne.n	8000852 <__aeabi_dmul+0x276>
 8000804:	2200      	movs	r2, #0
 8000806:	001d      	movs	r5, r3
 8000808:	2302      	movs	r3, #2
 800080a:	4692      	mov	sl, r2
 800080c:	3208      	adds	r2, #8
 800080e:	4690      	mov	r8, r2
 8000810:	9302      	str	r3, [sp, #8]
 8000812:	e709      	b.n	8000628 <__aeabi_dmul+0x4c>
 8000814:	2400      	movs	r4, #0
 8000816:	2200      	movs	r2, #0
 8000818:	4b35      	ldr	r3, [pc, #212]	@ (80008f0 <__aeabi_dmul+0x314>)
 800081a:	e735      	b.n	8000688 <__aeabi_dmul+0xac>
 800081c:	2300      	movs	r3, #0
 800081e:	2480      	movs	r4, #128	@ 0x80
 8000820:	469b      	mov	fp, r3
 8000822:	0324      	lsls	r4, r4, #12
 8000824:	4b32      	ldr	r3, [pc, #200]	@ (80008f0 <__aeabi_dmul+0x314>)
 8000826:	e72f      	b.n	8000688 <__aeabi_dmul+0xac>
 8000828:	2202      	movs	r2, #2
 800082a:	4641      	mov	r1, r8
 800082c:	4311      	orrs	r1, r2
 800082e:	2280      	movs	r2, #128	@ 0x80
 8000830:	0112      	lsls	r2, r2, #4
 8000832:	4694      	mov	ip, r2
 8000834:	002a      	movs	r2, r5
 8000836:	4462      	add	r2, ip
 8000838:	4688      	mov	r8, r1
 800083a:	9201      	str	r2, [sp, #4]
 800083c:	290a      	cmp	r1, #10
 800083e:	dd00      	ble.n	8000842 <__aeabi_dmul+0x266>
 8000840:	e752      	b.n	80006e8 <__aeabi_dmul+0x10c>
 8000842:	465a      	mov	r2, fp
 8000844:	2000      	movs	r0, #0
 8000846:	9900      	ldr	r1, [sp, #0]
 8000848:	0004      	movs	r4, r0
 800084a:	404a      	eors	r2, r1
 800084c:	4693      	mov	fp, r2
 800084e:	2602      	movs	r6, #2
 8000850:	e70b      	b.n	800066a <__aeabi_dmul+0x8e>
 8000852:	220c      	movs	r2, #12
 8000854:	001d      	movs	r5, r3
 8000856:	2303      	movs	r3, #3
 8000858:	4681      	mov	r9, r0
 800085a:	4690      	mov	r8, r2
 800085c:	9302      	str	r3, [sp, #8]
 800085e:	e6e3      	b.n	8000628 <__aeabi_dmul+0x4c>
 8000860:	2300      	movs	r3, #0
 8000862:	469a      	mov	sl, r3
 8000864:	3304      	adds	r3, #4
 8000866:	4698      	mov	r8, r3
 8000868:	3b03      	subs	r3, #3
 800086a:	2500      	movs	r5, #0
 800086c:	9302      	str	r3, [sp, #8]
 800086e:	e6db      	b.n	8000628 <__aeabi_dmul+0x4c>
 8000870:	4642      	mov	r2, r8
 8000872:	3301      	adds	r3, #1
 8000874:	431a      	orrs	r2, r3
 8000876:	002b      	movs	r3, r5
 8000878:	4690      	mov	r8, r2
 800087a:	1c5a      	adds	r2, r3, #1
 800087c:	9201      	str	r2, [sp, #4]
 800087e:	4642      	mov	r2, r8
 8000880:	2400      	movs	r4, #0
 8000882:	2000      	movs	r0, #0
 8000884:	2601      	movs	r6, #1
 8000886:	2a0a      	cmp	r2, #10
 8000888:	dc00      	bgt.n	800088c <__aeabi_dmul+0x2b0>
 800088a:	e6ea      	b.n	8000662 <__aeabi_dmul+0x86>
 800088c:	e72c      	b.n	80006e8 <__aeabi_dmul+0x10c>
 800088e:	2201      	movs	r2, #1
 8000890:	1ad2      	subs	r2, r2, r3
 8000892:	2a38      	cmp	r2, #56	@ 0x38
 8000894:	dd00      	ble.n	8000898 <__aeabi_dmul+0x2bc>
 8000896:	e6f4      	b.n	8000682 <__aeabi_dmul+0xa6>
 8000898:	2a1f      	cmp	r2, #31
 800089a:	dc00      	bgt.n	800089e <__aeabi_dmul+0x2c2>
 800089c:	e12a      	b.n	8000af4 <__aeabi_dmul+0x518>
 800089e:	211f      	movs	r1, #31
 80008a0:	4249      	negs	r1, r1
 80008a2:	1acb      	subs	r3, r1, r3
 80008a4:	0021      	movs	r1, r4
 80008a6:	40d9      	lsrs	r1, r3
 80008a8:	000b      	movs	r3, r1
 80008aa:	2a20      	cmp	r2, #32
 80008ac:	d005      	beq.n	80008ba <__aeabi_dmul+0x2de>
 80008ae:	4a16      	ldr	r2, [pc, #88]	@ (8000908 <__aeabi_dmul+0x32c>)
 80008b0:	9d01      	ldr	r5, [sp, #4]
 80008b2:	4694      	mov	ip, r2
 80008b4:	4465      	add	r5, ip
 80008b6:	40ac      	lsls	r4, r5
 80008b8:	4320      	orrs	r0, r4
 80008ba:	1e42      	subs	r2, r0, #1
 80008bc:	4190      	sbcs	r0, r2
 80008be:	4318      	orrs	r0, r3
 80008c0:	2307      	movs	r3, #7
 80008c2:	0019      	movs	r1, r3
 80008c4:	2400      	movs	r4, #0
 80008c6:	4001      	ands	r1, r0
 80008c8:	4203      	tst	r3, r0
 80008ca:	d00c      	beq.n	80008e6 <__aeabi_dmul+0x30a>
 80008cc:	230f      	movs	r3, #15
 80008ce:	4003      	ands	r3, r0
 80008d0:	2b04      	cmp	r3, #4
 80008d2:	d100      	bne.n	80008d6 <__aeabi_dmul+0x2fa>
 80008d4:	e140      	b.n	8000b58 <__aeabi_dmul+0x57c>
 80008d6:	1d03      	adds	r3, r0, #4
 80008d8:	4283      	cmp	r3, r0
 80008da:	41a4      	sbcs	r4, r4
 80008dc:	0018      	movs	r0, r3
 80008de:	4264      	negs	r4, r4
 80008e0:	0761      	lsls	r1, r4, #29
 80008e2:	0264      	lsls	r4, r4, #9
 80008e4:	0b24      	lsrs	r4, r4, #12
 80008e6:	08c2      	lsrs	r2, r0, #3
 80008e8:	2300      	movs	r3, #0
 80008ea:	430a      	orrs	r2, r1
 80008ec:	e6cc      	b.n	8000688 <__aeabi_dmul+0xac>
 80008ee:	46c0      	nop			@ (mov r8, r8)
 80008f0:	000007ff 	.word	0x000007ff
 80008f4:	fffffc01 	.word	0xfffffc01
 80008f8:	000003ff 	.word	0x000003ff
 80008fc:	feffffff 	.word	0xfeffffff
 8000900:	000007fe 	.word	0x000007fe
 8000904:	fffffc0d 	.word	0xfffffc0d
 8000908:	0000043e 	.word	0x0000043e
 800090c:	4649      	mov	r1, r9
 800090e:	464a      	mov	r2, r9
 8000910:	0409      	lsls	r1, r1, #16
 8000912:	0c09      	lsrs	r1, r1, #16
 8000914:	000d      	movs	r5, r1
 8000916:	0c16      	lsrs	r6, r2, #16
 8000918:	0c02      	lsrs	r2, r0, #16
 800091a:	0400      	lsls	r0, r0, #16
 800091c:	0c00      	lsrs	r0, r0, #16
 800091e:	4345      	muls	r5, r0
 8000920:	46ac      	mov	ip, r5
 8000922:	0005      	movs	r5, r0
 8000924:	4375      	muls	r5, r6
 8000926:	46a8      	mov	r8, r5
 8000928:	0015      	movs	r5, r2
 800092a:	000f      	movs	r7, r1
 800092c:	4375      	muls	r5, r6
 800092e:	9200      	str	r2, [sp, #0]
 8000930:	9502      	str	r5, [sp, #8]
 8000932:	002a      	movs	r2, r5
 8000934:	9d00      	ldr	r5, [sp, #0]
 8000936:	436f      	muls	r7, r5
 8000938:	4665      	mov	r5, ip
 800093a:	0c2d      	lsrs	r5, r5, #16
 800093c:	46a9      	mov	r9, r5
 800093e:	4447      	add	r7, r8
 8000940:	444f      	add	r7, r9
 8000942:	45b8      	cmp	r8, r7
 8000944:	d905      	bls.n	8000952 <__aeabi_dmul+0x376>
 8000946:	0015      	movs	r5, r2
 8000948:	2280      	movs	r2, #128	@ 0x80
 800094a:	0252      	lsls	r2, r2, #9
 800094c:	4690      	mov	r8, r2
 800094e:	4445      	add	r5, r8
 8000950:	9502      	str	r5, [sp, #8]
 8000952:	0c3d      	lsrs	r5, r7, #16
 8000954:	9503      	str	r5, [sp, #12]
 8000956:	4665      	mov	r5, ip
 8000958:	042d      	lsls	r5, r5, #16
 800095a:	043f      	lsls	r7, r7, #16
 800095c:	0c2d      	lsrs	r5, r5, #16
 800095e:	46ac      	mov	ip, r5
 8000960:	003d      	movs	r5, r7
 8000962:	4465      	add	r5, ip
 8000964:	9504      	str	r5, [sp, #16]
 8000966:	0c25      	lsrs	r5, r4, #16
 8000968:	0424      	lsls	r4, r4, #16
 800096a:	0c24      	lsrs	r4, r4, #16
 800096c:	46ac      	mov	ip, r5
 800096e:	0025      	movs	r5, r4
 8000970:	4375      	muls	r5, r6
 8000972:	46a8      	mov	r8, r5
 8000974:	4665      	mov	r5, ip
 8000976:	000f      	movs	r7, r1
 8000978:	4369      	muls	r1, r5
 800097a:	4441      	add	r1, r8
 800097c:	4689      	mov	r9, r1
 800097e:	4367      	muls	r7, r4
 8000980:	0c39      	lsrs	r1, r7, #16
 8000982:	4449      	add	r1, r9
 8000984:	436e      	muls	r6, r5
 8000986:	4588      	cmp	r8, r1
 8000988:	d903      	bls.n	8000992 <__aeabi_dmul+0x3b6>
 800098a:	2280      	movs	r2, #128	@ 0x80
 800098c:	0252      	lsls	r2, r2, #9
 800098e:	4690      	mov	r8, r2
 8000990:	4446      	add	r6, r8
 8000992:	0c0d      	lsrs	r5, r1, #16
 8000994:	46a8      	mov	r8, r5
 8000996:	0035      	movs	r5, r6
 8000998:	4445      	add	r5, r8
 800099a:	9505      	str	r5, [sp, #20]
 800099c:	9d03      	ldr	r5, [sp, #12]
 800099e:	043f      	lsls	r7, r7, #16
 80009a0:	46a8      	mov	r8, r5
 80009a2:	0c3f      	lsrs	r7, r7, #16
 80009a4:	0409      	lsls	r1, r1, #16
 80009a6:	19c9      	adds	r1, r1, r7
 80009a8:	4488      	add	r8, r1
 80009aa:	4645      	mov	r5, r8
 80009ac:	9503      	str	r5, [sp, #12]
 80009ae:	4655      	mov	r5, sl
 80009b0:	042e      	lsls	r6, r5, #16
 80009b2:	0c36      	lsrs	r6, r6, #16
 80009b4:	0c2f      	lsrs	r7, r5, #16
 80009b6:	0035      	movs	r5, r6
 80009b8:	4345      	muls	r5, r0
 80009ba:	4378      	muls	r0, r7
 80009bc:	4681      	mov	r9, r0
 80009be:	0038      	movs	r0, r7
 80009c0:	46a8      	mov	r8, r5
 80009c2:	0c2d      	lsrs	r5, r5, #16
 80009c4:	46aa      	mov	sl, r5
 80009c6:	9a00      	ldr	r2, [sp, #0]
 80009c8:	4350      	muls	r0, r2
 80009ca:	4372      	muls	r2, r6
 80009cc:	444a      	add	r2, r9
 80009ce:	4452      	add	r2, sl
 80009d0:	4591      	cmp	r9, r2
 80009d2:	d903      	bls.n	80009dc <__aeabi_dmul+0x400>
 80009d4:	2580      	movs	r5, #128	@ 0x80
 80009d6:	026d      	lsls	r5, r5, #9
 80009d8:	46a9      	mov	r9, r5
 80009da:	4448      	add	r0, r9
 80009dc:	0c15      	lsrs	r5, r2, #16
 80009de:	46a9      	mov	r9, r5
 80009e0:	4645      	mov	r5, r8
 80009e2:	042d      	lsls	r5, r5, #16
 80009e4:	0c2d      	lsrs	r5, r5, #16
 80009e6:	46a8      	mov	r8, r5
 80009e8:	4665      	mov	r5, ip
 80009ea:	437d      	muls	r5, r7
 80009ec:	0412      	lsls	r2, r2, #16
 80009ee:	4448      	add	r0, r9
 80009f0:	4490      	add	r8, r2
 80009f2:	46a9      	mov	r9, r5
 80009f4:	0032      	movs	r2, r6
 80009f6:	4665      	mov	r5, ip
 80009f8:	4362      	muls	r2, r4
 80009fa:	436e      	muls	r6, r5
 80009fc:	437c      	muls	r4, r7
 80009fe:	0c17      	lsrs	r7, r2, #16
 8000a00:	1936      	adds	r6, r6, r4
 8000a02:	19bf      	adds	r7, r7, r6
 8000a04:	42bc      	cmp	r4, r7
 8000a06:	d903      	bls.n	8000a10 <__aeabi_dmul+0x434>
 8000a08:	2480      	movs	r4, #128	@ 0x80
 8000a0a:	0264      	lsls	r4, r4, #9
 8000a0c:	46a4      	mov	ip, r4
 8000a0e:	44e1      	add	r9, ip
 8000a10:	9c02      	ldr	r4, [sp, #8]
 8000a12:	9e03      	ldr	r6, [sp, #12]
 8000a14:	46a4      	mov	ip, r4
 8000a16:	9d05      	ldr	r5, [sp, #20]
 8000a18:	4466      	add	r6, ip
 8000a1a:	428e      	cmp	r6, r1
 8000a1c:	4189      	sbcs	r1, r1
 8000a1e:	46ac      	mov	ip, r5
 8000a20:	0412      	lsls	r2, r2, #16
 8000a22:	043c      	lsls	r4, r7, #16
 8000a24:	0c12      	lsrs	r2, r2, #16
 8000a26:	18a2      	adds	r2, r4, r2
 8000a28:	4462      	add	r2, ip
 8000a2a:	4249      	negs	r1, r1
 8000a2c:	1854      	adds	r4, r2, r1
 8000a2e:	4446      	add	r6, r8
 8000a30:	46a4      	mov	ip, r4
 8000a32:	4546      	cmp	r6, r8
 8000a34:	41a4      	sbcs	r4, r4
 8000a36:	4682      	mov	sl, r0
 8000a38:	4264      	negs	r4, r4
 8000a3a:	46a0      	mov	r8, r4
 8000a3c:	42aa      	cmp	r2, r5
 8000a3e:	4192      	sbcs	r2, r2
 8000a40:	458c      	cmp	ip, r1
 8000a42:	4189      	sbcs	r1, r1
 8000a44:	44e2      	add	sl, ip
 8000a46:	44d0      	add	r8, sl
 8000a48:	4249      	negs	r1, r1
 8000a4a:	4252      	negs	r2, r2
 8000a4c:	430a      	orrs	r2, r1
 8000a4e:	45a0      	cmp	r8, r4
 8000a50:	41a4      	sbcs	r4, r4
 8000a52:	4582      	cmp	sl, r0
 8000a54:	4189      	sbcs	r1, r1
 8000a56:	4264      	negs	r4, r4
 8000a58:	4249      	negs	r1, r1
 8000a5a:	430c      	orrs	r4, r1
 8000a5c:	4641      	mov	r1, r8
 8000a5e:	0c3f      	lsrs	r7, r7, #16
 8000a60:	19d2      	adds	r2, r2, r7
 8000a62:	1912      	adds	r2, r2, r4
 8000a64:	0dcc      	lsrs	r4, r1, #23
 8000a66:	9904      	ldr	r1, [sp, #16]
 8000a68:	0270      	lsls	r0, r6, #9
 8000a6a:	4308      	orrs	r0, r1
 8000a6c:	1e41      	subs	r1, r0, #1
 8000a6e:	4188      	sbcs	r0, r1
 8000a70:	4641      	mov	r1, r8
 8000a72:	444a      	add	r2, r9
 8000a74:	0df6      	lsrs	r6, r6, #23
 8000a76:	0252      	lsls	r2, r2, #9
 8000a78:	4330      	orrs	r0, r6
 8000a7a:	0249      	lsls	r1, r1, #9
 8000a7c:	4314      	orrs	r4, r2
 8000a7e:	4308      	orrs	r0, r1
 8000a80:	01d2      	lsls	r2, r2, #7
 8000a82:	d535      	bpl.n	8000af0 <__aeabi_dmul+0x514>
 8000a84:	2201      	movs	r2, #1
 8000a86:	0843      	lsrs	r3, r0, #1
 8000a88:	4002      	ands	r2, r0
 8000a8a:	4313      	orrs	r3, r2
 8000a8c:	07e0      	lsls	r0, r4, #31
 8000a8e:	4318      	orrs	r0, r3
 8000a90:	0864      	lsrs	r4, r4, #1
 8000a92:	e634      	b.n	80006fe <__aeabi_dmul+0x122>
 8000a94:	9b00      	ldr	r3, [sp, #0]
 8000a96:	46a2      	mov	sl, r4
 8000a98:	469b      	mov	fp, r3
 8000a9a:	4681      	mov	r9, r0
 8000a9c:	2480      	movs	r4, #128	@ 0x80
 8000a9e:	4653      	mov	r3, sl
 8000aa0:	0324      	lsls	r4, r4, #12
 8000aa2:	431c      	orrs	r4, r3
 8000aa4:	0324      	lsls	r4, r4, #12
 8000aa6:	464a      	mov	r2, r9
 8000aa8:	4b2e      	ldr	r3, [pc, #184]	@ (8000b64 <__aeabi_dmul+0x588>)
 8000aaa:	0b24      	lsrs	r4, r4, #12
 8000aac:	e5ec      	b.n	8000688 <__aeabi_dmul+0xac>
 8000aae:	f000 f8c7 	bl	8000c40 <__clzsi2>
 8000ab2:	2315      	movs	r3, #21
 8000ab4:	469c      	mov	ip, r3
 8000ab6:	4484      	add	ip, r0
 8000ab8:	0002      	movs	r2, r0
 8000aba:	4663      	mov	r3, ip
 8000abc:	3220      	adds	r2, #32
 8000abe:	2b1c      	cmp	r3, #28
 8000ac0:	dc00      	bgt.n	8000ac4 <__aeabi_dmul+0x4e8>
 8000ac2:	e684      	b.n	80007ce <__aeabi_dmul+0x1f2>
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	4699      	mov	r9, r3
 8000ac8:	0023      	movs	r3, r4
 8000aca:	3808      	subs	r0, #8
 8000acc:	4083      	lsls	r3, r0
 8000ace:	469a      	mov	sl, r3
 8000ad0:	e68e      	b.n	80007f0 <__aeabi_dmul+0x214>
 8000ad2:	f000 f8b5 	bl	8000c40 <__clzsi2>
 8000ad6:	0002      	movs	r2, r0
 8000ad8:	0003      	movs	r3, r0
 8000ada:	3215      	adds	r2, #21
 8000adc:	3320      	adds	r3, #32
 8000ade:	2a1c      	cmp	r2, #28
 8000ae0:	dc00      	bgt.n	8000ae4 <__aeabi_dmul+0x508>
 8000ae2:	e64e      	b.n	8000782 <__aeabi_dmul+0x1a6>
 8000ae4:	0002      	movs	r2, r0
 8000ae6:	0034      	movs	r4, r6
 8000ae8:	3a08      	subs	r2, #8
 8000aea:	2000      	movs	r0, #0
 8000aec:	4094      	lsls	r4, r2
 8000aee:	e652      	b.n	8000796 <__aeabi_dmul+0x1ba>
 8000af0:	9301      	str	r3, [sp, #4]
 8000af2:	e604      	b.n	80006fe <__aeabi_dmul+0x122>
 8000af4:	4b1c      	ldr	r3, [pc, #112]	@ (8000b68 <__aeabi_dmul+0x58c>)
 8000af6:	0021      	movs	r1, r4
 8000af8:	469c      	mov	ip, r3
 8000afa:	0003      	movs	r3, r0
 8000afc:	9d01      	ldr	r5, [sp, #4]
 8000afe:	40d3      	lsrs	r3, r2
 8000b00:	4465      	add	r5, ip
 8000b02:	40a9      	lsls	r1, r5
 8000b04:	4319      	orrs	r1, r3
 8000b06:	0003      	movs	r3, r0
 8000b08:	40ab      	lsls	r3, r5
 8000b0a:	1e58      	subs	r0, r3, #1
 8000b0c:	4183      	sbcs	r3, r0
 8000b0e:	4319      	orrs	r1, r3
 8000b10:	0008      	movs	r0, r1
 8000b12:	40d4      	lsrs	r4, r2
 8000b14:	074b      	lsls	r3, r1, #29
 8000b16:	d009      	beq.n	8000b2c <__aeabi_dmul+0x550>
 8000b18:	230f      	movs	r3, #15
 8000b1a:	400b      	ands	r3, r1
 8000b1c:	2b04      	cmp	r3, #4
 8000b1e:	d005      	beq.n	8000b2c <__aeabi_dmul+0x550>
 8000b20:	1d0b      	adds	r3, r1, #4
 8000b22:	428b      	cmp	r3, r1
 8000b24:	4180      	sbcs	r0, r0
 8000b26:	4240      	negs	r0, r0
 8000b28:	1824      	adds	r4, r4, r0
 8000b2a:	0018      	movs	r0, r3
 8000b2c:	0223      	lsls	r3, r4, #8
 8000b2e:	d400      	bmi.n	8000b32 <__aeabi_dmul+0x556>
 8000b30:	e6d6      	b.n	80008e0 <__aeabi_dmul+0x304>
 8000b32:	2301      	movs	r3, #1
 8000b34:	2400      	movs	r4, #0
 8000b36:	2200      	movs	r2, #0
 8000b38:	e5a6      	b.n	8000688 <__aeabi_dmul+0xac>
 8000b3a:	290f      	cmp	r1, #15
 8000b3c:	d1aa      	bne.n	8000a94 <__aeabi_dmul+0x4b8>
 8000b3e:	2380      	movs	r3, #128	@ 0x80
 8000b40:	4652      	mov	r2, sl
 8000b42:	031b      	lsls	r3, r3, #12
 8000b44:	421a      	tst	r2, r3
 8000b46:	d0a9      	beq.n	8000a9c <__aeabi_dmul+0x4c0>
 8000b48:	421c      	tst	r4, r3
 8000b4a:	d1a7      	bne.n	8000a9c <__aeabi_dmul+0x4c0>
 8000b4c:	431c      	orrs	r4, r3
 8000b4e:	9b00      	ldr	r3, [sp, #0]
 8000b50:	0002      	movs	r2, r0
 8000b52:	469b      	mov	fp, r3
 8000b54:	4b03      	ldr	r3, [pc, #12]	@ (8000b64 <__aeabi_dmul+0x588>)
 8000b56:	e597      	b.n	8000688 <__aeabi_dmul+0xac>
 8000b58:	2400      	movs	r4, #0
 8000b5a:	e6c1      	b.n	80008e0 <__aeabi_dmul+0x304>
 8000b5c:	2400      	movs	r4, #0
 8000b5e:	4b01      	ldr	r3, [pc, #4]	@ (8000b64 <__aeabi_dmul+0x588>)
 8000b60:	0022      	movs	r2, r4
 8000b62:	e591      	b.n	8000688 <__aeabi_dmul+0xac>
 8000b64:	000007ff 	.word	0x000007ff
 8000b68:	0000041e 	.word	0x0000041e

08000b6c <__aeabi_d2iz>:
 8000b6c:	000b      	movs	r3, r1
 8000b6e:	0002      	movs	r2, r0
 8000b70:	b570      	push	{r4, r5, r6, lr}
 8000b72:	4d16      	ldr	r5, [pc, #88]	@ (8000bcc <__aeabi_d2iz+0x60>)
 8000b74:	030c      	lsls	r4, r1, #12
 8000b76:	b082      	sub	sp, #8
 8000b78:	0049      	lsls	r1, r1, #1
 8000b7a:	2000      	movs	r0, #0
 8000b7c:	9200      	str	r2, [sp, #0]
 8000b7e:	9301      	str	r3, [sp, #4]
 8000b80:	0b24      	lsrs	r4, r4, #12
 8000b82:	0d49      	lsrs	r1, r1, #21
 8000b84:	0fde      	lsrs	r6, r3, #31
 8000b86:	42a9      	cmp	r1, r5
 8000b88:	dd04      	ble.n	8000b94 <__aeabi_d2iz+0x28>
 8000b8a:	4811      	ldr	r0, [pc, #68]	@ (8000bd0 <__aeabi_d2iz+0x64>)
 8000b8c:	4281      	cmp	r1, r0
 8000b8e:	dd03      	ble.n	8000b98 <__aeabi_d2iz+0x2c>
 8000b90:	4b10      	ldr	r3, [pc, #64]	@ (8000bd4 <__aeabi_d2iz+0x68>)
 8000b92:	18f0      	adds	r0, r6, r3
 8000b94:	b002      	add	sp, #8
 8000b96:	bd70      	pop	{r4, r5, r6, pc}
 8000b98:	2080      	movs	r0, #128	@ 0x80
 8000b9a:	0340      	lsls	r0, r0, #13
 8000b9c:	4320      	orrs	r0, r4
 8000b9e:	4c0e      	ldr	r4, [pc, #56]	@ (8000bd8 <__aeabi_d2iz+0x6c>)
 8000ba0:	1a64      	subs	r4, r4, r1
 8000ba2:	2c1f      	cmp	r4, #31
 8000ba4:	dd08      	ble.n	8000bb8 <__aeabi_d2iz+0x4c>
 8000ba6:	4b0d      	ldr	r3, [pc, #52]	@ (8000bdc <__aeabi_d2iz+0x70>)
 8000ba8:	1a5b      	subs	r3, r3, r1
 8000baa:	40d8      	lsrs	r0, r3
 8000bac:	0003      	movs	r3, r0
 8000bae:	4258      	negs	r0, r3
 8000bb0:	2e00      	cmp	r6, #0
 8000bb2:	d1ef      	bne.n	8000b94 <__aeabi_d2iz+0x28>
 8000bb4:	0018      	movs	r0, r3
 8000bb6:	e7ed      	b.n	8000b94 <__aeabi_d2iz+0x28>
 8000bb8:	4b09      	ldr	r3, [pc, #36]	@ (8000be0 <__aeabi_d2iz+0x74>)
 8000bba:	9a00      	ldr	r2, [sp, #0]
 8000bbc:	469c      	mov	ip, r3
 8000bbe:	0003      	movs	r3, r0
 8000bc0:	4461      	add	r1, ip
 8000bc2:	408b      	lsls	r3, r1
 8000bc4:	40e2      	lsrs	r2, r4
 8000bc6:	4313      	orrs	r3, r2
 8000bc8:	e7f1      	b.n	8000bae <__aeabi_d2iz+0x42>
 8000bca:	46c0      	nop			@ (mov r8, r8)
 8000bcc:	000003fe 	.word	0x000003fe
 8000bd0:	0000041d 	.word	0x0000041d
 8000bd4:	7fffffff 	.word	0x7fffffff
 8000bd8:	00000433 	.word	0x00000433
 8000bdc:	00000413 	.word	0x00000413
 8000be0:	fffffbed 	.word	0xfffffbed

08000be4 <__aeabi_i2d>:
 8000be4:	b570      	push	{r4, r5, r6, lr}
 8000be6:	2800      	cmp	r0, #0
 8000be8:	d016      	beq.n	8000c18 <__aeabi_i2d+0x34>
 8000bea:	17c3      	asrs	r3, r0, #31
 8000bec:	18c5      	adds	r5, r0, r3
 8000bee:	405d      	eors	r5, r3
 8000bf0:	0fc4      	lsrs	r4, r0, #31
 8000bf2:	0028      	movs	r0, r5
 8000bf4:	f000 f824 	bl	8000c40 <__clzsi2>
 8000bf8:	4b10      	ldr	r3, [pc, #64]	@ (8000c3c <__aeabi_i2d+0x58>)
 8000bfa:	1a1b      	subs	r3, r3, r0
 8000bfc:	055b      	lsls	r3, r3, #21
 8000bfe:	0d5b      	lsrs	r3, r3, #21
 8000c00:	280a      	cmp	r0, #10
 8000c02:	dc14      	bgt.n	8000c2e <__aeabi_i2d+0x4a>
 8000c04:	0002      	movs	r2, r0
 8000c06:	002e      	movs	r6, r5
 8000c08:	3215      	adds	r2, #21
 8000c0a:	4096      	lsls	r6, r2
 8000c0c:	220b      	movs	r2, #11
 8000c0e:	1a12      	subs	r2, r2, r0
 8000c10:	40d5      	lsrs	r5, r2
 8000c12:	032d      	lsls	r5, r5, #12
 8000c14:	0b2d      	lsrs	r5, r5, #12
 8000c16:	e003      	b.n	8000c20 <__aeabi_i2d+0x3c>
 8000c18:	2400      	movs	r4, #0
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	2500      	movs	r5, #0
 8000c1e:	2600      	movs	r6, #0
 8000c20:	051b      	lsls	r3, r3, #20
 8000c22:	432b      	orrs	r3, r5
 8000c24:	07e4      	lsls	r4, r4, #31
 8000c26:	4323      	orrs	r3, r4
 8000c28:	0030      	movs	r0, r6
 8000c2a:	0019      	movs	r1, r3
 8000c2c:	bd70      	pop	{r4, r5, r6, pc}
 8000c2e:	380b      	subs	r0, #11
 8000c30:	4085      	lsls	r5, r0
 8000c32:	032d      	lsls	r5, r5, #12
 8000c34:	2600      	movs	r6, #0
 8000c36:	0b2d      	lsrs	r5, r5, #12
 8000c38:	e7f2      	b.n	8000c20 <__aeabi_i2d+0x3c>
 8000c3a:	46c0      	nop			@ (mov r8, r8)
 8000c3c:	0000041e 	.word	0x0000041e

08000c40 <__clzsi2>:
 8000c40:	211c      	movs	r1, #28
 8000c42:	2301      	movs	r3, #1
 8000c44:	041b      	lsls	r3, r3, #16
 8000c46:	4298      	cmp	r0, r3
 8000c48:	d301      	bcc.n	8000c4e <__clzsi2+0xe>
 8000c4a:	0c00      	lsrs	r0, r0, #16
 8000c4c:	3910      	subs	r1, #16
 8000c4e:	0a1b      	lsrs	r3, r3, #8
 8000c50:	4298      	cmp	r0, r3
 8000c52:	d301      	bcc.n	8000c58 <__clzsi2+0x18>
 8000c54:	0a00      	lsrs	r0, r0, #8
 8000c56:	3908      	subs	r1, #8
 8000c58:	091b      	lsrs	r3, r3, #4
 8000c5a:	4298      	cmp	r0, r3
 8000c5c:	d301      	bcc.n	8000c62 <__clzsi2+0x22>
 8000c5e:	0900      	lsrs	r0, r0, #4
 8000c60:	3904      	subs	r1, #4
 8000c62:	a202      	add	r2, pc, #8	@ (adr r2, 8000c6c <__clzsi2+0x2c>)
 8000c64:	5c10      	ldrb	r0, [r2, r0]
 8000c66:	1840      	adds	r0, r0, r1
 8000c68:	4770      	bx	lr
 8000c6a:	46c0      	nop			@ (mov r8, r8)
 8000c6c:	02020304 	.word	0x02020304
 8000c70:	01010101 	.word	0x01010101
	...

08000c7c <__clzdi2>:
 8000c7c:	b510      	push	{r4, lr}
 8000c7e:	2900      	cmp	r1, #0
 8000c80:	d103      	bne.n	8000c8a <__clzdi2+0xe>
 8000c82:	f7ff ffdd 	bl	8000c40 <__clzsi2>
 8000c86:	3020      	adds	r0, #32
 8000c88:	e002      	b.n	8000c90 <__clzdi2+0x14>
 8000c8a:	0008      	movs	r0, r1
 8000c8c:	f7ff ffd8 	bl	8000c40 <__clzsi2>
 8000c90:	bd10      	pop	{r4, pc}
 8000c92:	46c0      	nop			@ (mov r8, r8)

08000c94 <_write>:
static void MX_DMA_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_FDCAN1_Init(void);
static void MX_USART1_UART_Init(void);

int _write(int file, char *ptr, int len) {
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b084      	sub	sp, #16
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	60f8      	str	r0, [r7, #12]
 8000c9c:	60b9      	str	r1, [r7, #8]
 8000c9e:	607a      	str	r2, [r7, #4]
    if (HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY) == HAL_OK) {
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	b29a      	uxth	r2, r3
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	425b      	negs	r3, r3
 8000ca8:	68b9      	ldr	r1, [r7, #8]
 8000caa:	4806      	ldr	r0, [pc, #24]	@ (8000cc4 <_write+0x30>)
 8000cac:	f003 fa7c 	bl	80041a8 <HAL_UART_Transmit>
 8000cb0:	1e03      	subs	r3, r0, #0
 8000cb2:	d101      	bne.n	8000cb8 <_write+0x24>
        return len;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	e000      	b.n	8000cba <_write+0x26>
    }
    return 0;
 8000cb8:	2300      	movs	r3, #0
}
 8000cba:	0018      	movs	r0, r3
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	b004      	add	sp, #16
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	46c0      	nop			@ (mov r8, r8)
 8000cc4:	20000230 	.word	0x20000230

08000cc8 <main>:


int main(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  HAL_Init();
 8000ccc:	f000 feea 	bl	8001aa4 <HAL_Init>
  SystemClock_Config();
 8000cd0:	f000 fa30 	bl	8001134 <SystemClock_Config>
  MX_GPIO_Init();
 8000cd4:	f000 fb92 	bl	80013fc <MX_GPIO_Init>
  MX_DMA_Init();
 8000cd8:	f000 fb62 	bl	80013a0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000cdc:	f000 fb12 	bl	8001304 <MX_USART2_UART_Init>
  MX_FDCAN1_Init();
 8000ce0:	f000 fa70 	bl	80011c4 <MX_FDCAN1_Init>
  FDCAN1_FilterConfig();
 8000ce4:	f000 fa02 	bl	80010ec <FDCAN1_FilterConfig>
  MX_USART1_UART_Init();
 8000ce8:	f000 fabc 	bl	8001264 <MX_USART1_UART_Init>

  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_DMA(&huart1, bmsResponse, sizeof(bmsResponse));
 8000cec:	4916      	ldr	r1, [pc, #88]	@ (8000d48 <main+0x80>)
 8000cee:	4b17      	ldr	r3, [pc, #92]	@ (8000d4c <main+0x84>)
 8000cf0:	2241      	movs	r2, #65	@ 0x41
 8000cf2:	0018      	movs	r0, r3
 8000cf4:	f003 fafc 	bl	80042f0 <HAL_UART_Receive_DMA>
  lastDataTime = HAL_GetTick(); // Initialize the last data time
 8000cf8:	f000 ff50 	bl	8001b9c <HAL_GetTick>
 8000cfc:	0002      	movs	r2, r0
 8000cfe:	4b14      	ldr	r3, [pc, #80]	@ (8000d50 <main+0x88>)
 8000d00:	601a      	str	r2, [r3, #0]

  while (1)
  {
	  transmitBMSCommand();
 8000d02:	f000 f82b 	bl	8000d5c <transmitBMSCommand>

	         if (dataReady && (HAL_GetTick() - lastDataTime < TIMEOUT)) {
 8000d06:	4b13      	ldr	r3, [pc, #76]	@ (8000d54 <main+0x8c>)
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	b2db      	uxtb	r3, r3
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d017      	beq.n	8000d40 <main+0x78>
 8000d10:	f000 ff44 	bl	8001b9c <HAL_GetTick>
 8000d14:	0002      	movs	r2, r0
 8000d16:	4b0e      	ldr	r3, [pc, #56]	@ (8000d50 <main+0x88>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	1ad2      	subs	r2, r2, r3
 8000d1c:	2396      	movs	r3, #150	@ 0x96
 8000d1e:	009b      	lsls	r3, r3, #2
 8000d20:	429a      	cmp	r2, r3
 8000d22:	d20d      	bcs.n	8000d40 <main+0x78>
	             transmitDataOverUSART1();
 8000d24:	f000 f84a 	bl	8000dbc <transmitDataOverUSART1>
	             transmitDataOverCAN();
 8000d28:	f000 f8c0 	bl	8000eac <transmitDataOverCAN>
	             memset(v_i_Str, 0, sizeof(v_i_Str)); // Clear buffer
 8000d2c:	4b0a      	ldr	r3, [pc, #40]	@ (8000d58 <main+0x90>)
 8000d2e:	2232      	movs	r2, #50	@ 0x32
 8000d30:	2100      	movs	r1, #0
 8000d32:	0018      	movs	r0, r3
 8000d34:	f005 fac8 	bl	80062c8 <memset>
	             dataReady = 0; // Clear the flag
 8000d38:	4b06      	ldr	r3, [pc, #24]	@ (8000d54 <main+0x8c>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	701a      	strb	r2, [r3, #0]
	         if (dataReady && (HAL_GetTick() - lastDataTime < TIMEOUT)) {
 8000d3e:	e001      	b.n	8000d44 <main+0x7c>

	         }
	         else {
	             CheckForTimeout();
 8000d40:	f000 f9a0 	bl	8001084 <CheckForTimeout>
  {
 8000d44:	e7dd      	b.n	8000d02 <main+0x3a>
 8000d46:	46c0      	nop			@ (mov r8, r8)
 8000d48:	20000090 	.word	0x20000090
 8000d4c:	2000019c 	.word	0x2000019c
 8000d50:	20000108 	.word	0x20000108
 8000d54:	20000106 	.word	0x20000106
 8000d58:	200000d4 	.word	0x200000d4

08000d5c <transmitBMSCommand>:
	         }
  }
  /* USER CODE END 3 */
}

void transmitBMSCommand(void) {
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);			//LED indication HIgh
 8000d60:	23a0      	movs	r3, #160	@ 0xa0
 8000d62:	05db      	lsls	r3, r3, #23
 8000d64:	2201      	movs	r2, #1
 8000d66:	2120      	movs	r1, #32
 8000d68:	0018      	movs	r0, r3
 8000d6a:	f002 fa17 	bl	800319c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);			//DE pin set High
 8000d6e:	23a0      	movs	r3, #160	@ 0xa0
 8000d70:	05db      	lsls	r3, r3, #23
 8000d72:	2201      	movs	r2, #1
 8000d74:	2102      	movs	r1, #2
 8000d76:	0018      	movs	r0, r3
 8000d78:	f002 fa10 	bl	800319c <HAL_GPIO_WritePin>
	HAL_UART_Transmit(&huart1, hostCommand, sizeof(hostCommand),10);
 8000d7c:	490d      	ldr	r1, [pc, #52]	@ (8000db4 <transmitBMSCommand+0x58>)
 8000d7e:	480e      	ldr	r0, [pc, #56]	@ (8000db8 <transmitBMSCommand+0x5c>)
 8000d80:	230a      	movs	r3, #10
 8000d82:	2207      	movs	r2, #7
 8000d84:	f003 fa10 	bl	80041a8 <HAL_UART_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);		//LED indication LOW
 8000d88:	23a0      	movs	r3, #160	@ 0xa0
 8000d8a:	05db      	lsls	r3, r3, #23
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	2120      	movs	r1, #32
 8000d90:	0018      	movs	r0, r3
 8000d92:	f002 fa03 	bl	800319c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);		//DE pin set Low
 8000d96:	23a0      	movs	r3, #160	@ 0xa0
 8000d98:	05db      	lsls	r3, r3, #23
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2102      	movs	r1, #2
 8000d9e:	0018      	movs	r0, r3
 8000da0:	f002 f9fc 	bl	800319c <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000da4:	23fa      	movs	r3, #250	@ 0xfa
 8000da6:	005b      	lsls	r3, r3, #1
 8000da8:	0018      	movs	r0, r3
 8000daa:	f000 ff01 	bl	8001bb0 <HAL_Delay>
}
 8000dae:	46c0      	nop			@ (mov r8, r8)
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	20000000 	.word	0x20000000
 8000db8:	2000019c 	.word	0x2000019c

08000dbc <transmitDataOverUSART1>:

void transmitDataOverUSART1(void) {
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af00      	add	r7, sp, #0

		int len;
		uint16_t voltage = (uint16_t)bmsResponse[4] << 8 | bmsResponse[5];
 8000dc2:	4b33      	ldr	r3, [pc, #204]	@ (8000e90 <transmitDataOverUSART1+0xd4>)
 8000dc4:	791b      	ldrb	r3, [r3, #4]
 8000dc6:	021b      	lsls	r3, r3, #8
 8000dc8:	b21a      	sxth	r2, r3
 8000dca:	4b31      	ldr	r3, [pc, #196]	@ (8000e90 <transmitDataOverUSART1+0xd4>)
 8000dcc:	795b      	ldrb	r3, [r3, #5]
 8000dce:	b21b      	sxth	r3, r3
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	b21a      	sxth	r2, r3
 8000dd4:	210e      	movs	r1, #14
 8000dd6:	187b      	adds	r3, r7, r1
 8000dd8:	801a      	strh	r2, [r3, #0]
		len = snprintf(v_i_Str, sizeof(v_i_Str), "Voltage: %u", voltage);
 8000dda:	187b      	adds	r3, r7, r1
 8000ddc:	881b      	ldrh	r3, [r3, #0]
 8000dde:	4a2d      	ldr	r2, [pc, #180]	@ (8000e94 <transmitDataOverUSART1+0xd8>)
 8000de0:	482d      	ldr	r0, [pc, #180]	@ (8000e98 <transmitDataOverUSART1+0xdc>)
 8000de2:	2132      	movs	r1, #50	@ 0x32
 8000de4:	f005 f950 	bl	8006088 <sniprintf>
 8000de8:	0003      	movs	r3, r0
 8000dea:	60bb      	str	r3, [r7, #8]
	    HAL_UART_Transmit(&huart2, (uint8_t*)v_i_Str, len, 1000); // Transmit voltage
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	b29a      	uxth	r2, r3
 8000df0:	23fa      	movs	r3, #250	@ 0xfa
 8000df2:	009b      	lsls	r3, r3, #2
 8000df4:	4928      	ldr	r1, [pc, #160]	@ (8000e98 <transmitDataOverUSART1+0xdc>)
 8000df6:	4829      	ldr	r0, [pc, #164]	@ (8000e9c <transmitDataOverUSART1+0xe0>)
 8000df8:	f003 f9d6 	bl	80041a8 <HAL_UART_Transmit>

		uint16_t current = (uint16_t)bmsResponse[6] << 8 | bmsResponse[7];
 8000dfc:	4b24      	ldr	r3, [pc, #144]	@ (8000e90 <transmitDataOverUSART1+0xd4>)
 8000dfe:	799b      	ldrb	r3, [r3, #6]
 8000e00:	021b      	lsls	r3, r3, #8
 8000e02:	b21a      	sxth	r2, r3
 8000e04:	4b22      	ldr	r3, [pc, #136]	@ (8000e90 <transmitDataOverUSART1+0xd4>)
 8000e06:	79db      	ldrb	r3, [r3, #7]
 8000e08:	b21b      	sxth	r3, r3
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	b21a      	sxth	r2, r3
 8000e0e:	1dbb      	adds	r3, r7, #6
 8000e10:	801a      	strh	r2, [r3, #0]
	    len = snprintf(v_i_Str, sizeof(v_i_Str), "Current: %u", current);
 8000e12:	1dbb      	adds	r3, r7, #6
 8000e14:	881b      	ldrh	r3, [r3, #0]
 8000e16:	4a22      	ldr	r2, [pc, #136]	@ (8000ea0 <transmitDataOverUSART1+0xe4>)
 8000e18:	481f      	ldr	r0, [pc, #124]	@ (8000e98 <transmitDataOverUSART1+0xdc>)
 8000e1a:	2132      	movs	r1, #50	@ 0x32
 8000e1c:	f005 f934 	bl	8006088 <sniprintf>
 8000e20:	0003      	movs	r3, r0
 8000e22:	60bb      	str	r3, [r7, #8]
	    HAL_UART_Transmit(&huart2, (uint8_t*)v_i_Str, len, 1000); // Transmit current
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	b29a      	uxth	r2, r3
 8000e28:	23fa      	movs	r3, #250	@ 0xfa
 8000e2a:	009b      	lsls	r3, r3, #2
 8000e2c:	491a      	ldr	r1, [pc, #104]	@ (8000e98 <transmitDataOverUSART1+0xdc>)
 8000e2e:	481b      	ldr	r0, [pc, #108]	@ (8000e9c <transmitDataOverUSART1+0xe0>)
 8000e30:	f003 f9ba 	bl	80041a8 <HAL_UART_Transmit>

		uint16_t SoC = (uint16_t)bmsResponse[23];
 8000e34:	4b16      	ldr	r3, [pc, #88]	@ (8000e90 <transmitDataOverUSART1+0xd4>)
 8000e36:	7dda      	ldrb	r2, [r3, #23]
 8000e38:	1d3b      	adds	r3, r7, #4
 8000e3a:	801a      	strh	r2, [r3, #0]
		len = snprintf(v_i_Str, sizeof(v_i_Str), "SOC: %u\n", SoC);
 8000e3c:	1d3b      	adds	r3, r7, #4
 8000e3e:	881b      	ldrh	r3, [r3, #0]
 8000e40:	4a18      	ldr	r2, [pc, #96]	@ (8000ea4 <transmitDataOverUSART1+0xe8>)
 8000e42:	4815      	ldr	r0, [pc, #84]	@ (8000e98 <transmitDataOverUSART1+0xdc>)
 8000e44:	2132      	movs	r1, #50	@ 0x32
 8000e46:	f005 f91f 	bl	8006088 <sniprintf>
 8000e4a:	0003      	movs	r3, r0
 8000e4c:	60bb      	str	r3, [r7, #8]
		HAL_UART_Transmit(&huart2, (uint8_t*)v_i_Str, len, 1000); // Transmit current
 8000e4e:	68bb      	ldr	r3, [r7, #8]
 8000e50:	b29a      	uxth	r2, r3
 8000e52:	23fa      	movs	r3, #250	@ 0xfa
 8000e54:	009b      	lsls	r3, r3, #2
 8000e56:	4910      	ldr	r1, [pc, #64]	@ (8000e98 <transmitDataOverUSART1+0xdc>)
 8000e58:	4810      	ldr	r0, [pc, #64]	@ (8000e9c <transmitDataOverUSART1+0xe0>)
 8000e5a:	f003 f9a5 	bl	80041a8 <HAL_UART_Transmit>

		uint16_t TotalCells = (uint16_t)bmsResponse[25];
 8000e5e:	4b0c      	ldr	r3, [pc, #48]	@ (8000e90 <transmitDataOverUSART1+0xd4>)
 8000e60:	7e5a      	ldrb	r2, [r3, #25]
 8000e62:	1cbb      	adds	r3, r7, #2
 8000e64:	801a      	strh	r2, [r3, #0]
		len = snprintf(v_i_Str, sizeof(v_i_Str), "No. of Cells: %u\n", TotalCells);
 8000e66:	1cbb      	adds	r3, r7, #2
 8000e68:	881b      	ldrh	r3, [r3, #0]
 8000e6a:	4a0f      	ldr	r2, [pc, #60]	@ (8000ea8 <transmitDataOverUSART1+0xec>)
 8000e6c:	480a      	ldr	r0, [pc, #40]	@ (8000e98 <transmitDataOverUSART1+0xdc>)
 8000e6e:	2132      	movs	r1, #50	@ 0x32
 8000e70:	f005 f90a 	bl	8006088 <sniprintf>
 8000e74:	0003      	movs	r3, r0
 8000e76:	60bb      	str	r3, [r7, #8]
		HAL_UART_Transmit(&huart2, (uint8_t*)v_i_Str, len, 1000); // Transmit current
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	b29a      	uxth	r2, r3
 8000e7c:	23fa      	movs	r3, #250	@ 0xfa
 8000e7e:	009b      	lsls	r3, r3, #2
 8000e80:	4905      	ldr	r1, [pc, #20]	@ (8000e98 <transmitDataOverUSART1+0xdc>)
 8000e82:	4806      	ldr	r0, [pc, #24]	@ (8000e9c <transmitDataOverUSART1+0xe0>)
 8000e84:	f003 f990 	bl	80041a8 <HAL_UART_Transmit>

}
 8000e88:	46c0      	nop			@ (mov r8, r8)
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	b004      	add	sp, #16
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	20000090 	.word	0x20000090
 8000e94:	08007184 	.word	0x08007184
 8000e98:	200000d4 	.word	0x200000d4
 8000e9c:	20000230 	.word	0x20000230
 8000ea0:	08007190 	.word	0x08007190
 8000ea4:	0800719c 	.word	0x0800719c
 8000ea8:	080071a8 	.word	0x080071a8

08000eac <transmitDataOverCAN>:
//    } else {
//        printf("Data sent over CAN successfully.\n");
//    }
//}

void transmitDataOverCAN(void) {
 8000eac:	b590      	push	{r4, r7, lr}
 8000eae:	b085      	sub	sp, #20
 8000eb0:	af00      	add	r7, sp, #0

	int totalCellVolt = (bmsResponse[25]*3.65)*100;
 8000eb2:	4b5a      	ldr	r3, [pc, #360]	@ (800101c <transmitDataOverCAN+0x170>)
 8000eb4:	7e5b      	ldrb	r3, [r3, #25]
 8000eb6:	0018      	movs	r0, r3
 8000eb8:	f7ff fe94 	bl	8000be4 <__aeabi_i2d>
 8000ebc:	4a58      	ldr	r2, [pc, #352]	@ (8001020 <transmitDataOverCAN+0x174>)
 8000ebe:	4b59      	ldr	r3, [pc, #356]	@ (8001024 <transmitDataOverCAN+0x178>)
 8000ec0:	f7ff fb8c 	bl	80005dc <__aeabi_dmul>
 8000ec4:	0002      	movs	r2, r0
 8000ec6:	000b      	movs	r3, r1
 8000ec8:	0010      	movs	r0, r2
 8000eca:	0019      	movs	r1, r3
 8000ecc:	2200      	movs	r2, #0
 8000ece:	4b56      	ldr	r3, [pc, #344]	@ (8001028 <transmitDataOverCAN+0x17c>)
 8000ed0:	f7ff fb84 	bl	80005dc <__aeabi_dmul>
 8000ed4:	0002      	movs	r2, r0
 8000ed6:	000b      	movs	r3, r1
 8000ed8:	0010      	movs	r0, r2
 8000eda:	0019      	movs	r1, r3
 8000edc:	f7ff fe46 	bl	8000b6c <__aeabi_d2iz>
 8000ee0:	0003      	movs	r3, r0
 8000ee2:	60fb      	str	r3, [r7, #12]
	    uint16_t scaled_Volt_Value = totalCellVolt/10;
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	210a      	movs	r1, #10
 8000ee8:	0018      	movs	r0, r3
 8000eea:	f7ff f99f 	bl	800022c <__divsi3>
 8000eee:	0003      	movs	r3, r0
 8000ef0:	001a      	movs	r2, r3
 8000ef2:	210a      	movs	r1, #10
 8000ef4:	187b      	adds	r3, r7, r1
 8000ef6:	801a      	strh	r2, [r3, #0]
	    uint8_t scaled_Volt_HighByte = (scaled_Volt_Value >> 8) & 0xFF;  // High byte
 8000ef8:	187b      	adds	r3, r7, r1
 8000efa:	881b      	ldrh	r3, [r3, #0]
 8000efc:	0a1b      	lsrs	r3, r3, #8
 8000efe:	b29a      	uxth	r2, r3
 8000f00:	2009      	movs	r0, #9
 8000f02:	183b      	adds	r3, r7, r0
 8000f04:	701a      	strb	r2, [r3, #0]
	    uint8_t scaled_Volt_LowByte = scaled_Volt_Value & 0xFF;
 8000f06:	2408      	movs	r4, #8
 8000f08:	193b      	adds	r3, r7, r4
 8000f0a:	187a      	adds	r2, r7, r1
 8000f0c:	8812      	ldrh	r2, [r2, #0]
 8000f0e:	701a      	strb	r2, [r3, #0]
	    uint32_t msgId = 0x200;
 8000f10:	2380      	movs	r3, #128	@ 0x80
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	607b      	str	r3, [r7, #4]

    uint8_t broadcastAdd = 0xFF;
 8000f16:	1cfb      	adds	r3, r7, #3
 8000f18:	22ff      	movs	r2, #255	@ 0xff
 8000f1a:	701a      	strb	r2, [r3, #0]
    uint8_t relayPowerON = 3;
 8000f1c:	1cbb      	adds	r3, r7, #2
 8000f1e:	2203      	movs	r2, #3
 8000f20:	701a      	strb	r2, [r3, #0]

    //     Prepare CAN header
    TxHeader.Identifier = msgId;
 8000f22:	4b42      	ldr	r3, [pc, #264]	@ (800102c <transmitDataOverCAN+0x180>)
 8000f24:	687a      	ldr	r2, [r7, #4]
 8000f26:	601a      	str	r2, [r3, #0]
    TxHeader.IdType = FDCAN_STANDARD_ID;
 8000f28:	4b40      	ldr	r3, [pc, #256]	@ (800102c <transmitDataOverCAN+0x180>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	605a      	str	r2, [r3, #4]
    TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000f2e:	4b3f      	ldr	r3, [pc, #252]	@ (800102c <transmitDataOverCAN+0x180>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	609a      	str	r2, [r3, #8]
    TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8000f34:	4b3d      	ldr	r3, [pc, #244]	@ (800102c <transmitDataOverCAN+0x180>)
 8000f36:	2208      	movs	r2, #8
 8000f38:	60da      	str	r2, [r3, #12]
    TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000f3a:	4b3c      	ldr	r3, [pc, #240]	@ (800102c <transmitDataOverCAN+0x180>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	611a      	str	r2, [r3, #16]
    TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8000f40:	4b3a      	ldr	r3, [pc, #232]	@ (800102c <transmitDataOverCAN+0x180>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	615a      	str	r2, [r3, #20]
    TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8000f46:	4b39      	ldr	r3, [pc, #228]	@ (800102c <transmitDataOverCAN+0x180>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	619a      	str	r2, [r3, #24]
    TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000f4c:	4b37      	ldr	r3, [pc, #220]	@ (800102c <transmitDataOverCAN+0x180>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	61da      	str	r2, [r3, #28]
    TxHeader.MessageMarker = 0;
 8000f52:	4b36      	ldr	r3, [pc, #216]	@ (800102c <transmitDataOverCAN+0x180>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	621a      	str	r2, [r3, #32]

    switch (bmsResponse[23]>90){
 8000f58:	4b30      	ldr	r3, [pc, #192]	@ (800101c <transmitDataOverCAN+0x170>)
 8000f5a:	7ddb      	ldrb	r3, [r3, #23]
 8000f5c:	225a      	movs	r2, #90	@ 0x5a
 8000f5e:	429a      	cmp	r2, r3
 8000f60:	419b      	sbcs	r3, r3
 8000f62:	425b      	negs	r3, r3
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	2b01      	cmp	r3, #1
 8000f68:	d11e      	bne.n	8000fa8 <transmitDataOverCAN+0xfc>
    case 1:
    	TxData[0] = broadcastAdd;
 8000f6a:	4b31      	ldr	r3, [pc, #196]	@ (8001030 <transmitDataOverCAN+0x184>)
 8000f6c:	1cfa      	adds	r2, r7, #3
 8000f6e:	7812      	ldrb	r2, [r2, #0]
 8000f70:	701a      	strb	r2, [r3, #0]
    	TxData[1] = relayPowerON;
 8000f72:	4b2f      	ldr	r3, [pc, #188]	@ (8001030 <transmitDataOverCAN+0x184>)
 8000f74:	1cba      	adds	r2, r7, #2
 8000f76:	7812      	ldrb	r2, [r2, #0]
 8000f78:	705a      	strb	r2, [r3, #1]
    	TxData[2] = scaled_Volt_HighByte;		// voltage high byte
 8000f7a:	4b2d      	ldr	r3, [pc, #180]	@ (8001030 <transmitDataOverCAN+0x184>)
 8000f7c:	183a      	adds	r2, r7, r0
 8000f7e:	7812      	ldrb	r2, [r2, #0]
 8000f80:	709a      	strb	r2, [r3, #2]
    	TxData[3] = scaled_Volt_LowByte;		// voltage low byte
 8000f82:	4b2b      	ldr	r3, [pc, #172]	@ (8001030 <transmitDataOverCAN+0x184>)
 8000f84:	193a      	adds	r2, r7, r4
 8000f86:	7812      	ldrb	r2, [r2, #0]
 8000f88:	70da      	strb	r2, [r3, #3]
    	TxData[4] = 0x00;
 8000f8a:	4b29      	ldr	r3, [pc, #164]	@ (8001030 <transmitDataOverCAN+0x184>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	711a      	strb	r2, [r3, #4]
    	TxData[5] = min_current;
 8000f90:	4b28      	ldr	r3, [pc, #160]	@ (8001034 <transmitDataOverCAN+0x188>)
 8000f92:	781a      	ldrb	r2, [r3, #0]
 8000f94:	4b26      	ldr	r3, [pc, #152]	@ (8001030 <transmitDataOverCAN+0x184>)
 8000f96:	715a      	strb	r2, [r3, #5]
    	printf("executing Case_1 as SoC = %d\n", bmsResponse[23]);
 8000f98:	4b20      	ldr	r3, [pc, #128]	@ (800101c <transmitDataOverCAN+0x170>)
 8000f9a:	7ddb      	ldrb	r3, [r3, #23]
 8000f9c:	001a      	movs	r2, r3
 8000f9e:	4b26      	ldr	r3, [pc, #152]	@ (8001038 <transmitDataOverCAN+0x18c>)
 8000fa0:	0011      	movs	r1, r2
 8000fa2:	0018      	movs	r0, r3
 8000fa4:	f005 f800 	bl	8005fa8 <iprintf>
    }

    switch (bmsResponse[23]<90){
 8000fa8:	4b1c      	ldr	r3, [pc, #112]	@ (800101c <transmitDataOverCAN+0x170>)
 8000faa:	7dda      	ldrb	r2, [r3, #23]
 8000fac:	2159      	movs	r1, #89	@ 0x59
 8000fae:	2300      	movs	r3, #0
 8000fb0:	4291      	cmp	r1, r2
 8000fb2:	415b      	adcs	r3, r3
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d120      	bne.n	8000ffc <transmitDataOverCAN+0x150>
    case 1:
    	TxData[0] = broadcastAdd;
 8000fba:	4b1d      	ldr	r3, [pc, #116]	@ (8001030 <transmitDataOverCAN+0x184>)
 8000fbc:	1cfa      	adds	r2, r7, #3
 8000fbe:	7812      	ldrb	r2, [r2, #0]
 8000fc0:	701a      	strb	r2, [r3, #0]
    	TxData[1] = relayPowerON;
 8000fc2:	4b1b      	ldr	r3, [pc, #108]	@ (8001030 <transmitDataOverCAN+0x184>)
 8000fc4:	1cba      	adds	r2, r7, #2
 8000fc6:	7812      	ldrb	r2, [r2, #0]
 8000fc8:	705a      	strb	r2, [r3, #1]
    	TxData[2] = scaled_Volt_HighByte;		// voltage high byte
 8000fca:	4b19      	ldr	r3, [pc, #100]	@ (8001030 <transmitDataOverCAN+0x184>)
 8000fcc:	2209      	movs	r2, #9
 8000fce:	18ba      	adds	r2, r7, r2
 8000fd0:	7812      	ldrb	r2, [r2, #0]
 8000fd2:	709a      	strb	r2, [r3, #2]
    	TxData[3] = scaled_Volt_LowByte;		// voltage low byte
 8000fd4:	4b16      	ldr	r3, [pc, #88]	@ (8001030 <transmitDataOverCAN+0x184>)
 8000fd6:	2208      	movs	r2, #8
 8000fd8:	18ba      	adds	r2, r7, r2
 8000fda:	7812      	ldrb	r2, [r2, #0]
 8000fdc:	70da      	strb	r2, [r3, #3]
    	TxData[4] = 0x00;
 8000fde:	4b14      	ldr	r3, [pc, #80]	@ (8001030 <transmitDataOverCAN+0x184>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	711a      	strb	r2, [r3, #4]
    	TxData[5] = max_current;
 8000fe4:	4b15      	ldr	r3, [pc, #84]	@ (800103c <transmitDataOverCAN+0x190>)
 8000fe6:	781a      	ldrb	r2, [r3, #0]
 8000fe8:	4b11      	ldr	r3, [pc, #68]	@ (8001030 <transmitDataOverCAN+0x184>)
 8000fea:	715a      	strb	r2, [r3, #5]
    	printf("executing Case_2 as SoC = %d\n", bmsResponse[23]);
 8000fec:	4b0b      	ldr	r3, [pc, #44]	@ (800101c <transmitDataOverCAN+0x170>)
 8000fee:	7ddb      	ldrb	r3, [r3, #23]
 8000ff0:	001a      	movs	r2, r3
 8000ff2:	4b13      	ldr	r3, [pc, #76]	@ (8001040 <transmitDataOverCAN+0x194>)
 8000ff4:	0011      	movs	r1, r2
 8000ff6:	0018      	movs	r0, r3
 8000ff8:	f004 ffd6 	bl	8005fa8 <iprintf>
    }
       // Transmit CAN frame
        if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) == HAL_OK) {
 8000ffc:	4a0c      	ldr	r2, [pc, #48]	@ (8001030 <transmitDataOverCAN+0x184>)
 8000ffe:	490b      	ldr	r1, [pc, #44]	@ (800102c <transmitDataOverCAN+0x180>)
 8001000:	4b10      	ldr	r3, [pc, #64]	@ (8001044 <transmitDataOverCAN+0x198>)
 8001002:	0018      	movs	r0, r3
 8001004:	f001 fc9d 	bl	8002942 <HAL_FDCAN_AddMessageToTxFifoQ>
 8001008:	1e03      	subs	r3, r0, #0
 800100a:	d103      	bne.n	8001014 <transmitDataOverCAN+0x168>
            // Handle possible error
            // Error handling code here
        	printf("Data sent over CAN successfully.\n");
 800100c:	4b0e      	ldr	r3, [pc, #56]	@ (8001048 <transmitDataOverCAN+0x19c>)
 800100e:	0018      	movs	r0, r3
 8001010:	f005 f830 	bl	8006074 <puts>
        }
}
 8001014:	46c0      	nop			@ (mov r8, r8)
 8001016:	46bd      	mov	sp, r7
 8001018:	b005      	add	sp, #20
 800101a:	bd90      	pop	{r4, r7, pc}
 800101c:	20000090 	.word	0x20000090
 8001020:	33333333 	.word	0x33333333
 8001024:	400d3333 	.word	0x400d3333
 8001028:	40590000 	.word	0x40590000
 800102c:	20000178 	.word	0x20000178
 8001030:	2000010c 	.word	0x2000010c
 8001034:	20000007 	.word	0x20000007
 8001038:	080071bc 	.word	0x080071bc
 800103c:	20000008 	.word	0x20000008
 8001040:	080071dc 	.word	0x080071dc
 8001044:	20000114 	.word	0x20000114
 8001048:	080071fc 	.word	0x080071fc

0800104c <HAL_UART_RxCpltCallback>:
        }
    }
}*/

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a07      	ldr	r2, [pc, #28]	@ (8001078 <HAL_UART_RxCpltCallback+0x2c>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d107      	bne.n	800106e <HAL_UART_RxCpltCallback+0x22>
        dataReady = 1; // Data is ready
 800105e:	4b07      	ldr	r3, [pc, #28]	@ (800107c <HAL_UART_RxCpltCallback+0x30>)
 8001060:	2201      	movs	r2, #1
 8001062:	701a      	strb	r2, [r3, #0]
        lastDataTime = HAL_GetTick(); // Update last data time
 8001064:	f000 fd9a 	bl	8001b9c <HAL_GetTick>
 8001068:	0002      	movs	r2, r0
 800106a:	4b05      	ldr	r3, [pc, #20]	@ (8001080 <HAL_UART_RxCpltCallback+0x34>)
 800106c:	601a      	str	r2, [r3, #0]
    }
}
 800106e:	46c0      	nop			@ (mov r8, r8)
 8001070:	46bd      	mov	sp, r7
 8001072:	b002      	add	sp, #8
 8001074:	bd80      	pop	{r7, pc}
 8001076:	46c0      	nop			@ (mov r8, r8)
 8001078:	40013800 	.word	0x40013800
 800107c:	20000106 	.word	0x20000106
 8001080:	20000108 	.word	0x20000108

08001084 <CheckForTimeout>:

void CheckForTimeout() {
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
    if (HAL_GetTick() - lastDataTime >= TIMEOUT) {
 8001088:	f000 fd88 	bl	8001b9c <HAL_GetTick>
 800108c:	0002      	movs	r2, r0
 800108e:	4b14      	ldr	r3, [pc, #80]	@ (80010e0 <CheckForTimeout+0x5c>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	1ad2      	subs	r2, r2, r3
 8001094:	2396      	movs	r3, #150	@ 0x96
 8001096:	009b      	lsls	r3, r3, #2
 8001098:	429a      	cmp	r2, r3
 800109a:	d31e      	bcc.n	80010da <CheckForTimeout+0x56>

        HAL_UART_DMAStop(&huart1);
 800109c:	4b11      	ldr	r3, [pc, #68]	@ (80010e4 <CheckForTimeout+0x60>)
 800109e:	0018      	movs	r0, r3
 80010a0:	f003 f98c 	bl	80043bc <HAL_UART_DMAStop>
        __HAL_UART_FLUSH_DRREGISTER(&huart1);
 80010a4:	4b0f      	ldr	r3, [pc, #60]	@ (80010e4 <CheckForTimeout+0x60>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	699a      	ldr	r2, [r3, #24]
 80010aa:	4b0e      	ldr	r3, [pc, #56]	@ (80010e4 <CheckForTimeout+0x60>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	2108      	movs	r1, #8
 80010b0:	430a      	orrs	r2, r1
 80010b2:	619a      	str	r2, [r3, #24]
 80010b4:	4b0b      	ldr	r3, [pc, #44]	@ (80010e4 <CheckForTimeout+0x60>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	699a      	ldr	r2, [r3, #24]
 80010ba:	4b0a      	ldr	r3, [pc, #40]	@ (80010e4 <CheckForTimeout+0x60>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	2110      	movs	r1, #16
 80010c0:	430a      	orrs	r2, r1
 80010c2:	619a      	str	r2, [r3, #24]
        HAL_UART_Receive_DMA(&huart1, bmsResponse, sizeof(bmsResponse));
 80010c4:	4908      	ldr	r1, [pc, #32]	@ (80010e8 <CheckForTimeout+0x64>)
 80010c6:	4b07      	ldr	r3, [pc, #28]	@ (80010e4 <CheckForTimeout+0x60>)
 80010c8:	2241      	movs	r2, #65	@ 0x41
 80010ca:	0018      	movs	r0, r3
 80010cc:	f003 f910 	bl	80042f0 <HAL_UART_Receive_DMA>
        lastDataTime = HAL_GetTick(); // Reset the timer
 80010d0:	f000 fd64 	bl	8001b9c <HAL_GetTick>
 80010d4:	0002      	movs	r2, r0
 80010d6:	4b02      	ldr	r3, [pc, #8]	@ (80010e0 <CheckForTimeout+0x5c>)
 80010d8:	601a      	str	r2, [r3, #0]
    }
}
 80010da:	46c0      	nop			@ (mov r8, r8)
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	20000108 	.word	0x20000108
 80010e4:	2000019c 	.word	0x2000019c
 80010e8:	20000090 	.word	0x20000090

080010ec <FDCAN1_FilterConfig>:


void FDCAN1_FilterConfig(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b086      	sub	sp, #24
 80010f0:	af00      	add	r7, sp, #0
    FDCAN_FilterTypeDef sFilterConfig;

    sFilterConfig.IdType = FDCAN_STANDARD_ID;
 80010f2:	003b      	movs	r3, r7
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
    sFilterConfig.FilterIndex = 0;
 80010f8:	003b      	movs	r3, r7
 80010fa:	2200      	movs	r2, #0
 80010fc:	605a      	str	r2, [r3, #4]
    sFilterConfig.FilterType = FDCAN_FILTER_RANGE;
 80010fe:	003b      	movs	r3, r7
 8001100:	2200      	movs	r2, #0
 8001102:	609a      	str	r2, [r3, #8]
    sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001104:	003b      	movs	r3, r7
 8001106:	2201      	movs	r2, #1
 8001108:	60da      	str	r2, [r3, #12]
    sFilterConfig.FilterID1 = 0x200; // First ID of the range
 800110a:	003b      	movs	r3, r7
 800110c:	2280      	movs	r2, #128	@ 0x80
 800110e:	0092      	lsls	r2, r2, #2
 8001110:	611a      	str	r2, [r3, #16]
//    sFilterConfig.FilterID2 = 0x110; // Last ID of the range

    if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 8001112:	003a      	movs	r2, r7
 8001114:	4b06      	ldr	r3, [pc, #24]	@ (8001130 <FDCAN1_FilterConfig+0x44>)
 8001116:	0011      	movs	r1, r2
 8001118:	0018      	movs	r0, r3
 800111a:	f001 fb8f 	bl	800283c <HAL_FDCAN_ConfigFilter>
 800111e:	1e03      	subs	r3, r0, #0
 8001120:	d001      	beq.n	8001126 <FDCAN1_FilterConfig+0x3a>
    {
        /* Filter configuration Error */
        Error_Handler();
 8001122:	f000 f9c7 	bl	80014b4 <Error_Handler>
    }
}
 8001126:	46c0      	nop			@ (mov r8, r8)
 8001128:	46bd      	mov	sp, r7
 800112a:	b006      	add	sp, #24
 800112c:	bd80      	pop	{r7, pc}
 800112e:	46c0      	nop			@ (mov r8, r8)
 8001130:	20000114 	.word	0x20000114

08001134 <SystemClock_Config>:

void SystemClock_Config(void)
{
 8001134:	b590      	push	{r4, r7, lr}
 8001136:	b095      	sub	sp, #84	@ 0x54
 8001138:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800113a:	2414      	movs	r4, #20
 800113c:	193b      	adds	r3, r7, r4
 800113e:	0018      	movs	r0, r3
 8001140:	233c      	movs	r3, #60	@ 0x3c
 8001142:	001a      	movs	r2, r3
 8001144:	2100      	movs	r1, #0
 8001146:	f005 f8bf 	bl	80062c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800114a:	1d3b      	adds	r3, r7, #4
 800114c:	0018      	movs	r0, r3
 800114e:	2310      	movs	r3, #16
 8001150:	001a      	movs	r2, r3
 8001152:	2100      	movs	r1, #0
 8001154:	f005 f8b8 	bl	80062c8 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001158:	2380      	movs	r3, #128	@ 0x80
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	0018      	movs	r0, r3
 800115e:	f002 f83b 	bl	80031d8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001162:	193b      	adds	r3, r7, r4
 8001164:	2202      	movs	r2, #2
 8001166:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001168:	193b      	adds	r3, r7, r4
 800116a:	2280      	movs	r2, #128	@ 0x80
 800116c:	0052      	lsls	r2, r2, #1
 800116e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8001170:	193b      	adds	r3, r7, r4
 8001172:	2200      	movs	r2, #0
 8001174:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001176:	193b      	adds	r3, r7, r4
 8001178:	2240      	movs	r2, #64	@ 0x40
 800117a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800117c:	193b      	adds	r3, r7, r4
 800117e:	2200      	movs	r2, #0
 8001180:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001182:	193b      	adds	r3, r7, r4
 8001184:	0018      	movs	r0, r3
 8001186:	f002 f873 	bl	8003270 <HAL_RCC_OscConfig>
 800118a:	1e03      	subs	r3, r0, #0
 800118c:	d001      	beq.n	8001192 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800118e:	f000 f991 	bl	80014b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001192:	1d3b      	adds	r3, r7, #4
 8001194:	2207      	movs	r2, #7
 8001196:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001198:	1d3b      	adds	r3, r7, #4
 800119a:	2200      	movs	r2, #0
 800119c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800119e:	1d3b      	adds	r3, r7, #4
 80011a0:	2200      	movs	r2, #0
 80011a2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011a4:	1d3b      	adds	r3, r7, #4
 80011a6:	2200      	movs	r2, #0
 80011a8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80011aa:	1d3b      	adds	r3, r7, #4
 80011ac:	2100      	movs	r1, #0
 80011ae:	0018      	movs	r0, r3
 80011b0:	f002 fbbe 	bl	8003930 <HAL_RCC_ClockConfig>
 80011b4:	1e03      	subs	r3, r0, #0
 80011b6:	d001      	beq.n	80011bc <SystemClock_Config+0x88>
  {
    Error_Handler();
 80011b8:	f000 f97c 	bl	80014b4 <Error_Handler>
  }
}
 80011bc:	46c0      	nop			@ (mov r8, r8)
 80011be:	46bd      	mov	sp, r7
 80011c0:	b015      	add	sp, #84	@ 0x54
 80011c2:	bd90      	pop	{r4, r7, pc}

080011c4 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80011c8:	4b24      	ldr	r3, [pc, #144]	@ (800125c <MX_FDCAN1_Init+0x98>)
 80011ca:	4a25      	ldr	r2, [pc, #148]	@ (8001260 <MX_FDCAN1_Init+0x9c>)
 80011cc:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80011ce:	4b23      	ldr	r3, [pc, #140]	@ (800125c <MX_FDCAN1_Init+0x98>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80011d4:	4b21      	ldr	r3, [pc, #132]	@ (800125c <MX_FDCAN1_Init+0x98>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80011da:	4b20      	ldr	r3, [pc, #128]	@ (800125c <MX_FDCAN1_Init+0x98>)
 80011dc:	2200      	movs	r2, #0
 80011de:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80011e0:	4b1e      	ldr	r3, [pc, #120]	@ (800125c <MX_FDCAN1_Init+0x98>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80011e6:	4b1d      	ldr	r3, [pc, #116]	@ (800125c <MX_FDCAN1_Init+0x98>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80011ec:	4b1b      	ldr	r3, [pc, #108]	@ (800125c <MX_FDCAN1_Init+0x98>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 8;
 80011f2:	4b1a      	ldr	r3, [pc, #104]	@ (800125c <MX_FDCAN1_Init+0x98>)
 80011f4:	2208      	movs	r2, #8
 80011f6:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80011f8:	4b18      	ldr	r3, [pc, #96]	@ (800125c <MX_FDCAN1_Init+0x98>)
 80011fa:	2201      	movs	r2, #1
 80011fc:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 7;
 80011fe:	4b17      	ldr	r3, [pc, #92]	@ (800125c <MX_FDCAN1_Init+0x98>)
 8001200:	2207      	movs	r2, #7
 8001202:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 8;
 8001204:	4b15      	ldr	r3, [pc, #84]	@ (800125c <MX_FDCAN1_Init+0x98>)
 8001206:	2208      	movs	r2, #8
 8001208:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800120a:	4b14      	ldr	r3, [pc, #80]	@ (800125c <MX_FDCAN1_Init+0x98>)
 800120c:	2201      	movs	r2, #1
 800120e:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001210:	4b12      	ldr	r3, [pc, #72]	@ (800125c <MX_FDCAN1_Init+0x98>)
 8001212:	2201      	movs	r2, #1
 8001214:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8001216:	4b11      	ldr	r3, [pc, #68]	@ (800125c <MX_FDCAN1_Init+0x98>)
 8001218:	2201      	movs	r2, #1
 800121a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 800121c:	4b0f      	ldr	r3, [pc, #60]	@ (800125c <MX_FDCAN1_Init+0x98>)
 800121e:	2201      	movs	r2, #1
 8001220:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8001222:	4b0e      	ldr	r3, [pc, #56]	@ (800125c <MX_FDCAN1_Init+0x98>)
 8001224:	2200      	movs	r2, #0
 8001226:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001228:	4b0c      	ldr	r3, [pc, #48]	@ (800125c <MX_FDCAN1_Init+0x98>)
 800122a:	2200      	movs	r2, #0
 800122c:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800122e:	4b0b      	ldr	r3, [pc, #44]	@ (800125c <MX_FDCAN1_Init+0x98>)
 8001230:	2200      	movs	r2, #0
 8001232:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001234:	4b09      	ldr	r3, [pc, #36]	@ (800125c <MX_FDCAN1_Init+0x98>)
 8001236:	0018      	movs	r0, r3
 8001238:	f001 f99a 	bl	8002570 <HAL_FDCAN_Init>
 800123c:	1e03      	subs	r3, r0, #0
 800123e:	d001      	beq.n	8001244 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8001240:	f000 f938 	bl	80014b4 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  // Start FDCAN1
  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 8001244:	4b05      	ldr	r3, [pc, #20]	@ (800125c <MX_FDCAN1_Init+0x98>)
 8001246:	0018      	movs	r0, r3
 8001248:	f001 fb55 	bl	80028f6 <HAL_FDCAN_Start>
 800124c:	1e03      	subs	r3, r0, #0
 800124e:	d001      	beq.n	8001254 <MX_FDCAN1_Init+0x90>
  {
      Error_Handler();
 8001250:	f000 f930 	bl	80014b4 <Error_Handler>
  }
  /* USER CODE END FDCAN1_Init 2 */

}
 8001254:	46c0      	nop			@ (mov r8, r8)
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	46c0      	nop			@ (mov r8, r8)
 800125c:	20000114 	.word	0x20000114
 8001260:	40006400 	.word	0x40006400

08001264 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001268:	4b24      	ldr	r3, [pc, #144]	@ (80012fc <MX_USART1_UART_Init+0x98>)
 800126a:	4a25      	ldr	r2, [pc, #148]	@ (8001300 <MX_USART1_UART_Init+0x9c>)
 800126c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800126e:	4b23      	ldr	r3, [pc, #140]	@ (80012fc <MX_USART1_UART_Init+0x98>)
 8001270:	2296      	movs	r2, #150	@ 0x96
 8001272:	0192      	lsls	r2, r2, #6
 8001274:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001276:	4b21      	ldr	r3, [pc, #132]	@ (80012fc <MX_USART1_UART_Init+0x98>)
 8001278:	2200      	movs	r2, #0
 800127a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800127c:	4b1f      	ldr	r3, [pc, #124]	@ (80012fc <MX_USART1_UART_Init+0x98>)
 800127e:	2200      	movs	r2, #0
 8001280:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001282:	4b1e      	ldr	r3, [pc, #120]	@ (80012fc <MX_USART1_UART_Init+0x98>)
 8001284:	2200      	movs	r2, #0
 8001286:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001288:	4b1c      	ldr	r3, [pc, #112]	@ (80012fc <MX_USART1_UART_Init+0x98>)
 800128a:	220c      	movs	r2, #12
 800128c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800128e:	4b1b      	ldr	r3, [pc, #108]	@ (80012fc <MX_USART1_UART_Init+0x98>)
 8001290:	2200      	movs	r2, #0
 8001292:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001294:	4b19      	ldr	r3, [pc, #100]	@ (80012fc <MX_USART1_UART_Init+0x98>)
 8001296:	2200      	movs	r2, #0
 8001298:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800129a:	4b18      	ldr	r3, [pc, #96]	@ (80012fc <MX_USART1_UART_Init+0x98>)
 800129c:	2200      	movs	r2, #0
 800129e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80012a0:	4b16      	ldr	r3, [pc, #88]	@ (80012fc <MX_USART1_UART_Init+0x98>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012a6:	4b15      	ldr	r3, [pc, #84]	@ (80012fc <MX_USART1_UART_Init+0x98>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RS485Ex_Init(&huart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 80012ac:	4813      	ldr	r0, [pc, #76]	@ (80012fc <MX_USART1_UART_Init+0x98>)
 80012ae:	2300      	movs	r3, #0
 80012b0:	2200      	movs	r2, #0
 80012b2:	2100      	movs	r1, #0
 80012b4:	f004 fc10 	bl	8005ad8 <HAL_RS485Ex_Init>
 80012b8:	1e03      	subs	r3, r0, #0
 80012ba:	d001      	beq.n	80012c0 <MX_USART1_UART_Init+0x5c>
  {
    Error_Handler();
 80012bc:	f000 f8fa 	bl	80014b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012c0:	4b0e      	ldr	r3, [pc, #56]	@ (80012fc <MX_USART1_UART_Init+0x98>)
 80012c2:	2100      	movs	r1, #0
 80012c4:	0018      	movs	r0, r3
 80012c6:	f004 fccb 	bl	8005c60 <HAL_UARTEx_SetTxFifoThreshold>
 80012ca:	1e03      	subs	r3, r0, #0
 80012cc:	d001      	beq.n	80012d2 <MX_USART1_UART_Init+0x6e>
  {
    Error_Handler();
 80012ce:	f000 f8f1 	bl	80014b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012d2:	4b0a      	ldr	r3, [pc, #40]	@ (80012fc <MX_USART1_UART_Init+0x98>)
 80012d4:	2100      	movs	r1, #0
 80012d6:	0018      	movs	r0, r3
 80012d8:	f004 fd02 	bl	8005ce0 <HAL_UARTEx_SetRxFifoThreshold>
 80012dc:	1e03      	subs	r3, r0, #0
 80012de:	d001      	beq.n	80012e4 <MX_USART1_UART_Init+0x80>
  {
    Error_Handler();
 80012e0:	f000 f8e8 	bl	80014b4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80012e4:	4b05      	ldr	r3, [pc, #20]	@ (80012fc <MX_USART1_UART_Init+0x98>)
 80012e6:	0018      	movs	r0, r3
 80012e8:	f004 fc80 	bl	8005bec <HAL_UARTEx_DisableFifoMode>
 80012ec:	1e03      	subs	r3, r0, #0
 80012ee:	d001      	beq.n	80012f4 <MX_USART1_UART_Init+0x90>
  {
    Error_Handler();
 80012f0:	f000 f8e0 	bl	80014b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012f4:	46c0      	nop			@ (mov r8, r8)
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	46c0      	nop			@ (mov r8, r8)
 80012fc:	2000019c 	.word	0x2000019c
 8001300:	40013800 	.word	0x40013800

08001304 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001308:	4b23      	ldr	r3, [pc, #140]	@ (8001398 <MX_USART2_UART_Init+0x94>)
 800130a:	4a24      	ldr	r2, [pc, #144]	@ (800139c <MX_USART2_UART_Init+0x98>)
 800130c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800130e:	4b22      	ldr	r3, [pc, #136]	@ (8001398 <MX_USART2_UART_Init+0x94>)
 8001310:	2296      	movs	r2, #150	@ 0x96
 8001312:	0192      	lsls	r2, r2, #6
 8001314:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001316:	4b20      	ldr	r3, [pc, #128]	@ (8001398 <MX_USART2_UART_Init+0x94>)
 8001318:	2200      	movs	r2, #0
 800131a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800131c:	4b1e      	ldr	r3, [pc, #120]	@ (8001398 <MX_USART2_UART_Init+0x94>)
 800131e:	2200      	movs	r2, #0
 8001320:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001322:	4b1d      	ldr	r3, [pc, #116]	@ (8001398 <MX_USART2_UART_Init+0x94>)
 8001324:	2200      	movs	r2, #0
 8001326:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001328:	4b1b      	ldr	r3, [pc, #108]	@ (8001398 <MX_USART2_UART_Init+0x94>)
 800132a:	220c      	movs	r2, #12
 800132c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800132e:	4b1a      	ldr	r3, [pc, #104]	@ (8001398 <MX_USART2_UART_Init+0x94>)
 8001330:	2200      	movs	r2, #0
 8001332:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001334:	4b18      	ldr	r3, [pc, #96]	@ (8001398 <MX_USART2_UART_Init+0x94>)
 8001336:	2200      	movs	r2, #0
 8001338:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800133a:	4b17      	ldr	r3, [pc, #92]	@ (8001398 <MX_USART2_UART_Init+0x94>)
 800133c:	2200      	movs	r2, #0
 800133e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001340:	4b15      	ldr	r3, [pc, #84]	@ (8001398 <MX_USART2_UART_Init+0x94>)
 8001342:	2200      	movs	r2, #0
 8001344:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001346:	4b14      	ldr	r3, [pc, #80]	@ (8001398 <MX_USART2_UART_Init+0x94>)
 8001348:	2200      	movs	r2, #0
 800134a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800134c:	4b12      	ldr	r3, [pc, #72]	@ (8001398 <MX_USART2_UART_Init+0x94>)
 800134e:	0018      	movs	r0, r3
 8001350:	f002 fed4 	bl	80040fc <HAL_UART_Init>
 8001354:	1e03      	subs	r3, r0, #0
 8001356:	d001      	beq.n	800135c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001358:	f000 f8ac 	bl	80014b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800135c:	4b0e      	ldr	r3, [pc, #56]	@ (8001398 <MX_USART2_UART_Init+0x94>)
 800135e:	2100      	movs	r1, #0
 8001360:	0018      	movs	r0, r3
 8001362:	f004 fc7d 	bl	8005c60 <HAL_UARTEx_SetTxFifoThreshold>
 8001366:	1e03      	subs	r3, r0, #0
 8001368:	d001      	beq.n	800136e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800136a:	f000 f8a3 	bl	80014b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800136e:	4b0a      	ldr	r3, [pc, #40]	@ (8001398 <MX_USART2_UART_Init+0x94>)
 8001370:	2100      	movs	r1, #0
 8001372:	0018      	movs	r0, r3
 8001374:	f004 fcb4 	bl	8005ce0 <HAL_UARTEx_SetRxFifoThreshold>
 8001378:	1e03      	subs	r3, r0, #0
 800137a:	d001      	beq.n	8001380 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800137c:	f000 f89a 	bl	80014b4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001380:	4b05      	ldr	r3, [pc, #20]	@ (8001398 <MX_USART2_UART_Init+0x94>)
 8001382:	0018      	movs	r0, r3
 8001384:	f004 fc32 	bl	8005bec <HAL_UARTEx_DisableFifoMode>
 8001388:	1e03      	subs	r3, r0, #0
 800138a:	d001      	beq.n	8001390 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800138c:	f000 f892 	bl	80014b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001390:	46c0      	nop			@ (mov r8, r8)
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	46c0      	nop			@ (mov r8, r8)
 8001398:	20000230 	.word	0x20000230
 800139c:	40004400 	.word	0x40004400

080013a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013a6:	4b14      	ldr	r3, [pc, #80]	@ (80013f8 <MX_DMA_Init+0x58>)
 80013a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80013aa:	4b13      	ldr	r3, [pc, #76]	@ (80013f8 <MX_DMA_Init+0x58>)
 80013ac:	2101      	movs	r1, #1
 80013ae:	430a      	orrs	r2, r1
 80013b0:	639a      	str	r2, [r3, #56]	@ 0x38
 80013b2:	4b11      	ldr	r3, [pc, #68]	@ (80013f8 <MX_DMA_Init+0x58>)
 80013b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013b6:	2201      	movs	r2, #1
 80013b8:	4013      	ands	r3, r2
 80013ba:	607b      	str	r3, [r7, #4]
 80013bc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80013be:	2200      	movs	r2, #0
 80013c0:	2100      	movs	r1, #0
 80013c2:	2009      	movs	r0, #9
 80013c4:	f000 fcda 	bl	8001d7c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80013c8:	2009      	movs	r0, #9
 80013ca:	f000 fcec 	bl	8001da6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80013ce:	2200      	movs	r2, #0
 80013d0:	2100      	movs	r1, #0
 80013d2:	200a      	movs	r0, #10
 80013d4:	f000 fcd2 	bl	8001d7c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80013d8:	200a      	movs	r0, #10
 80013da:	f000 fce4 	bl	8001da6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn, 0, 0);
 80013de:	2200      	movs	r2, #0
 80013e0:	2100      	movs	r1, #0
 80013e2:	200b      	movs	r0, #11
 80013e4:	f000 fcca 	bl	8001d7c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn);
 80013e8:	200b      	movs	r0, #11
 80013ea:	f000 fcdc 	bl	8001da6 <HAL_NVIC_EnableIRQ>

}
 80013ee:	46c0      	nop			@ (mov r8, r8)
 80013f0:	46bd      	mov	sp, r7
 80013f2:	b002      	add	sp, #8
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	46c0      	nop			@ (mov r8, r8)
 80013f8:	40021000 	.word	0x40021000

080013fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013fc:	b590      	push	{r4, r7, lr}
 80013fe:	b08b      	sub	sp, #44	@ 0x2c
 8001400:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001402:	2414      	movs	r4, #20
 8001404:	193b      	adds	r3, r7, r4
 8001406:	0018      	movs	r0, r3
 8001408:	2314      	movs	r3, #20
 800140a:	001a      	movs	r2, r3
 800140c:	2100      	movs	r1, #0
 800140e:	f004 ff5b 	bl	80062c8 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001412:	4b27      	ldr	r3, [pc, #156]	@ (80014b0 <MX_GPIO_Init+0xb4>)
 8001414:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001416:	4b26      	ldr	r3, [pc, #152]	@ (80014b0 <MX_GPIO_Init+0xb4>)
 8001418:	2104      	movs	r1, #4
 800141a:	430a      	orrs	r2, r1
 800141c:	635a      	str	r2, [r3, #52]	@ 0x34
 800141e:	4b24      	ldr	r3, [pc, #144]	@ (80014b0 <MX_GPIO_Init+0xb4>)
 8001420:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001422:	2204      	movs	r2, #4
 8001424:	4013      	ands	r3, r2
 8001426:	613b      	str	r3, [r7, #16]
 8001428:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800142a:	4b21      	ldr	r3, [pc, #132]	@ (80014b0 <MX_GPIO_Init+0xb4>)
 800142c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800142e:	4b20      	ldr	r3, [pc, #128]	@ (80014b0 <MX_GPIO_Init+0xb4>)
 8001430:	2120      	movs	r1, #32
 8001432:	430a      	orrs	r2, r1
 8001434:	635a      	str	r2, [r3, #52]	@ 0x34
 8001436:	4b1e      	ldr	r3, [pc, #120]	@ (80014b0 <MX_GPIO_Init+0xb4>)
 8001438:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800143a:	2220      	movs	r2, #32
 800143c:	4013      	ands	r3, r2
 800143e:	60fb      	str	r3, [r7, #12]
 8001440:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001442:	4b1b      	ldr	r3, [pc, #108]	@ (80014b0 <MX_GPIO_Init+0xb4>)
 8001444:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001446:	4b1a      	ldr	r3, [pc, #104]	@ (80014b0 <MX_GPIO_Init+0xb4>)
 8001448:	2101      	movs	r1, #1
 800144a:	430a      	orrs	r2, r1
 800144c:	635a      	str	r2, [r3, #52]	@ 0x34
 800144e:	4b18      	ldr	r3, [pc, #96]	@ (80014b0 <MX_GPIO_Init+0xb4>)
 8001450:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001452:	2201      	movs	r2, #1
 8001454:	4013      	ands	r3, r2
 8001456:	60bb      	str	r3, [r7, #8]
 8001458:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800145a:	4b15      	ldr	r3, [pc, #84]	@ (80014b0 <MX_GPIO_Init+0xb4>)
 800145c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800145e:	4b14      	ldr	r3, [pc, #80]	@ (80014b0 <MX_GPIO_Init+0xb4>)
 8001460:	2108      	movs	r1, #8
 8001462:	430a      	orrs	r2, r1
 8001464:	635a      	str	r2, [r3, #52]	@ 0x34
 8001466:	4b12      	ldr	r3, [pc, #72]	@ (80014b0 <MX_GPIO_Init+0xb4>)
 8001468:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800146a:	2208      	movs	r2, #8
 800146c:	4013      	ands	r3, r2
 800146e:	607b      	str	r3, [r7, #4]
 8001470:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8001472:	23a0      	movs	r3, #160	@ 0xa0
 8001474:	05db      	lsls	r3, r3, #23
 8001476:	2200      	movs	r2, #0
 8001478:	2120      	movs	r1, #32
 800147a:	0018      	movs	r0, r3
 800147c:	f001 fe8e 	bl	800319c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8001480:	0021      	movs	r1, r4
 8001482:	187b      	adds	r3, r7, r1
 8001484:	2220      	movs	r2, #32
 8001486:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001488:	187b      	adds	r3, r7, r1
 800148a:	2201      	movs	r2, #1
 800148c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148e:	187b      	adds	r3, r7, r1
 8001490:	2200      	movs	r2, #0
 8001492:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001494:	187b      	adds	r3, r7, r1
 8001496:	2202      	movs	r2, #2
 8001498:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 800149a:	187a      	adds	r2, r7, r1
 800149c:	23a0      	movs	r3, #160	@ 0xa0
 800149e:	05db      	lsls	r3, r3, #23
 80014a0:	0011      	movs	r1, r2
 80014a2:	0018      	movs	r0, r3
 80014a4:	f001 fd0e 	bl	8002ec4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014a8:	46c0      	nop			@ (mov r8, r8)
 80014aa:	46bd      	mov	sp, r7
 80014ac:	b00b      	add	sp, #44	@ 0x2c
 80014ae:	bd90      	pop	{r4, r7, pc}
 80014b0:	40021000 	.word	0x40021000

080014b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014b8:	b672      	cpsid	i
}
 80014ba:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014bc:	46c0      	nop			@ (mov r8, r8)
 80014be:	e7fd      	b.n	80014bc <Error_Handler+0x8>

080014c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014c6:	4b11      	ldr	r3, [pc, #68]	@ (800150c <HAL_MspInit+0x4c>)
 80014c8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80014ca:	4b10      	ldr	r3, [pc, #64]	@ (800150c <HAL_MspInit+0x4c>)
 80014cc:	2101      	movs	r1, #1
 80014ce:	430a      	orrs	r2, r1
 80014d0:	641a      	str	r2, [r3, #64]	@ 0x40
 80014d2:	4b0e      	ldr	r3, [pc, #56]	@ (800150c <HAL_MspInit+0x4c>)
 80014d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d6:	2201      	movs	r2, #1
 80014d8:	4013      	ands	r3, r2
 80014da:	607b      	str	r3, [r7, #4]
 80014dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014de:	4b0b      	ldr	r3, [pc, #44]	@ (800150c <HAL_MspInit+0x4c>)
 80014e0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80014e2:	4b0a      	ldr	r3, [pc, #40]	@ (800150c <HAL_MspInit+0x4c>)
 80014e4:	2180      	movs	r1, #128	@ 0x80
 80014e6:	0549      	lsls	r1, r1, #21
 80014e8:	430a      	orrs	r2, r1
 80014ea:	63da      	str	r2, [r3, #60]	@ 0x3c
 80014ec:	4b07      	ldr	r3, [pc, #28]	@ (800150c <HAL_MspInit+0x4c>)
 80014ee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80014f0:	2380      	movs	r3, #128	@ 0x80
 80014f2:	055b      	lsls	r3, r3, #21
 80014f4:	4013      	ands	r3, r2
 80014f6:	603b      	str	r3, [r7, #0]
 80014f8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80014fa:	23c0      	movs	r3, #192	@ 0xc0
 80014fc:	00db      	lsls	r3, r3, #3
 80014fe:	0018      	movs	r0, r3
 8001500:	f000 fb7a 	bl	8001bf8 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001504:	46c0      	nop			@ (mov r8, r8)
 8001506:	46bd      	mov	sp, r7
 8001508:	b002      	add	sp, #8
 800150a:	bd80      	pop	{r7, pc}
 800150c:	40021000 	.word	0x40021000

08001510 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001510:	b590      	push	{r4, r7, lr}
 8001512:	b09d      	sub	sp, #116	@ 0x74
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001518:	235c      	movs	r3, #92	@ 0x5c
 800151a:	18fb      	adds	r3, r7, r3
 800151c:	0018      	movs	r0, r3
 800151e:	2314      	movs	r3, #20
 8001520:	001a      	movs	r2, r3
 8001522:	2100      	movs	r1, #0
 8001524:	f004 fed0 	bl	80062c8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001528:	2410      	movs	r4, #16
 800152a:	193b      	adds	r3, r7, r4
 800152c:	0018      	movs	r0, r3
 800152e:	234c      	movs	r3, #76	@ 0x4c
 8001530:	001a      	movs	r2, r3
 8001532:	2100      	movs	r1, #0
 8001534:	f004 fec8 	bl	80062c8 <memset>
  if(hfdcan->Instance==FDCAN1)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a2a      	ldr	r2, [pc, #168]	@ (80015e8 <HAL_FDCAN_MspInit+0xd8>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d14e      	bne.n	80015e0 <HAL_FDCAN_MspInit+0xd0>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001542:	193b      	adds	r3, r7, r4
 8001544:	2280      	movs	r2, #128	@ 0x80
 8001546:	0492      	lsls	r2, r2, #18
 8001548:	601a      	str	r2, [r3, #0]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 800154a:	193b      	adds	r3, r7, r4
 800154c:	2200      	movs	r2, #0
 800154e:	649a      	str	r2, [r3, #72]	@ 0x48

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001550:	193b      	adds	r3, r7, r4
 8001552:	0018      	movs	r0, r3
 8001554:	f002 fb96 	bl	8003c84 <HAL_RCCEx_PeriphCLKConfig>
 8001558:	1e03      	subs	r3, r0, #0
 800155a:	d001      	beq.n	8001560 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 800155c:	f7ff ffaa 	bl	80014b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001560:	4b22      	ldr	r3, [pc, #136]	@ (80015ec <HAL_FDCAN_MspInit+0xdc>)
 8001562:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001564:	4b21      	ldr	r3, [pc, #132]	@ (80015ec <HAL_FDCAN_MspInit+0xdc>)
 8001566:	2180      	movs	r1, #128	@ 0x80
 8001568:	0149      	lsls	r1, r1, #5
 800156a:	430a      	orrs	r2, r1
 800156c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800156e:	4b1f      	ldr	r3, [pc, #124]	@ (80015ec <HAL_FDCAN_MspInit+0xdc>)
 8001570:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001572:	2380      	movs	r3, #128	@ 0x80
 8001574:	015b      	lsls	r3, r3, #5
 8001576:	4013      	ands	r3, r2
 8001578:	60fb      	str	r3, [r7, #12]
 800157a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800157c:	4b1b      	ldr	r3, [pc, #108]	@ (80015ec <HAL_FDCAN_MspInit+0xdc>)
 800157e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001580:	4b1a      	ldr	r3, [pc, #104]	@ (80015ec <HAL_FDCAN_MspInit+0xdc>)
 8001582:	2108      	movs	r1, #8
 8001584:	430a      	orrs	r2, r1
 8001586:	635a      	str	r2, [r3, #52]	@ 0x34
 8001588:	4b18      	ldr	r3, [pc, #96]	@ (80015ec <HAL_FDCAN_MspInit+0xdc>)
 800158a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800158c:	2208      	movs	r2, #8
 800158e:	4013      	ands	r3, r2
 8001590:	60bb      	str	r3, [r7, #8]
 8001592:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001594:	215c      	movs	r1, #92	@ 0x5c
 8001596:	187b      	adds	r3, r7, r1
 8001598:	2203      	movs	r2, #3
 800159a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159c:	187b      	adds	r3, r7, r1
 800159e:	2202      	movs	r2, #2
 80015a0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a2:	187b      	adds	r3, r7, r1
 80015a4:	2200      	movs	r2, #0
 80015a6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a8:	187b      	adds	r3, r7, r1
 80015aa:	2200      	movs	r2, #0
 80015ac:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_FDCAN1;
 80015ae:	187b      	adds	r3, r7, r1
 80015b0:	2203      	movs	r2, #3
 80015b2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015b4:	187b      	adds	r3, r7, r1
 80015b6:	4a0e      	ldr	r2, [pc, #56]	@ (80015f0 <HAL_FDCAN_MspInit+0xe0>)
 80015b8:	0019      	movs	r1, r3
 80015ba:	0010      	movs	r0, r2
 80015bc:	f001 fc82 	bl	8002ec4 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_FDCAN_IT0_IRQn, 0, 0);
 80015c0:	2200      	movs	r2, #0
 80015c2:	2100      	movs	r1, #0
 80015c4:	2015      	movs	r0, #21
 80015c6:	f000 fbd9 	bl	8001d7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_FDCAN_IT0_IRQn);
 80015ca:	2015      	movs	r0, #21
 80015cc:	f000 fbeb 	bl	8001da6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM17_FDCAN_IT1_IRQn, 0, 0);
 80015d0:	2200      	movs	r2, #0
 80015d2:	2100      	movs	r1, #0
 80015d4:	2016      	movs	r0, #22
 80015d6:	f000 fbd1 	bl	8001d7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_FDCAN_IT1_IRQn);
 80015da:	2016      	movs	r0, #22
 80015dc:	f000 fbe3 	bl	8001da6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 80015e0:	46c0      	nop			@ (mov r8, r8)
 80015e2:	46bd      	mov	sp, r7
 80015e4:	b01d      	add	sp, #116	@ 0x74
 80015e6:	bd90      	pop	{r4, r7, pc}
 80015e8:	40006400 	.word	0x40006400
 80015ec:	40021000 	.word	0x40021000
 80015f0:	50000c00 	.word	0x50000c00

080015f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015f4:	b590      	push	{r4, r7, lr}
 80015f6:	b0a1      	sub	sp, #132	@ 0x84
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015fc:	236c      	movs	r3, #108	@ 0x6c
 80015fe:	18fb      	adds	r3, r7, r3
 8001600:	0018      	movs	r0, r3
 8001602:	2314      	movs	r3, #20
 8001604:	001a      	movs	r2, r3
 8001606:	2100      	movs	r1, #0
 8001608:	f004 fe5e 	bl	80062c8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800160c:	2420      	movs	r4, #32
 800160e:	193b      	adds	r3, r7, r4
 8001610:	0018      	movs	r0, r3
 8001612:	234c      	movs	r3, #76	@ 0x4c
 8001614:	001a      	movs	r2, r3
 8001616:	2100      	movs	r1, #0
 8001618:	f004 fe56 	bl	80062c8 <memset>
  if(huart->Instance==USART1)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a89      	ldr	r2, [pc, #548]	@ (8001848 <HAL_UART_MspInit+0x254>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d000      	beq.n	8001628 <HAL_UART_MspInit+0x34>
 8001626:	e094      	b.n	8001752 <HAL_UART_MspInit+0x15e>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001628:	193b      	adds	r3, r7, r4
 800162a:	2201      	movs	r2, #1
 800162c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800162e:	193b      	adds	r3, r7, r4
 8001630:	2200      	movs	r2, #0
 8001632:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001634:	193b      	adds	r3, r7, r4
 8001636:	0018      	movs	r0, r3
 8001638:	f002 fb24 	bl	8003c84 <HAL_RCCEx_PeriphCLKConfig>
 800163c:	1e03      	subs	r3, r0, #0
 800163e:	d001      	beq.n	8001644 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8001640:	f7ff ff38 	bl	80014b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001644:	4b81      	ldr	r3, [pc, #516]	@ (800184c <HAL_UART_MspInit+0x258>)
 8001646:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001648:	4b80      	ldr	r3, [pc, #512]	@ (800184c <HAL_UART_MspInit+0x258>)
 800164a:	2180      	movs	r1, #128	@ 0x80
 800164c:	01c9      	lsls	r1, r1, #7
 800164e:	430a      	orrs	r2, r1
 8001650:	641a      	str	r2, [r3, #64]	@ 0x40
 8001652:	4b7e      	ldr	r3, [pc, #504]	@ (800184c <HAL_UART_MspInit+0x258>)
 8001654:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001656:	2380      	movs	r3, #128	@ 0x80
 8001658:	01db      	lsls	r3, r3, #7
 800165a:	4013      	ands	r3, r2
 800165c:	61fb      	str	r3, [r7, #28]
 800165e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001660:	4b7a      	ldr	r3, [pc, #488]	@ (800184c <HAL_UART_MspInit+0x258>)
 8001662:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001664:	4b79      	ldr	r3, [pc, #484]	@ (800184c <HAL_UART_MspInit+0x258>)
 8001666:	2104      	movs	r1, #4
 8001668:	430a      	orrs	r2, r1
 800166a:	635a      	str	r2, [r3, #52]	@ 0x34
 800166c:	4b77      	ldr	r3, [pc, #476]	@ (800184c <HAL_UART_MspInit+0x258>)
 800166e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001670:	2204      	movs	r2, #4
 8001672:	4013      	ands	r3, r2
 8001674:	61bb      	str	r3, [r7, #24]
 8001676:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001678:	4b74      	ldr	r3, [pc, #464]	@ (800184c <HAL_UART_MspInit+0x258>)
 800167a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800167c:	4b73      	ldr	r3, [pc, #460]	@ (800184c <HAL_UART_MspInit+0x258>)
 800167e:	2101      	movs	r1, #1
 8001680:	430a      	orrs	r2, r1
 8001682:	635a      	str	r2, [r3, #52]	@ 0x34
 8001684:	4b71      	ldr	r3, [pc, #452]	@ (800184c <HAL_UART_MspInit+0x258>)
 8001686:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001688:	2201      	movs	r2, #1
 800168a:	4013      	ands	r3, r2
 800168c:	617b      	str	r3, [r7, #20]
 800168e:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    PA12 [PA10]     ------> USART1_DE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001690:	246c      	movs	r4, #108	@ 0x6c
 8001692:	193b      	adds	r3, r7, r4
 8001694:	2230      	movs	r2, #48	@ 0x30
 8001696:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001698:	193b      	adds	r3, r7, r4
 800169a:	2202      	movs	r2, #2
 800169c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169e:	193b      	adds	r3, r7, r4
 80016a0:	2200      	movs	r2, #0
 80016a2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a4:	193b      	adds	r3, r7, r4
 80016a6:	2200      	movs	r2, #0
 80016a8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80016aa:	193b      	adds	r3, r7, r4
 80016ac:	2201      	movs	r2, #1
 80016ae:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016b0:	193b      	adds	r3, r7, r4
 80016b2:	4a67      	ldr	r2, [pc, #412]	@ (8001850 <HAL_UART_MspInit+0x25c>)
 80016b4:	0019      	movs	r1, r3
 80016b6:	0010      	movs	r0, r2
 80016b8:	f001 fc04 	bl	8002ec4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80016bc:	0021      	movs	r1, r4
 80016be:	187b      	adds	r3, r7, r1
 80016c0:	2280      	movs	r2, #128	@ 0x80
 80016c2:	0152      	lsls	r2, r2, #5
 80016c4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c6:	187b      	adds	r3, r7, r1
 80016c8:	2202      	movs	r2, #2
 80016ca:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016cc:	187b      	adds	r3, r7, r1
 80016ce:	2200      	movs	r2, #0
 80016d0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d2:	187b      	adds	r3, r7, r1
 80016d4:	2200      	movs	r2, #0
 80016d6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80016d8:	187b      	adds	r3, r7, r1
 80016da:	2201      	movs	r2, #1
 80016dc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016de:	187a      	adds	r2, r7, r1
 80016e0:	23a0      	movs	r3, #160	@ 0xa0
 80016e2:	05db      	lsls	r3, r3, #23
 80016e4:	0011      	movs	r1, r2
 80016e6:	0018      	movs	r0, r3
 80016e8:	f001 fbec 	bl	8002ec4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel2;
 80016ec:	4b59      	ldr	r3, [pc, #356]	@ (8001854 <HAL_UART_MspInit+0x260>)
 80016ee:	4a5a      	ldr	r2, [pc, #360]	@ (8001858 <HAL_UART_MspInit+0x264>)
 80016f0:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80016f2:	4b58      	ldr	r3, [pc, #352]	@ (8001854 <HAL_UART_MspInit+0x260>)
 80016f4:	2232      	movs	r2, #50	@ 0x32
 80016f6:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016f8:	4b56      	ldr	r3, [pc, #344]	@ (8001854 <HAL_UART_MspInit+0x260>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016fe:	4b55      	ldr	r3, [pc, #340]	@ (8001854 <HAL_UART_MspInit+0x260>)
 8001700:	2200      	movs	r2, #0
 8001702:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001704:	4b53      	ldr	r3, [pc, #332]	@ (8001854 <HAL_UART_MspInit+0x260>)
 8001706:	2280      	movs	r2, #128	@ 0x80
 8001708:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800170a:	4b52      	ldr	r3, [pc, #328]	@ (8001854 <HAL_UART_MspInit+0x260>)
 800170c:	2200      	movs	r2, #0
 800170e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001710:	4b50      	ldr	r3, [pc, #320]	@ (8001854 <HAL_UART_MspInit+0x260>)
 8001712:	2200      	movs	r2, #0
 8001714:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001716:	4b4f      	ldr	r3, [pc, #316]	@ (8001854 <HAL_UART_MspInit+0x260>)
 8001718:	2200      	movs	r2, #0
 800171a:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800171c:	4b4d      	ldr	r3, [pc, #308]	@ (8001854 <HAL_UART_MspInit+0x260>)
 800171e:	2200      	movs	r2, #0
 8001720:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001722:	4b4c      	ldr	r3, [pc, #304]	@ (8001854 <HAL_UART_MspInit+0x260>)
 8001724:	0018      	movs	r0, r3
 8001726:	f000 fb5b 	bl	8001de0 <HAL_DMA_Init>
 800172a:	1e03      	subs	r3, r0, #0
 800172c:	d001      	beq.n	8001732 <HAL_UART_MspInit+0x13e>
    {
      Error_Handler();
 800172e:	f7ff fec1 	bl	80014b4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2180      	movs	r1, #128	@ 0x80
 8001736:	4a47      	ldr	r2, [pc, #284]	@ (8001854 <HAL_UART_MspInit+0x260>)
 8001738:	505a      	str	r2, [r3, r1]
 800173a:	4b46      	ldr	r3, [pc, #280]	@ (8001854 <HAL_UART_MspInit+0x260>)
 800173c:	687a      	ldr	r2, [r7, #4]
 800173e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001740:	2200      	movs	r2, #0
 8001742:	2100      	movs	r1, #0
 8001744:	201b      	movs	r0, #27
 8001746:	f000 fb19 	bl	8001d7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800174a:	201b      	movs	r0, #27
 800174c:	f000 fb2b 	bl	8001da6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001750:	e075      	b.n	800183e <HAL_UART_MspInit+0x24a>
  else if(huart->Instance==USART2)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a41      	ldr	r2, [pc, #260]	@ (800185c <HAL_UART_MspInit+0x268>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d170      	bne.n	800183e <HAL_UART_MspInit+0x24a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800175c:	2120      	movs	r1, #32
 800175e:	187b      	adds	r3, r7, r1
 8001760:	2202      	movs	r2, #2
 8001762:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001764:	187b      	adds	r3, r7, r1
 8001766:	2200      	movs	r2, #0
 8001768:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800176a:	187b      	adds	r3, r7, r1
 800176c:	0018      	movs	r0, r3
 800176e:	f002 fa89 	bl	8003c84 <HAL_RCCEx_PeriphCLKConfig>
 8001772:	1e03      	subs	r3, r0, #0
 8001774:	d001      	beq.n	800177a <HAL_UART_MspInit+0x186>
      Error_Handler();
 8001776:	f7ff fe9d 	bl	80014b4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800177a:	4b34      	ldr	r3, [pc, #208]	@ (800184c <HAL_UART_MspInit+0x258>)
 800177c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800177e:	4b33      	ldr	r3, [pc, #204]	@ (800184c <HAL_UART_MspInit+0x258>)
 8001780:	2180      	movs	r1, #128	@ 0x80
 8001782:	0289      	lsls	r1, r1, #10
 8001784:	430a      	orrs	r2, r1
 8001786:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001788:	4b30      	ldr	r3, [pc, #192]	@ (800184c <HAL_UART_MspInit+0x258>)
 800178a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800178c:	2380      	movs	r3, #128	@ 0x80
 800178e:	029b      	lsls	r3, r3, #10
 8001790:	4013      	ands	r3, r2
 8001792:	613b      	str	r3, [r7, #16]
 8001794:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001796:	4b2d      	ldr	r3, [pc, #180]	@ (800184c <HAL_UART_MspInit+0x258>)
 8001798:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800179a:	4b2c      	ldr	r3, [pc, #176]	@ (800184c <HAL_UART_MspInit+0x258>)
 800179c:	2101      	movs	r1, #1
 800179e:	430a      	orrs	r2, r1
 80017a0:	635a      	str	r2, [r3, #52]	@ 0x34
 80017a2:	4b2a      	ldr	r3, [pc, #168]	@ (800184c <HAL_UART_MspInit+0x258>)
 80017a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017a6:	2201      	movs	r2, #1
 80017a8:	4013      	ands	r3, r2
 80017aa:	60fb      	str	r3, [r7, #12]
 80017ac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 80017ae:	216c      	movs	r1, #108	@ 0x6c
 80017b0:	187b      	adds	r3, r7, r1
 80017b2:	220c      	movs	r2, #12
 80017b4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b6:	187b      	adds	r3, r7, r1
 80017b8:	2202      	movs	r2, #2
 80017ba:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017bc:	187b      	adds	r3, r7, r1
 80017be:	2200      	movs	r2, #0
 80017c0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c2:	187b      	adds	r3, r7, r1
 80017c4:	2200      	movs	r2, #0
 80017c6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80017c8:	187b      	adds	r3, r7, r1
 80017ca:	2201      	movs	r2, #1
 80017cc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ce:	187a      	adds	r2, r7, r1
 80017d0:	23a0      	movs	r3, #160	@ 0xa0
 80017d2:	05db      	lsls	r3, r3, #23
 80017d4:	0011      	movs	r1, r2
 80017d6:	0018      	movs	r0, r3
 80017d8:	f001 fb74 	bl	8002ec4 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel1;
 80017dc:	4b20      	ldr	r3, [pc, #128]	@ (8001860 <HAL_UART_MspInit+0x26c>)
 80017de:	4a21      	ldr	r2, [pc, #132]	@ (8001864 <HAL_UART_MspInit+0x270>)
 80017e0:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80017e2:	4b1f      	ldr	r3, [pc, #124]	@ (8001860 <HAL_UART_MspInit+0x26c>)
 80017e4:	2235      	movs	r2, #53	@ 0x35
 80017e6:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017e8:	4b1d      	ldr	r3, [pc, #116]	@ (8001860 <HAL_UART_MspInit+0x26c>)
 80017ea:	2210      	movs	r2, #16
 80017ec:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017ee:	4b1c      	ldr	r3, [pc, #112]	@ (8001860 <HAL_UART_MspInit+0x26c>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80017f4:	4b1a      	ldr	r3, [pc, #104]	@ (8001860 <HAL_UART_MspInit+0x26c>)
 80017f6:	2280      	movs	r2, #128	@ 0x80
 80017f8:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017fa:	4b19      	ldr	r3, [pc, #100]	@ (8001860 <HAL_UART_MspInit+0x26c>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001800:	4b17      	ldr	r3, [pc, #92]	@ (8001860 <HAL_UART_MspInit+0x26c>)
 8001802:	2200      	movs	r2, #0
 8001804:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001806:	4b16      	ldr	r3, [pc, #88]	@ (8001860 <HAL_UART_MspInit+0x26c>)
 8001808:	2200      	movs	r2, #0
 800180a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800180c:	4b14      	ldr	r3, [pc, #80]	@ (8001860 <HAL_UART_MspInit+0x26c>)
 800180e:	2200      	movs	r2, #0
 8001810:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001812:	4b13      	ldr	r3, [pc, #76]	@ (8001860 <HAL_UART_MspInit+0x26c>)
 8001814:	0018      	movs	r0, r3
 8001816:	f000 fae3 	bl	8001de0 <HAL_DMA_Init>
 800181a:	1e03      	subs	r3, r0, #0
 800181c:	d001      	beq.n	8001822 <HAL_UART_MspInit+0x22e>
      Error_Handler();
 800181e:	f7ff fe49 	bl	80014b4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4a0e      	ldr	r2, [pc, #56]	@ (8001860 <HAL_UART_MspInit+0x26c>)
 8001826:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001828:	4b0d      	ldr	r3, [pc, #52]	@ (8001860 <HAL_UART_MspInit+0x26c>)
 800182a:	687a      	ldr	r2, [r7, #4]
 800182c:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_LPUART2_IRQn, 0, 0);
 800182e:	2200      	movs	r2, #0
 8001830:	2100      	movs	r1, #0
 8001832:	201c      	movs	r0, #28
 8001834:	f000 faa2 	bl	8001d7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_LPUART2_IRQn);
 8001838:	201c      	movs	r0, #28
 800183a:	f000 fab4 	bl	8001da6 <HAL_NVIC_EnableIRQ>
}
 800183e:	46c0      	nop			@ (mov r8, r8)
 8001840:	46bd      	mov	sp, r7
 8001842:	b021      	add	sp, #132	@ 0x84
 8001844:	bd90      	pop	{r4, r7, pc}
 8001846:	46c0      	nop			@ (mov r8, r8)
 8001848:	40013800 	.word	0x40013800
 800184c:	40021000 	.word	0x40021000
 8001850:	50000800 	.word	0x50000800
 8001854:	200002c4 	.word	0x200002c4
 8001858:	4002001c 	.word	0x4002001c
 800185c:	40004400 	.word	0x40004400
 8001860:	20000324 	.word	0x20000324
 8001864:	40020008 	.word	0x40020008

08001868 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800186c:	46c0      	nop			@ (mov r8, r8)
 800186e:	e7fd      	b.n	800186c <NMI_Handler+0x4>

08001870 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001874:	46c0      	nop			@ (mov r8, r8)
 8001876:	e7fd      	b.n	8001874 <HardFault_Handler+0x4>

08001878 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800187c:	46c0      	nop			@ (mov r8, r8)
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}

08001882 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001882:	b580      	push	{r7, lr}
 8001884:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001886:	46c0      	nop			@ (mov r8, r8)
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}

0800188c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001890:	f000 f972 	bl	8001b78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001894:	46c0      	nop			@ (mov r8, r8)
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
	...

0800189c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80018a0:	4b03      	ldr	r3, [pc, #12]	@ (80018b0 <DMA1_Channel1_IRQHandler+0x14>)
 80018a2:	0018      	movs	r0, r3
 80018a4:	f000 fc96 	bl	80021d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80018a8:	46c0      	nop			@ (mov r8, r8)
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	46c0      	nop			@ (mov r8, r8)
 80018b0:	20000324 	.word	0x20000324

080018b4 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80018b8:	4b03      	ldr	r3, [pc, #12]	@ (80018c8 <DMA1_Channel2_3_IRQHandler+0x14>)
 80018ba:	0018      	movs	r0, r3
 80018bc:	f000 fc8a 	bl	80021d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80018c0:	46c0      	nop			@ (mov r8, r8)
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	46c0      	nop			@ (mov r8, r8)
 80018c8:	200002c4 	.word	0x200002c4

080018cc <DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMA1 Ch4 to Ch7, DMA2 Ch1 to Ch5 and DMAMUX1 Overrun Interrupts.
  */
void DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQHandler(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn 0 */

  /* USER CODE END DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn 0 */
  // Handle DMAMUX
  // Handle DMA1_Channel2
  HAL_DMAEx_MUX_IRQHandler(&hdma_usart1_rx);
 80018d0:	4b03      	ldr	r3, [pc, #12]	@ (80018e0 <DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQHandler+0x14>)
 80018d2:	0018      	movs	r0, r3
 80018d4:	f000 fdf6 	bl	80024c4 <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn 1 */
}
 80018d8:	46c0      	nop			@ (mov r8, r8)
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	46c0      	nop			@ (mov r8, r8)
 80018e0:	200002c4 	.word	0x200002c4

080018e4 <TIM16_FDCAN_IT0_IRQHandler>:

/**
  * @brief This function handles TIM16, FDCAN1_IT0 and FDCAN2_IT0 Interrupt.
  */
void TIM16_FDCAN_IT0_IRQHandler(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_FDCAN_IT0_IRQn 0 */

  /* USER CODE END TIM16_FDCAN_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80018e8:	4b03      	ldr	r3, [pc, #12]	@ (80018f8 <TIM16_FDCAN_IT0_IRQHandler+0x14>)
 80018ea:	0018      	movs	r0, r3
 80018ec:	f001 f86e 	bl	80029cc <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN TIM16_FDCAN_IT0_IRQn 1 */

  /* USER CODE END TIM16_FDCAN_IT0_IRQn 1 */
}
 80018f0:	46c0      	nop			@ (mov r8, r8)
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	46c0      	nop			@ (mov r8, r8)
 80018f8:	20000114 	.word	0x20000114

080018fc <TIM17_FDCAN_IT1_IRQHandler>:

/**
  * @brief This function handles TIM17, FDCAN1_IT1 and FDCAN2_IT1 Interrupt.
  */
void TIM17_FDCAN_IT1_IRQHandler(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_FDCAN_IT1_IRQn 0 */

  /* USER CODE END TIM17_FDCAN_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001900:	4b03      	ldr	r3, [pc, #12]	@ (8001910 <TIM17_FDCAN_IT1_IRQHandler+0x14>)
 8001902:	0018      	movs	r0, r3
 8001904:	f001 f862 	bl	80029cc <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN TIM17_FDCAN_IT1_IRQn 1 */

  /* USER CODE END TIM17_FDCAN_IT1_IRQn 1 */
}
 8001908:	46c0      	nop			@ (mov r8, r8)
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	46c0      	nop			@ (mov r8, r8)
 8001910:	20000114 	.word	0x20000114

08001914 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001918:	4b03      	ldr	r3, [pc, #12]	@ (8001928 <USART1_IRQHandler+0x14>)
 800191a:	0018      	movs	r0, r3
 800191c:	f002 fde2 	bl	80044e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001920:	46c0      	nop			@ (mov r8, r8)
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	46c0      	nop			@ (mov r8, r8)
 8001928:	2000019c 	.word	0x2000019c

0800192c <USART2_LPUART2_IRQHandler>:

/**
  * @brief This function handles USART2 + LPUART2 Interrupt.
  */
void USART2_LPUART2_IRQHandler(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_LPUART2_IRQn 0 */

  /* USER CODE END USART2_LPUART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001930:	4b03      	ldr	r3, [pc, #12]	@ (8001940 <USART2_LPUART2_IRQHandler+0x14>)
 8001932:	0018      	movs	r0, r3
 8001934:	f002 fdd6 	bl	80044e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_LPUART2_IRQn 1 */

  /* USER CODE END USART2_LPUART2_IRQn 1 */
}
 8001938:	46c0      	nop			@ (mov r8, r8)
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	46c0      	nop			@ (mov r8, r8)
 8001940:	20000230 	.word	0x20000230

08001944 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b086      	sub	sp, #24
 8001948:	af00      	add	r7, sp, #0
 800194a:	60f8      	str	r0, [r7, #12]
 800194c:	60b9      	str	r1, [r7, #8]
 800194e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001950:	2300      	movs	r3, #0
 8001952:	617b      	str	r3, [r7, #20]
 8001954:	e00a      	b.n	800196c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001956:	e000      	b.n	800195a <_read+0x16>
 8001958:	bf00      	nop
 800195a:	0001      	movs	r1, r0
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	1c5a      	adds	r2, r3, #1
 8001960:	60ba      	str	r2, [r7, #8]
 8001962:	b2ca      	uxtb	r2, r1
 8001964:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	3301      	adds	r3, #1
 800196a:	617b      	str	r3, [r7, #20]
 800196c:	697a      	ldr	r2, [r7, #20]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	429a      	cmp	r2, r3
 8001972:	dbf0      	blt.n	8001956 <_read+0x12>
  }

  return len;
 8001974:	687b      	ldr	r3, [r7, #4]
}
 8001976:	0018      	movs	r0, r3
 8001978:	46bd      	mov	sp, r7
 800197a:	b006      	add	sp, #24
 800197c:	bd80      	pop	{r7, pc}

0800197e <_close>:
  }
  return len;
}

int _close(int file)
{
 800197e:	b580      	push	{r7, lr}
 8001980:	b082      	sub	sp, #8
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001986:	2301      	movs	r3, #1
 8001988:	425b      	negs	r3, r3
}
 800198a:	0018      	movs	r0, r3
 800198c:	46bd      	mov	sp, r7
 800198e:	b002      	add	sp, #8
 8001990:	bd80      	pop	{r7, pc}

08001992 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001992:	b580      	push	{r7, lr}
 8001994:	b082      	sub	sp, #8
 8001996:	af00      	add	r7, sp, #0
 8001998:	6078      	str	r0, [r7, #4]
 800199a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	2280      	movs	r2, #128	@ 0x80
 80019a0:	0192      	lsls	r2, r2, #6
 80019a2:	605a      	str	r2, [r3, #4]
  return 0;
 80019a4:	2300      	movs	r3, #0
}
 80019a6:	0018      	movs	r0, r3
 80019a8:	46bd      	mov	sp, r7
 80019aa:	b002      	add	sp, #8
 80019ac:	bd80      	pop	{r7, pc}

080019ae <_isatty>:

int _isatty(int file)
{
 80019ae:	b580      	push	{r7, lr}
 80019b0:	b082      	sub	sp, #8
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019b6:	2301      	movs	r3, #1
}
 80019b8:	0018      	movs	r0, r3
 80019ba:	46bd      	mov	sp, r7
 80019bc:	b002      	add	sp, #8
 80019be:	bd80      	pop	{r7, pc}

080019c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	60f8      	str	r0, [r7, #12]
 80019c8:	60b9      	str	r1, [r7, #8]
 80019ca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019cc:	2300      	movs	r3, #0
}
 80019ce:	0018      	movs	r0, r3
 80019d0:	46bd      	mov	sp, r7
 80019d2:	b004      	add	sp, #16
 80019d4:	bd80      	pop	{r7, pc}
	...

080019d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b086      	sub	sp, #24
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019e0:	4a14      	ldr	r2, [pc, #80]	@ (8001a34 <_sbrk+0x5c>)
 80019e2:	4b15      	ldr	r3, [pc, #84]	@ (8001a38 <_sbrk+0x60>)
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019ec:	4b13      	ldr	r3, [pc, #76]	@ (8001a3c <_sbrk+0x64>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d102      	bne.n	80019fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019f4:	4b11      	ldr	r3, [pc, #68]	@ (8001a3c <_sbrk+0x64>)
 80019f6:	4a12      	ldr	r2, [pc, #72]	@ (8001a40 <_sbrk+0x68>)
 80019f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019fa:	4b10      	ldr	r3, [pc, #64]	@ (8001a3c <_sbrk+0x64>)
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	18d3      	adds	r3, r2, r3
 8001a02:	693a      	ldr	r2, [r7, #16]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d207      	bcs.n	8001a18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a08:	f004 fcb4 	bl	8006374 <__errno>
 8001a0c:	0003      	movs	r3, r0
 8001a0e:	220c      	movs	r2, #12
 8001a10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a12:	2301      	movs	r3, #1
 8001a14:	425b      	negs	r3, r3
 8001a16:	e009      	b.n	8001a2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a18:	4b08      	ldr	r3, [pc, #32]	@ (8001a3c <_sbrk+0x64>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a1e:	4b07      	ldr	r3, [pc, #28]	@ (8001a3c <_sbrk+0x64>)
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	18d2      	adds	r2, r2, r3
 8001a26:	4b05      	ldr	r3, [pc, #20]	@ (8001a3c <_sbrk+0x64>)
 8001a28:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
}
 8001a2c:	0018      	movs	r0, r3
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	b006      	add	sp, #24
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	20024000 	.word	0x20024000
 8001a38:	00000400 	.word	0x00000400
 8001a3c:	20000384 	.word	0x20000384
 8001a40:	200004d8 	.word	0x200004d8

08001a44 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a48:	46c0      	nop			@ (mov r8, r8)
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
	...

08001a50 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001a50:	480d      	ldr	r0, [pc, #52]	@ (8001a88 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001a52:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001a54:	f7ff fff6 	bl	8001a44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a58:	480c      	ldr	r0, [pc, #48]	@ (8001a8c <LoopForever+0x6>)
  ldr r1, =_edata
 8001a5a:	490d      	ldr	r1, [pc, #52]	@ (8001a90 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a5c:	4a0d      	ldr	r2, [pc, #52]	@ (8001a94 <LoopForever+0xe>)
  movs r3, #0
 8001a5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a60:	e002      	b.n	8001a68 <LoopCopyDataInit>

08001a62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a66:	3304      	adds	r3, #4

08001a68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a6c:	d3f9      	bcc.n	8001a62 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a6e:	4a0a      	ldr	r2, [pc, #40]	@ (8001a98 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a70:	4c0a      	ldr	r4, [pc, #40]	@ (8001a9c <LoopForever+0x16>)
  movs r3, #0
 8001a72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a74:	e001      	b.n	8001a7a <LoopFillZerobss>

08001a76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a78:	3204      	adds	r2, #4

08001a7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a7c:	d3fb      	bcc.n	8001a76 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001a7e:	f004 fc7f 	bl	8006380 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001a82:	f7ff f921 	bl	8000cc8 <main>

08001a86 <LoopForever>:

LoopForever:
  b LoopForever
 8001a86:	e7fe      	b.n	8001a86 <LoopForever>
  ldr   r0, =_estack
 8001a88:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8001a8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a90:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001a94:	080072fc 	.word	0x080072fc
  ldr r2, =_sbss
 8001a98:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001a9c:	200004d8 	.word	0x200004d8

08001aa0 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001aa0:	e7fe      	b.n	8001aa0 <ADC1_COMP_IRQHandler>
	...

08001aa4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001aaa:	1dfb      	adds	r3, r7, #7
 8001aac:	2200      	movs	r2, #0
 8001aae:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ab0:	4b0b      	ldr	r3, [pc, #44]	@ (8001ae0 <HAL_Init+0x3c>)
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	4b0a      	ldr	r3, [pc, #40]	@ (8001ae0 <HAL_Init+0x3c>)
 8001ab6:	2180      	movs	r1, #128	@ 0x80
 8001ab8:	0049      	lsls	r1, r1, #1
 8001aba:	430a      	orrs	r2, r1
 8001abc:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001abe:	2000      	movs	r0, #0
 8001ac0:	f000 f810 	bl	8001ae4 <HAL_InitTick>
 8001ac4:	1e03      	subs	r3, r0, #0
 8001ac6:	d003      	beq.n	8001ad0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001ac8:	1dfb      	adds	r3, r7, #7
 8001aca:	2201      	movs	r2, #1
 8001acc:	701a      	strb	r2, [r3, #0]
 8001ace:	e001      	b.n	8001ad4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001ad0:	f7ff fcf6 	bl	80014c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ad4:	1dfb      	adds	r3, r7, #7
 8001ad6:	781b      	ldrb	r3, [r3, #0]
}
 8001ad8:	0018      	movs	r0, r3
 8001ada:	46bd      	mov	sp, r7
 8001adc:	b002      	add	sp, #8
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	40022000 	.word	0x40022000

08001ae4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ae4:	b590      	push	{r4, r7, lr}
 8001ae6:	b085      	sub	sp, #20
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001aec:	230f      	movs	r3, #15
 8001aee:	18fb      	adds	r3, r7, r3
 8001af0:	2200      	movs	r2, #0
 8001af2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001af4:	4b1d      	ldr	r3, [pc, #116]	@ (8001b6c <HAL_InitTick+0x88>)
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d02b      	beq.n	8001b54 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001afc:	4b1c      	ldr	r3, [pc, #112]	@ (8001b70 <HAL_InitTick+0x8c>)
 8001afe:	681c      	ldr	r4, [r3, #0]
 8001b00:	4b1a      	ldr	r3, [pc, #104]	@ (8001b6c <HAL_InitTick+0x88>)
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	0019      	movs	r1, r3
 8001b06:	23fa      	movs	r3, #250	@ 0xfa
 8001b08:	0098      	lsls	r0, r3, #2
 8001b0a:	f7fe fb05 	bl	8000118 <__udivsi3>
 8001b0e:	0003      	movs	r3, r0
 8001b10:	0019      	movs	r1, r3
 8001b12:	0020      	movs	r0, r4
 8001b14:	f7fe fb00 	bl	8000118 <__udivsi3>
 8001b18:	0003      	movs	r3, r0
 8001b1a:	0018      	movs	r0, r3
 8001b1c:	f000 f953 	bl	8001dc6 <HAL_SYSTICK_Config>
 8001b20:	1e03      	subs	r3, r0, #0
 8001b22:	d112      	bne.n	8001b4a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2b03      	cmp	r3, #3
 8001b28:	d80a      	bhi.n	8001b40 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b2a:	6879      	ldr	r1, [r7, #4]
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	425b      	negs	r3, r3
 8001b30:	2200      	movs	r2, #0
 8001b32:	0018      	movs	r0, r3
 8001b34:	f000 f922 	bl	8001d7c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b38:	4b0e      	ldr	r3, [pc, #56]	@ (8001b74 <HAL_InitTick+0x90>)
 8001b3a:	687a      	ldr	r2, [r7, #4]
 8001b3c:	601a      	str	r2, [r3, #0]
 8001b3e:	e00d      	b.n	8001b5c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001b40:	230f      	movs	r3, #15
 8001b42:	18fb      	adds	r3, r7, r3
 8001b44:	2201      	movs	r2, #1
 8001b46:	701a      	strb	r2, [r3, #0]
 8001b48:	e008      	b.n	8001b5c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b4a:	230f      	movs	r3, #15
 8001b4c:	18fb      	adds	r3, r7, r3
 8001b4e:	2201      	movs	r2, #1
 8001b50:	701a      	strb	r2, [r3, #0]
 8001b52:	e003      	b.n	8001b5c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b54:	230f      	movs	r3, #15
 8001b56:	18fb      	adds	r3, r7, r3
 8001b58:	2201      	movs	r2, #1
 8001b5a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001b5c:	230f      	movs	r3, #15
 8001b5e:	18fb      	adds	r3, r7, r3
 8001b60:	781b      	ldrb	r3, [r3, #0]
}
 8001b62:	0018      	movs	r0, r3
 8001b64:	46bd      	mov	sp, r7
 8001b66:	b005      	add	sp, #20
 8001b68:	bd90      	pop	{r4, r7, pc}
 8001b6a:	46c0      	nop			@ (mov r8, r8)
 8001b6c:	20000014 	.word	0x20000014
 8001b70:	2000000c 	.word	0x2000000c
 8001b74:	20000010 	.word	0x20000010

08001b78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b7c:	4b05      	ldr	r3, [pc, #20]	@ (8001b94 <HAL_IncTick+0x1c>)
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	001a      	movs	r2, r3
 8001b82:	4b05      	ldr	r3, [pc, #20]	@ (8001b98 <HAL_IncTick+0x20>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	18d2      	adds	r2, r2, r3
 8001b88:	4b03      	ldr	r3, [pc, #12]	@ (8001b98 <HAL_IncTick+0x20>)
 8001b8a:	601a      	str	r2, [r3, #0]
}
 8001b8c:	46c0      	nop			@ (mov r8, r8)
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	46c0      	nop			@ (mov r8, r8)
 8001b94:	20000014 	.word	0x20000014
 8001b98:	20000388 	.word	0x20000388

08001b9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
  return uwTick;
 8001ba0:	4b02      	ldr	r3, [pc, #8]	@ (8001bac <HAL_GetTick+0x10>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
}
 8001ba4:	0018      	movs	r0, r3
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	46c0      	nop			@ (mov r8, r8)
 8001bac:	20000388 	.word	0x20000388

08001bb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bb8:	f7ff fff0 	bl	8001b9c <HAL_GetTick>
 8001bbc:	0003      	movs	r3, r0
 8001bbe:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	d005      	beq.n	8001bd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bca:	4b0a      	ldr	r3, [pc, #40]	@ (8001bf4 <HAL_Delay+0x44>)
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	001a      	movs	r2, r3
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	189b      	adds	r3, r3, r2
 8001bd4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bd6:	46c0      	nop			@ (mov r8, r8)
 8001bd8:	f7ff ffe0 	bl	8001b9c <HAL_GetTick>
 8001bdc:	0002      	movs	r2, r0
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	68fa      	ldr	r2, [r7, #12]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d8f7      	bhi.n	8001bd8 <HAL_Delay+0x28>
  {
  }
}
 8001be8:	46c0      	nop			@ (mov r8, r8)
 8001bea:	46c0      	nop			@ (mov r8, r8)
 8001bec:	46bd      	mov	sp, r7
 8001bee:	b004      	add	sp, #16
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	46c0      	nop			@ (mov r8, r8)
 8001bf4:	20000014 	.word	0x20000014

08001bf8 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8001c00:	4b06      	ldr	r3, [pc, #24]	@ (8001c1c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a06      	ldr	r2, [pc, #24]	@ (8001c20 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8001c06:	4013      	ands	r3, r2
 8001c08:	0019      	movs	r1, r3
 8001c0a:	4b04      	ldr	r3, [pc, #16]	@ (8001c1c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	430a      	orrs	r2, r1
 8001c10:	601a      	str	r2, [r3, #0]
}
 8001c12:	46c0      	nop			@ (mov r8, r8)
 8001c14:	46bd      	mov	sp, r7
 8001c16:	b002      	add	sp, #8
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	46c0      	nop			@ (mov r8, r8)
 8001c1c:	40010000 	.word	0x40010000
 8001c20:	fffff9ff 	.word	0xfffff9ff

08001c24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	0002      	movs	r2, r0
 8001c2c:	1dfb      	adds	r3, r7, #7
 8001c2e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001c30:	1dfb      	adds	r3, r7, #7
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	2b7f      	cmp	r3, #127	@ 0x7f
 8001c36:	d809      	bhi.n	8001c4c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c38:	1dfb      	adds	r3, r7, #7
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	001a      	movs	r2, r3
 8001c3e:	231f      	movs	r3, #31
 8001c40:	401a      	ands	r2, r3
 8001c42:	4b04      	ldr	r3, [pc, #16]	@ (8001c54 <__NVIC_EnableIRQ+0x30>)
 8001c44:	2101      	movs	r1, #1
 8001c46:	4091      	lsls	r1, r2
 8001c48:	000a      	movs	r2, r1
 8001c4a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001c4c:	46c0      	nop			@ (mov r8, r8)
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	b002      	add	sp, #8
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	e000e100 	.word	0xe000e100

08001c58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c58:	b590      	push	{r4, r7, lr}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	0002      	movs	r2, r0
 8001c60:	6039      	str	r1, [r7, #0]
 8001c62:	1dfb      	adds	r3, r7, #7
 8001c64:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001c66:	1dfb      	adds	r3, r7, #7
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	2b7f      	cmp	r3, #127	@ 0x7f
 8001c6c:	d828      	bhi.n	8001cc0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c6e:	4a2f      	ldr	r2, [pc, #188]	@ (8001d2c <__NVIC_SetPriority+0xd4>)
 8001c70:	1dfb      	adds	r3, r7, #7
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	b25b      	sxtb	r3, r3
 8001c76:	089b      	lsrs	r3, r3, #2
 8001c78:	33c0      	adds	r3, #192	@ 0xc0
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	589b      	ldr	r3, [r3, r2]
 8001c7e:	1dfa      	adds	r2, r7, #7
 8001c80:	7812      	ldrb	r2, [r2, #0]
 8001c82:	0011      	movs	r1, r2
 8001c84:	2203      	movs	r2, #3
 8001c86:	400a      	ands	r2, r1
 8001c88:	00d2      	lsls	r2, r2, #3
 8001c8a:	21ff      	movs	r1, #255	@ 0xff
 8001c8c:	4091      	lsls	r1, r2
 8001c8e:	000a      	movs	r2, r1
 8001c90:	43d2      	mvns	r2, r2
 8001c92:	401a      	ands	r2, r3
 8001c94:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	019b      	lsls	r3, r3, #6
 8001c9a:	22ff      	movs	r2, #255	@ 0xff
 8001c9c:	401a      	ands	r2, r3
 8001c9e:	1dfb      	adds	r3, r7, #7
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	0018      	movs	r0, r3
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	4003      	ands	r3, r0
 8001ca8:	00db      	lsls	r3, r3, #3
 8001caa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001cac:	481f      	ldr	r0, [pc, #124]	@ (8001d2c <__NVIC_SetPriority+0xd4>)
 8001cae:	1dfb      	adds	r3, r7, #7
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	b25b      	sxtb	r3, r3
 8001cb4:	089b      	lsrs	r3, r3, #2
 8001cb6:	430a      	orrs	r2, r1
 8001cb8:	33c0      	adds	r3, #192	@ 0xc0
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001cbe:	e031      	b.n	8001d24 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001cc0:	4a1b      	ldr	r2, [pc, #108]	@ (8001d30 <__NVIC_SetPriority+0xd8>)
 8001cc2:	1dfb      	adds	r3, r7, #7
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	0019      	movs	r1, r3
 8001cc8:	230f      	movs	r3, #15
 8001cca:	400b      	ands	r3, r1
 8001ccc:	3b08      	subs	r3, #8
 8001cce:	089b      	lsrs	r3, r3, #2
 8001cd0:	3306      	adds	r3, #6
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	18d3      	adds	r3, r2, r3
 8001cd6:	3304      	adds	r3, #4
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	1dfa      	adds	r2, r7, #7
 8001cdc:	7812      	ldrb	r2, [r2, #0]
 8001cde:	0011      	movs	r1, r2
 8001ce0:	2203      	movs	r2, #3
 8001ce2:	400a      	ands	r2, r1
 8001ce4:	00d2      	lsls	r2, r2, #3
 8001ce6:	21ff      	movs	r1, #255	@ 0xff
 8001ce8:	4091      	lsls	r1, r2
 8001cea:	000a      	movs	r2, r1
 8001cec:	43d2      	mvns	r2, r2
 8001cee:	401a      	ands	r2, r3
 8001cf0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	019b      	lsls	r3, r3, #6
 8001cf6:	22ff      	movs	r2, #255	@ 0xff
 8001cf8:	401a      	ands	r2, r3
 8001cfa:	1dfb      	adds	r3, r7, #7
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	0018      	movs	r0, r3
 8001d00:	2303      	movs	r3, #3
 8001d02:	4003      	ands	r3, r0
 8001d04:	00db      	lsls	r3, r3, #3
 8001d06:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d08:	4809      	ldr	r0, [pc, #36]	@ (8001d30 <__NVIC_SetPriority+0xd8>)
 8001d0a:	1dfb      	adds	r3, r7, #7
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	001c      	movs	r4, r3
 8001d10:	230f      	movs	r3, #15
 8001d12:	4023      	ands	r3, r4
 8001d14:	3b08      	subs	r3, #8
 8001d16:	089b      	lsrs	r3, r3, #2
 8001d18:	430a      	orrs	r2, r1
 8001d1a:	3306      	adds	r3, #6
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	18c3      	adds	r3, r0, r3
 8001d20:	3304      	adds	r3, #4
 8001d22:	601a      	str	r2, [r3, #0]
}
 8001d24:	46c0      	nop			@ (mov r8, r8)
 8001d26:	46bd      	mov	sp, r7
 8001d28:	b003      	add	sp, #12
 8001d2a:	bd90      	pop	{r4, r7, pc}
 8001d2c:	e000e100 	.word	0xe000e100
 8001d30:	e000ed00 	.word	0xe000ed00

08001d34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	1e5a      	subs	r2, r3, #1
 8001d40:	2380      	movs	r3, #128	@ 0x80
 8001d42:	045b      	lsls	r3, r3, #17
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d301      	bcc.n	8001d4c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e010      	b.n	8001d6e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d4c:	4b0a      	ldr	r3, [pc, #40]	@ (8001d78 <SysTick_Config+0x44>)
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	3a01      	subs	r2, #1
 8001d52:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d54:	2301      	movs	r3, #1
 8001d56:	425b      	negs	r3, r3
 8001d58:	2103      	movs	r1, #3
 8001d5a:	0018      	movs	r0, r3
 8001d5c:	f7ff ff7c 	bl	8001c58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d60:	4b05      	ldr	r3, [pc, #20]	@ (8001d78 <SysTick_Config+0x44>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d66:	4b04      	ldr	r3, [pc, #16]	@ (8001d78 <SysTick_Config+0x44>)
 8001d68:	2207      	movs	r2, #7
 8001d6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d6c:	2300      	movs	r3, #0
}
 8001d6e:	0018      	movs	r0, r3
 8001d70:	46bd      	mov	sp, r7
 8001d72:	b002      	add	sp, #8
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	46c0      	nop			@ (mov r8, r8)
 8001d78:	e000e010 	.word	0xe000e010

08001d7c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	60b9      	str	r1, [r7, #8]
 8001d84:	607a      	str	r2, [r7, #4]
 8001d86:	210f      	movs	r1, #15
 8001d88:	187b      	adds	r3, r7, r1
 8001d8a:	1c02      	adds	r2, r0, #0
 8001d8c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001d8e:	68ba      	ldr	r2, [r7, #8]
 8001d90:	187b      	adds	r3, r7, r1
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	b25b      	sxtb	r3, r3
 8001d96:	0011      	movs	r1, r2
 8001d98:	0018      	movs	r0, r3
 8001d9a:	f7ff ff5d 	bl	8001c58 <__NVIC_SetPriority>
}
 8001d9e:	46c0      	nop			@ (mov r8, r8)
 8001da0:	46bd      	mov	sp, r7
 8001da2:	b004      	add	sp, #16
 8001da4:	bd80      	pop	{r7, pc}

08001da6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001da6:	b580      	push	{r7, lr}
 8001da8:	b082      	sub	sp, #8
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	0002      	movs	r2, r0
 8001dae:	1dfb      	adds	r3, r7, #7
 8001db0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001db2:	1dfb      	adds	r3, r7, #7
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	b25b      	sxtb	r3, r3
 8001db8:	0018      	movs	r0, r3
 8001dba:	f7ff ff33 	bl	8001c24 <__NVIC_EnableIRQ>
}
 8001dbe:	46c0      	nop			@ (mov r8, r8)
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	b002      	add	sp, #8
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	b082      	sub	sp, #8
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	0018      	movs	r0, r3
 8001dd2:	f7ff ffaf 	bl	8001d34 <SysTick_Config>
 8001dd6:	0003      	movs	r3, r0
}
 8001dd8:	0018      	movs	r0, r3
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	b002      	add	sp, #8
 8001dde:	bd80      	pop	{r7, pc}

08001de0 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d101      	bne.n	8001df2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e091      	b.n	8001f16 <HAL_DMA_Init+0x136>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
#if defined(DMA2)
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	001a      	movs	r2, r3
 8001df8:	4b49      	ldr	r3, [pc, #292]	@ (8001f20 <HAL_DMA_Init+0x140>)
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d810      	bhi.n	8001e20 <HAL_DMA_Init+0x40>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a48      	ldr	r2, [pc, #288]	@ (8001f24 <HAL_DMA_Init+0x144>)
 8001e04:	4694      	mov	ip, r2
 8001e06:	4463      	add	r3, ip
 8001e08:	2114      	movs	r1, #20
 8001e0a:	0018      	movs	r0, r3
 8001e0c:	f7fe f984 	bl	8000118 <__udivsi3>
 8001e10:	0003      	movs	r3, r0
 8001e12:	009a      	lsls	r2, r3, #2
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	4a43      	ldr	r2, [pc, #268]	@ (8001f28 <HAL_DMA_Init+0x148>)
 8001e1c:	641a      	str	r2, [r3, #64]	@ 0x40
 8001e1e:	e00f      	b.n	8001e40 <HAL_DMA_Init+0x60>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a41      	ldr	r2, [pc, #260]	@ (8001f2c <HAL_DMA_Init+0x14c>)
 8001e26:	4694      	mov	ip, r2
 8001e28:	4463      	add	r3, ip
 8001e2a:	2114      	movs	r1, #20
 8001e2c:	0018      	movs	r0, r3
 8001e2e:	f7fe f973 	bl	8000118 <__udivsi3>
 8001e32:	0003      	movs	r3, r0
 8001e34:	009a      	lsls	r2, r3, #2
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a3c      	ldr	r2, [pc, #240]	@ (8001f30 <HAL_DMA_Init+0x150>)
 8001e3e:	641a      	str	r2, [r3, #64]	@ 0x40
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2225      	movs	r2, #37	@ 0x25
 8001e44:	2102      	movs	r1, #2
 8001e46:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4938      	ldr	r1, [pc, #224]	@ (8001f34 <HAL_DMA_Init+0x154>)
 8001e54:	400a      	ands	r2, r1
 8001e56:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	6819      	ldr	r1, [r3, #0]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	689a      	ldr	r2, [r3, #8]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	68db      	ldr	r3, [r3, #12]
 8001e66:	431a      	orrs	r2, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	691b      	ldr	r3, [r3, #16]
 8001e6c:	431a      	orrs	r2, r3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	695b      	ldr	r3, [r3, #20]
 8001e72:	431a      	orrs	r2, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	699b      	ldr	r3, [r3, #24]
 8001e78:	431a      	orrs	r2, r3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	69db      	ldr	r3, [r3, #28]
 8001e7e:	431a      	orrs	r2, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6a1b      	ldr	r3, [r3, #32]
 8001e84:	431a      	orrs	r2, r3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	430a      	orrs	r2, r1
 8001e8c:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	0018      	movs	r0, r3
 8001e92:	f000 faa9 	bl	80023e8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	689a      	ldr	r2, [r3, #8]
 8001e9a:	2380      	movs	r3, #128	@ 0x80
 8001e9c:	01db      	lsls	r3, r3, #7
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d102      	bne.n	8001ea8 <HAL_DMA_Init+0xc8>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	685a      	ldr	r2, [r3, #4]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001eb0:	217f      	movs	r1, #127	@ 0x7f
 8001eb2:	400a      	ands	r2, r1
 8001eb4:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001ebe:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d011      	beq.n	8001eec <HAL_DMA_Init+0x10c>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	2b04      	cmp	r3, #4
 8001ece:	d80d      	bhi.n	8001eec <HAL_DMA_Init+0x10c>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	0018      	movs	r0, r3
 8001ed4:	f000 fad2 	bl	800247c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001edc:	2200      	movs	r2, #0
 8001ede:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ee4:	687a      	ldr	r2, [r7, #4]
 8001ee6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001ee8:	605a      	str	r2, [r3, #4]
 8001eea:	e008      	b.n	8001efe <HAL_DMA_Init+0x11e>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2200      	movs	r2, #0
 8001efc:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2200      	movs	r2, #0
 8001f02:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2225      	movs	r2, #37	@ 0x25
 8001f08:	2101      	movs	r1, #1
 8001f0a:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2224      	movs	r2, #36	@ 0x24
 8001f10:	2100      	movs	r1, #0
 8001f12:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	0018      	movs	r0, r3
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	b002      	add	sp, #8
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	46c0      	nop			@ (mov r8, r8)
 8001f20:	40020407 	.word	0x40020407
 8001f24:	bffdfff8 	.word	0xbffdfff8
 8001f28:	40020000 	.word	0x40020000
 8001f2c:	bffdfbf8 	.word	0xbffdfbf8
 8001f30:	40020400 	.word	0x40020400
 8001f34:	ffff800f 	.word	0xffff800f

08001f38 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b086      	sub	sp, #24
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	60f8      	str	r0, [r7, #12]
 8001f40:	60b9      	str	r1, [r7, #8]
 8001f42:	607a      	str	r2, [r7, #4]
 8001f44:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f46:	2317      	movs	r3, #23
 8001f48:	18fb      	adds	r3, r7, r3
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	2224      	movs	r2, #36	@ 0x24
 8001f52:	5c9b      	ldrb	r3, [r3, r2]
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d101      	bne.n	8001f5c <HAL_DMA_Start_IT+0x24>
 8001f58:	2302      	movs	r3, #2
 8001f5a:	e06f      	b.n	800203c <HAL_DMA_Start_IT+0x104>
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2224      	movs	r2, #36	@ 0x24
 8001f60:	2101      	movs	r1, #1
 8001f62:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2225      	movs	r2, #37	@ 0x25
 8001f68:	5c9b      	ldrb	r3, [r3, r2]
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d157      	bne.n	8002020 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	2225      	movs	r2, #37	@ 0x25
 8001f74:	2102      	movs	r1, #2
 8001f76:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2101      	movs	r1, #1
 8001f8a:	438a      	bics	r2, r1
 8001f8c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	687a      	ldr	r2, [r7, #4]
 8001f92:	68b9      	ldr	r1, [r7, #8]
 8001f94:	68f8      	ldr	r0, [r7, #12]
 8001f96:	f000 f9eb 	bl	8002370 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d008      	beq.n	8001fb4 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	210e      	movs	r1, #14
 8001fae:	430a      	orrs	r2, r1
 8001fb0:	601a      	str	r2, [r3, #0]
 8001fb2:	e00f      	b.n	8001fd4 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	2104      	movs	r1, #4
 8001fc0:	438a      	bics	r2, r1
 8001fc2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	210a      	movs	r1, #10
 8001fd0:	430a      	orrs	r2, r1
 8001fd2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	2380      	movs	r3, #128	@ 0x80
 8001fdc:	025b      	lsls	r3, r3, #9
 8001fde:	4013      	ands	r3, r2
 8001fe0:	d008      	beq.n	8001ff4 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fec:	2180      	movs	r1, #128	@ 0x80
 8001fee:	0049      	lsls	r1, r1, #1
 8001ff0:	430a      	orrs	r2, r1
 8001ff2:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d008      	beq.n	800200e <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002006:	2180      	movs	r1, #128	@ 0x80
 8002008:	0049      	lsls	r1, r1, #1
 800200a:	430a      	orrs	r2, r1
 800200c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2101      	movs	r1, #1
 800201a:	430a      	orrs	r2, r1
 800201c:	601a      	str	r2, [r3, #0]
 800201e:	e00a      	b.n	8002036 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2280      	movs	r2, #128	@ 0x80
 8002024:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2224      	movs	r2, #36	@ 0x24
 800202a:	2100      	movs	r1, #0
 800202c:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 800202e:	2317      	movs	r3, #23
 8002030:	18fb      	adds	r3, r7, r3
 8002032:	2201      	movs	r2, #1
 8002034:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8002036:	2317      	movs	r3, #23
 8002038:	18fb      	adds	r3, r7, r3
 800203a:	781b      	ldrb	r3, [r3, #0]
}
 800203c:	0018      	movs	r0, r3
 800203e:	46bd      	mov	sp, r7
 8002040:	b006      	add	sp, #24
 8002042:	bd80      	pop	{r7, pc}

08002044 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d101      	bne.n	8002056 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e04f      	b.n	80020f6 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2225      	movs	r2, #37	@ 0x25
 800205a:	5c9b      	ldrb	r3, [r3, r2]
 800205c:	b2db      	uxtb	r3, r3
 800205e:	2b02      	cmp	r3, #2
 8002060:	d008      	beq.n	8002074 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2204      	movs	r2, #4
 8002066:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2224      	movs	r2, #36	@ 0x24
 800206c:	2100      	movs	r1, #0
 800206e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e040      	b.n	80020f6 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	210e      	movs	r1, #14
 8002080:	438a      	bics	r2, r1
 8002082:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800208e:	491c      	ldr	r1, [pc, #112]	@ (8002100 <HAL_DMA_Abort+0xbc>)
 8002090:	400a      	ands	r2, r1
 8002092:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	2101      	movs	r1, #1
 80020a0:	438a      	bics	r2, r1
 80020a2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020a8:	221c      	movs	r2, #28
 80020aa:	401a      	ands	r2, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020b0:	2101      	movs	r1, #1
 80020b2:	4091      	lsls	r1, r2
 80020b4:	000a      	movs	r2, r1
 80020b6:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020bc:	687a      	ldr	r2, [r7, #4]
 80020be:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80020c0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d00c      	beq.n	80020e4 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020d4:	490a      	ldr	r1, [pc, #40]	@ (8002100 <HAL_DMA_Abort+0xbc>)
 80020d6:	400a      	ands	r2, r1
 80020d8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80020e2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2225      	movs	r2, #37	@ 0x25
 80020e8:	2101      	movs	r1, #1
 80020ea:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2224      	movs	r2, #36	@ 0x24
 80020f0:	2100      	movs	r1, #0
 80020f2:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80020f4:	2300      	movs	r3, #0
}
 80020f6:	0018      	movs	r0, r3
 80020f8:	46bd      	mov	sp, r7
 80020fa:	b002      	add	sp, #8
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	46c0      	nop			@ (mov r8, r8)
 8002100:	fffffeff 	.word	0xfffffeff

08002104 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800210c:	210f      	movs	r1, #15
 800210e:	187b      	adds	r3, r7, r1
 8002110:	2200      	movs	r2, #0
 8002112:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2225      	movs	r2, #37	@ 0x25
 8002118:	5c9b      	ldrb	r3, [r3, r2]
 800211a:	b2db      	uxtb	r3, r3
 800211c:	2b02      	cmp	r3, #2
 800211e:	d006      	beq.n	800212e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2204      	movs	r2, #4
 8002124:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002126:	187b      	adds	r3, r7, r1
 8002128:	2201      	movs	r2, #1
 800212a:	701a      	strb	r2, [r3, #0]
 800212c:	e048      	b.n	80021c0 <HAL_DMA_Abort_IT+0xbc>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	210e      	movs	r1, #14
 800213a:	438a      	bics	r2, r1
 800213c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	2101      	movs	r1, #1
 800214a:	438a      	bics	r2, r1
 800214c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002158:	491d      	ldr	r1, [pc, #116]	@ (80021d0 <HAL_DMA_Abort_IT+0xcc>)
 800215a:	400a      	ands	r2, r1
 800215c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002162:	221c      	movs	r2, #28
 8002164:	401a      	ands	r2, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800216a:	2101      	movs	r1, #1
 800216c:	4091      	lsls	r1, r2
 800216e:	000a      	movs	r2, r1
 8002170:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800217a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002180:	2b00      	cmp	r3, #0
 8002182:	d00c      	beq.n	800219e <HAL_DMA_Abort_IT+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800218e:	4910      	ldr	r1, [pc, #64]	@ (80021d0 <HAL_DMA_Abort_IT+0xcc>)
 8002190:	400a      	ands	r2, r1
 8002192:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002198:	687a      	ldr	r2, [r7, #4]
 800219a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800219c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2225      	movs	r2, #37	@ 0x25
 80021a2:	2101      	movs	r1, #1
 80021a4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2224      	movs	r2, #36	@ 0x24
 80021aa:	2100      	movs	r1, #0
 80021ac:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d004      	beq.n	80021c0 <HAL_DMA_Abort_IT+0xbc>
    {
      hdma->XferAbortCallback(hdma);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	0010      	movs	r0, r2
 80021be:	4798      	blx	r3
    }
  }
  return status;
 80021c0:	230f      	movs	r3, #15
 80021c2:	18fb      	adds	r3, r7, r3
 80021c4:	781b      	ldrb	r3, [r3, #0]
}
 80021c6:	0018      	movs	r0, r3
 80021c8:	46bd      	mov	sp, r7
 80021ca:	b004      	add	sp, #16
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	46c0      	nop			@ (mov r8, r8)
 80021d0:	fffffeff 	.word	0xfffffeff

080021d4 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	60fb      	str	r3, [r7, #12]
#else
  uint32_t flag_it = DMA1->ISR;
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021f0:	221c      	movs	r2, #28
 80021f2:	4013      	ands	r3, r2
 80021f4:	2204      	movs	r2, #4
 80021f6:	409a      	lsls	r2, r3
 80021f8:	0013      	movs	r3, r2
 80021fa:	68fa      	ldr	r2, [r7, #12]
 80021fc:	4013      	ands	r3, r2
 80021fe:	d026      	beq.n	800224e <HAL_DMA_IRQHandler+0x7a>
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	2204      	movs	r2, #4
 8002204:	4013      	ands	r3, r2
 8002206:	d022      	beq.n	800224e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	2220      	movs	r2, #32
 8002210:	4013      	ands	r3, r2
 8002212:	d107      	bne.n	8002224 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	2104      	movs	r1, #4
 8002220:	438a      	bics	r2, r1
 8002222:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002228:	221c      	movs	r2, #28
 800222a:	401a      	ands	r2, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002230:	2104      	movs	r1, #4
 8002232:	4091      	lsls	r1, r2
 8002234:	000a      	movs	r2, r1
 8002236:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800223c:	2b00      	cmp	r3, #0
 800223e:	d100      	bne.n	8002242 <HAL_DMA_IRQHandler+0x6e>
 8002240:	e080      	b.n	8002344 <HAL_DMA_IRQHandler+0x170>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	0010      	movs	r0, r2
 800224a:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 800224c:	e07a      	b.n	8002344 <HAL_DMA_IRQHandler+0x170>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002252:	221c      	movs	r2, #28
 8002254:	4013      	ands	r3, r2
 8002256:	2202      	movs	r2, #2
 8002258:	409a      	lsls	r2, r3
 800225a:	0013      	movs	r3, r2
 800225c:	68fa      	ldr	r2, [r7, #12]
 800225e:	4013      	ands	r3, r2
 8002260:	d03c      	beq.n	80022dc <HAL_DMA_IRQHandler+0x108>
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	2202      	movs	r2, #2
 8002266:	4013      	ands	r3, r2
 8002268:	d038      	beq.n	80022dc <HAL_DMA_IRQHandler+0x108>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	2220      	movs	r2, #32
 8002272:	4013      	ands	r3, r2
 8002274:	d10b      	bne.n	800228e <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	210a      	movs	r1, #10
 8002282:	438a      	bics	r2, r1
 8002284:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2225      	movs	r2, #37	@ 0x25
 800228a:	2101      	movs	r1, #1
 800228c:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	001a      	movs	r2, r3
 8002294:	4b2e      	ldr	r3, [pc, #184]	@ (8002350 <HAL_DMA_IRQHandler+0x17c>)
 8002296:	429a      	cmp	r2, r3
 8002298:	d909      	bls.n	80022ae <HAL_DMA_IRQHandler+0xda>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800229e:	221c      	movs	r2, #28
 80022a0:	401a      	ands	r2, r3
 80022a2:	4b2c      	ldr	r3, [pc, #176]	@ (8002354 <HAL_DMA_IRQHandler+0x180>)
 80022a4:	2102      	movs	r1, #2
 80022a6:	4091      	lsls	r1, r2
 80022a8:	000a      	movs	r2, r1
 80022aa:	605a      	str	r2, [r3, #4]
 80022ac:	e008      	b.n	80022c0 <HAL_DMA_IRQHandler+0xec>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022b2:	221c      	movs	r2, #28
 80022b4:	401a      	ands	r2, r3
 80022b6:	4b28      	ldr	r3, [pc, #160]	@ (8002358 <HAL_DMA_IRQHandler+0x184>)
 80022b8:	2102      	movs	r1, #2
 80022ba:	4091      	lsls	r1, r2
 80022bc:	000a      	movs	r2, r1
 80022be:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2224      	movs	r2, #36	@ 0x24
 80022c4:	2100      	movs	r1, #0
 80022c6:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d039      	beq.n	8002344 <HAL_DMA_IRQHandler+0x170>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	0010      	movs	r0, r2
 80022d8:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80022da:	e033      	b.n	8002344 <HAL_DMA_IRQHandler+0x170>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022e0:	221c      	movs	r2, #28
 80022e2:	4013      	ands	r3, r2
 80022e4:	2208      	movs	r2, #8
 80022e6:	409a      	lsls	r2, r3
 80022e8:	0013      	movs	r3, r2
 80022ea:	68fa      	ldr	r2, [r7, #12]
 80022ec:	4013      	ands	r3, r2
 80022ee:	d02a      	beq.n	8002346 <HAL_DMA_IRQHandler+0x172>
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	2208      	movs	r2, #8
 80022f4:	4013      	ands	r3, r2
 80022f6:	d026      	beq.n	8002346 <HAL_DMA_IRQHandler+0x172>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	210e      	movs	r1, #14
 8002304:	438a      	bics	r2, r1
 8002306:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800230c:	221c      	movs	r2, #28
 800230e:	401a      	ands	r2, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002314:	2101      	movs	r1, #1
 8002316:	4091      	lsls	r1, r2
 8002318:	000a      	movs	r2, r1
 800231a:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2201      	movs	r2, #1
 8002320:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2225      	movs	r2, #37	@ 0x25
 8002326:	2101      	movs	r1, #1
 8002328:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2224      	movs	r2, #36	@ 0x24
 800232e:	2100      	movs	r1, #0
 8002330:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002336:	2b00      	cmp	r3, #0
 8002338:	d005      	beq.n	8002346 <HAL_DMA_IRQHandler+0x172>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	0010      	movs	r0, r2
 8002342:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002344:	46c0      	nop			@ (mov r8, r8)
 8002346:	46c0      	nop			@ (mov r8, r8)
}
 8002348:	46bd      	mov	sp, r7
 800234a:	b004      	add	sp, #16
 800234c:	bd80      	pop	{r7, pc}
 800234e:	46c0      	nop			@ (mov r8, r8)
 8002350:	40020080 	.word	0x40020080
 8002354:	40020400 	.word	0x40020400
 8002358:	40020000 	.word	0x40020000

0800235c <HAL_DMA_GetError>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  /* Return the DMA error code */
  return hdma->ErrorCode;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8002368:	0018      	movs	r0, r3
 800236a:	46bd      	mov	sp, r7
 800236c:	b002      	add	sp, #8
 800236e:	bd80      	pop	{r7, pc}

08002370 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b084      	sub	sp, #16
 8002374:	af00      	add	r7, sp, #0
 8002376:	60f8      	str	r0, [r7, #12]
 8002378:	60b9      	str	r1, [r7, #8]
 800237a:	607a      	str	r2, [r7, #4]
 800237c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002382:	68fa      	ldr	r2, [r7, #12]
 8002384:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002386:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800238c:	2b00      	cmp	r3, #0
 800238e:	d004      	beq.n	800239a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002394:	68fa      	ldr	r2, [r7, #12]
 8002396:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002398:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800239e:	221c      	movs	r2, #28
 80023a0:	401a      	ands	r2, r3
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023a6:	2101      	movs	r1, #1
 80023a8:	4091      	lsls	r1, r2
 80023aa:	000a      	movs	r2, r1
 80023ac:	605a      	str	r2, [r3, #4]
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	683a      	ldr	r2, [r7, #0]
 80023b4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	2b10      	cmp	r3, #16
 80023bc:	d108      	bne.n	80023d0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	68ba      	ldr	r2, [r7, #8]
 80023cc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80023ce:	e007      	b.n	80023e0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	68ba      	ldr	r2, [r7, #8]
 80023d6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	60da      	str	r2, [r3, #12]
}
 80023e0:	46c0      	nop			@ (mov r8, r8)
 80023e2:	46bd      	mov	sp, r7
 80023e4:	b004      	add	sp, #16
 80023e6:	bd80      	pop	{r7, pc}

080023e8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

#if defined(DMA2)
  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	001a      	movs	r2, r3
 80023f6:	4b1d      	ldr	r3, [pc, #116]	@ (800246c <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d814      	bhi.n	8002426 <DMA_CalcDMAMUXChannelBaseAndMask+0x3e>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002400:	089b      	lsrs	r3, r3, #2
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	4a1a      	ldr	r2, [pc, #104]	@ (8002470 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8002406:	189a      	adds	r2, r3, r2
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	001a      	movs	r2, r3
 8002412:	23ff      	movs	r3, #255	@ 0xff
 8002414:	4013      	ands	r3, r2
 8002416:	3b08      	subs	r3, #8
 8002418:	2114      	movs	r1, #20
 800241a:	0018      	movs	r0, r3
 800241c:	f7fd fe7c 	bl	8000118 <__udivsi3>
 8002420:	0003      	movs	r3, r0
 8002422:	60fb      	str	r3, [r7, #12]
 8002424:	e014      	b.n	8002450 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800242a:	089b      	lsrs	r3, r3, #2
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	4a11      	ldr	r2, [pc, #68]	@ (8002474 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8002430:	189a      	adds	r2, r3, r2
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	001a      	movs	r2, r3
 800243c:	23ff      	movs	r3, #255	@ 0xff
 800243e:	4013      	ands	r3, r2
 8002440:	3b08      	subs	r3, #8
 8002442:	2114      	movs	r1, #20
 8002444:	0018      	movs	r0, r3
 8002446:	f7fd fe67 	bl	8000118 <__udivsi3>
 800244a:	0003      	movs	r3, r0
 800244c:	3307      	adds	r3, #7
 800244e:	60fb      	str	r3, [r7, #12]
  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	4a09      	ldr	r2, [pc, #36]	@ (8002478 <DMA_CalcDMAMUXChannelBaseAndMask+0x90>)
 8002454:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	221f      	movs	r2, #31
 800245a:	4013      	ands	r3, r2
 800245c:	2201      	movs	r2, #1
 800245e:	409a      	lsls	r2, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002464:	46c0      	nop			@ (mov r8, r8)
 8002466:	46bd      	mov	sp, r7
 8002468:	b004      	add	sp, #16
 800246a:	bd80      	pop	{r7, pc}
 800246c:	40020407 	.word	0x40020407
 8002470:	40020800 	.word	0x40020800
 8002474:	4002081c 	.word	0x4002081c
 8002478:	40020880 	.word	0x40020880

0800247c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b084      	sub	sp, #16
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	227f      	movs	r2, #127	@ 0x7f
 800248a:	4013      	ands	r3, r2
 800248c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	4a0a      	ldr	r2, [pc, #40]	@ (80024bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002492:	4694      	mov	ip, r2
 8002494:	4463      	add	r3, ip
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	001a      	movs	r2, r3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4a07      	ldr	r2, [pc, #28]	@ (80024c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80024a2:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	3b01      	subs	r3, #1
 80024a8:	2203      	movs	r2, #3
 80024aa:	4013      	ands	r3, r2
 80024ac:	2201      	movs	r2, #1
 80024ae:	409a      	lsls	r2, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80024b4:	46c0      	nop			@ (mov r8, r8)
 80024b6:	46bd      	mov	sp, r7
 80024b8:	b004      	add	sp, #16
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	1000823f 	.word	0x1000823f
 80024c0:	40020940 	.word	0x40020940

080024c4 <HAL_DMAEx_MUX_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA channel.
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  /* Check for DMAMUX Synchronization overrun */
  if ((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024d6:	4013      	ands	r3, r2
 80024d8:	d01c      	beq.n	8002514 <HAL_DMAEx_MUX_IRQHandler+0x50>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024e4:	4921      	ldr	r1, [pc, #132]	@ (800256c <HAL_DMAEx_MUX_IRQHandler+0xa8>)
 80024e6:	400a      	ands	r2, r1
 80024e8:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80024f2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024f8:	2280      	movs	r2, #128	@ 0x80
 80024fa:	0092      	lsls	r2, r2, #2
 80024fc:	431a      	orrs	r2, r3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	63da      	str	r2, [r3, #60]	@ 0x3c

    if (hdma->XferErrorCallback != NULL)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002506:	2b00      	cmp	r3, #0
 8002508:	d004      	beq.n	8002514 <HAL_DMAEx_MUX_IRQHandler+0x50>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	0010      	movs	r0, r2
 8002512:	4798      	blx	r3
    }
  }

  if (hdma->DMAmuxRequestGen != 0)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002518:	2b00      	cmp	r3, #0
 800251a:	d023      	beq.n	8002564 <HAL_DMAEx_MUX_IRQHandler+0xa0>
  {
    /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if ((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002526:	4013      	ands	r3, r2
 8002528:	d01c      	beq.n	8002564 <HAL_DMAEx_MUX_IRQHandler+0xa0>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002534:	490d      	ldr	r1, [pc, #52]	@ (800256c <HAL_DMAEx_MUX_IRQHandler+0xa8>)
 8002536:	400a      	ands	r2, r1
 8002538:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002542:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002548:	2280      	movs	r2, #128	@ 0x80
 800254a:	00d2      	lsls	r2, r2, #3
 800254c:	431a      	orrs	r2, r3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	63da      	str	r2, [r3, #60]	@ 0x3c

      if (hdma->XferErrorCallback != NULL)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002556:	2b00      	cmp	r3, #0
 8002558:	d004      	beq.n	8002564 <HAL_DMAEx_MUX_IRQHandler+0xa0>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	0010      	movs	r0, r2
 8002562:	4798      	blx	r3
      }
    }
  }
}
 8002564:	46c0      	nop			@ (mov r8, r8)
 8002566:	46bd      	mov	sp, r7
 8002568:	b002      	add	sp, #8
 800256a:	bd80      	pop	{r7, pc}
 800256c:	fffffeff 	.word	0xfffffeff

08002570 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b084      	sub	sp, #16
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d101      	bne.n	8002582 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e14e      	b.n	8002820 <HAL_FDCAN_Init+0x2b0>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	225c      	movs	r2, #92	@ 0x5c
 8002586:	5c9b      	ldrb	r3, [r3, r2]
 8002588:	b2db      	uxtb	r3, r3
 800258a:	2b00      	cmp	r3, #0
 800258c:	d107      	bne.n	800259e <HAL_FDCAN_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	225d      	movs	r2, #93	@ 0x5d
 8002592:	2100      	movs	r1, #0
 8002594:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	0018      	movs	r0, r3
 800259a:	f7fe ffb9 	bl	8001510 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	699a      	ldr	r2, [r3, #24]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2110      	movs	r1, #16
 80025aa:	438a      	bics	r2, r1
 80025ac:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80025ae:	f7ff faf5 	bl	8001b9c <HAL_GetTick>
 80025b2:	0003      	movs	r3, r0
 80025b4:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80025b6:	e012      	b.n	80025de <HAL_FDCAN_Init+0x6e>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80025b8:	f7ff faf0 	bl	8001b9c <HAL_GetTick>
 80025bc:	0002      	movs	r2, r0
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	2b0a      	cmp	r3, #10
 80025c4:	d90b      	bls.n	80025de <HAL_FDCAN_Init+0x6e>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025ca:	2201      	movs	r2, #1
 80025cc:	431a      	orrs	r2, r3
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	225c      	movs	r2, #92	@ 0x5c
 80025d6:	2103      	movs	r1, #3
 80025d8:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e120      	b.n	8002820 <HAL_FDCAN_Init+0x2b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	699b      	ldr	r3, [r3, #24]
 80025e4:	2208      	movs	r2, #8
 80025e6:	4013      	ands	r3, r2
 80025e8:	2b08      	cmp	r3, #8
 80025ea:	d0e5      	beq.n	80025b8 <HAL_FDCAN_Init+0x48>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	699a      	ldr	r2, [r3, #24]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	2101      	movs	r1, #1
 80025f8:	430a      	orrs	r2, r1
 80025fa:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80025fc:	f7ff face 	bl	8001b9c <HAL_GetTick>
 8002600:	0003      	movs	r3, r0
 8002602:	60fb      	str	r3, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002604:	e012      	b.n	800262c <HAL_FDCAN_Init+0xbc>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002606:	f7ff fac9 	bl	8001b9c <HAL_GetTick>
 800260a:	0002      	movs	r2, r0
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	2b0a      	cmp	r3, #10
 8002612:	d90b      	bls.n	800262c <HAL_FDCAN_Init+0xbc>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002618:	2201      	movs	r2, #1
 800261a:	431a      	orrs	r2, r3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	225c      	movs	r2, #92	@ 0x5c
 8002624:	2103      	movs	r1, #3
 8002626:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e0f9      	b.n	8002820 <HAL_FDCAN_Init+0x2b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	699b      	ldr	r3, [r3, #24]
 8002632:	2201      	movs	r2, #1
 8002634:	4013      	ands	r3, r2
 8002636:	d0e6      	beq.n	8002606 <HAL_FDCAN_Init+0x96>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	699a      	ldr	r2, [r3, #24]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	2102      	movs	r1, #2
 8002644:	430a      	orrs	r2, r1
 8002646:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a76      	ldr	r2, [pc, #472]	@ (8002828 <HAL_FDCAN_Init+0x2b8>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d103      	bne.n	800265a <HAL_FDCAN_Init+0xea>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8002652:	4a76      	ldr	r2, [pc, #472]	@ (800282c <HAL_FDCAN_Init+0x2bc>)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	7c1b      	ldrb	r3, [r3, #16]
 800265e:	2b01      	cmp	r3, #1
 8002660:	d108      	bne.n	8002674 <HAL_FDCAN_Init+0x104>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	699a      	ldr	r2, [r3, #24]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	2140      	movs	r1, #64	@ 0x40
 800266e:	438a      	bics	r2, r1
 8002670:	619a      	str	r2, [r3, #24]
 8002672:	e007      	b.n	8002684 <HAL_FDCAN_Init+0x114>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	699a      	ldr	r2, [r3, #24]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	2140      	movs	r1, #64	@ 0x40
 8002680:	430a      	orrs	r2, r1
 8002682:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	7c5b      	ldrb	r3, [r3, #17]
 8002688:	2b01      	cmp	r3, #1
 800268a:	d109      	bne.n	80026a0 <HAL_FDCAN_Init+0x130>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	699a      	ldr	r2, [r3, #24]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	2180      	movs	r1, #128	@ 0x80
 8002698:	01c9      	lsls	r1, r1, #7
 800269a:	430a      	orrs	r2, r1
 800269c:	619a      	str	r2, [r3, #24]
 800269e:	e007      	b.n	80026b0 <HAL_FDCAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	699a      	ldr	r2, [r3, #24]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4961      	ldr	r1, [pc, #388]	@ (8002830 <HAL_FDCAN_Init+0x2c0>)
 80026ac:	400a      	ands	r2, r1
 80026ae:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	7c9b      	ldrb	r3, [r3, #18]
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d108      	bne.n	80026ca <HAL_FDCAN_Init+0x15a>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	699a      	ldr	r2, [r3, #24]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	495c      	ldr	r1, [pc, #368]	@ (8002834 <HAL_FDCAN_Init+0x2c4>)
 80026c4:	400a      	ands	r2, r1
 80026c6:	619a      	str	r2, [r3, #24]
 80026c8:	e008      	b.n	80026dc <HAL_FDCAN_Init+0x16c>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	699a      	ldr	r2, [r3, #24]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	2180      	movs	r1, #128	@ 0x80
 80026d6:	0149      	lsls	r1, r1, #5
 80026d8:	430a      	orrs	r2, r1
 80026da:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	699b      	ldr	r3, [r3, #24]
 80026e2:	4a55      	ldr	r2, [pc, #340]	@ (8002838 <HAL_FDCAN_Init+0x2c8>)
 80026e4:	4013      	ands	r3, r2
 80026e6:	0019      	movs	r1, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	689a      	ldr	r2, [r3, #8]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	430a      	orrs	r2, r1
 80026f2:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	699a      	ldr	r2, [r3, #24]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	21a4      	movs	r1, #164	@ 0xa4
 8002700:	438a      	bics	r2, r1
 8002702:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	691a      	ldr	r2, [r3, #16]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	2110      	movs	r1, #16
 8002710:	438a      	bics	r2, r1
 8002712:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	2b01      	cmp	r3, #1
 800271a:	d108      	bne.n	800272e <HAL_FDCAN_Init+0x1be>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	699a      	ldr	r2, [r3, #24]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	2104      	movs	r1, #4
 8002728:	430a      	orrs	r2, r1
 800272a:	619a      	str	r2, [r3, #24]
 800272c:	e02c      	b.n	8002788 <HAL_FDCAN_Init+0x218>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d028      	beq.n	8002788 <HAL_FDCAN_Init+0x218>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	2b02      	cmp	r3, #2
 800273c:	d01c      	beq.n	8002778 <HAL_FDCAN_Init+0x208>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	699a      	ldr	r2, [r3, #24]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	2180      	movs	r1, #128	@ 0x80
 800274a:	430a      	orrs	r2, r1
 800274c:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	691a      	ldr	r2, [r3, #16]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	2110      	movs	r1, #16
 800275a:	430a      	orrs	r2, r1
 800275c:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	2b03      	cmp	r3, #3
 8002764:	d110      	bne.n	8002788 <HAL_FDCAN_Init+0x218>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	699a      	ldr	r2, [r3, #24]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	2120      	movs	r1, #32
 8002772:	430a      	orrs	r2, r1
 8002774:	619a      	str	r2, [r3, #24]
 8002776:	e007      	b.n	8002788 <HAL_FDCAN_Init+0x218>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	699a      	ldr	r2, [r3, #24]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	2120      	movs	r1, #32
 8002784:	430a      	orrs	r2, r1
 8002786:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	699b      	ldr	r3, [r3, #24]
 800278c:	3b01      	subs	r3, #1
 800278e:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	69db      	ldr	r3, [r3, #28]
 8002794:	3b01      	subs	r3, #1
 8002796:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002798:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6a1b      	ldr	r3, [r3, #32]
 800279e:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80027a0:	431a      	orrs	r2, r3
 80027a2:	0011      	movs	r1, r2
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	695b      	ldr	r3, [r3, #20]
 80027a8:	3b01      	subs	r3, #1
 80027aa:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80027b0:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80027b2:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	689a      	ldr	r2, [r3, #8]
 80027b8:	23c0      	movs	r3, #192	@ 0xc0
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	429a      	cmp	r2, r3
 80027be:	d115      	bne.n	80027ec <HAL_FDCAN_Init+0x27c>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027c4:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027ca:	3b01      	subs	r3, #1
 80027cc:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80027ce:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027d4:	3b01      	subs	r3, #1
 80027d6:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80027d8:	431a      	orrs	r2, r3
 80027da:	0011      	movs	r1, r2
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027e0:	3b01      	subs	r3, #1
 80027e2:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80027e8:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80027ea:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	22c0      	movs	r2, #192	@ 0xc0
 80027f2:	5899      	ldr	r1, [r3, r2]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	430a      	orrs	r2, r1
 80027fe:	21c0      	movs	r1, #192	@ 0xc0
 8002800:	505a      	str	r2, [r3, r1]

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	0018      	movs	r0, r3
 8002806:	f000 fa75 	bl	8002cf4 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	225c      	movs	r2, #92	@ 0x5c
 800281a:	2101      	movs	r1, #1
 800281c:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800281e:	2300      	movs	r3, #0
}
 8002820:	0018      	movs	r0, r3
 8002822:	46bd      	mov	sp, r7
 8002824:	b004      	add	sp, #16
 8002826:	bd80      	pop	{r7, pc}
 8002828:	40006400 	.word	0x40006400
 800282c:	40006500 	.word	0x40006500
 8002830:	ffffbfff 	.word	0xffffbfff
 8002834:	ffffefff 	.word	0xffffefff
 8002838:	fffffcff 	.word	0xfffffcff

0800283c <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b086      	sub	sp, #24
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8002846:	2017      	movs	r0, #23
 8002848:	183b      	adds	r3, r7, r0
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	215c      	movs	r1, #92	@ 0x5c
 800284e:	5c52      	ldrb	r2, [r2, r1]
 8002850:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8002852:	0002      	movs	r2, r0
 8002854:	18bb      	adds	r3, r7, r2
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	2b01      	cmp	r3, #1
 800285a:	d003      	beq.n	8002864 <HAL_FDCAN_ConfigFilter+0x28>
 800285c:	18bb      	adds	r3, r7, r2
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	2b02      	cmp	r3, #2
 8002862:	d13d      	bne.n	80028e0 <HAL_FDCAN_ConfigFilter+0xa4>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d119      	bne.n	80028a0 <HAL_FDCAN_ConfigFilter+0x64>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8002878:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	691b      	ldr	r3, [r3, #16]
 800287e:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8002880:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8002886:	4313      	orrs	r3, r2
 8002888:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	18d3      	adds	r3, r2, r3
 8002896:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	693a      	ldr	r2, [r7, #16]
 800289c:	601a      	str	r2, [r3, #0]
 800289e:	e01d      	b.n	80028dc <HAL_FDCAN_ConfigFilter+0xa0>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	075a      	lsls	r2, r3, #29
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	691b      	ldr	r3, [r3, #16]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	079a      	lsls	r2, r3, #30
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	695b      	ldr	r3, [r3, #20]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	00db      	lsls	r3, r3, #3
 80028c6:	18d3      	adds	r3, r2, r3
 80028c8:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	693a      	ldr	r2, [r7, #16]
 80028ce:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	3304      	adds	r3, #4
 80028d4:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	68fa      	ldr	r2, [r7, #12]
 80028da:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80028dc:	2300      	movs	r3, #0
 80028de:	e006      	b.n	80028ee <HAL_FDCAN_ConfigFilter+0xb2>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028e4:	2202      	movs	r2, #2
 80028e6:	431a      	orrs	r2, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
  }
}
 80028ee:	0018      	movs	r0, r3
 80028f0:	46bd      	mov	sp, r7
 80028f2:	b006      	add	sp, #24
 80028f4:	bd80      	pop	{r7, pc}

080028f6 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80028f6:	b580      	push	{r7, lr}
 80028f8:	b082      	sub	sp, #8
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	225c      	movs	r2, #92	@ 0x5c
 8002902:	5c9b      	ldrb	r3, [r3, r2]
 8002904:	b2db      	uxtb	r3, r3
 8002906:	2b01      	cmp	r3, #1
 8002908:	d110      	bne.n	800292c <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	225c      	movs	r2, #92	@ 0x5c
 800290e:	2102      	movs	r1, #2
 8002910:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	699a      	ldr	r2, [r3, #24]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	2101      	movs	r1, #1
 800291e:	438a      	bics	r2, r1
 8002920:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2200      	movs	r2, #0
 8002926:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8002928:	2300      	movs	r3, #0
 800292a:	e006      	b.n	800293a <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002930:	2204      	movs	r2, #4
 8002932:	431a      	orrs	r2, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
  }
}
 800293a:	0018      	movs	r0, r3
 800293c:	46bd      	mov	sp, r7
 800293e:	b002      	add	sp, #8
 8002940:	bd80      	pop	{r7, pc}

08002942 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8002942:	b580      	push	{r7, lr}
 8002944:	b086      	sub	sp, #24
 8002946:	af00      	add	r7, sp, #0
 8002948:	60f8      	str	r0, [r7, #12]
 800294a:	60b9      	str	r1, [r7, #8]
 800294c:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	225c      	movs	r2, #92	@ 0x5c
 8002952:	5c9b      	ldrb	r3, [r3, r2]
 8002954:	b2db      	uxtb	r3, r3
 8002956:	2b02      	cmp	r3, #2
 8002958:	d12d      	bne.n	80029b6 <HAL_FDCAN_AddMessageToTxFifoQ+0x74>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	22c4      	movs	r2, #196	@ 0xc4
 8002960:	589a      	ldr	r2, [r3, r2]
 8002962:	2380      	movs	r3, #128	@ 0x80
 8002964:	039b      	lsls	r3, r3, #14
 8002966:	4013      	ands	r3, r2
 8002968:	d008      	beq.n	800297c <HAL_FDCAN_AddMessageToTxFifoQ+0x3a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800296e:	2280      	movs	r2, #128	@ 0x80
 8002970:	0092      	lsls	r2, r2, #2
 8002972:	431a      	orrs	r2, r3
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e023      	b.n	80029c4 <HAL_FDCAN_AddMessageToTxFifoQ+0x82>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	22c4      	movs	r2, #196	@ 0xc4
 8002982:	589b      	ldr	r3, [r3, r2]
 8002984:	0c1b      	lsrs	r3, r3, #16
 8002986:	2203      	movs	r2, #3
 8002988:	4013      	ands	r3, r2
 800298a:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	68b9      	ldr	r1, [r7, #8]
 8002992:	68f8      	ldr	r0, [r7, #12]
 8002994:	f000 fa1a 	bl	8002dcc <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	2101      	movs	r1, #1
 800299e:	697a      	ldr	r2, [r7, #20]
 80029a0:	4091      	lsls	r1, r2
 80029a2:	000a      	movs	r2, r1
 80029a4:	21cc      	movs	r1, #204	@ 0xcc
 80029a6:	505a      	str	r2, [r3, r1]

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80029a8:	2201      	movs	r2, #1
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	409a      	lsls	r2, r3
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 80029b2:	2300      	movs	r3, #0
 80029b4:	e006      	b.n	80029c4 <HAL_FDCAN_AddMessageToTxFifoQ+0x82>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029ba:	2208      	movs	r2, #8
 80029bc:	431a      	orrs	r2, r3
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
  }
}
 80029c4:	0018      	movs	r0, r3
 80029c6:	46bd      	mov	sp, r7
 80029c8:	b006      	add	sp, #24
 80029ca:	bd80      	pop	{r7, pc}

080029cc <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b08c      	sub	sp, #48	@ 0x30
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80029da:	23e0      	movs	r3, #224	@ 0xe0
 80029dc:	015b      	lsls	r3, r3, #5
 80029de:	4013      	ands	r3, r2
 80029e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80029e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029ea:	4013      	ands	r3, r2
 80029ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029f4:	2207      	movs	r2, #7
 80029f6:	4013      	ands	r3, r2
 80029f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002a00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a02:	4013      	ands	r3, r2
 8002a04:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a0c:	2238      	movs	r2, #56	@ 0x38
 8002a0e:	4013      	ands	r3, r2
 8002a10:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002a24:	23f1      	movs	r3, #241	@ 0xf1
 8002a26:	041b      	lsls	r3, r3, #16
 8002a28:	4013      	ands	r3, r2
 8002a2a:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002a32:	6a3b      	ldr	r3, [r7, #32]
 8002a34:	4013      	ands	r3, r2
 8002a36:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002a3e:	23e0      	movs	r3, #224	@ 0xe0
 8002a40:	031b      	lsls	r3, r3, #12
 8002a42:	4013      	ands	r3, r2
 8002a44:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	4013      	ands	r3, r2
 8002a50:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a58:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a60:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	2240      	movs	r2, #64	@ 0x40
 8002a66:	4013      	ands	r3, r2
 8002a68:	d00b      	beq.n	8002a82 <HAL_FDCAN_IRQHandler+0xb6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8002a6a:	69bb      	ldr	r3, [r7, #24]
 8002a6c:	2240      	movs	r2, #64	@ 0x40
 8002a6e:	4013      	ands	r3, r2
 8002a70:	d007      	beq.n	8002a82 <HAL_FDCAN_IRQHandler+0xb6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	2240      	movs	r2, #64	@ 0x40
 8002a78:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	0018      	movs	r0, r3
 8002a7e:	f000 f91f 	bl	8002cc0 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8002a82:	697a      	ldr	r2, [r7, #20]
 8002a84:	2380      	movs	r3, #128	@ 0x80
 8002a86:	005b      	lsls	r3, r3, #1
 8002a88:	4013      	ands	r3, r2
 8002a8a:	d01b      	beq.n	8002ac4 <HAL_FDCAN_IRQHandler+0xf8>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8002a8c:	69ba      	ldr	r2, [r7, #24]
 8002a8e:	2380      	movs	r3, #128	@ 0x80
 8002a90:	005b      	lsls	r3, r3, #1
 8002a92:	4013      	ands	r3, r2
 8002a94:	d016      	beq.n	8002ac4 <HAL_FDCAN_IRQHandler+0xf8>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	22d8      	movs	r2, #216	@ 0xd8
 8002a9c:	589b      	ldr	r3, [r3, r2]
 8002a9e:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	22e0      	movs	r2, #224	@ 0xe0
 8002aa6:	589a      	ldr	r2, [r3, r2]
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	4013      	ands	r3, r2
 8002aac:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2280      	movs	r2, #128	@ 0x80
 8002ab4:	0052      	lsls	r2, r2, #1
 8002ab6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8002ab8:	693a      	ldr	r2, [r7, #16]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	0011      	movs	r1, r2
 8002abe:	0018      	movs	r0, r3
 8002ac0:	f000 f8e5 	bl	8002c8e <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8002ac4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d009      	beq.n	8002ade <HAL_FDCAN_IRQHandler+0x112>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002ad0:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8002ad2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	0011      	movs	r1, r2
 8002ad8:	0018      	movs	r0, r3
 8002ada:	f000 f8ac 	bl	8002c36 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8002ade:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d009      	beq.n	8002af8 <HAL_FDCAN_IRQHandler+0x12c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002aea:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8002aec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	0011      	movs	r1, r2
 8002af2:	0018      	movs	r0, r3
 8002af4:	f000 f8a8 	bl	8002c48 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8002af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d009      	beq.n	8002b12 <HAL_FDCAN_IRQHandler+0x146>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b04:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8002b06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	0011      	movs	r1, r2
 8002b0c:	0018      	movs	r0, r3
 8002b0e:	f000 f8a4 	bl	8002c5a <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8002b12:	697a      	ldr	r2, [r7, #20]
 8002b14:	2380      	movs	r3, #128	@ 0x80
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	4013      	ands	r3, r2
 8002b1a:	d00d      	beq.n	8002b38 <HAL_FDCAN_IRQHandler+0x16c>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8002b1c:	69ba      	ldr	r2, [r7, #24]
 8002b1e:	2380      	movs	r3, #128	@ 0x80
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	4013      	ands	r3, r2
 8002b24:	d008      	beq.n	8002b38 <HAL_FDCAN_IRQHandler+0x16c>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	2280      	movs	r2, #128	@ 0x80
 8002b2c:	0092      	lsls	r2, r2, #2
 8002b2e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	0018      	movs	r0, r3
 8002b34:	f000 f89a 	bl	8002c6c <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	2280      	movs	r2, #128	@ 0x80
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	d019      	beq.n	8002b74 <HAL_FDCAN_IRQHandler+0x1a8>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8002b40:	69bb      	ldr	r3, [r7, #24]
 8002b42:	2280      	movs	r2, #128	@ 0x80
 8002b44:	4013      	ands	r3, r2
 8002b46:	d015      	beq.n	8002b74 <HAL_FDCAN_IRQHandler+0x1a8>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	22d4      	movs	r2, #212	@ 0xd4
 8002b4e:	589b      	ldr	r3, [r3, r2]
 8002b50:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	22dc      	movs	r2, #220	@ 0xdc
 8002b58:	589a      	ldr	r2, [r3, r2]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	2280      	movs	r2, #128	@ 0x80
 8002b66:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8002b68:	68fa      	ldr	r2, [r7, #12]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	0011      	movs	r1, r2
 8002b6e:	0018      	movs	r0, r3
 8002b70:	f000 f884 	bl	8002c7c <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8002b74:	697a      	ldr	r2, [r7, #20]
 8002b76:	2380      	movs	r3, #128	@ 0x80
 8002b78:	019b      	lsls	r3, r3, #6
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	d00d      	beq.n	8002b9a <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8002b7e:	69ba      	ldr	r2, [r7, #24]
 8002b80:	2380      	movs	r3, #128	@ 0x80
 8002b82:	019b      	lsls	r3, r3, #6
 8002b84:	4013      	ands	r3, r2
 8002b86:	d008      	beq.n	8002b9a <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2280      	movs	r2, #128	@ 0x80
 8002b8e:	0192      	lsls	r2, r2, #6
 8002b90:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	0018      	movs	r0, r3
 8002b96:	f000 f883 	bl	8002ca0 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8002b9a:	697a      	ldr	r2, [r7, #20]
 8002b9c:	2380      	movs	r3, #128	@ 0x80
 8002b9e:	021b      	lsls	r3, r3, #8
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	d00d      	beq.n	8002bc0 <HAL_FDCAN_IRQHandler+0x1f4>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8002ba4:	69ba      	ldr	r2, [r7, #24]
 8002ba6:	2380      	movs	r3, #128	@ 0x80
 8002ba8:	021b      	lsls	r3, r3, #8
 8002baa:	4013      	ands	r3, r2
 8002bac:	d008      	beq.n	8002bc0 <HAL_FDCAN_IRQHandler+0x1f4>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	2280      	movs	r2, #128	@ 0x80
 8002bb4:	0212      	lsls	r2, r2, #8
 8002bb6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	0018      	movs	r0, r3
 8002bbc:	f000 f878 	bl	8002cb0 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8002bc0:	697a      	ldr	r2, [r7, #20]
 8002bc2:	2380      	movs	r3, #128	@ 0x80
 8002bc4:	01db      	lsls	r3, r3, #7
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	d00f      	beq.n	8002bea <HAL_FDCAN_IRQHandler+0x21e>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8002bca:	69ba      	ldr	r2, [r7, #24]
 8002bcc:	2380      	movs	r3, #128	@ 0x80
 8002bce:	01db      	lsls	r3, r3, #7
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	d00a      	beq.n	8002bea <HAL_FDCAN_IRQHandler+0x21e>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	2280      	movs	r2, #128	@ 0x80
 8002bda:	01d2      	lsls	r2, r2, #7
 8002bdc:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002be2:	2280      	movs	r2, #128	@ 0x80
 8002be4:	431a      	orrs	r2, r3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d009      	beq.n	8002c04 <HAL_FDCAN_IRQHandler+0x238>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	69fa      	ldr	r2, [r7, #28]
 8002bf6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8002bf8:	69fa      	ldr	r2, [r7, #28]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	0011      	movs	r1, r2
 8002bfe:	0018      	movs	r0, r3
 8002c00:	f000 f86e 	bl	8002ce0 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8002c04:	6a3b      	ldr	r3, [r7, #32]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d009      	beq.n	8002c1e <HAL_FDCAN_IRQHandler+0x252>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	6a3a      	ldr	r2, [r7, #32]
 8002c10:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002c16:	6a3b      	ldr	r3, [r7, #32]
 8002c18:	431a      	orrs	r2, r3
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d003      	beq.n	8002c2e <HAL_FDCAN_IRQHandler+0x262>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	0018      	movs	r0, r3
 8002c2a:	f000 f851 	bl	8002cd0 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8002c2e:	46c0      	nop			@ (mov r8, r8)
 8002c30:	46bd      	mov	sp, r7
 8002c32:	b00c      	add	sp, #48	@ 0x30
 8002c34:	bd80      	pop	{r7, pc}

08002c36 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8002c36:	b580      	push	{r7, lr}
 8002c38:	b082      	sub	sp, #8
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	6078      	str	r0, [r7, #4]
 8002c3e:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8002c40:	46c0      	nop			@ (mov r8, r8)
 8002c42:	46bd      	mov	sp, r7
 8002c44:	b002      	add	sp, #8
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 8002c52:	46c0      	nop			@ (mov r8, r8)
 8002c54:	46bd      	mov	sp, r7
 8002c56:	b002      	add	sp, #8
 8002c58:	bd80      	pop	{r7, pc}

08002c5a <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8002c5a:	b580      	push	{r7, lr}
 8002c5c:	b082      	sub	sp, #8
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	6078      	str	r0, [r7, #4]
 8002c62:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8002c64:	46c0      	nop			@ (mov r8, r8)
 8002c66:	46bd      	mov	sp, r7
 8002c68:	b002      	add	sp, #8
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b082      	sub	sp, #8
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8002c74:	46c0      	nop			@ (mov r8, r8)
 8002c76:	46bd      	mov	sp, r7
 8002c78:	b002      	add	sp, #8
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8002c86:	46c0      	nop			@ (mov r8, r8)
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	b002      	add	sp, #8
 8002c8c:	bd80      	pop	{r7, pc}

08002c8e <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8002c8e:	b580      	push	{r7, lr}
 8002c90:	b082      	sub	sp, #8
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	6078      	str	r0, [r7, #4]
 8002c96:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8002c98:	46c0      	nop			@ (mov r8, r8)
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	b002      	add	sp, #8
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b082      	sub	sp, #8
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8002ca8:	46c0      	nop			@ (mov r8, r8)
 8002caa:	46bd      	mov	sp, r7
 8002cac:	b002      	add	sp, #8
 8002cae:	bd80      	pop	{r7, pc}

08002cb0 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8002cb8:	46c0      	nop			@ (mov r8, r8)
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	b002      	add	sp, #8
 8002cbe:	bd80      	pop	{r7, pc}

08002cc0 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8002cc8:	46c0      	nop			@ (mov r8, r8)
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	b002      	add	sp, #8
 8002cce:	bd80      	pop	{r7, pc}

08002cd0 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8002cd8:	46c0      	nop			@ (mov r8, r8)
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	b002      	add	sp, #8
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8002cea:	46c0      	nop			@ (mov r8, r8)
 8002cec:	46bd      	mov	sp, r7
 8002cee:	b002      	add	sp, #8
 8002cf0:	bd80      	pop	{r7, pc}
	...

08002cf4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b084      	sub	sp, #16
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8002cfc:	4b2f      	ldr	r3, [pc, #188]	@ (8002dbc <FDCAN_CalcultateRamBlockAddresses+0xc8>)
 8002cfe:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a2e      	ldr	r2, [pc, #184]	@ (8002dc0 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d105      	bne.n	8002d16 <FDCAN_CalcultateRamBlockAddresses+0x22>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	22d4      	movs	r2, #212	@ 0xd4
 8002d0e:	0092      	lsls	r2, r2, #2
 8002d10:	4694      	mov	ip, r2
 8002d12:	4463      	add	r3, ip
 8002d14:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	68ba      	ldr	r2, [r7, #8]
 8002d1a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	2280      	movs	r2, #128	@ 0x80
 8002d22:	589b      	ldr	r3, [r3, r2]
 8002d24:	4a27      	ldr	r2, [pc, #156]	@ (8002dc4 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8002d26:	4013      	ands	r3, r2
 8002d28:	0019      	movs	r1, r3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d2e:	041a      	lsls	r2, r3, #16
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	430a      	orrs	r2, r1
 8002d36:	2180      	movs	r1, #128	@ 0x80
 8002d38:	505a      	str	r2, [r3, r1]

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	3370      	adds	r3, #112	@ 0x70
 8002d3e:	001a      	movs	r2, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	2280      	movs	r2, #128	@ 0x80
 8002d4a:	589b      	ldr	r3, [r3, r2]
 8002d4c:	4a1e      	ldr	r2, [pc, #120]	@ (8002dc8 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8002d4e:	4013      	ands	r3, r2
 8002d50:	0019      	movs	r1, r3
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d56:	061a      	lsls	r2, r3, #24
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	430a      	orrs	r2, r1
 8002d5e:	2180      	movs	r1, #128	@ 0x80
 8002d60:	505a      	str	r2, [r3, r1]

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	33b0      	adds	r3, #176	@ 0xb0
 8002d66:	001a      	movs	r2, r3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	3389      	adds	r3, #137	@ 0x89
 8002d70:	33ff      	adds	r3, #255	@ 0xff
 8002d72:	001a      	movs	r2, r3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	2298      	movs	r2, #152	@ 0x98
 8002d7c:	0092      	lsls	r2, r2, #2
 8002d7e:	189a      	adds	r2, r3, r2
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	229e      	movs	r2, #158	@ 0x9e
 8002d88:	0092      	lsls	r2, r2, #2
 8002d8a:	189a      	adds	r2, r3, r2
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	60fb      	str	r3, [r7, #12]
 8002d94:	e005      	b.n	8002da2 <FDCAN_CalcultateRamBlockAddresses+0xae>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	3304      	adds	r3, #4
 8002da0:	60fb      	str	r3, [r7, #12]
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	22d4      	movs	r2, #212	@ 0xd4
 8002da6:	0092      	lsls	r2, r2, #2
 8002da8:	4694      	mov	ip, r2
 8002daa:	4463      	add	r3, ip
 8002dac:	68fa      	ldr	r2, [r7, #12]
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d3f1      	bcc.n	8002d96 <FDCAN_CalcultateRamBlockAddresses+0xa2>
  }
}
 8002db2:	46c0      	nop			@ (mov r8, r8)
 8002db4:	46c0      	nop			@ (mov r8, r8)
 8002db6:	46bd      	mov	sp, r7
 8002db8:	b004      	add	sp, #16
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	4000b400 	.word	0x4000b400
 8002dc0:	40006800 	.word	0x40006800
 8002dc4:	ffe0ffff 	.word	0xffe0ffff
 8002dc8:	f0ffffff 	.word	0xf0ffffff

08002dcc <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b088      	sub	sp, #32
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	60f8      	str	r0, [r7, #12]
 8002dd4:	60b9      	str	r1, [r7, #8]
 8002dd6:	607a      	str	r2, [r7, #4]
 8002dd8:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d10a      	bne.n	8002df8 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8002dea:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002df2:	4313      	orrs	r3, r2
 8002df4:	61fb      	str	r3, [r7, #28]
 8002df6:	e00b      	b.n	8002e10 <FDCAN_CopyMessageToRAM+0x44>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8002e00:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8002e06:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002e08:	2280      	movs	r2, #128	@ 0x80
 8002e0a:	05d2      	lsls	r2, r2, #23
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	6a1b      	ldr	r3, [r3, #32]
 8002e14:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002e1a:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8002e20:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8002e26:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002e36:	683a      	ldr	r2, [r7, #0]
 8002e38:	0013      	movs	r3, r2
 8002e3a:	00db      	lsls	r3, r3, #3
 8002e3c:	189b      	adds	r3, r3, r2
 8002e3e:	00db      	lsls	r3, r3, #3
 8002e40:	18cb      	adds	r3, r1, r3
 8002e42:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8002e44:	69bb      	ldr	r3, [r7, #24]
 8002e46:	69fa      	ldr	r2, [r7, #28]
 8002e48:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8002e4a:	69bb      	ldr	r3, [r7, #24]
 8002e4c:	3304      	adds	r3, #4
 8002e4e:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8002e50:	69bb      	ldr	r3, [r7, #24]
 8002e52:	693a      	ldr	r2, [r7, #16]
 8002e54:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8002e56:	69bb      	ldr	r3, [r7, #24]
 8002e58:	3304      	adds	r3, #4
 8002e5a:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	617b      	str	r3, [r7, #20]
 8002e60:	e020      	b.n	8002ea4 <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	3303      	adds	r3, #3
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	18d3      	adds	r3, r2, r3
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	3302      	adds	r3, #2
 8002e72:	6879      	ldr	r1, [r7, #4]
 8002e74:	18cb      	adds	r3, r1, r3
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8002e7a:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	3301      	adds	r3, #1
 8002e80:	6879      	ldr	r1, [r7, #4]
 8002e82:	18cb      	adds	r3, r1, r3
 8002e84:	781b      	ldrb	r3, [r3, #0]
 8002e86:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8002e88:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8002e8a:	6879      	ldr	r1, [r7, #4]
 8002e8c:	697a      	ldr	r2, [r7, #20]
 8002e8e:	188a      	adds	r2, r1, r2
 8002e90:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8002e92:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8002e94:	69bb      	ldr	r3, [r7, #24]
 8002e96:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8002e98:	69bb      	ldr	r3, [r7, #24]
 8002e9a:	3304      	adds	r3, #4
 8002e9c:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	3304      	adds	r3, #4
 8002ea2:	617b      	str	r3, [r7, #20]
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	4a05      	ldr	r2, [pc, #20]	@ (8002ec0 <FDCAN_CopyMessageToRAM+0xf4>)
 8002eaa:	5cd3      	ldrb	r3, [r2, r3]
 8002eac:	001a      	movs	r2, r3
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d3d6      	bcc.n	8002e62 <FDCAN_CopyMessageToRAM+0x96>
  }
}
 8002eb4:	46c0      	nop			@ (mov r8, r8)
 8002eb6:	46c0      	nop			@ (mov r8, r8)
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	b008      	add	sp, #32
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	46c0      	nop			@ (mov r8, r8)
 8002ec0:	08007280 	.word	0x08007280

08002ec4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b086      	sub	sp, #24
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ed2:	e14d      	b.n	8003170 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2101      	movs	r1, #1
 8002eda:	697a      	ldr	r2, [r7, #20]
 8002edc:	4091      	lsls	r1, r2
 8002ede:	000a      	movs	r2, r1
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d100      	bne.n	8002eec <HAL_GPIO_Init+0x28>
 8002eea:	e13e      	b.n	800316a <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	2203      	movs	r2, #3
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d005      	beq.n	8002f04 <HAL_GPIO_Init+0x40>
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	2203      	movs	r2, #3
 8002efe:	4013      	ands	r3, r2
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	d130      	bne.n	8002f66 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	005b      	lsls	r3, r3, #1
 8002f0e:	2203      	movs	r2, #3
 8002f10:	409a      	lsls	r2, r3
 8002f12:	0013      	movs	r3, r2
 8002f14:	43da      	mvns	r2, r3
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	4013      	ands	r3, r2
 8002f1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	68da      	ldr	r2, [r3, #12]
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	005b      	lsls	r3, r3, #1
 8002f24:	409a      	lsls	r2, r3
 8002f26:	0013      	movs	r3, r2
 8002f28:	693a      	ldr	r2, [r7, #16]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	693a      	ldr	r2, [r7, #16]
 8002f32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	409a      	lsls	r2, r3
 8002f40:	0013      	movs	r3, r2
 8002f42:	43da      	mvns	r2, r3
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	4013      	ands	r3, r2
 8002f48:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	091b      	lsrs	r3, r3, #4
 8002f50:	2201      	movs	r2, #1
 8002f52:	401a      	ands	r2, r3
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	409a      	lsls	r2, r3
 8002f58:	0013      	movs	r3, r2
 8002f5a:	693a      	ldr	r2, [r7, #16]
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	693a      	ldr	r2, [r7, #16]
 8002f64:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	2203      	movs	r2, #3
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	2b03      	cmp	r3, #3
 8002f70:	d017      	beq.n	8002fa2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	005b      	lsls	r3, r3, #1
 8002f7c:	2203      	movs	r2, #3
 8002f7e:	409a      	lsls	r2, r3
 8002f80:	0013      	movs	r3, r2
 8002f82:	43da      	mvns	r2, r3
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	4013      	ands	r3, r2
 8002f88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	689a      	ldr	r2, [r3, #8]
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	005b      	lsls	r3, r3, #1
 8002f92:	409a      	lsls	r2, r3
 8002f94:	0013      	movs	r3, r2
 8002f96:	693a      	ldr	r2, [r7, #16]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	693a      	ldr	r2, [r7, #16]
 8002fa0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	2203      	movs	r2, #3
 8002fa8:	4013      	ands	r3, r2
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d123      	bne.n	8002ff6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	08da      	lsrs	r2, r3, #3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	3208      	adds	r2, #8
 8002fb6:	0092      	lsls	r2, r2, #2
 8002fb8:	58d3      	ldr	r3, [r2, r3]
 8002fba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	2207      	movs	r2, #7
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	220f      	movs	r2, #15
 8002fc6:	409a      	lsls	r2, r3
 8002fc8:	0013      	movs	r3, r2
 8002fca:	43da      	mvns	r2, r3
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	4013      	ands	r3, r2
 8002fd0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	691a      	ldr	r2, [r3, #16]
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	2107      	movs	r1, #7
 8002fda:	400b      	ands	r3, r1
 8002fdc:	009b      	lsls	r3, r3, #2
 8002fde:	409a      	lsls	r2, r3
 8002fe0:	0013      	movs	r3, r2
 8002fe2:	693a      	ldr	r2, [r7, #16]
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	08da      	lsrs	r2, r3, #3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	3208      	adds	r2, #8
 8002ff0:	0092      	lsls	r2, r2, #2
 8002ff2:	6939      	ldr	r1, [r7, #16]
 8002ff4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	005b      	lsls	r3, r3, #1
 8003000:	2203      	movs	r2, #3
 8003002:	409a      	lsls	r2, r3
 8003004:	0013      	movs	r3, r2
 8003006:	43da      	mvns	r2, r3
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	4013      	ands	r3, r2
 800300c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	2203      	movs	r2, #3
 8003014:	401a      	ands	r2, r3
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	005b      	lsls	r3, r3, #1
 800301a:	409a      	lsls	r2, r3
 800301c:	0013      	movs	r3, r2
 800301e:	693a      	ldr	r2, [r7, #16]
 8003020:	4313      	orrs	r3, r2
 8003022:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	693a      	ldr	r2, [r7, #16]
 8003028:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	685a      	ldr	r2, [r3, #4]
 800302e:	23c0      	movs	r3, #192	@ 0xc0
 8003030:	029b      	lsls	r3, r3, #10
 8003032:	4013      	ands	r3, r2
 8003034:	d100      	bne.n	8003038 <HAL_GPIO_Init+0x174>
 8003036:	e098      	b.n	800316a <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003038:	4a53      	ldr	r2, [pc, #332]	@ (8003188 <HAL_GPIO_Init+0x2c4>)
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	089b      	lsrs	r3, r3, #2
 800303e:	3318      	adds	r3, #24
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	589b      	ldr	r3, [r3, r2]
 8003044:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	2203      	movs	r2, #3
 800304a:	4013      	ands	r3, r2
 800304c:	00db      	lsls	r3, r3, #3
 800304e:	220f      	movs	r2, #15
 8003050:	409a      	lsls	r2, r3
 8003052:	0013      	movs	r3, r2
 8003054:	43da      	mvns	r2, r3
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	4013      	ands	r3, r2
 800305a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800305c:	687a      	ldr	r2, [r7, #4]
 800305e:	23a0      	movs	r3, #160	@ 0xa0
 8003060:	05db      	lsls	r3, r3, #23
 8003062:	429a      	cmp	r2, r3
 8003064:	d019      	beq.n	800309a <HAL_GPIO_Init+0x1d6>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4a48      	ldr	r2, [pc, #288]	@ (800318c <HAL_GPIO_Init+0x2c8>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d013      	beq.n	8003096 <HAL_GPIO_Init+0x1d2>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4a47      	ldr	r2, [pc, #284]	@ (8003190 <HAL_GPIO_Init+0x2cc>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d00d      	beq.n	8003092 <HAL_GPIO_Init+0x1ce>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	4a46      	ldr	r2, [pc, #280]	@ (8003194 <HAL_GPIO_Init+0x2d0>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d007      	beq.n	800308e <HAL_GPIO_Init+0x1ca>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4a45      	ldr	r2, [pc, #276]	@ (8003198 <HAL_GPIO_Init+0x2d4>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d101      	bne.n	800308a <HAL_GPIO_Init+0x1c6>
 8003086:	2304      	movs	r3, #4
 8003088:	e008      	b.n	800309c <HAL_GPIO_Init+0x1d8>
 800308a:	2305      	movs	r3, #5
 800308c:	e006      	b.n	800309c <HAL_GPIO_Init+0x1d8>
 800308e:	2303      	movs	r3, #3
 8003090:	e004      	b.n	800309c <HAL_GPIO_Init+0x1d8>
 8003092:	2302      	movs	r3, #2
 8003094:	e002      	b.n	800309c <HAL_GPIO_Init+0x1d8>
 8003096:	2301      	movs	r3, #1
 8003098:	e000      	b.n	800309c <HAL_GPIO_Init+0x1d8>
 800309a:	2300      	movs	r3, #0
 800309c:	697a      	ldr	r2, [r7, #20]
 800309e:	2103      	movs	r1, #3
 80030a0:	400a      	ands	r2, r1
 80030a2:	00d2      	lsls	r2, r2, #3
 80030a4:	4093      	lsls	r3, r2
 80030a6:	693a      	ldr	r2, [r7, #16]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80030ac:	4936      	ldr	r1, [pc, #216]	@ (8003188 <HAL_GPIO_Init+0x2c4>)
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	089b      	lsrs	r3, r3, #2
 80030b2:	3318      	adds	r3, #24
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	693a      	ldr	r2, [r7, #16]
 80030b8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80030ba:	4b33      	ldr	r3, [pc, #204]	@ (8003188 <HAL_GPIO_Init+0x2c4>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	43da      	mvns	r2, r3
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	4013      	ands	r3, r2
 80030c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	685a      	ldr	r2, [r3, #4]
 80030ce:	2380      	movs	r3, #128	@ 0x80
 80030d0:	035b      	lsls	r3, r3, #13
 80030d2:	4013      	ands	r3, r2
 80030d4:	d003      	beq.n	80030de <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80030d6:	693a      	ldr	r2, [r7, #16]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	4313      	orrs	r3, r2
 80030dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80030de:	4b2a      	ldr	r3, [pc, #168]	@ (8003188 <HAL_GPIO_Init+0x2c4>)
 80030e0:	693a      	ldr	r2, [r7, #16]
 80030e2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80030e4:	4b28      	ldr	r3, [pc, #160]	@ (8003188 <HAL_GPIO_Init+0x2c4>)
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	43da      	mvns	r2, r3
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	4013      	ands	r3, r2
 80030f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	685a      	ldr	r2, [r3, #4]
 80030f8:	2380      	movs	r3, #128	@ 0x80
 80030fa:	039b      	lsls	r3, r3, #14
 80030fc:	4013      	ands	r3, r2
 80030fe:	d003      	beq.n	8003108 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8003100:	693a      	ldr	r2, [r7, #16]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	4313      	orrs	r3, r2
 8003106:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003108:	4b1f      	ldr	r3, [pc, #124]	@ (8003188 <HAL_GPIO_Init+0x2c4>)
 800310a:	693a      	ldr	r2, [r7, #16]
 800310c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800310e:	4a1e      	ldr	r2, [pc, #120]	@ (8003188 <HAL_GPIO_Init+0x2c4>)
 8003110:	2384      	movs	r3, #132	@ 0x84
 8003112:	58d3      	ldr	r3, [r2, r3]
 8003114:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	43da      	mvns	r2, r3
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	4013      	ands	r3, r2
 800311e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	685a      	ldr	r2, [r3, #4]
 8003124:	2380      	movs	r3, #128	@ 0x80
 8003126:	029b      	lsls	r3, r3, #10
 8003128:	4013      	ands	r3, r2
 800312a:	d003      	beq.n	8003134 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800312c:	693a      	ldr	r2, [r7, #16]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	4313      	orrs	r3, r2
 8003132:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003134:	4914      	ldr	r1, [pc, #80]	@ (8003188 <HAL_GPIO_Init+0x2c4>)
 8003136:	2284      	movs	r2, #132	@ 0x84
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800313c:	4a12      	ldr	r2, [pc, #72]	@ (8003188 <HAL_GPIO_Init+0x2c4>)
 800313e:	2380      	movs	r3, #128	@ 0x80
 8003140:	58d3      	ldr	r3, [r2, r3]
 8003142:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	43da      	mvns	r2, r3
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	4013      	ands	r3, r2
 800314c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	685a      	ldr	r2, [r3, #4]
 8003152:	2380      	movs	r3, #128	@ 0x80
 8003154:	025b      	lsls	r3, r3, #9
 8003156:	4013      	ands	r3, r2
 8003158:	d003      	beq.n	8003162 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800315a:	693a      	ldr	r2, [r7, #16]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	4313      	orrs	r3, r2
 8003160:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003162:	4909      	ldr	r1, [pc, #36]	@ (8003188 <HAL_GPIO_Init+0x2c4>)
 8003164:	2280      	movs	r2, #128	@ 0x80
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	3301      	adds	r3, #1
 800316e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	40da      	lsrs	r2, r3
 8003178:	1e13      	subs	r3, r2, #0
 800317a:	d000      	beq.n	800317e <HAL_GPIO_Init+0x2ba>
 800317c:	e6aa      	b.n	8002ed4 <HAL_GPIO_Init+0x10>
  }
}
 800317e:	46c0      	nop			@ (mov r8, r8)
 8003180:	46c0      	nop			@ (mov r8, r8)
 8003182:	46bd      	mov	sp, r7
 8003184:	b006      	add	sp, #24
 8003186:	bd80      	pop	{r7, pc}
 8003188:	40021800 	.word	0x40021800
 800318c:	50000400 	.word	0x50000400
 8003190:	50000800 	.word	0x50000800
 8003194:	50000c00 	.word	0x50000c00
 8003198:	50001000 	.word	0x50001000

0800319c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	0008      	movs	r0, r1
 80031a6:	0011      	movs	r1, r2
 80031a8:	1cbb      	adds	r3, r7, #2
 80031aa:	1c02      	adds	r2, r0, #0
 80031ac:	801a      	strh	r2, [r3, #0]
 80031ae:	1c7b      	adds	r3, r7, #1
 80031b0:	1c0a      	adds	r2, r1, #0
 80031b2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80031b4:	1c7b      	adds	r3, r7, #1
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d004      	beq.n	80031c6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80031bc:	1cbb      	adds	r3, r7, #2
 80031be:	881a      	ldrh	r2, [r3, #0]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80031c4:	e003      	b.n	80031ce <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80031c6:	1cbb      	adds	r3, r7, #2
 80031c8:	881a      	ldrh	r2, [r3, #0]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80031ce:	46c0      	nop			@ (mov r8, r8)
 80031d0:	46bd      	mov	sp, r7
 80031d2:	b002      	add	sp, #8
 80031d4:	bd80      	pop	{r7, pc}
	...

080031d8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b084      	sub	sp, #16
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80031e0:	4b19      	ldr	r3, [pc, #100]	@ (8003248 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a19      	ldr	r2, [pc, #100]	@ (800324c <HAL_PWREx_ControlVoltageScaling+0x74>)
 80031e6:	4013      	ands	r3, r2
 80031e8:	0019      	movs	r1, r3
 80031ea:	4b17      	ldr	r3, [pc, #92]	@ (8003248 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	430a      	orrs	r2, r1
 80031f0:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	2380      	movs	r3, #128	@ 0x80
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d11f      	bne.n	800323c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80031fc:	4b14      	ldr	r3, [pc, #80]	@ (8003250 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	0013      	movs	r3, r2
 8003202:	005b      	lsls	r3, r3, #1
 8003204:	189b      	adds	r3, r3, r2
 8003206:	005b      	lsls	r3, r3, #1
 8003208:	4912      	ldr	r1, [pc, #72]	@ (8003254 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800320a:	0018      	movs	r0, r3
 800320c:	f7fc ff84 	bl	8000118 <__udivsi3>
 8003210:	0003      	movs	r3, r0
 8003212:	3301      	adds	r3, #1
 8003214:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003216:	e008      	b.n	800322a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d003      	beq.n	8003226 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	3b01      	subs	r3, #1
 8003222:	60fb      	str	r3, [r7, #12]
 8003224:	e001      	b.n	800322a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e009      	b.n	800323e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800322a:	4b07      	ldr	r3, [pc, #28]	@ (8003248 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800322c:	695a      	ldr	r2, [r3, #20]
 800322e:	2380      	movs	r3, #128	@ 0x80
 8003230:	00db      	lsls	r3, r3, #3
 8003232:	401a      	ands	r2, r3
 8003234:	2380      	movs	r3, #128	@ 0x80
 8003236:	00db      	lsls	r3, r3, #3
 8003238:	429a      	cmp	r2, r3
 800323a:	d0ed      	beq.n	8003218 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800323c:	2300      	movs	r3, #0
}
 800323e:	0018      	movs	r0, r3
 8003240:	46bd      	mov	sp, r7
 8003242:	b004      	add	sp, #16
 8003244:	bd80      	pop	{r7, pc}
 8003246:	46c0      	nop			@ (mov r8, r8)
 8003248:	40007000 	.word	0x40007000
 800324c:	fffff9ff 	.word	0xfffff9ff
 8003250:	2000000c 	.word	0x2000000c
 8003254:	000f4240 	.word	0x000f4240

08003258 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800325c:	4b03      	ldr	r3, [pc, #12]	@ (800326c <LL_RCC_GetAPB1Prescaler+0x14>)
 800325e:	689a      	ldr	r2, [r3, #8]
 8003260:	23e0      	movs	r3, #224	@ 0xe0
 8003262:	01db      	lsls	r3, r3, #7
 8003264:	4013      	ands	r3, r2
}
 8003266:	0018      	movs	r0, r3
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}
 800326c:	40021000 	.word	0x40021000

08003270 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b088      	sub	sp, #32
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d102      	bne.n	8003284 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	f000 fb50 	bl	8003924 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	2201      	movs	r2, #1
 800328a:	4013      	ands	r3, r2
 800328c:	d100      	bne.n	8003290 <HAL_RCC_OscConfig+0x20>
 800328e:	e07c      	b.n	800338a <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003290:	4bc3      	ldr	r3, [pc, #780]	@ (80035a0 <HAL_RCC_OscConfig+0x330>)
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	2238      	movs	r2, #56	@ 0x38
 8003296:	4013      	ands	r3, r2
 8003298:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800329a:	4bc1      	ldr	r3, [pc, #772]	@ (80035a0 <HAL_RCC_OscConfig+0x330>)
 800329c:	68db      	ldr	r3, [r3, #12]
 800329e:	2203      	movs	r2, #3
 80032a0:	4013      	ands	r3, r2
 80032a2:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80032a4:	69bb      	ldr	r3, [r7, #24]
 80032a6:	2b10      	cmp	r3, #16
 80032a8:	d102      	bne.n	80032b0 <HAL_RCC_OscConfig+0x40>
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	2b03      	cmp	r3, #3
 80032ae:	d002      	beq.n	80032b6 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80032b0:	69bb      	ldr	r3, [r7, #24]
 80032b2:	2b08      	cmp	r3, #8
 80032b4:	d10b      	bne.n	80032ce <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032b6:	4bba      	ldr	r3, [pc, #744]	@ (80035a0 <HAL_RCC_OscConfig+0x330>)
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	2380      	movs	r3, #128	@ 0x80
 80032bc:	029b      	lsls	r3, r3, #10
 80032be:	4013      	ands	r3, r2
 80032c0:	d062      	beq.n	8003388 <HAL_RCC_OscConfig+0x118>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d15e      	bne.n	8003388 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e32a      	b.n	8003924 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	685a      	ldr	r2, [r3, #4]
 80032d2:	2380      	movs	r3, #128	@ 0x80
 80032d4:	025b      	lsls	r3, r3, #9
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d107      	bne.n	80032ea <HAL_RCC_OscConfig+0x7a>
 80032da:	4bb1      	ldr	r3, [pc, #708]	@ (80035a0 <HAL_RCC_OscConfig+0x330>)
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	4bb0      	ldr	r3, [pc, #704]	@ (80035a0 <HAL_RCC_OscConfig+0x330>)
 80032e0:	2180      	movs	r1, #128	@ 0x80
 80032e2:	0249      	lsls	r1, r1, #9
 80032e4:	430a      	orrs	r2, r1
 80032e6:	601a      	str	r2, [r3, #0]
 80032e8:	e020      	b.n	800332c <HAL_RCC_OscConfig+0xbc>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	685a      	ldr	r2, [r3, #4]
 80032ee:	23a0      	movs	r3, #160	@ 0xa0
 80032f0:	02db      	lsls	r3, r3, #11
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d10e      	bne.n	8003314 <HAL_RCC_OscConfig+0xa4>
 80032f6:	4baa      	ldr	r3, [pc, #680]	@ (80035a0 <HAL_RCC_OscConfig+0x330>)
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	4ba9      	ldr	r3, [pc, #676]	@ (80035a0 <HAL_RCC_OscConfig+0x330>)
 80032fc:	2180      	movs	r1, #128	@ 0x80
 80032fe:	02c9      	lsls	r1, r1, #11
 8003300:	430a      	orrs	r2, r1
 8003302:	601a      	str	r2, [r3, #0]
 8003304:	4ba6      	ldr	r3, [pc, #664]	@ (80035a0 <HAL_RCC_OscConfig+0x330>)
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	4ba5      	ldr	r3, [pc, #660]	@ (80035a0 <HAL_RCC_OscConfig+0x330>)
 800330a:	2180      	movs	r1, #128	@ 0x80
 800330c:	0249      	lsls	r1, r1, #9
 800330e:	430a      	orrs	r2, r1
 8003310:	601a      	str	r2, [r3, #0]
 8003312:	e00b      	b.n	800332c <HAL_RCC_OscConfig+0xbc>
 8003314:	4ba2      	ldr	r3, [pc, #648]	@ (80035a0 <HAL_RCC_OscConfig+0x330>)
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	4ba1      	ldr	r3, [pc, #644]	@ (80035a0 <HAL_RCC_OscConfig+0x330>)
 800331a:	49a2      	ldr	r1, [pc, #648]	@ (80035a4 <HAL_RCC_OscConfig+0x334>)
 800331c:	400a      	ands	r2, r1
 800331e:	601a      	str	r2, [r3, #0]
 8003320:	4b9f      	ldr	r3, [pc, #636]	@ (80035a0 <HAL_RCC_OscConfig+0x330>)
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	4b9e      	ldr	r3, [pc, #632]	@ (80035a0 <HAL_RCC_OscConfig+0x330>)
 8003326:	49a0      	ldr	r1, [pc, #640]	@ (80035a8 <HAL_RCC_OscConfig+0x338>)
 8003328:	400a      	ands	r2, r1
 800332a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d014      	beq.n	800335e <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003334:	f7fe fc32 	bl	8001b9c <HAL_GetTick>
 8003338:	0003      	movs	r3, r0
 800333a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800333c:	e008      	b.n	8003350 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800333e:	f7fe fc2d 	bl	8001b9c <HAL_GetTick>
 8003342:	0002      	movs	r2, r0
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	2b64      	cmp	r3, #100	@ 0x64
 800334a:	d901      	bls.n	8003350 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	e2e9      	b.n	8003924 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003350:	4b93      	ldr	r3, [pc, #588]	@ (80035a0 <HAL_RCC_OscConfig+0x330>)
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	2380      	movs	r3, #128	@ 0x80
 8003356:	029b      	lsls	r3, r3, #10
 8003358:	4013      	ands	r3, r2
 800335a:	d0f0      	beq.n	800333e <HAL_RCC_OscConfig+0xce>
 800335c:	e015      	b.n	800338a <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800335e:	f7fe fc1d 	bl	8001b9c <HAL_GetTick>
 8003362:	0003      	movs	r3, r0
 8003364:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003366:	e008      	b.n	800337a <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003368:	f7fe fc18 	bl	8001b9c <HAL_GetTick>
 800336c:	0002      	movs	r2, r0
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	2b64      	cmp	r3, #100	@ 0x64
 8003374:	d901      	bls.n	800337a <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e2d4      	b.n	8003924 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800337a:	4b89      	ldr	r3, [pc, #548]	@ (80035a0 <HAL_RCC_OscConfig+0x330>)
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	2380      	movs	r3, #128	@ 0x80
 8003380:	029b      	lsls	r3, r3, #10
 8003382:	4013      	ands	r3, r2
 8003384:	d1f0      	bne.n	8003368 <HAL_RCC_OscConfig+0xf8>
 8003386:	e000      	b.n	800338a <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003388:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	2202      	movs	r2, #2
 8003390:	4013      	ands	r3, r2
 8003392:	d100      	bne.n	8003396 <HAL_RCC_OscConfig+0x126>
 8003394:	e099      	b.n	80034ca <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003396:	4b82      	ldr	r3, [pc, #520]	@ (80035a0 <HAL_RCC_OscConfig+0x330>)
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	2238      	movs	r2, #56	@ 0x38
 800339c:	4013      	ands	r3, r2
 800339e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033a0:	4b7f      	ldr	r3, [pc, #508]	@ (80035a0 <HAL_RCC_OscConfig+0x330>)
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	2203      	movs	r2, #3
 80033a6:	4013      	ands	r3, r2
 80033a8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80033aa:	69bb      	ldr	r3, [r7, #24]
 80033ac:	2b10      	cmp	r3, #16
 80033ae:	d102      	bne.n	80033b6 <HAL_RCC_OscConfig+0x146>
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d002      	beq.n	80033bc <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80033b6:	69bb      	ldr	r3, [r7, #24]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d135      	bne.n	8003428 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033bc:	4b78      	ldr	r3, [pc, #480]	@ (80035a0 <HAL_RCC_OscConfig+0x330>)
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	2380      	movs	r3, #128	@ 0x80
 80033c2:	00db      	lsls	r3, r3, #3
 80033c4:	4013      	ands	r3, r2
 80033c6:	d005      	beq.n	80033d4 <HAL_RCC_OscConfig+0x164>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d101      	bne.n	80033d4 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e2a7      	b.n	8003924 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033d4:	4b72      	ldr	r3, [pc, #456]	@ (80035a0 <HAL_RCC_OscConfig+0x330>)
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	4a74      	ldr	r2, [pc, #464]	@ (80035ac <HAL_RCC_OscConfig+0x33c>)
 80033da:	4013      	ands	r3, r2
 80033dc:	0019      	movs	r1, r3
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	695b      	ldr	r3, [r3, #20]
 80033e2:	021a      	lsls	r2, r3, #8
 80033e4:	4b6e      	ldr	r3, [pc, #440]	@ (80035a0 <HAL_RCC_OscConfig+0x330>)
 80033e6:	430a      	orrs	r2, r1
 80033e8:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80033ea:	69bb      	ldr	r3, [r7, #24]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d112      	bne.n	8003416 <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80033f0:	4b6b      	ldr	r3, [pc, #428]	@ (80035a0 <HAL_RCC_OscConfig+0x330>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a6e      	ldr	r2, [pc, #440]	@ (80035b0 <HAL_RCC_OscConfig+0x340>)
 80033f6:	4013      	ands	r3, r2
 80033f8:	0019      	movs	r1, r3
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	691a      	ldr	r2, [r3, #16]
 80033fe:	4b68      	ldr	r3, [pc, #416]	@ (80035a0 <HAL_RCC_OscConfig+0x330>)
 8003400:	430a      	orrs	r2, r1
 8003402:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003404:	4b66      	ldr	r3, [pc, #408]	@ (80035a0 <HAL_RCC_OscConfig+0x330>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	0adb      	lsrs	r3, r3, #11
 800340a:	2207      	movs	r2, #7
 800340c:	4013      	ands	r3, r2
 800340e:	4a69      	ldr	r2, [pc, #420]	@ (80035b4 <HAL_RCC_OscConfig+0x344>)
 8003410:	40da      	lsrs	r2, r3
 8003412:	4b69      	ldr	r3, [pc, #420]	@ (80035b8 <HAL_RCC_OscConfig+0x348>)
 8003414:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003416:	4b69      	ldr	r3, [pc, #420]	@ (80035bc <HAL_RCC_OscConfig+0x34c>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	0018      	movs	r0, r3
 800341c:	f7fe fb62 	bl	8001ae4 <HAL_InitTick>
 8003420:	1e03      	subs	r3, r0, #0
 8003422:	d051      	beq.n	80034c8 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e27d      	b.n	8003924 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d030      	beq.n	8003492 <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003430:	4b5b      	ldr	r3, [pc, #364]	@ (80035a0 <HAL_RCC_OscConfig+0x330>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a5e      	ldr	r2, [pc, #376]	@ (80035b0 <HAL_RCC_OscConfig+0x340>)
 8003436:	4013      	ands	r3, r2
 8003438:	0019      	movs	r1, r3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	691a      	ldr	r2, [r3, #16]
 800343e:	4b58      	ldr	r3, [pc, #352]	@ (80035a0 <HAL_RCC_OscConfig+0x330>)
 8003440:	430a      	orrs	r2, r1
 8003442:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003444:	4b56      	ldr	r3, [pc, #344]	@ (80035a0 <HAL_RCC_OscConfig+0x330>)
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	4b55      	ldr	r3, [pc, #340]	@ (80035a0 <HAL_RCC_OscConfig+0x330>)
 800344a:	2180      	movs	r1, #128	@ 0x80
 800344c:	0049      	lsls	r1, r1, #1
 800344e:	430a      	orrs	r2, r1
 8003450:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003452:	f7fe fba3 	bl	8001b9c <HAL_GetTick>
 8003456:	0003      	movs	r3, r0
 8003458:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800345a:	e008      	b.n	800346e <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800345c:	f7fe fb9e 	bl	8001b9c <HAL_GetTick>
 8003460:	0002      	movs	r2, r0
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	2b02      	cmp	r3, #2
 8003468:	d901      	bls.n	800346e <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e25a      	b.n	8003924 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800346e:	4b4c      	ldr	r3, [pc, #304]	@ (80035a0 <HAL_RCC_OscConfig+0x330>)
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	2380      	movs	r3, #128	@ 0x80
 8003474:	00db      	lsls	r3, r3, #3
 8003476:	4013      	ands	r3, r2
 8003478:	d0f0      	beq.n	800345c <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800347a:	4b49      	ldr	r3, [pc, #292]	@ (80035a0 <HAL_RCC_OscConfig+0x330>)
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	4a4b      	ldr	r2, [pc, #300]	@ (80035ac <HAL_RCC_OscConfig+0x33c>)
 8003480:	4013      	ands	r3, r2
 8003482:	0019      	movs	r1, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	695b      	ldr	r3, [r3, #20]
 8003488:	021a      	lsls	r2, r3, #8
 800348a:	4b45      	ldr	r3, [pc, #276]	@ (80035a0 <HAL_RCC_OscConfig+0x330>)
 800348c:	430a      	orrs	r2, r1
 800348e:	605a      	str	r2, [r3, #4]
 8003490:	e01b      	b.n	80034ca <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003492:	4b43      	ldr	r3, [pc, #268]	@ (80035a0 <HAL_RCC_OscConfig+0x330>)
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	4b42      	ldr	r3, [pc, #264]	@ (80035a0 <HAL_RCC_OscConfig+0x330>)
 8003498:	4949      	ldr	r1, [pc, #292]	@ (80035c0 <HAL_RCC_OscConfig+0x350>)
 800349a:	400a      	ands	r2, r1
 800349c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800349e:	f7fe fb7d 	bl	8001b9c <HAL_GetTick>
 80034a2:	0003      	movs	r3, r0
 80034a4:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80034a6:	e008      	b.n	80034ba <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034a8:	f7fe fb78 	bl	8001b9c <HAL_GetTick>
 80034ac:	0002      	movs	r2, r0
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d901      	bls.n	80034ba <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 80034b6:	2303      	movs	r3, #3
 80034b8:	e234      	b.n	8003924 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80034ba:	4b39      	ldr	r3, [pc, #228]	@ (80035a0 <HAL_RCC_OscConfig+0x330>)
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	2380      	movs	r3, #128	@ 0x80
 80034c0:	00db      	lsls	r3, r3, #3
 80034c2:	4013      	ands	r3, r2
 80034c4:	d1f0      	bne.n	80034a8 <HAL_RCC_OscConfig+0x238>
 80034c6:	e000      	b.n	80034ca <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034c8:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	2208      	movs	r2, #8
 80034d0:	4013      	ands	r3, r2
 80034d2:	d047      	beq.n	8003564 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80034d4:	4b32      	ldr	r3, [pc, #200]	@ (80035a0 <HAL_RCC_OscConfig+0x330>)
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	2238      	movs	r2, #56	@ 0x38
 80034da:	4013      	ands	r3, r2
 80034dc:	2b18      	cmp	r3, #24
 80034de:	d10a      	bne.n	80034f6 <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80034e0:	4b2f      	ldr	r3, [pc, #188]	@ (80035a0 <HAL_RCC_OscConfig+0x330>)
 80034e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034e4:	2202      	movs	r2, #2
 80034e6:	4013      	ands	r3, r2
 80034e8:	d03c      	beq.n	8003564 <HAL_RCC_OscConfig+0x2f4>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	699b      	ldr	r3, [r3, #24]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d138      	bne.n	8003564 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e216      	b.n	8003924 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	699b      	ldr	r3, [r3, #24]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d019      	beq.n	8003532 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80034fe:	4b28      	ldr	r3, [pc, #160]	@ (80035a0 <HAL_RCC_OscConfig+0x330>)
 8003500:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003502:	4b27      	ldr	r3, [pc, #156]	@ (80035a0 <HAL_RCC_OscConfig+0x330>)
 8003504:	2101      	movs	r1, #1
 8003506:	430a      	orrs	r2, r1
 8003508:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800350a:	f7fe fb47 	bl	8001b9c <HAL_GetTick>
 800350e:	0003      	movs	r3, r0
 8003510:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003512:	e008      	b.n	8003526 <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003514:	f7fe fb42 	bl	8001b9c <HAL_GetTick>
 8003518:	0002      	movs	r2, r0
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	2b02      	cmp	r3, #2
 8003520:	d901      	bls.n	8003526 <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e1fe      	b.n	8003924 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003526:	4b1e      	ldr	r3, [pc, #120]	@ (80035a0 <HAL_RCC_OscConfig+0x330>)
 8003528:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800352a:	2202      	movs	r2, #2
 800352c:	4013      	ands	r3, r2
 800352e:	d0f1      	beq.n	8003514 <HAL_RCC_OscConfig+0x2a4>
 8003530:	e018      	b.n	8003564 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003532:	4b1b      	ldr	r3, [pc, #108]	@ (80035a0 <HAL_RCC_OscConfig+0x330>)
 8003534:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003536:	4b1a      	ldr	r3, [pc, #104]	@ (80035a0 <HAL_RCC_OscConfig+0x330>)
 8003538:	2101      	movs	r1, #1
 800353a:	438a      	bics	r2, r1
 800353c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800353e:	f7fe fb2d 	bl	8001b9c <HAL_GetTick>
 8003542:	0003      	movs	r3, r0
 8003544:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003546:	e008      	b.n	800355a <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003548:	f7fe fb28 	bl	8001b9c <HAL_GetTick>
 800354c:	0002      	movs	r2, r0
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	2b02      	cmp	r3, #2
 8003554:	d901      	bls.n	800355a <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8003556:	2303      	movs	r3, #3
 8003558:	e1e4      	b.n	8003924 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800355a:	4b11      	ldr	r3, [pc, #68]	@ (80035a0 <HAL_RCC_OscConfig+0x330>)
 800355c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800355e:	2202      	movs	r2, #2
 8003560:	4013      	ands	r3, r2
 8003562:	d1f1      	bne.n	8003548 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	2204      	movs	r2, #4
 800356a:	4013      	ands	r3, r2
 800356c:	d100      	bne.n	8003570 <HAL_RCC_OscConfig+0x300>
 800356e:	e0c7      	b.n	8003700 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003570:	231f      	movs	r3, #31
 8003572:	18fb      	adds	r3, r7, r3
 8003574:	2200      	movs	r2, #0
 8003576:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003578:	4b09      	ldr	r3, [pc, #36]	@ (80035a0 <HAL_RCC_OscConfig+0x330>)
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	2238      	movs	r2, #56	@ 0x38
 800357e:	4013      	ands	r3, r2
 8003580:	2b20      	cmp	r3, #32
 8003582:	d11f      	bne.n	80035c4 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003584:	4b06      	ldr	r3, [pc, #24]	@ (80035a0 <HAL_RCC_OscConfig+0x330>)
 8003586:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003588:	2202      	movs	r2, #2
 800358a:	4013      	ands	r3, r2
 800358c:	d100      	bne.n	8003590 <HAL_RCC_OscConfig+0x320>
 800358e:	e0b7      	b.n	8003700 <HAL_RCC_OscConfig+0x490>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d000      	beq.n	800359a <HAL_RCC_OscConfig+0x32a>
 8003598:	e0b2      	b.n	8003700 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e1c2      	b.n	8003924 <HAL_RCC_OscConfig+0x6b4>
 800359e:	46c0      	nop			@ (mov r8, r8)
 80035a0:	40021000 	.word	0x40021000
 80035a4:	fffeffff 	.word	0xfffeffff
 80035a8:	fffbffff 	.word	0xfffbffff
 80035ac:	ffff80ff 	.word	0xffff80ff
 80035b0:	ffffc7ff 	.word	0xffffc7ff
 80035b4:	00f42400 	.word	0x00f42400
 80035b8:	2000000c 	.word	0x2000000c
 80035bc:	20000010 	.word	0x20000010
 80035c0:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80035c4:	4bb5      	ldr	r3, [pc, #724]	@ (800389c <HAL_RCC_OscConfig+0x62c>)
 80035c6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80035c8:	2380      	movs	r3, #128	@ 0x80
 80035ca:	055b      	lsls	r3, r3, #21
 80035cc:	4013      	ands	r3, r2
 80035ce:	d101      	bne.n	80035d4 <HAL_RCC_OscConfig+0x364>
 80035d0:	2301      	movs	r3, #1
 80035d2:	e000      	b.n	80035d6 <HAL_RCC_OscConfig+0x366>
 80035d4:	2300      	movs	r3, #0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d011      	beq.n	80035fe <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80035da:	4bb0      	ldr	r3, [pc, #704]	@ (800389c <HAL_RCC_OscConfig+0x62c>)
 80035dc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80035de:	4baf      	ldr	r3, [pc, #700]	@ (800389c <HAL_RCC_OscConfig+0x62c>)
 80035e0:	2180      	movs	r1, #128	@ 0x80
 80035e2:	0549      	lsls	r1, r1, #21
 80035e4:	430a      	orrs	r2, r1
 80035e6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80035e8:	4bac      	ldr	r3, [pc, #688]	@ (800389c <HAL_RCC_OscConfig+0x62c>)
 80035ea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80035ec:	2380      	movs	r3, #128	@ 0x80
 80035ee:	055b      	lsls	r3, r3, #21
 80035f0:	4013      	ands	r3, r2
 80035f2:	60fb      	str	r3, [r7, #12]
 80035f4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80035f6:	231f      	movs	r3, #31
 80035f8:	18fb      	adds	r3, r7, r3
 80035fa:	2201      	movs	r2, #1
 80035fc:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035fe:	4ba8      	ldr	r3, [pc, #672]	@ (80038a0 <HAL_RCC_OscConfig+0x630>)
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	2380      	movs	r3, #128	@ 0x80
 8003604:	005b      	lsls	r3, r3, #1
 8003606:	4013      	ands	r3, r2
 8003608:	d11a      	bne.n	8003640 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800360a:	4ba5      	ldr	r3, [pc, #660]	@ (80038a0 <HAL_RCC_OscConfig+0x630>)
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	4ba4      	ldr	r3, [pc, #656]	@ (80038a0 <HAL_RCC_OscConfig+0x630>)
 8003610:	2180      	movs	r1, #128	@ 0x80
 8003612:	0049      	lsls	r1, r1, #1
 8003614:	430a      	orrs	r2, r1
 8003616:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003618:	f7fe fac0 	bl	8001b9c <HAL_GetTick>
 800361c:	0003      	movs	r3, r0
 800361e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003620:	e008      	b.n	8003634 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003622:	f7fe fabb 	bl	8001b9c <HAL_GetTick>
 8003626:	0002      	movs	r2, r0
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	2b02      	cmp	r3, #2
 800362e:	d901      	bls.n	8003634 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8003630:	2303      	movs	r3, #3
 8003632:	e177      	b.n	8003924 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003634:	4b9a      	ldr	r3, [pc, #616]	@ (80038a0 <HAL_RCC_OscConfig+0x630>)
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	2380      	movs	r3, #128	@ 0x80
 800363a:	005b      	lsls	r3, r3, #1
 800363c:	4013      	ands	r3, r2
 800363e:	d0f0      	beq.n	8003622 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	2b01      	cmp	r3, #1
 8003646:	d106      	bne.n	8003656 <HAL_RCC_OscConfig+0x3e6>
 8003648:	4b94      	ldr	r3, [pc, #592]	@ (800389c <HAL_RCC_OscConfig+0x62c>)
 800364a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800364c:	4b93      	ldr	r3, [pc, #588]	@ (800389c <HAL_RCC_OscConfig+0x62c>)
 800364e:	2101      	movs	r1, #1
 8003650:	430a      	orrs	r2, r1
 8003652:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003654:	e01c      	b.n	8003690 <HAL_RCC_OscConfig+0x420>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	2b05      	cmp	r3, #5
 800365c:	d10c      	bne.n	8003678 <HAL_RCC_OscConfig+0x408>
 800365e:	4b8f      	ldr	r3, [pc, #572]	@ (800389c <HAL_RCC_OscConfig+0x62c>)
 8003660:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003662:	4b8e      	ldr	r3, [pc, #568]	@ (800389c <HAL_RCC_OscConfig+0x62c>)
 8003664:	2104      	movs	r1, #4
 8003666:	430a      	orrs	r2, r1
 8003668:	65da      	str	r2, [r3, #92]	@ 0x5c
 800366a:	4b8c      	ldr	r3, [pc, #560]	@ (800389c <HAL_RCC_OscConfig+0x62c>)
 800366c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800366e:	4b8b      	ldr	r3, [pc, #556]	@ (800389c <HAL_RCC_OscConfig+0x62c>)
 8003670:	2101      	movs	r1, #1
 8003672:	430a      	orrs	r2, r1
 8003674:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003676:	e00b      	b.n	8003690 <HAL_RCC_OscConfig+0x420>
 8003678:	4b88      	ldr	r3, [pc, #544]	@ (800389c <HAL_RCC_OscConfig+0x62c>)
 800367a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800367c:	4b87      	ldr	r3, [pc, #540]	@ (800389c <HAL_RCC_OscConfig+0x62c>)
 800367e:	2101      	movs	r1, #1
 8003680:	438a      	bics	r2, r1
 8003682:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003684:	4b85      	ldr	r3, [pc, #532]	@ (800389c <HAL_RCC_OscConfig+0x62c>)
 8003686:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003688:	4b84      	ldr	r3, [pc, #528]	@ (800389c <HAL_RCC_OscConfig+0x62c>)
 800368a:	2104      	movs	r1, #4
 800368c:	438a      	bics	r2, r1
 800368e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d014      	beq.n	80036c2 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003698:	f7fe fa80 	bl	8001b9c <HAL_GetTick>
 800369c:	0003      	movs	r3, r0
 800369e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036a0:	e009      	b.n	80036b6 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036a2:	f7fe fa7b 	bl	8001b9c <HAL_GetTick>
 80036a6:	0002      	movs	r2, r0
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	1ad3      	subs	r3, r2, r3
 80036ac:	4a7d      	ldr	r2, [pc, #500]	@ (80038a4 <HAL_RCC_OscConfig+0x634>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d901      	bls.n	80036b6 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e136      	b.n	8003924 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036b6:	4b79      	ldr	r3, [pc, #484]	@ (800389c <HAL_RCC_OscConfig+0x62c>)
 80036b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036ba:	2202      	movs	r2, #2
 80036bc:	4013      	ands	r3, r2
 80036be:	d0f0      	beq.n	80036a2 <HAL_RCC_OscConfig+0x432>
 80036c0:	e013      	b.n	80036ea <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036c2:	f7fe fa6b 	bl	8001b9c <HAL_GetTick>
 80036c6:	0003      	movs	r3, r0
 80036c8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80036ca:	e009      	b.n	80036e0 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036cc:	f7fe fa66 	bl	8001b9c <HAL_GetTick>
 80036d0:	0002      	movs	r2, r0
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	4a73      	ldr	r2, [pc, #460]	@ (80038a4 <HAL_RCC_OscConfig+0x634>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d901      	bls.n	80036e0 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 80036dc:	2303      	movs	r3, #3
 80036de:	e121      	b.n	8003924 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80036e0:	4b6e      	ldr	r3, [pc, #440]	@ (800389c <HAL_RCC_OscConfig+0x62c>)
 80036e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036e4:	2202      	movs	r2, #2
 80036e6:	4013      	ands	r3, r2
 80036e8:	d1f0      	bne.n	80036cc <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80036ea:	231f      	movs	r3, #31
 80036ec:	18fb      	adds	r3, r7, r3
 80036ee:	781b      	ldrb	r3, [r3, #0]
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d105      	bne.n	8003700 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80036f4:	4b69      	ldr	r3, [pc, #420]	@ (800389c <HAL_RCC_OscConfig+0x62c>)
 80036f6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80036f8:	4b68      	ldr	r3, [pc, #416]	@ (800389c <HAL_RCC_OscConfig+0x62c>)
 80036fa:	496b      	ldr	r1, [pc, #428]	@ (80038a8 <HAL_RCC_OscConfig+0x638>)
 80036fc:	400a      	ands	r2, r1
 80036fe:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	2220      	movs	r2, #32
 8003706:	4013      	ands	r3, r2
 8003708:	d039      	beq.n	800377e <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	69db      	ldr	r3, [r3, #28]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d01b      	beq.n	800374a <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003712:	4b62      	ldr	r3, [pc, #392]	@ (800389c <HAL_RCC_OscConfig+0x62c>)
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	4b61      	ldr	r3, [pc, #388]	@ (800389c <HAL_RCC_OscConfig+0x62c>)
 8003718:	2180      	movs	r1, #128	@ 0x80
 800371a:	03c9      	lsls	r1, r1, #15
 800371c:	430a      	orrs	r2, r1
 800371e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003720:	f7fe fa3c 	bl	8001b9c <HAL_GetTick>
 8003724:	0003      	movs	r3, r0
 8003726:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003728:	e008      	b.n	800373c <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800372a:	f7fe fa37 	bl	8001b9c <HAL_GetTick>
 800372e:	0002      	movs	r2, r0
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	2b02      	cmp	r3, #2
 8003736:	d901      	bls.n	800373c <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8003738:	2303      	movs	r3, #3
 800373a:	e0f3      	b.n	8003924 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800373c:	4b57      	ldr	r3, [pc, #348]	@ (800389c <HAL_RCC_OscConfig+0x62c>)
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	2380      	movs	r3, #128	@ 0x80
 8003742:	041b      	lsls	r3, r3, #16
 8003744:	4013      	ands	r3, r2
 8003746:	d0f0      	beq.n	800372a <HAL_RCC_OscConfig+0x4ba>
 8003748:	e019      	b.n	800377e <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800374a:	4b54      	ldr	r3, [pc, #336]	@ (800389c <HAL_RCC_OscConfig+0x62c>)
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	4b53      	ldr	r3, [pc, #332]	@ (800389c <HAL_RCC_OscConfig+0x62c>)
 8003750:	4956      	ldr	r1, [pc, #344]	@ (80038ac <HAL_RCC_OscConfig+0x63c>)
 8003752:	400a      	ands	r2, r1
 8003754:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003756:	f7fe fa21 	bl	8001b9c <HAL_GetTick>
 800375a:	0003      	movs	r3, r0
 800375c:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800375e:	e008      	b.n	8003772 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003760:	f7fe fa1c 	bl	8001b9c <HAL_GetTick>
 8003764:	0002      	movs	r2, r0
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	2b02      	cmp	r3, #2
 800376c:	d901      	bls.n	8003772 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 800376e:	2303      	movs	r3, #3
 8003770:	e0d8      	b.n	8003924 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003772:	4b4a      	ldr	r3, [pc, #296]	@ (800389c <HAL_RCC_OscConfig+0x62c>)
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	2380      	movs	r3, #128	@ 0x80
 8003778:	041b      	lsls	r3, r3, #16
 800377a:	4013      	ands	r3, r2
 800377c:	d1f0      	bne.n	8003760 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a1b      	ldr	r3, [r3, #32]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d100      	bne.n	8003788 <HAL_RCC_OscConfig+0x518>
 8003786:	e0cc      	b.n	8003922 <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003788:	4b44      	ldr	r3, [pc, #272]	@ (800389c <HAL_RCC_OscConfig+0x62c>)
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	2238      	movs	r2, #56	@ 0x38
 800378e:	4013      	ands	r3, r2
 8003790:	2b10      	cmp	r3, #16
 8003792:	d100      	bne.n	8003796 <HAL_RCC_OscConfig+0x526>
 8003794:	e07b      	b.n	800388e <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a1b      	ldr	r3, [r3, #32]
 800379a:	2b02      	cmp	r3, #2
 800379c:	d156      	bne.n	800384c <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800379e:	4b3f      	ldr	r3, [pc, #252]	@ (800389c <HAL_RCC_OscConfig+0x62c>)
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	4b3e      	ldr	r3, [pc, #248]	@ (800389c <HAL_RCC_OscConfig+0x62c>)
 80037a4:	4942      	ldr	r1, [pc, #264]	@ (80038b0 <HAL_RCC_OscConfig+0x640>)
 80037a6:	400a      	ands	r2, r1
 80037a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037aa:	f7fe f9f7 	bl	8001b9c <HAL_GetTick>
 80037ae:	0003      	movs	r3, r0
 80037b0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037b2:	e008      	b.n	80037c6 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037b4:	f7fe f9f2 	bl	8001b9c <HAL_GetTick>
 80037b8:	0002      	movs	r2, r0
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	2b02      	cmp	r3, #2
 80037c0:	d901      	bls.n	80037c6 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e0ae      	b.n	8003924 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037c6:	4b35      	ldr	r3, [pc, #212]	@ (800389c <HAL_RCC_OscConfig+0x62c>)
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	2380      	movs	r3, #128	@ 0x80
 80037cc:	049b      	lsls	r3, r3, #18
 80037ce:	4013      	ands	r3, r2
 80037d0:	d1f0      	bne.n	80037b4 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037d2:	4b32      	ldr	r3, [pc, #200]	@ (800389c <HAL_RCC_OscConfig+0x62c>)
 80037d4:	68db      	ldr	r3, [r3, #12]
 80037d6:	4a37      	ldr	r2, [pc, #220]	@ (80038b4 <HAL_RCC_OscConfig+0x644>)
 80037d8:	4013      	ands	r3, r2
 80037da:	0019      	movs	r1, r3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037e4:	431a      	orrs	r2, r3
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037ea:	021b      	lsls	r3, r3, #8
 80037ec:	431a      	orrs	r2, r3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037f2:	431a      	orrs	r2, r3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037f8:	431a      	orrs	r2, r3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037fe:	431a      	orrs	r2, r3
 8003800:	4b26      	ldr	r3, [pc, #152]	@ (800389c <HAL_RCC_OscConfig+0x62c>)
 8003802:	430a      	orrs	r2, r1
 8003804:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003806:	4b25      	ldr	r3, [pc, #148]	@ (800389c <HAL_RCC_OscConfig+0x62c>)
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	4b24      	ldr	r3, [pc, #144]	@ (800389c <HAL_RCC_OscConfig+0x62c>)
 800380c:	2180      	movs	r1, #128	@ 0x80
 800380e:	0449      	lsls	r1, r1, #17
 8003810:	430a      	orrs	r2, r1
 8003812:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003814:	4b21      	ldr	r3, [pc, #132]	@ (800389c <HAL_RCC_OscConfig+0x62c>)
 8003816:	68da      	ldr	r2, [r3, #12]
 8003818:	4b20      	ldr	r3, [pc, #128]	@ (800389c <HAL_RCC_OscConfig+0x62c>)
 800381a:	2180      	movs	r1, #128	@ 0x80
 800381c:	0549      	lsls	r1, r1, #21
 800381e:	430a      	orrs	r2, r1
 8003820:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003822:	f7fe f9bb 	bl	8001b9c <HAL_GetTick>
 8003826:	0003      	movs	r3, r0
 8003828:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800382a:	e008      	b.n	800383e <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800382c:	f7fe f9b6 	bl	8001b9c <HAL_GetTick>
 8003830:	0002      	movs	r2, r0
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	2b02      	cmp	r3, #2
 8003838:	d901      	bls.n	800383e <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 800383a:	2303      	movs	r3, #3
 800383c:	e072      	b.n	8003924 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800383e:	4b17      	ldr	r3, [pc, #92]	@ (800389c <HAL_RCC_OscConfig+0x62c>)
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	2380      	movs	r3, #128	@ 0x80
 8003844:	049b      	lsls	r3, r3, #18
 8003846:	4013      	ands	r3, r2
 8003848:	d0f0      	beq.n	800382c <HAL_RCC_OscConfig+0x5bc>
 800384a:	e06a      	b.n	8003922 <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800384c:	4b13      	ldr	r3, [pc, #76]	@ (800389c <HAL_RCC_OscConfig+0x62c>)
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	4b12      	ldr	r3, [pc, #72]	@ (800389c <HAL_RCC_OscConfig+0x62c>)
 8003852:	4917      	ldr	r1, [pc, #92]	@ (80038b0 <HAL_RCC_OscConfig+0x640>)
 8003854:	400a      	ands	r2, r1
 8003856:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003858:	f7fe f9a0 	bl	8001b9c <HAL_GetTick>
 800385c:	0003      	movs	r3, r0
 800385e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003860:	e008      	b.n	8003874 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003862:	f7fe f99b 	bl	8001b9c <HAL_GetTick>
 8003866:	0002      	movs	r2, r0
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	1ad3      	subs	r3, r2, r3
 800386c:	2b02      	cmp	r3, #2
 800386e:	d901      	bls.n	8003874 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8003870:	2303      	movs	r3, #3
 8003872:	e057      	b.n	8003924 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003874:	4b09      	ldr	r3, [pc, #36]	@ (800389c <HAL_RCC_OscConfig+0x62c>)
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	2380      	movs	r3, #128	@ 0x80
 800387a:	049b      	lsls	r3, r3, #18
 800387c:	4013      	ands	r3, r2
 800387e:	d1f0      	bne.n	8003862 <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8003880:	4b06      	ldr	r3, [pc, #24]	@ (800389c <HAL_RCC_OscConfig+0x62c>)
 8003882:	68da      	ldr	r2, [r3, #12]
 8003884:	4b05      	ldr	r3, [pc, #20]	@ (800389c <HAL_RCC_OscConfig+0x62c>)
 8003886:	490c      	ldr	r1, [pc, #48]	@ (80038b8 <HAL_RCC_OscConfig+0x648>)
 8003888:	400a      	ands	r2, r1
 800388a:	60da      	str	r2, [r3, #12]
 800388c:	e049      	b.n	8003922 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6a1b      	ldr	r3, [r3, #32]
 8003892:	2b01      	cmp	r3, #1
 8003894:	d112      	bne.n	80038bc <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e044      	b.n	8003924 <HAL_RCC_OscConfig+0x6b4>
 800389a:	46c0      	nop			@ (mov r8, r8)
 800389c:	40021000 	.word	0x40021000
 80038a0:	40007000 	.word	0x40007000
 80038a4:	00001388 	.word	0x00001388
 80038a8:	efffffff 	.word	0xefffffff
 80038ac:	ffbfffff 	.word	0xffbfffff
 80038b0:	feffffff 	.word	0xfeffffff
 80038b4:	11c1808c 	.word	0x11c1808c
 80038b8:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80038bc:	4b1b      	ldr	r3, [pc, #108]	@ (800392c <HAL_RCC_OscConfig+0x6bc>)
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	2203      	movs	r2, #3
 80038c6:	401a      	ands	r2, r3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d126      	bne.n	800391e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	2270      	movs	r2, #112	@ 0x70
 80038d4:	401a      	ands	r2, r3
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038da:	429a      	cmp	r2, r3
 80038dc:	d11f      	bne.n	800391e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80038de:	697a      	ldr	r2, [r7, #20]
 80038e0:	23fe      	movs	r3, #254	@ 0xfe
 80038e2:	01db      	lsls	r3, r3, #7
 80038e4:	401a      	ands	r2, r3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038ea:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d116      	bne.n	800391e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80038f0:	697a      	ldr	r2, [r7, #20]
 80038f2:	23f8      	movs	r3, #248	@ 0xf8
 80038f4:	039b      	lsls	r3, r3, #14
 80038f6:	401a      	ands	r2, r3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d10e      	bne.n	800391e <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003900:	697a      	ldr	r2, [r7, #20]
 8003902:	23e0      	movs	r3, #224	@ 0xe0
 8003904:	051b      	lsls	r3, r3, #20
 8003906:	401a      	ands	r2, r3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800390c:	429a      	cmp	r2, r3
 800390e:	d106      	bne.n	800391e <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	0f5b      	lsrs	r3, r3, #29
 8003914:	075a      	lsls	r2, r3, #29
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800391a:	429a      	cmp	r2, r3
 800391c:	d001      	beq.n	8003922 <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e000      	b.n	8003924 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8003922:	2300      	movs	r3, #0
}
 8003924:	0018      	movs	r0, r3
 8003926:	46bd      	mov	sp, r7
 8003928:	b008      	add	sp, #32
 800392a:	bd80      	pop	{r7, pc}
 800392c:	40021000 	.word	0x40021000

08003930 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b084      	sub	sp, #16
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d101      	bne.n	8003944 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	e0e9      	b.n	8003b18 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003944:	4b76      	ldr	r3, [pc, #472]	@ (8003b20 <HAL_RCC_ClockConfig+0x1f0>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	2207      	movs	r2, #7
 800394a:	4013      	ands	r3, r2
 800394c:	683a      	ldr	r2, [r7, #0]
 800394e:	429a      	cmp	r2, r3
 8003950:	d91e      	bls.n	8003990 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003952:	4b73      	ldr	r3, [pc, #460]	@ (8003b20 <HAL_RCC_ClockConfig+0x1f0>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	2207      	movs	r2, #7
 8003958:	4393      	bics	r3, r2
 800395a:	0019      	movs	r1, r3
 800395c:	4b70      	ldr	r3, [pc, #448]	@ (8003b20 <HAL_RCC_ClockConfig+0x1f0>)
 800395e:	683a      	ldr	r2, [r7, #0]
 8003960:	430a      	orrs	r2, r1
 8003962:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003964:	f7fe f91a 	bl	8001b9c <HAL_GetTick>
 8003968:	0003      	movs	r3, r0
 800396a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800396c:	e009      	b.n	8003982 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800396e:	f7fe f915 	bl	8001b9c <HAL_GetTick>
 8003972:	0002      	movs	r2, r0
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	1ad3      	subs	r3, r2, r3
 8003978:	4a6a      	ldr	r2, [pc, #424]	@ (8003b24 <HAL_RCC_ClockConfig+0x1f4>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d901      	bls.n	8003982 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	e0ca      	b.n	8003b18 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003982:	4b67      	ldr	r3, [pc, #412]	@ (8003b20 <HAL_RCC_ClockConfig+0x1f0>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	2207      	movs	r2, #7
 8003988:	4013      	ands	r3, r2
 800398a:	683a      	ldr	r2, [r7, #0]
 800398c:	429a      	cmp	r2, r3
 800398e:	d1ee      	bne.n	800396e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	2202      	movs	r2, #2
 8003996:	4013      	ands	r3, r2
 8003998:	d015      	beq.n	80039c6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	2204      	movs	r2, #4
 80039a0:	4013      	ands	r3, r2
 80039a2:	d006      	beq.n	80039b2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80039a4:	4b60      	ldr	r3, [pc, #384]	@ (8003b28 <HAL_RCC_ClockConfig+0x1f8>)
 80039a6:	689a      	ldr	r2, [r3, #8]
 80039a8:	4b5f      	ldr	r3, [pc, #380]	@ (8003b28 <HAL_RCC_ClockConfig+0x1f8>)
 80039aa:	21e0      	movs	r1, #224	@ 0xe0
 80039ac:	01c9      	lsls	r1, r1, #7
 80039ae:	430a      	orrs	r2, r1
 80039b0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039b2:	4b5d      	ldr	r3, [pc, #372]	@ (8003b28 <HAL_RCC_ClockConfig+0x1f8>)
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	4a5d      	ldr	r2, [pc, #372]	@ (8003b2c <HAL_RCC_ClockConfig+0x1fc>)
 80039b8:	4013      	ands	r3, r2
 80039ba:	0019      	movs	r1, r3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	689a      	ldr	r2, [r3, #8]
 80039c0:	4b59      	ldr	r3, [pc, #356]	@ (8003b28 <HAL_RCC_ClockConfig+0x1f8>)
 80039c2:	430a      	orrs	r2, r1
 80039c4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	2201      	movs	r2, #1
 80039cc:	4013      	ands	r3, r2
 80039ce:	d057      	beq.n	8003a80 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d107      	bne.n	80039e8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039d8:	4b53      	ldr	r3, [pc, #332]	@ (8003b28 <HAL_RCC_ClockConfig+0x1f8>)
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	2380      	movs	r3, #128	@ 0x80
 80039de:	029b      	lsls	r3, r3, #10
 80039e0:	4013      	ands	r3, r2
 80039e2:	d12b      	bne.n	8003a3c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	e097      	b.n	8003b18 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	2b02      	cmp	r3, #2
 80039ee:	d107      	bne.n	8003a00 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039f0:	4b4d      	ldr	r3, [pc, #308]	@ (8003b28 <HAL_RCC_ClockConfig+0x1f8>)
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	2380      	movs	r3, #128	@ 0x80
 80039f6:	049b      	lsls	r3, r3, #18
 80039f8:	4013      	ands	r3, r2
 80039fa:	d11f      	bne.n	8003a3c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	e08b      	b.n	8003b18 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d107      	bne.n	8003a18 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a08:	4b47      	ldr	r3, [pc, #284]	@ (8003b28 <HAL_RCC_ClockConfig+0x1f8>)
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	2380      	movs	r3, #128	@ 0x80
 8003a0e:	00db      	lsls	r3, r3, #3
 8003a10:	4013      	ands	r3, r2
 8003a12:	d113      	bne.n	8003a3c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e07f      	b.n	8003b18 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	2b03      	cmp	r3, #3
 8003a1e:	d106      	bne.n	8003a2e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a20:	4b41      	ldr	r3, [pc, #260]	@ (8003b28 <HAL_RCC_ClockConfig+0x1f8>)
 8003a22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a24:	2202      	movs	r2, #2
 8003a26:	4013      	ands	r3, r2
 8003a28:	d108      	bne.n	8003a3c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e074      	b.n	8003b18 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a2e:	4b3e      	ldr	r3, [pc, #248]	@ (8003b28 <HAL_RCC_ClockConfig+0x1f8>)
 8003a30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a32:	2202      	movs	r2, #2
 8003a34:	4013      	ands	r3, r2
 8003a36:	d101      	bne.n	8003a3c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e06d      	b.n	8003b18 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003a3c:	4b3a      	ldr	r3, [pc, #232]	@ (8003b28 <HAL_RCC_ClockConfig+0x1f8>)
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	2207      	movs	r2, #7
 8003a42:	4393      	bics	r3, r2
 8003a44:	0019      	movs	r1, r3
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	685a      	ldr	r2, [r3, #4]
 8003a4a:	4b37      	ldr	r3, [pc, #220]	@ (8003b28 <HAL_RCC_ClockConfig+0x1f8>)
 8003a4c:	430a      	orrs	r2, r1
 8003a4e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a50:	f7fe f8a4 	bl	8001b9c <HAL_GetTick>
 8003a54:	0003      	movs	r3, r0
 8003a56:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a58:	e009      	b.n	8003a6e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a5a:	f7fe f89f 	bl	8001b9c <HAL_GetTick>
 8003a5e:	0002      	movs	r2, r0
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	1ad3      	subs	r3, r2, r3
 8003a64:	4a2f      	ldr	r2, [pc, #188]	@ (8003b24 <HAL_RCC_ClockConfig+0x1f4>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d901      	bls.n	8003a6e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	e054      	b.n	8003b18 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a6e:	4b2e      	ldr	r3, [pc, #184]	@ (8003b28 <HAL_RCC_ClockConfig+0x1f8>)
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	2238      	movs	r2, #56	@ 0x38
 8003a74:	401a      	ands	r2, r3
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	00db      	lsls	r3, r3, #3
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d1ec      	bne.n	8003a5a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a80:	4b27      	ldr	r3, [pc, #156]	@ (8003b20 <HAL_RCC_ClockConfig+0x1f0>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	2207      	movs	r2, #7
 8003a86:	4013      	ands	r3, r2
 8003a88:	683a      	ldr	r2, [r7, #0]
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d21e      	bcs.n	8003acc <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a8e:	4b24      	ldr	r3, [pc, #144]	@ (8003b20 <HAL_RCC_ClockConfig+0x1f0>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	2207      	movs	r2, #7
 8003a94:	4393      	bics	r3, r2
 8003a96:	0019      	movs	r1, r3
 8003a98:	4b21      	ldr	r3, [pc, #132]	@ (8003b20 <HAL_RCC_ClockConfig+0x1f0>)
 8003a9a:	683a      	ldr	r2, [r7, #0]
 8003a9c:	430a      	orrs	r2, r1
 8003a9e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003aa0:	f7fe f87c 	bl	8001b9c <HAL_GetTick>
 8003aa4:	0003      	movs	r3, r0
 8003aa6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003aa8:	e009      	b.n	8003abe <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003aaa:	f7fe f877 	bl	8001b9c <HAL_GetTick>
 8003aae:	0002      	movs	r2, r0
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	1ad3      	subs	r3, r2, r3
 8003ab4:	4a1b      	ldr	r2, [pc, #108]	@ (8003b24 <HAL_RCC_ClockConfig+0x1f4>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d901      	bls.n	8003abe <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	e02c      	b.n	8003b18 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003abe:	4b18      	ldr	r3, [pc, #96]	@ (8003b20 <HAL_RCC_ClockConfig+0x1f0>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	2207      	movs	r2, #7
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	683a      	ldr	r2, [r7, #0]
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d1ee      	bne.n	8003aaa <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	2204      	movs	r2, #4
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	d009      	beq.n	8003aea <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003ad6:	4b14      	ldr	r3, [pc, #80]	@ (8003b28 <HAL_RCC_ClockConfig+0x1f8>)
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	4a15      	ldr	r2, [pc, #84]	@ (8003b30 <HAL_RCC_ClockConfig+0x200>)
 8003adc:	4013      	ands	r3, r2
 8003ade:	0019      	movs	r1, r3
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	68da      	ldr	r2, [r3, #12]
 8003ae4:	4b10      	ldr	r3, [pc, #64]	@ (8003b28 <HAL_RCC_ClockConfig+0x1f8>)
 8003ae6:	430a      	orrs	r2, r1
 8003ae8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003aea:	f000 f829 	bl	8003b40 <HAL_RCC_GetSysClockFreq>
 8003aee:	0001      	movs	r1, r0
 8003af0:	4b0d      	ldr	r3, [pc, #52]	@ (8003b28 <HAL_RCC_ClockConfig+0x1f8>)
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	0a1b      	lsrs	r3, r3, #8
 8003af6:	220f      	movs	r2, #15
 8003af8:	401a      	ands	r2, r3
 8003afa:	4b0e      	ldr	r3, [pc, #56]	@ (8003b34 <HAL_RCC_ClockConfig+0x204>)
 8003afc:	0092      	lsls	r2, r2, #2
 8003afe:	58d3      	ldr	r3, [r2, r3]
 8003b00:	221f      	movs	r2, #31
 8003b02:	4013      	ands	r3, r2
 8003b04:	000a      	movs	r2, r1
 8003b06:	40da      	lsrs	r2, r3
 8003b08:	4b0b      	ldr	r3, [pc, #44]	@ (8003b38 <HAL_RCC_ClockConfig+0x208>)
 8003b0a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003b0c:	4b0b      	ldr	r3, [pc, #44]	@ (8003b3c <HAL_RCC_ClockConfig+0x20c>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	0018      	movs	r0, r3
 8003b12:	f7fd ffe7 	bl	8001ae4 <HAL_InitTick>
 8003b16:	0003      	movs	r3, r0
}
 8003b18:	0018      	movs	r0, r3
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	b004      	add	sp, #16
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	40022000 	.word	0x40022000
 8003b24:	00001388 	.word	0x00001388
 8003b28:	40021000 	.word	0x40021000
 8003b2c:	fffff0ff 	.word	0xfffff0ff
 8003b30:	ffff8fff 	.word	0xffff8fff
 8003b34:	08007220 	.word	0x08007220
 8003b38:	2000000c 	.word	0x2000000c
 8003b3c:	20000010 	.word	0x20000010

08003b40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b086      	sub	sp, #24
 8003b44:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b46:	4b3c      	ldr	r3, [pc, #240]	@ (8003c38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	2238      	movs	r2, #56	@ 0x38
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	d10f      	bne.n	8003b70 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003b50:	4b39      	ldr	r3, [pc, #228]	@ (8003c38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	0adb      	lsrs	r3, r3, #11
 8003b56:	2207      	movs	r2, #7
 8003b58:	4013      	ands	r3, r2
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	409a      	lsls	r2, r3
 8003b5e:	0013      	movs	r3, r2
 8003b60:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003b62:	6839      	ldr	r1, [r7, #0]
 8003b64:	4835      	ldr	r0, [pc, #212]	@ (8003c3c <HAL_RCC_GetSysClockFreq+0xfc>)
 8003b66:	f7fc fad7 	bl	8000118 <__udivsi3>
 8003b6a:	0003      	movs	r3, r0
 8003b6c:	613b      	str	r3, [r7, #16]
 8003b6e:	e05d      	b.n	8003c2c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b70:	4b31      	ldr	r3, [pc, #196]	@ (8003c38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	2238      	movs	r2, #56	@ 0x38
 8003b76:	4013      	ands	r3, r2
 8003b78:	2b08      	cmp	r3, #8
 8003b7a:	d102      	bne.n	8003b82 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003b7c:	4b30      	ldr	r3, [pc, #192]	@ (8003c40 <HAL_RCC_GetSysClockFreq+0x100>)
 8003b7e:	613b      	str	r3, [r7, #16]
 8003b80:	e054      	b.n	8003c2c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b82:	4b2d      	ldr	r3, [pc, #180]	@ (8003c38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	2238      	movs	r2, #56	@ 0x38
 8003b88:	4013      	ands	r3, r2
 8003b8a:	2b10      	cmp	r3, #16
 8003b8c:	d138      	bne.n	8003c00 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003b8e:	4b2a      	ldr	r3, [pc, #168]	@ (8003c38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003b90:	68db      	ldr	r3, [r3, #12]
 8003b92:	2203      	movs	r2, #3
 8003b94:	4013      	ands	r3, r2
 8003b96:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003b98:	4b27      	ldr	r3, [pc, #156]	@ (8003c38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	091b      	lsrs	r3, r3, #4
 8003b9e:	2207      	movs	r2, #7
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	3301      	adds	r3, #1
 8003ba4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2b03      	cmp	r3, #3
 8003baa:	d10d      	bne.n	8003bc8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003bac:	68b9      	ldr	r1, [r7, #8]
 8003bae:	4824      	ldr	r0, [pc, #144]	@ (8003c40 <HAL_RCC_GetSysClockFreq+0x100>)
 8003bb0:	f7fc fab2 	bl	8000118 <__udivsi3>
 8003bb4:	0003      	movs	r3, r0
 8003bb6:	0019      	movs	r1, r3
 8003bb8:	4b1f      	ldr	r3, [pc, #124]	@ (8003c38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	0a1b      	lsrs	r3, r3, #8
 8003bbe:	227f      	movs	r2, #127	@ 0x7f
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	434b      	muls	r3, r1
 8003bc4:	617b      	str	r3, [r7, #20]
        break;
 8003bc6:	e00d      	b.n	8003be4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003bc8:	68b9      	ldr	r1, [r7, #8]
 8003bca:	481c      	ldr	r0, [pc, #112]	@ (8003c3c <HAL_RCC_GetSysClockFreq+0xfc>)
 8003bcc:	f7fc faa4 	bl	8000118 <__udivsi3>
 8003bd0:	0003      	movs	r3, r0
 8003bd2:	0019      	movs	r1, r3
 8003bd4:	4b18      	ldr	r3, [pc, #96]	@ (8003c38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	0a1b      	lsrs	r3, r3, #8
 8003bda:	227f      	movs	r2, #127	@ 0x7f
 8003bdc:	4013      	ands	r3, r2
 8003bde:	434b      	muls	r3, r1
 8003be0:	617b      	str	r3, [r7, #20]
        break;
 8003be2:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003be4:	4b14      	ldr	r3, [pc, #80]	@ (8003c38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	0f5b      	lsrs	r3, r3, #29
 8003bea:	2207      	movs	r2, #7
 8003bec:	4013      	ands	r3, r2
 8003bee:	3301      	adds	r3, #1
 8003bf0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8003bf2:	6879      	ldr	r1, [r7, #4]
 8003bf4:	6978      	ldr	r0, [r7, #20]
 8003bf6:	f7fc fa8f 	bl	8000118 <__udivsi3>
 8003bfa:	0003      	movs	r3, r0
 8003bfc:	613b      	str	r3, [r7, #16]
 8003bfe:	e015      	b.n	8003c2c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003c00:	4b0d      	ldr	r3, [pc, #52]	@ (8003c38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	2238      	movs	r2, #56	@ 0x38
 8003c06:	4013      	ands	r3, r2
 8003c08:	2b20      	cmp	r3, #32
 8003c0a:	d103      	bne.n	8003c14 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003c0c:	2380      	movs	r3, #128	@ 0x80
 8003c0e:	021b      	lsls	r3, r3, #8
 8003c10:	613b      	str	r3, [r7, #16]
 8003c12:	e00b      	b.n	8003c2c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003c14:	4b08      	ldr	r3, [pc, #32]	@ (8003c38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	2238      	movs	r2, #56	@ 0x38
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	2b18      	cmp	r3, #24
 8003c1e:	d103      	bne.n	8003c28 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003c20:	23fa      	movs	r3, #250	@ 0xfa
 8003c22:	01db      	lsls	r3, r3, #7
 8003c24:	613b      	str	r3, [r7, #16]
 8003c26:	e001      	b.n	8003c2c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003c2c:	693b      	ldr	r3, [r7, #16]
}
 8003c2e:	0018      	movs	r0, r3
 8003c30:	46bd      	mov	sp, r7
 8003c32:	b006      	add	sp, #24
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	46c0      	nop			@ (mov r8, r8)
 8003c38:	40021000 	.word	0x40021000
 8003c3c:	00f42400 	.word	0x00f42400
 8003c40:	007a1200 	.word	0x007a1200

08003c44 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c48:	4b02      	ldr	r3, [pc, #8]	@ (8003c54 <HAL_RCC_GetHCLKFreq+0x10>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
}
 8003c4c:	0018      	movs	r0, r3
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	46c0      	nop			@ (mov r8, r8)
 8003c54:	2000000c 	.word	0x2000000c

08003c58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c58:	b5b0      	push	{r4, r5, r7, lr}
 8003c5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003c5c:	f7ff fff2 	bl	8003c44 <HAL_RCC_GetHCLKFreq>
 8003c60:	0004      	movs	r4, r0
 8003c62:	f7ff faf9 	bl	8003258 <LL_RCC_GetAPB1Prescaler>
 8003c66:	0003      	movs	r3, r0
 8003c68:	0b1a      	lsrs	r2, r3, #12
 8003c6a:	4b05      	ldr	r3, [pc, #20]	@ (8003c80 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003c6c:	0092      	lsls	r2, r2, #2
 8003c6e:	58d3      	ldr	r3, [r2, r3]
 8003c70:	221f      	movs	r2, #31
 8003c72:	4013      	ands	r3, r2
 8003c74:	40dc      	lsrs	r4, r3
 8003c76:	0023      	movs	r3, r4
}
 8003c78:	0018      	movs	r0, r3
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bdb0      	pop	{r4, r5, r7, pc}
 8003c7e:	46c0      	nop			@ (mov r8, r8)
 8003c80:	08007260 	.word	0x08007260

08003c84 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b086      	sub	sp, #24
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003c8c:	2313      	movs	r3, #19
 8003c8e:	18fb      	adds	r3, r7, r3
 8003c90:	2200      	movs	r2, #0
 8003c92:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003c94:	2312      	movs	r3, #18
 8003c96:	18fb      	adds	r3, r7, r3
 8003c98:	2200      	movs	r2, #0
 8003c9a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	2380      	movs	r3, #128	@ 0x80
 8003ca2:	029b      	lsls	r3, r3, #10
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	d100      	bne.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003ca8:	e0ad      	b.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003caa:	2011      	movs	r0, #17
 8003cac:	183b      	adds	r3, r7, r0
 8003cae:	2200      	movs	r2, #0
 8003cb0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cb2:	4b47      	ldr	r3, [pc, #284]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003cb4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003cb6:	2380      	movs	r3, #128	@ 0x80
 8003cb8:	055b      	lsls	r3, r3, #21
 8003cba:	4013      	ands	r3, r2
 8003cbc:	d110      	bne.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cbe:	4b44      	ldr	r3, [pc, #272]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003cc0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003cc2:	4b43      	ldr	r3, [pc, #268]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003cc4:	2180      	movs	r1, #128	@ 0x80
 8003cc6:	0549      	lsls	r1, r1, #21
 8003cc8:	430a      	orrs	r2, r1
 8003cca:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003ccc:	4b40      	ldr	r3, [pc, #256]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003cce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003cd0:	2380      	movs	r3, #128	@ 0x80
 8003cd2:	055b      	lsls	r3, r3, #21
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	60bb      	str	r3, [r7, #8]
 8003cd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cda:	183b      	adds	r3, r7, r0
 8003cdc:	2201      	movs	r2, #1
 8003cde:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ce0:	4b3c      	ldr	r3, [pc, #240]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	4b3b      	ldr	r3, [pc, #236]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8003ce6:	2180      	movs	r1, #128	@ 0x80
 8003ce8:	0049      	lsls	r1, r1, #1
 8003cea:	430a      	orrs	r2, r1
 8003cec:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003cee:	f7fd ff55 	bl	8001b9c <HAL_GetTick>
 8003cf2:	0003      	movs	r3, r0
 8003cf4:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003cf6:	e00b      	b.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cf8:	f7fd ff50 	bl	8001b9c <HAL_GetTick>
 8003cfc:	0002      	movs	r2, r0
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	2b02      	cmp	r3, #2
 8003d04:	d904      	bls.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8003d06:	2313      	movs	r3, #19
 8003d08:	18fb      	adds	r3, r7, r3
 8003d0a:	2203      	movs	r2, #3
 8003d0c:	701a      	strb	r2, [r3, #0]
        break;
 8003d0e:	e005      	b.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d10:	4b30      	ldr	r3, [pc, #192]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	2380      	movs	r3, #128	@ 0x80
 8003d16:	005b      	lsls	r3, r3, #1
 8003d18:	4013      	ands	r3, r2
 8003d1a:	d0ed      	beq.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003d1c:	2313      	movs	r3, #19
 8003d1e:	18fb      	adds	r3, r7, r3
 8003d20:	781b      	ldrb	r3, [r3, #0]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d15e      	bne.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003d26:	4b2a      	ldr	r3, [pc, #168]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003d28:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003d2a:	23c0      	movs	r3, #192	@ 0xc0
 8003d2c:	009b      	lsls	r3, r3, #2
 8003d2e:	4013      	ands	r3, r2
 8003d30:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d019      	beq.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d3c:	697a      	ldr	r2, [r7, #20]
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d014      	beq.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003d42:	4b23      	ldr	r3, [pc, #140]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003d44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d46:	4a24      	ldr	r2, [pc, #144]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8003d48:	4013      	ands	r3, r2
 8003d4a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d4c:	4b20      	ldr	r3, [pc, #128]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003d4e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003d50:	4b1f      	ldr	r3, [pc, #124]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003d52:	2180      	movs	r1, #128	@ 0x80
 8003d54:	0249      	lsls	r1, r1, #9
 8003d56:	430a      	orrs	r2, r1
 8003d58:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d5a:	4b1d      	ldr	r3, [pc, #116]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003d5c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003d5e:	4b1c      	ldr	r3, [pc, #112]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003d60:	491e      	ldr	r1, [pc, #120]	@ (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8003d62:	400a      	ands	r2, r1
 8003d64:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003d66:	4b1a      	ldr	r3, [pc, #104]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003d68:	697a      	ldr	r2, [r7, #20]
 8003d6a:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	4013      	ands	r3, r2
 8003d72:	d016      	beq.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d74:	f7fd ff12 	bl	8001b9c <HAL_GetTick>
 8003d78:	0003      	movs	r3, r0
 8003d7a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d7c:	e00c      	b.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d7e:	f7fd ff0d 	bl	8001b9c <HAL_GetTick>
 8003d82:	0002      	movs	r2, r0
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	1ad3      	subs	r3, r2, r3
 8003d88:	4a15      	ldr	r2, [pc, #84]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d904      	bls.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8003d8e:	2313      	movs	r3, #19
 8003d90:	18fb      	adds	r3, r7, r3
 8003d92:	2203      	movs	r2, #3
 8003d94:	701a      	strb	r2, [r3, #0]
            break;
 8003d96:	e004      	b.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d98:	4b0d      	ldr	r3, [pc, #52]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003d9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d9c:	2202      	movs	r2, #2
 8003d9e:	4013      	ands	r3, r2
 8003da0:	d0ed      	beq.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8003da2:	2313      	movs	r3, #19
 8003da4:	18fb      	adds	r3, r7, r3
 8003da6:	781b      	ldrb	r3, [r3, #0]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d10a      	bne.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003dac:	4b08      	ldr	r3, [pc, #32]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003dae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003db0:	4a09      	ldr	r2, [pc, #36]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8003db2:	4013      	ands	r3, r2
 8003db4:	0019      	movs	r1, r3
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003dba:	4b05      	ldr	r3, [pc, #20]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003dbc:	430a      	orrs	r2, r1
 8003dbe:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003dc0:	e016      	b.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003dc2:	2312      	movs	r3, #18
 8003dc4:	18fb      	adds	r3, r7, r3
 8003dc6:	2213      	movs	r2, #19
 8003dc8:	18ba      	adds	r2, r7, r2
 8003dca:	7812      	ldrb	r2, [r2, #0]
 8003dcc:	701a      	strb	r2, [r3, #0]
 8003dce:	e00f      	b.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003dd0:	40021000 	.word	0x40021000
 8003dd4:	40007000 	.word	0x40007000
 8003dd8:	fffffcff 	.word	0xfffffcff
 8003ddc:	fffeffff 	.word	0xfffeffff
 8003de0:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003de4:	2312      	movs	r3, #18
 8003de6:	18fb      	adds	r3, r7, r3
 8003de8:	2213      	movs	r2, #19
 8003dea:	18ba      	adds	r2, r7, r2
 8003dec:	7812      	ldrb	r2, [r2, #0]
 8003dee:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003df0:	2311      	movs	r3, #17
 8003df2:	18fb      	adds	r3, r7, r3
 8003df4:	781b      	ldrb	r3, [r3, #0]
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d105      	bne.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dfa:	4bb6      	ldr	r3, [pc, #728]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003dfc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003dfe:	4bb5      	ldr	r3, [pc, #724]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003e00:	49b5      	ldr	r1, [pc, #724]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8003e02:	400a      	ands	r2, r1
 8003e04:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	d009      	beq.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e10:	4bb0      	ldr	r3, [pc, #704]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003e12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e14:	2203      	movs	r2, #3
 8003e16:	4393      	bics	r3, r2
 8003e18:	0019      	movs	r1, r3
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	685a      	ldr	r2, [r3, #4]
 8003e1e:	4bad      	ldr	r3, [pc, #692]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003e20:	430a      	orrs	r2, r1
 8003e22:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	2202      	movs	r2, #2
 8003e2a:	4013      	ands	r3, r2
 8003e2c:	d009      	beq.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e2e:	4ba9      	ldr	r3, [pc, #676]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003e30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e32:	220c      	movs	r2, #12
 8003e34:	4393      	bics	r3, r2
 8003e36:	0019      	movs	r1, r3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	689a      	ldr	r2, [r3, #8]
 8003e3c:	4ba5      	ldr	r3, [pc, #660]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003e3e:	430a      	orrs	r2, r1
 8003e40:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	2204      	movs	r2, #4
 8003e48:	4013      	ands	r3, r2
 8003e4a:	d009      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003e4c:	4ba1      	ldr	r3, [pc, #644]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003e4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e50:	2230      	movs	r2, #48	@ 0x30
 8003e52:	4393      	bics	r3, r2
 8003e54:	0019      	movs	r1, r3
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	68da      	ldr	r2, [r3, #12]
 8003e5a:	4b9e      	ldr	r3, [pc, #632]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003e5c:	430a      	orrs	r2, r1
 8003e5e:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	2210      	movs	r2, #16
 8003e66:	4013      	ands	r3, r2
 8003e68:	d009      	beq.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e6a:	4b9a      	ldr	r3, [pc, #616]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003e6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e6e:	4a9b      	ldr	r2, [pc, #620]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003e70:	4013      	ands	r3, r2
 8003e72:	0019      	movs	r1, r3
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	691a      	ldr	r2, [r3, #16]
 8003e78:	4b96      	ldr	r3, [pc, #600]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003e7a:	430a      	orrs	r2, r1
 8003e7c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	2380      	movs	r3, #128	@ 0x80
 8003e84:	015b      	lsls	r3, r3, #5
 8003e86:	4013      	ands	r3, r2
 8003e88:	d009      	beq.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8003e8a:	4b92      	ldr	r3, [pc, #584]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003e8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e8e:	4a94      	ldr	r2, [pc, #592]	@ (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003e90:	4013      	ands	r3, r2
 8003e92:	0019      	movs	r1, r3
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	695a      	ldr	r2, [r3, #20]
 8003e98:	4b8e      	ldr	r3, [pc, #568]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003e9a:	430a      	orrs	r2, r1
 8003e9c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	2380      	movs	r3, #128	@ 0x80
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	4013      	ands	r3, r2
 8003ea8:	d009      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003eaa:	4b8a      	ldr	r3, [pc, #552]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003eac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003eae:	4a8d      	ldr	r2, [pc, #564]	@ (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	0019      	movs	r1, r3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003eb8:	4b86      	ldr	r3, [pc, #536]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003eba:	430a      	orrs	r2, r1
 8003ebc:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	2380      	movs	r3, #128	@ 0x80
 8003ec4:	00db      	lsls	r3, r3, #3
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	d009      	beq.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003eca:	4b82      	ldr	r3, [pc, #520]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003ecc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ece:	4a86      	ldr	r2, [pc, #536]	@ (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	0019      	movs	r1, r3
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ed8:	4b7e      	ldr	r3, [pc, #504]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003eda:	430a      	orrs	r2, r1
 8003edc:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	2220      	movs	r2, #32
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	d009      	beq.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ee8:	4b7a      	ldr	r3, [pc, #488]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003eea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003eec:	4a7f      	ldr	r2, [pc, #508]	@ (80040ec <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003eee:	4013      	ands	r3, r2
 8003ef0:	0019      	movs	r1, r3
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	699a      	ldr	r2, [r3, #24]
 8003ef6:	4b77      	ldr	r3, [pc, #476]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003ef8:	430a      	orrs	r2, r1
 8003efa:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	2240      	movs	r2, #64	@ 0x40
 8003f02:	4013      	ands	r3, r2
 8003f04:	d009      	beq.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f06:	4b73      	ldr	r3, [pc, #460]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003f08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f0a:	4a79      	ldr	r2, [pc, #484]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	0019      	movs	r1, r3
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	69da      	ldr	r2, [r3, #28]
 8003f14:	4b6f      	ldr	r3, [pc, #444]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003f16:	430a      	orrs	r2, r1
 8003f18:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	2380      	movs	r3, #128	@ 0x80
 8003f20:	01db      	lsls	r3, r3, #7
 8003f22:	4013      	ands	r3, r2
 8003f24:	d015      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003f26:	4b6b      	ldr	r3, [pc, #428]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003f28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	0899      	lsrs	r1, r3, #2
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f32:	4b68      	ldr	r3, [pc, #416]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003f34:	430a      	orrs	r2, r1
 8003f36:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f3c:	2380      	movs	r3, #128	@ 0x80
 8003f3e:	05db      	lsls	r3, r3, #23
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d106      	bne.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003f44:	4b63      	ldr	r3, [pc, #396]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003f46:	68da      	ldr	r2, [r3, #12]
 8003f48:	4b62      	ldr	r3, [pc, #392]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003f4a:	2180      	movs	r1, #128	@ 0x80
 8003f4c:	0249      	lsls	r1, r1, #9
 8003f4e:	430a      	orrs	r2, r1
 8003f50:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	2380      	movs	r3, #128	@ 0x80
 8003f58:	031b      	lsls	r3, r3, #12
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	d009      	beq.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003f5e:	4b5d      	ldr	r3, [pc, #372]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003f60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f62:	2240      	movs	r2, #64	@ 0x40
 8003f64:	4393      	bics	r3, r2
 8003f66:	0019      	movs	r1, r3
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f6c:	4b59      	ldr	r3, [pc, #356]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003f6e:	430a      	orrs	r2, r1
 8003f70:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	2380      	movs	r3, #128	@ 0x80
 8003f78:	039b      	lsls	r3, r3, #14
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	d016      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003f7e:	4b55      	ldr	r3, [pc, #340]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003f80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f82:	4a5c      	ldr	r2, [pc, #368]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8003f84:	4013      	ands	r3, r2
 8003f86:	0019      	movs	r1, r3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f8c:	4b51      	ldr	r3, [pc, #324]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003f8e:	430a      	orrs	r2, r1
 8003f90:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f96:	2380      	movs	r3, #128	@ 0x80
 8003f98:	03db      	lsls	r3, r3, #15
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d106      	bne.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003f9e:	4b4d      	ldr	r3, [pc, #308]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003fa0:	68da      	ldr	r2, [r3, #12]
 8003fa2:	4b4c      	ldr	r3, [pc, #304]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003fa4:	2180      	movs	r1, #128	@ 0x80
 8003fa6:	0449      	lsls	r1, r1, #17
 8003fa8:	430a      	orrs	r2, r1
 8003faa:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	2380      	movs	r3, #128	@ 0x80
 8003fb2:	03db      	lsls	r3, r3, #15
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	d016      	beq.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003fb8:	4b46      	ldr	r3, [pc, #280]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003fba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fbc:	4a4e      	ldr	r2, [pc, #312]	@ (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	0019      	movs	r1, r3
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003fc6:	4b43      	ldr	r3, [pc, #268]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003fc8:	430a      	orrs	r2, r1
 8003fca:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003fd0:	2380      	movs	r3, #128	@ 0x80
 8003fd2:	045b      	lsls	r3, r3, #17
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d106      	bne.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003fd8:	4b3e      	ldr	r3, [pc, #248]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003fda:	68da      	ldr	r2, [r3, #12]
 8003fdc:	4b3d      	ldr	r3, [pc, #244]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003fde:	2180      	movs	r1, #128	@ 0x80
 8003fe0:	0449      	lsls	r1, r1, #17
 8003fe2:	430a      	orrs	r2, r1
 8003fe4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	2380      	movs	r3, #128	@ 0x80
 8003fec:	011b      	lsls	r3, r3, #4
 8003fee:	4013      	ands	r3, r2
 8003ff0:	d014      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003ff2:	4b38      	ldr	r3, [pc, #224]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003ff4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ff6:	2203      	movs	r2, #3
 8003ff8:	4393      	bics	r3, r2
 8003ffa:	0019      	movs	r1, r3
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6a1a      	ldr	r2, [r3, #32]
 8004000:	4b34      	ldr	r3, [pc, #208]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004002:	430a      	orrs	r2, r1
 8004004:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6a1b      	ldr	r3, [r3, #32]
 800400a:	2b01      	cmp	r3, #1
 800400c:	d106      	bne.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800400e:	4b31      	ldr	r3, [pc, #196]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004010:	68da      	ldr	r2, [r3, #12]
 8004012:	4b30      	ldr	r3, [pc, #192]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004014:	2180      	movs	r1, #128	@ 0x80
 8004016:	0249      	lsls	r1, r1, #9
 8004018:	430a      	orrs	r2, r1
 800401a:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	2380      	movs	r3, #128	@ 0x80
 8004022:	019b      	lsls	r3, r3, #6
 8004024:	4013      	ands	r3, r2
 8004026:	d014      	beq.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8004028:	4b2a      	ldr	r3, [pc, #168]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800402a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800402c:	220c      	movs	r2, #12
 800402e:	4393      	bics	r3, r2
 8004030:	0019      	movs	r1, r3
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004036:	4b27      	ldr	r3, [pc, #156]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004038:	430a      	orrs	r2, r1
 800403a:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004040:	2b04      	cmp	r3, #4
 8004042:	d106      	bne.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004044:	4b23      	ldr	r3, [pc, #140]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004046:	68da      	ldr	r2, [r3, #12]
 8004048:	4b22      	ldr	r3, [pc, #136]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800404a:	2180      	movs	r1, #128	@ 0x80
 800404c:	0249      	lsls	r1, r1, #9
 800404e:	430a      	orrs	r2, r1
 8004050:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	2380      	movs	r3, #128	@ 0x80
 8004058:	045b      	lsls	r3, r3, #17
 800405a:	4013      	ands	r3, r2
 800405c:	d016      	beq.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800405e:	4b1d      	ldr	r3, [pc, #116]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004060:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004062:	4a22      	ldr	r2, [pc, #136]	@ (80040ec <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8004064:	4013      	ands	r3, r2
 8004066:	0019      	movs	r1, r3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800406c:	4b19      	ldr	r3, [pc, #100]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800406e:	430a      	orrs	r2, r1
 8004070:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004076:	2380      	movs	r3, #128	@ 0x80
 8004078:	019b      	lsls	r3, r3, #6
 800407a:	429a      	cmp	r2, r3
 800407c:	d106      	bne.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800407e:	4b15      	ldr	r3, [pc, #84]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004080:	68da      	ldr	r2, [r3, #12]
 8004082:	4b14      	ldr	r3, [pc, #80]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004084:	2180      	movs	r1, #128	@ 0x80
 8004086:	0449      	lsls	r1, r1, #17
 8004088:	430a      	orrs	r2, r1
 800408a:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	2380      	movs	r3, #128	@ 0x80
 8004092:	049b      	lsls	r3, r3, #18
 8004094:	4013      	ands	r3, r2
 8004096:	d016      	beq.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004098:	4b0e      	ldr	r3, [pc, #56]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800409a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800409c:	4a10      	ldr	r2, [pc, #64]	@ (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800409e:	4013      	ands	r3, r2
 80040a0:	0019      	movs	r1, r3
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80040a6:	4b0b      	ldr	r3, [pc, #44]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80040a8:	430a      	orrs	r2, r1
 80040aa:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80040b0:	2380      	movs	r3, #128	@ 0x80
 80040b2:	005b      	lsls	r3, r3, #1
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d106      	bne.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80040b8:	4b06      	ldr	r3, [pc, #24]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80040ba:	68da      	ldr	r2, [r3, #12]
 80040bc:	4b05      	ldr	r3, [pc, #20]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80040be:	2180      	movs	r1, #128	@ 0x80
 80040c0:	0449      	lsls	r1, r1, #17
 80040c2:	430a      	orrs	r2, r1
 80040c4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80040c6:	2312      	movs	r3, #18
 80040c8:	18fb      	adds	r3, r7, r3
 80040ca:	781b      	ldrb	r3, [r3, #0]
}
 80040cc:	0018      	movs	r0, r3
 80040ce:	46bd      	mov	sp, r7
 80040d0:	b006      	add	sp, #24
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	40021000 	.word	0x40021000
 80040d8:	efffffff 	.word	0xefffffff
 80040dc:	fffff3ff 	.word	0xfffff3ff
 80040e0:	fffffcff 	.word	0xfffffcff
 80040e4:	fff3ffff 	.word	0xfff3ffff
 80040e8:	ffcfffff 	.word	0xffcfffff
 80040ec:	ffffcfff 	.word	0xffffcfff
 80040f0:	ffff3fff 	.word	0xffff3fff
 80040f4:	ffbfffff 	.word	0xffbfffff
 80040f8:	feffffff 	.word	0xfeffffff

080040fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b082      	sub	sp, #8
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d101      	bne.n	800410e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	e046      	b.n	800419c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2288      	movs	r2, #136	@ 0x88
 8004112:	589b      	ldr	r3, [r3, r2]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d107      	bne.n	8004128 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2284      	movs	r2, #132	@ 0x84
 800411c:	2100      	movs	r1, #0
 800411e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	0018      	movs	r0, r3
 8004124:	f7fd fa66 	bl	80015f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2288      	movs	r2, #136	@ 0x88
 800412c:	2124      	movs	r1, #36	@ 0x24
 800412e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	2101      	movs	r1, #1
 800413c:	438a      	bics	r2, r1
 800413e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004144:	2b00      	cmp	r3, #0
 8004146:	d003      	beq.n	8004150 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	0018      	movs	r0, r3
 800414c:	f001 f86a 	bl	8005224 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	0018      	movs	r0, r3
 8004154:	f000 fd10 	bl	8004b78 <UART_SetConfig>
 8004158:	0003      	movs	r3, r0
 800415a:	2b01      	cmp	r3, #1
 800415c:	d101      	bne.n	8004162 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	e01c      	b.n	800419c <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	685a      	ldr	r2, [r3, #4]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	490d      	ldr	r1, [pc, #52]	@ (80041a4 <HAL_UART_Init+0xa8>)
 800416e:	400a      	ands	r2, r1
 8004170:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	689a      	ldr	r2, [r3, #8]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	212a      	movs	r1, #42	@ 0x2a
 800417e:	438a      	bics	r2, r1
 8004180:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	2101      	movs	r1, #1
 800418e:	430a      	orrs	r2, r1
 8004190:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	0018      	movs	r0, r3
 8004196:	f001 f8f9 	bl	800538c <UART_CheckIdleState>
 800419a:	0003      	movs	r3, r0
}
 800419c:	0018      	movs	r0, r3
 800419e:	46bd      	mov	sp, r7
 80041a0:	b002      	add	sp, #8
 80041a2:	bd80      	pop	{r7, pc}
 80041a4:	ffffb7ff 	.word	0xffffb7ff

080041a8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b08a      	sub	sp, #40	@ 0x28
 80041ac:	af02      	add	r7, sp, #8
 80041ae:	60f8      	str	r0, [r7, #12]
 80041b0:	60b9      	str	r1, [r7, #8]
 80041b2:	603b      	str	r3, [r7, #0]
 80041b4:	1dbb      	adds	r3, r7, #6
 80041b6:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2288      	movs	r2, #136	@ 0x88
 80041bc:	589b      	ldr	r3, [r3, r2]
 80041be:	2b20      	cmp	r3, #32
 80041c0:	d000      	beq.n	80041c4 <HAL_UART_Transmit+0x1c>
 80041c2:	e090      	b.n	80042e6 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d003      	beq.n	80041d2 <HAL_UART_Transmit+0x2a>
 80041ca:	1dbb      	adds	r3, r7, #6
 80041cc:	881b      	ldrh	r3, [r3, #0]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d101      	bne.n	80041d6 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e088      	b.n	80042e8 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	689a      	ldr	r2, [r3, #8]
 80041da:	2380      	movs	r3, #128	@ 0x80
 80041dc:	015b      	lsls	r3, r3, #5
 80041de:	429a      	cmp	r2, r3
 80041e0:	d109      	bne.n	80041f6 <HAL_UART_Transmit+0x4e>
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	691b      	ldr	r3, [r3, #16]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d105      	bne.n	80041f6 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	2201      	movs	r2, #1
 80041ee:	4013      	ands	r3, r2
 80041f0:	d001      	beq.n	80041f6 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e078      	b.n	80042e8 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2290      	movs	r2, #144	@ 0x90
 80041fa:	2100      	movs	r1, #0
 80041fc:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2288      	movs	r2, #136	@ 0x88
 8004202:	2121      	movs	r1, #33	@ 0x21
 8004204:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004206:	f7fd fcc9 	bl	8001b9c <HAL_GetTick>
 800420a:	0003      	movs	r3, r0
 800420c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	1dba      	adds	r2, r7, #6
 8004212:	2154      	movs	r1, #84	@ 0x54
 8004214:	8812      	ldrh	r2, [r2, #0]
 8004216:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	1dba      	adds	r2, r7, #6
 800421c:	2156      	movs	r1, #86	@ 0x56
 800421e:	8812      	ldrh	r2, [r2, #0]
 8004220:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	689a      	ldr	r2, [r3, #8]
 8004226:	2380      	movs	r3, #128	@ 0x80
 8004228:	015b      	lsls	r3, r3, #5
 800422a:	429a      	cmp	r2, r3
 800422c:	d108      	bne.n	8004240 <HAL_UART_Transmit+0x98>
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	691b      	ldr	r3, [r3, #16]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d104      	bne.n	8004240 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8004236:	2300      	movs	r3, #0
 8004238:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	61bb      	str	r3, [r7, #24]
 800423e:	e003      	b.n	8004248 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004244:	2300      	movs	r3, #0
 8004246:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004248:	e030      	b.n	80042ac <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800424a:	697a      	ldr	r2, [r7, #20]
 800424c:	68f8      	ldr	r0, [r7, #12]
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	9300      	str	r3, [sp, #0]
 8004252:	0013      	movs	r3, r2
 8004254:	2200      	movs	r2, #0
 8004256:	2180      	movs	r1, #128	@ 0x80
 8004258:	f001 f942 	bl	80054e0 <UART_WaitOnFlagUntilTimeout>
 800425c:	1e03      	subs	r3, r0, #0
 800425e:	d005      	beq.n	800426c <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2288      	movs	r2, #136	@ 0x88
 8004264:	2120      	movs	r1, #32
 8004266:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004268:	2303      	movs	r3, #3
 800426a:	e03d      	b.n	80042e8 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 800426c:	69fb      	ldr	r3, [r7, #28]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d10b      	bne.n	800428a <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004272:	69bb      	ldr	r3, [r7, #24]
 8004274:	881b      	ldrh	r3, [r3, #0]
 8004276:	001a      	movs	r2, r3
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	05d2      	lsls	r2, r2, #23
 800427e:	0dd2      	lsrs	r2, r2, #23
 8004280:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004282:	69bb      	ldr	r3, [r7, #24]
 8004284:	3302      	adds	r3, #2
 8004286:	61bb      	str	r3, [r7, #24]
 8004288:	e007      	b.n	800429a <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800428a:	69fb      	ldr	r3, [r7, #28]
 800428c:	781a      	ldrb	r2, [r3, #0]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004294:	69fb      	ldr	r3, [r7, #28]
 8004296:	3301      	adds	r3, #1
 8004298:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2256      	movs	r2, #86	@ 0x56
 800429e:	5a9b      	ldrh	r3, [r3, r2]
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	3b01      	subs	r3, #1
 80042a4:	b299      	uxth	r1, r3
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2256      	movs	r2, #86	@ 0x56
 80042aa:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2256      	movs	r2, #86	@ 0x56
 80042b0:	5a9b      	ldrh	r3, [r3, r2]
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d1c8      	bne.n	800424a <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80042b8:	697a      	ldr	r2, [r7, #20]
 80042ba:	68f8      	ldr	r0, [r7, #12]
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	9300      	str	r3, [sp, #0]
 80042c0:	0013      	movs	r3, r2
 80042c2:	2200      	movs	r2, #0
 80042c4:	2140      	movs	r1, #64	@ 0x40
 80042c6:	f001 f90b 	bl	80054e0 <UART_WaitOnFlagUntilTimeout>
 80042ca:	1e03      	subs	r3, r0, #0
 80042cc:	d005      	beq.n	80042da <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2288      	movs	r2, #136	@ 0x88
 80042d2:	2120      	movs	r1, #32
 80042d4:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	e006      	b.n	80042e8 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2288      	movs	r2, #136	@ 0x88
 80042de:	2120      	movs	r1, #32
 80042e0:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80042e2:	2300      	movs	r3, #0
 80042e4:	e000      	b.n	80042e8 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 80042e6:	2302      	movs	r3, #2
  }
}
 80042e8:	0018      	movs	r0, r3
 80042ea:	46bd      	mov	sp, r7
 80042ec:	b008      	add	sp, #32
 80042ee:	bd80      	pop	{r7, pc}

080042f0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b088      	sub	sp, #32
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	60b9      	str	r1, [r7, #8]
 80042fa:	1dbb      	adds	r3, r7, #6
 80042fc:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	228c      	movs	r2, #140	@ 0x8c
 8004302:	589b      	ldr	r3, [r3, r2]
 8004304:	2b20      	cmp	r3, #32
 8004306:	d14f      	bne.n	80043a8 <HAL_UART_Receive_DMA+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d003      	beq.n	8004316 <HAL_UART_Receive_DMA+0x26>
 800430e:	1dbb      	adds	r3, r7, #6
 8004310:	881b      	ldrh	r3, [r3, #0]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d101      	bne.n	800431a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	e047      	b.n	80043aa <HAL_UART_Receive_DMA+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	689a      	ldr	r2, [r3, #8]
 800431e:	2380      	movs	r3, #128	@ 0x80
 8004320:	015b      	lsls	r3, r3, #5
 8004322:	429a      	cmp	r2, r3
 8004324:	d109      	bne.n	800433a <HAL_UART_Receive_DMA+0x4a>
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	691b      	ldr	r3, [r3, #16]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d105      	bne.n	800433a <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	2201      	movs	r2, #1
 8004332:	4013      	ands	r3, r2
 8004334:	d001      	beq.n	800433a <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e037      	b.n	80043aa <HAL_UART_Receive_DMA+0xba>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2200      	movs	r2, #0
 800433e:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a1b      	ldr	r2, [pc, #108]	@ (80043b4 <HAL_UART_Receive_DMA+0xc4>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d025      	beq.n	8004396 <HAL_UART_Receive_DMA+0xa6>
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a1a      	ldr	r2, [pc, #104]	@ (80043b8 <HAL_UART_Receive_DMA+0xc8>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d020      	beq.n	8004396 <HAL_UART_Receive_DMA+0xa6>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	685a      	ldr	r2, [r3, #4]
 800435a:	2380      	movs	r3, #128	@ 0x80
 800435c:	041b      	lsls	r3, r3, #16
 800435e:	4013      	ands	r3, r2
 8004360:	d019      	beq.n	8004396 <HAL_UART_Receive_DMA+0xa6>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004362:	f3ef 8310 	mrs	r3, PRIMASK
 8004366:	613b      	str	r3, [r7, #16]
  return(result);
 8004368:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800436a:	61fb      	str	r3, [r7, #28]
 800436c:	2301      	movs	r3, #1
 800436e:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	f383 8810 	msr	PRIMASK, r3
}
 8004376:	46c0      	nop			@ (mov r8, r8)
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	2180      	movs	r1, #128	@ 0x80
 8004384:	04c9      	lsls	r1, r1, #19
 8004386:	430a      	orrs	r2, r1
 8004388:	601a      	str	r2, [r3, #0]
 800438a:	69fb      	ldr	r3, [r7, #28]
 800438c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800438e:	69bb      	ldr	r3, [r7, #24]
 8004390:	f383 8810 	msr	PRIMASK, r3
}
 8004394:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004396:	1dbb      	adds	r3, r7, #6
 8004398:	881a      	ldrh	r2, [r3, #0]
 800439a:	68b9      	ldr	r1, [r7, #8]
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	0018      	movs	r0, r3
 80043a0:	f001 f90e 	bl	80055c0 <UART_Start_Receive_DMA>
 80043a4:	0003      	movs	r3, r0
 80043a6:	e000      	b.n	80043aa <HAL_UART_Receive_DMA+0xba>
  }
  else
  {
    return HAL_BUSY;
 80043a8:	2302      	movs	r3, #2
  }
}
 80043aa:	0018      	movs	r0, r3
 80043ac:	46bd      	mov	sp, r7
 80043ae:	b008      	add	sp, #32
 80043b0:	bd80      	pop	{r7, pc}
 80043b2:	46c0      	nop			@ (mov r8, r8)
 80043b4:	40008000 	.word	0x40008000
 80043b8:	40008400 	.word	0x40008400

080043bc <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b08c      	sub	sp, #48	@ 0x30
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2288      	movs	r2, #136	@ 0x88
 80043c8:	589b      	ldr	r3, [r3, r2]
 80043ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	228c      	movs	r2, #140	@ 0x8c
 80043d0:	589b      	ldr	r3, [r3, r2]
 80043d2:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	2280      	movs	r2, #128	@ 0x80
 80043dc:	4013      	ands	r3, r2
 80043de:	2b80      	cmp	r3, #128	@ 0x80
 80043e0:	d138      	bne.n	8004454 <HAL_UART_DMAStop+0x98>
 80043e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043e4:	2b21      	cmp	r3, #33	@ 0x21
 80043e6:	d135      	bne.n	8004454 <HAL_UART_DMAStop+0x98>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043e8:	f3ef 8310 	mrs	r3, PRIMASK
 80043ec:	617b      	str	r3, [r7, #20]
  return(result);
 80043ee:	697b      	ldr	r3, [r7, #20]
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80043f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80043f2:	2301      	movs	r3, #1
 80043f4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043f6:	69bb      	ldr	r3, [r7, #24]
 80043f8:	f383 8810 	msr	PRIMASK, r3
}
 80043fc:	46c0      	nop			@ (mov r8, r8)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	689a      	ldr	r2, [r3, #8]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	2180      	movs	r1, #128	@ 0x80
 800440a:	438a      	bics	r2, r1
 800440c:	609a      	str	r2, [r3, #8]
 800440e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004410:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004412:	69fb      	ldr	r3, [r7, #28]
 8004414:	f383 8810 	msr	PRIMASK, r3
}
 8004418:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800441e:	2b00      	cmp	r3, #0
 8004420:	d014      	beq.n	800444c <HAL_UART_DMAStop+0x90>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004426:	0018      	movs	r0, r3
 8004428:	f7fd fe0c 	bl	8002044 <HAL_DMA_Abort>
 800442c:	1e03      	subs	r3, r0, #0
 800442e:	d00d      	beq.n	800444c <HAL_UART_DMAStop+0x90>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004434:	0018      	movs	r0, r3
 8004436:	f7fd ff91 	bl	800235c <HAL_DMA_GetError>
 800443a:	0003      	movs	r3, r0
 800443c:	2b20      	cmp	r3, #32
 800443e:	d105      	bne.n	800444c <HAL_UART_DMAStop+0x90>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2290      	movs	r2, #144	@ 0x90
 8004444:	2110      	movs	r1, #16
 8004446:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004448:	2303      	movs	r3, #3
 800444a:	e047      	b.n	80044dc <HAL_UART_DMAStop+0x120>
        }
      }
    }

    UART_EndTxTransfer(huart);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	0018      	movs	r0, r3
 8004450:	f001 f95c 	bl	800570c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	2240      	movs	r2, #64	@ 0x40
 800445c:	4013      	ands	r3, r2
 800445e:	2b40      	cmp	r3, #64	@ 0x40
 8004460:	d13b      	bne.n	80044da <HAL_UART_DMAStop+0x11e>
 8004462:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004464:	2b22      	cmp	r3, #34	@ 0x22
 8004466:	d138      	bne.n	80044da <HAL_UART_DMAStop+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004468:	f3ef 8310 	mrs	r3, PRIMASK
 800446c:	60bb      	str	r3, [r7, #8]
  return(result);
 800446e:	68bb      	ldr	r3, [r7, #8]
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004470:	623b      	str	r3, [r7, #32]
 8004472:	2301      	movs	r3, #1
 8004474:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	f383 8810 	msr	PRIMASK, r3
}
 800447c:	46c0      	nop			@ (mov r8, r8)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	689a      	ldr	r2, [r3, #8]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	2140      	movs	r1, #64	@ 0x40
 800448a:	438a      	bics	r2, r1
 800448c:	609a      	str	r2, [r3, #8]
 800448e:	6a3b      	ldr	r3, [r7, #32]
 8004490:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	f383 8810 	msr	PRIMASK, r3
}
 8004498:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2280      	movs	r2, #128	@ 0x80
 800449e:	589b      	ldr	r3, [r3, r2]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d016      	beq.n	80044d2 <HAL_UART_DMAStop+0x116>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2280      	movs	r2, #128	@ 0x80
 80044a8:	589b      	ldr	r3, [r3, r2]
 80044aa:	0018      	movs	r0, r3
 80044ac:	f7fd fdca 	bl	8002044 <HAL_DMA_Abort>
 80044b0:	1e03      	subs	r3, r0, #0
 80044b2:	d00e      	beq.n	80044d2 <HAL_UART_DMAStop+0x116>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2280      	movs	r2, #128	@ 0x80
 80044b8:	589b      	ldr	r3, [r3, r2]
 80044ba:	0018      	movs	r0, r3
 80044bc:	f7fd ff4e 	bl	800235c <HAL_DMA_GetError>
 80044c0:	0003      	movs	r3, r0
 80044c2:	2b20      	cmp	r3, #32
 80044c4:	d105      	bne.n	80044d2 <HAL_UART_DMAStop+0x116>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2290      	movs	r2, #144	@ 0x90
 80044ca:	2110      	movs	r1, #16
 80044cc:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 80044ce:	2303      	movs	r3, #3
 80044d0:	e004      	b.n	80044dc <HAL_UART_DMAStop+0x120>
        }
      }
    }

    UART_EndRxTransfer(huart);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	0018      	movs	r0, r3
 80044d6:	f001 f959 	bl	800578c <UART_EndRxTransfer>
  }

  return HAL_OK;
 80044da:	2300      	movs	r3, #0
}
 80044dc:	0018      	movs	r0, r3
 80044de:	46bd      	mov	sp, r7
 80044e0:	b00c      	add	sp, #48	@ 0x30
 80044e2:	bd80      	pop	{r7, pc}

080044e4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80044e4:	b5b0      	push	{r4, r5, r7, lr}
 80044e6:	b0aa      	sub	sp, #168	@ 0xa8
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	69db      	ldr	r3, [r3, #28]
 80044f2:	22a4      	movs	r2, #164	@ 0xa4
 80044f4:	18b9      	adds	r1, r7, r2
 80044f6:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	20a0      	movs	r0, #160	@ 0xa0
 8004500:	1839      	adds	r1, r7, r0
 8004502:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	249c      	movs	r4, #156	@ 0x9c
 800450c:	1939      	adds	r1, r7, r4
 800450e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004510:	0011      	movs	r1, r2
 8004512:	18bb      	adds	r3, r7, r2
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4aa2      	ldr	r2, [pc, #648]	@ (80047a0 <HAL_UART_IRQHandler+0x2bc>)
 8004518:	4013      	ands	r3, r2
 800451a:	2298      	movs	r2, #152	@ 0x98
 800451c:	18bd      	adds	r5, r7, r2
 800451e:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8004520:	18bb      	adds	r3, r7, r2
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d11a      	bne.n	800455e <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004528:	187b      	adds	r3, r7, r1
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	2220      	movs	r2, #32
 800452e:	4013      	ands	r3, r2
 8004530:	d015      	beq.n	800455e <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004532:	183b      	adds	r3, r7, r0
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	2220      	movs	r2, #32
 8004538:	4013      	ands	r3, r2
 800453a:	d105      	bne.n	8004548 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800453c:	193b      	adds	r3, r7, r4
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	2380      	movs	r3, #128	@ 0x80
 8004542:	055b      	lsls	r3, r3, #21
 8004544:	4013      	ands	r3, r2
 8004546:	d00a      	beq.n	800455e <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800454c:	2b00      	cmp	r3, #0
 800454e:	d100      	bne.n	8004552 <HAL_UART_IRQHandler+0x6e>
 8004550:	e2dc      	b.n	8004b0c <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	0010      	movs	r0, r2
 800455a:	4798      	blx	r3
      }
      return;
 800455c:	e2d6      	b.n	8004b0c <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800455e:	2398      	movs	r3, #152	@ 0x98
 8004560:	18fb      	adds	r3, r7, r3
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d100      	bne.n	800456a <HAL_UART_IRQHandler+0x86>
 8004568:	e122      	b.n	80047b0 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800456a:	239c      	movs	r3, #156	@ 0x9c
 800456c:	18fb      	adds	r3, r7, r3
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a8c      	ldr	r2, [pc, #560]	@ (80047a4 <HAL_UART_IRQHandler+0x2c0>)
 8004572:	4013      	ands	r3, r2
 8004574:	d106      	bne.n	8004584 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004576:	23a0      	movs	r3, #160	@ 0xa0
 8004578:	18fb      	adds	r3, r7, r3
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a8a      	ldr	r2, [pc, #552]	@ (80047a8 <HAL_UART_IRQHandler+0x2c4>)
 800457e:	4013      	ands	r3, r2
 8004580:	d100      	bne.n	8004584 <HAL_UART_IRQHandler+0xa0>
 8004582:	e115      	b.n	80047b0 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004584:	23a4      	movs	r3, #164	@ 0xa4
 8004586:	18fb      	adds	r3, r7, r3
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	2201      	movs	r2, #1
 800458c:	4013      	ands	r3, r2
 800458e:	d012      	beq.n	80045b6 <HAL_UART_IRQHandler+0xd2>
 8004590:	23a0      	movs	r3, #160	@ 0xa0
 8004592:	18fb      	adds	r3, r7, r3
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	2380      	movs	r3, #128	@ 0x80
 8004598:	005b      	lsls	r3, r3, #1
 800459a:	4013      	ands	r3, r2
 800459c:	d00b      	beq.n	80045b6 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	2201      	movs	r2, #1
 80045a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2290      	movs	r2, #144	@ 0x90
 80045aa:	589b      	ldr	r3, [r3, r2]
 80045ac:	2201      	movs	r2, #1
 80045ae:	431a      	orrs	r2, r3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2190      	movs	r1, #144	@ 0x90
 80045b4:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80045b6:	23a4      	movs	r3, #164	@ 0xa4
 80045b8:	18fb      	adds	r3, r7, r3
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	2202      	movs	r2, #2
 80045be:	4013      	ands	r3, r2
 80045c0:	d011      	beq.n	80045e6 <HAL_UART_IRQHandler+0x102>
 80045c2:	239c      	movs	r3, #156	@ 0x9c
 80045c4:	18fb      	adds	r3, r7, r3
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	2201      	movs	r2, #1
 80045ca:	4013      	ands	r3, r2
 80045cc:	d00b      	beq.n	80045e6 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	2202      	movs	r2, #2
 80045d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2290      	movs	r2, #144	@ 0x90
 80045da:	589b      	ldr	r3, [r3, r2]
 80045dc:	2204      	movs	r2, #4
 80045de:	431a      	orrs	r2, r3
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2190      	movs	r1, #144	@ 0x90
 80045e4:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80045e6:	23a4      	movs	r3, #164	@ 0xa4
 80045e8:	18fb      	adds	r3, r7, r3
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	2204      	movs	r2, #4
 80045ee:	4013      	ands	r3, r2
 80045f0:	d011      	beq.n	8004616 <HAL_UART_IRQHandler+0x132>
 80045f2:	239c      	movs	r3, #156	@ 0x9c
 80045f4:	18fb      	adds	r3, r7, r3
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	2201      	movs	r2, #1
 80045fa:	4013      	ands	r3, r2
 80045fc:	d00b      	beq.n	8004616 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	2204      	movs	r2, #4
 8004604:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2290      	movs	r2, #144	@ 0x90
 800460a:	589b      	ldr	r3, [r3, r2]
 800460c:	2202      	movs	r2, #2
 800460e:	431a      	orrs	r2, r3
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2190      	movs	r1, #144	@ 0x90
 8004614:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004616:	23a4      	movs	r3, #164	@ 0xa4
 8004618:	18fb      	adds	r3, r7, r3
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	2208      	movs	r2, #8
 800461e:	4013      	ands	r3, r2
 8004620:	d017      	beq.n	8004652 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004622:	23a0      	movs	r3, #160	@ 0xa0
 8004624:	18fb      	adds	r3, r7, r3
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	2220      	movs	r2, #32
 800462a:	4013      	ands	r3, r2
 800462c:	d105      	bne.n	800463a <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800462e:	239c      	movs	r3, #156	@ 0x9c
 8004630:	18fb      	adds	r3, r7, r3
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a5b      	ldr	r2, [pc, #364]	@ (80047a4 <HAL_UART_IRQHandler+0x2c0>)
 8004636:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004638:	d00b      	beq.n	8004652 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	2208      	movs	r2, #8
 8004640:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2290      	movs	r2, #144	@ 0x90
 8004646:	589b      	ldr	r3, [r3, r2]
 8004648:	2208      	movs	r2, #8
 800464a:	431a      	orrs	r2, r3
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2190      	movs	r1, #144	@ 0x90
 8004650:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004652:	23a4      	movs	r3, #164	@ 0xa4
 8004654:	18fb      	adds	r3, r7, r3
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	2380      	movs	r3, #128	@ 0x80
 800465a:	011b      	lsls	r3, r3, #4
 800465c:	4013      	ands	r3, r2
 800465e:	d013      	beq.n	8004688 <HAL_UART_IRQHandler+0x1a4>
 8004660:	23a0      	movs	r3, #160	@ 0xa0
 8004662:	18fb      	adds	r3, r7, r3
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	2380      	movs	r3, #128	@ 0x80
 8004668:	04db      	lsls	r3, r3, #19
 800466a:	4013      	ands	r3, r2
 800466c:	d00c      	beq.n	8004688 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	2280      	movs	r2, #128	@ 0x80
 8004674:	0112      	lsls	r2, r2, #4
 8004676:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2290      	movs	r2, #144	@ 0x90
 800467c:	589b      	ldr	r3, [r3, r2]
 800467e:	2220      	movs	r2, #32
 8004680:	431a      	orrs	r2, r3
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2190      	movs	r1, #144	@ 0x90
 8004686:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2290      	movs	r2, #144	@ 0x90
 800468c:	589b      	ldr	r3, [r3, r2]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d100      	bne.n	8004694 <HAL_UART_IRQHandler+0x1b0>
 8004692:	e23d      	b.n	8004b10 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004694:	23a4      	movs	r3, #164	@ 0xa4
 8004696:	18fb      	adds	r3, r7, r3
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	2220      	movs	r2, #32
 800469c:	4013      	ands	r3, r2
 800469e:	d015      	beq.n	80046cc <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80046a0:	23a0      	movs	r3, #160	@ 0xa0
 80046a2:	18fb      	adds	r3, r7, r3
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	2220      	movs	r2, #32
 80046a8:	4013      	ands	r3, r2
 80046aa:	d106      	bne.n	80046ba <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80046ac:	239c      	movs	r3, #156	@ 0x9c
 80046ae:	18fb      	adds	r3, r7, r3
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	2380      	movs	r3, #128	@ 0x80
 80046b4:	055b      	lsls	r3, r3, #21
 80046b6:	4013      	ands	r3, r2
 80046b8:	d008      	beq.n	80046cc <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d004      	beq.n	80046cc <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	0010      	movs	r0, r2
 80046ca:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2290      	movs	r2, #144	@ 0x90
 80046d0:	589b      	ldr	r3, [r3, r2]
 80046d2:	2194      	movs	r1, #148	@ 0x94
 80046d4:	187a      	adds	r2, r7, r1
 80046d6:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	2240      	movs	r2, #64	@ 0x40
 80046e0:	4013      	ands	r3, r2
 80046e2:	2b40      	cmp	r3, #64	@ 0x40
 80046e4:	d004      	beq.n	80046f0 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80046e6:	187b      	adds	r3, r7, r1
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	2228      	movs	r2, #40	@ 0x28
 80046ec:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80046ee:	d04c      	beq.n	800478a <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	0018      	movs	r0, r3
 80046f4:	f001 f84a 	bl	800578c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	2240      	movs	r2, #64	@ 0x40
 8004700:	4013      	ands	r3, r2
 8004702:	2b40      	cmp	r3, #64	@ 0x40
 8004704:	d13c      	bne.n	8004780 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004706:	f3ef 8310 	mrs	r3, PRIMASK
 800470a:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 800470c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800470e:	2090      	movs	r0, #144	@ 0x90
 8004710:	183a      	adds	r2, r7, r0
 8004712:	6013      	str	r3, [r2, #0]
 8004714:	2301      	movs	r3, #1
 8004716:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004718:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800471a:	f383 8810 	msr	PRIMASK, r3
}
 800471e:	46c0      	nop			@ (mov r8, r8)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	689a      	ldr	r2, [r3, #8]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	2140      	movs	r1, #64	@ 0x40
 800472c:	438a      	bics	r2, r1
 800472e:	609a      	str	r2, [r3, #8]
 8004730:	183b      	adds	r3, r7, r0
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004736:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004738:	f383 8810 	msr	PRIMASK, r3
}
 800473c:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2280      	movs	r2, #128	@ 0x80
 8004742:	589b      	ldr	r3, [r3, r2]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d016      	beq.n	8004776 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2280      	movs	r2, #128	@ 0x80
 800474c:	589b      	ldr	r3, [r3, r2]
 800474e:	4a17      	ldr	r2, [pc, #92]	@ (80047ac <HAL_UART_IRQHandler+0x2c8>)
 8004750:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2280      	movs	r2, #128	@ 0x80
 8004756:	589b      	ldr	r3, [r3, r2]
 8004758:	0018      	movs	r0, r3
 800475a:	f7fd fcd3 	bl	8002104 <HAL_DMA_Abort_IT>
 800475e:	1e03      	subs	r3, r0, #0
 8004760:	d01c      	beq.n	800479c <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2280      	movs	r2, #128	@ 0x80
 8004766:	589b      	ldr	r3, [r3, r2]
 8004768:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	2180      	movs	r1, #128	@ 0x80
 800476e:	5852      	ldr	r2, [r2, r1]
 8004770:	0010      	movs	r0, r2
 8004772:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004774:	e012      	b.n	800479c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	0018      	movs	r0, r3
 800477a:	f000 f9e9 	bl	8004b50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800477e:	e00d      	b.n	800479c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	0018      	movs	r0, r3
 8004784:	f000 f9e4 	bl	8004b50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004788:	e008      	b.n	800479c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	0018      	movs	r0, r3
 800478e:	f000 f9df 	bl	8004b50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2290      	movs	r2, #144	@ 0x90
 8004796:	2100      	movs	r1, #0
 8004798:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800479a:	e1b9      	b.n	8004b10 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800479c:	46c0      	nop			@ (mov r8, r8)
    return;
 800479e:	e1b7      	b.n	8004b10 <HAL_UART_IRQHandler+0x62c>
 80047a0:	0000080f 	.word	0x0000080f
 80047a4:	10000001 	.word	0x10000001
 80047a8:	04000120 	.word	0x04000120
 80047ac:	08005a51 	.word	0x08005a51

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d000      	beq.n	80047ba <HAL_UART_IRQHandler+0x2d6>
 80047b8:	e13e      	b.n	8004a38 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80047ba:	23a4      	movs	r3, #164	@ 0xa4
 80047bc:	18fb      	adds	r3, r7, r3
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	2210      	movs	r2, #16
 80047c2:	4013      	ands	r3, r2
 80047c4:	d100      	bne.n	80047c8 <HAL_UART_IRQHandler+0x2e4>
 80047c6:	e137      	b.n	8004a38 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80047c8:	23a0      	movs	r3, #160	@ 0xa0
 80047ca:	18fb      	adds	r3, r7, r3
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	2210      	movs	r2, #16
 80047d0:	4013      	ands	r3, r2
 80047d2:	d100      	bne.n	80047d6 <HAL_UART_IRQHandler+0x2f2>
 80047d4:	e130      	b.n	8004a38 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	2210      	movs	r2, #16
 80047dc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	2240      	movs	r2, #64	@ 0x40
 80047e6:	4013      	ands	r3, r2
 80047e8:	2b40      	cmp	r3, #64	@ 0x40
 80047ea:	d000      	beq.n	80047ee <HAL_UART_IRQHandler+0x30a>
 80047ec:	e0a4      	b.n	8004938 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2280      	movs	r2, #128	@ 0x80
 80047f2:	589b      	ldr	r3, [r3, r2]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	685a      	ldr	r2, [r3, #4]
 80047f8:	217e      	movs	r1, #126	@ 0x7e
 80047fa:	187b      	adds	r3, r7, r1
 80047fc:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80047fe:	187b      	adds	r3, r7, r1
 8004800:	881b      	ldrh	r3, [r3, #0]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d100      	bne.n	8004808 <HAL_UART_IRQHandler+0x324>
 8004806:	e185      	b.n	8004b14 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	225c      	movs	r2, #92	@ 0x5c
 800480c:	5a9b      	ldrh	r3, [r3, r2]
 800480e:	187a      	adds	r2, r7, r1
 8004810:	8812      	ldrh	r2, [r2, #0]
 8004812:	429a      	cmp	r2, r3
 8004814:	d300      	bcc.n	8004818 <HAL_UART_IRQHandler+0x334>
 8004816:	e17d      	b.n	8004b14 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	187a      	adds	r2, r7, r1
 800481c:	215e      	movs	r1, #94	@ 0x5e
 800481e:	8812      	ldrh	r2, [r2, #0]
 8004820:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2280      	movs	r2, #128	@ 0x80
 8004826:	589b      	ldr	r3, [r3, r2]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	2220      	movs	r2, #32
 800482e:	4013      	ands	r3, r2
 8004830:	d170      	bne.n	8004914 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004832:	f3ef 8310 	mrs	r3, PRIMASK
 8004836:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8004838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800483a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800483c:	2301      	movs	r3, #1
 800483e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004840:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004842:	f383 8810 	msr	PRIMASK, r3
}
 8004846:	46c0      	nop			@ (mov r8, r8)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	49b4      	ldr	r1, [pc, #720]	@ (8004b24 <HAL_UART_IRQHandler+0x640>)
 8004854:	400a      	ands	r2, r1
 8004856:	601a      	str	r2, [r3, #0]
 8004858:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800485a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800485c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800485e:	f383 8810 	msr	PRIMASK, r3
}
 8004862:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004864:	f3ef 8310 	mrs	r3, PRIMASK
 8004868:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 800486a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800486c:	677b      	str	r3, [r7, #116]	@ 0x74
 800486e:	2301      	movs	r3, #1
 8004870:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004872:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004874:	f383 8810 	msr	PRIMASK, r3
}
 8004878:	46c0      	nop			@ (mov r8, r8)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	689a      	ldr	r2, [r3, #8]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	2101      	movs	r1, #1
 8004886:	438a      	bics	r2, r1
 8004888:	609a      	str	r2, [r3, #8]
 800488a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800488c:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800488e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004890:	f383 8810 	msr	PRIMASK, r3
}
 8004894:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004896:	f3ef 8310 	mrs	r3, PRIMASK
 800489a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 800489c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800489e:	673b      	str	r3, [r7, #112]	@ 0x70
 80048a0:	2301      	movs	r3, #1
 80048a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048a6:	f383 8810 	msr	PRIMASK, r3
}
 80048aa:	46c0      	nop			@ (mov r8, r8)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	689a      	ldr	r2, [r3, #8]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	2140      	movs	r1, #64	@ 0x40
 80048b8:	438a      	bics	r2, r1
 80048ba:	609a      	str	r2, [r3, #8]
 80048bc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80048be:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80048c2:	f383 8810 	msr	PRIMASK, r3
}
 80048c6:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	228c      	movs	r2, #140	@ 0x8c
 80048cc:	2120      	movs	r1, #32
 80048ce:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2200      	movs	r2, #0
 80048d4:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048d6:	f3ef 8310 	mrs	r3, PRIMASK
 80048da:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 80048dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048de:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80048e0:	2301      	movs	r3, #1
 80048e2:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048e4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80048e6:	f383 8810 	msr	PRIMASK, r3
}
 80048ea:	46c0      	nop			@ (mov r8, r8)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	2110      	movs	r1, #16
 80048f8:	438a      	bics	r2, r1
 80048fa:	601a      	str	r2, [r3, #0]
 80048fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80048fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004900:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004902:	f383 8810 	msr	PRIMASK, r3
}
 8004906:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2280      	movs	r2, #128	@ 0x80
 800490c:	589b      	ldr	r3, [r3, r2]
 800490e:	0018      	movs	r0, r3
 8004910:	f7fd fb98 	bl	8002044 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2202      	movs	r2, #2
 8004918:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	225c      	movs	r2, #92	@ 0x5c
 800491e:	5a9a      	ldrh	r2, [r3, r2]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	215e      	movs	r1, #94	@ 0x5e
 8004924:	5a5b      	ldrh	r3, [r3, r1]
 8004926:	b29b      	uxth	r3, r3
 8004928:	1ad3      	subs	r3, r2, r3
 800492a:	b29a      	uxth	r2, r3
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	0011      	movs	r1, r2
 8004930:	0018      	movs	r0, r3
 8004932:	f000 f915 	bl	8004b60 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004936:	e0ed      	b.n	8004b14 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	225c      	movs	r2, #92	@ 0x5c
 800493c:	5a99      	ldrh	r1, [r3, r2]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	225e      	movs	r2, #94	@ 0x5e
 8004942:	5a9b      	ldrh	r3, [r3, r2]
 8004944:	b29a      	uxth	r2, r3
 8004946:	208e      	movs	r0, #142	@ 0x8e
 8004948:	183b      	adds	r3, r7, r0
 800494a:	1a8a      	subs	r2, r1, r2
 800494c:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	225e      	movs	r2, #94	@ 0x5e
 8004952:	5a9b      	ldrh	r3, [r3, r2]
 8004954:	b29b      	uxth	r3, r3
 8004956:	2b00      	cmp	r3, #0
 8004958:	d100      	bne.n	800495c <HAL_UART_IRQHandler+0x478>
 800495a:	e0dd      	b.n	8004b18 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 800495c:	183b      	adds	r3, r7, r0
 800495e:	881b      	ldrh	r3, [r3, #0]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d100      	bne.n	8004966 <HAL_UART_IRQHandler+0x482>
 8004964:	e0d8      	b.n	8004b18 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004966:	f3ef 8310 	mrs	r3, PRIMASK
 800496a:	60fb      	str	r3, [r7, #12]
  return(result);
 800496c:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800496e:	2488      	movs	r4, #136	@ 0x88
 8004970:	193a      	adds	r2, r7, r4
 8004972:	6013      	str	r3, [r2, #0]
 8004974:	2301      	movs	r3, #1
 8004976:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	f383 8810 	msr	PRIMASK, r3
}
 800497e:	46c0      	nop			@ (mov r8, r8)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4967      	ldr	r1, [pc, #412]	@ (8004b28 <HAL_UART_IRQHandler+0x644>)
 800498c:	400a      	ands	r2, r1
 800498e:	601a      	str	r2, [r3, #0]
 8004990:	193b      	adds	r3, r7, r4
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	f383 8810 	msr	PRIMASK, r3
}
 800499c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800499e:	f3ef 8310 	mrs	r3, PRIMASK
 80049a2:	61bb      	str	r3, [r7, #24]
  return(result);
 80049a4:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80049a6:	2484      	movs	r4, #132	@ 0x84
 80049a8:	193a      	adds	r2, r7, r4
 80049aa:	6013      	str	r3, [r2, #0]
 80049ac:	2301      	movs	r3, #1
 80049ae:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049b0:	69fb      	ldr	r3, [r7, #28]
 80049b2:	f383 8810 	msr	PRIMASK, r3
}
 80049b6:	46c0      	nop			@ (mov r8, r8)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	689a      	ldr	r2, [r3, #8]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	495a      	ldr	r1, [pc, #360]	@ (8004b2c <HAL_UART_IRQHandler+0x648>)
 80049c4:	400a      	ands	r2, r1
 80049c6:	609a      	str	r2, [r3, #8]
 80049c8:	193b      	adds	r3, r7, r4
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049ce:	6a3b      	ldr	r3, [r7, #32]
 80049d0:	f383 8810 	msr	PRIMASK, r3
}
 80049d4:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	228c      	movs	r2, #140	@ 0x8c
 80049da:	2120      	movs	r1, #32
 80049dc:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2200      	movs	r2, #0
 80049e2:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2200      	movs	r2, #0
 80049e8:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049ea:	f3ef 8310 	mrs	r3, PRIMASK
 80049ee:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80049f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049f2:	2480      	movs	r4, #128	@ 0x80
 80049f4:	193a      	adds	r2, r7, r4
 80049f6:	6013      	str	r3, [r2, #0]
 80049f8:	2301      	movs	r3, #1
 80049fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049fe:	f383 8810 	msr	PRIMASK, r3
}
 8004a02:	46c0      	nop			@ (mov r8, r8)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	2110      	movs	r1, #16
 8004a10:	438a      	bics	r2, r1
 8004a12:	601a      	str	r2, [r3, #0]
 8004a14:	193b      	adds	r3, r7, r4
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a1c:	f383 8810 	msr	PRIMASK, r3
}
 8004a20:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2202      	movs	r2, #2
 8004a26:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004a28:	183b      	adds	r3, r7, r0
 8004a2a:	881a      	ldrh	r2, [r3, #0]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	0011      	movs	r1, r2
 8004a30:	0018      	movs	r0, r3
 8004a32:	f000 f895 	bl	8004b60 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004a36:	e06f      	b.n	8004b18 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004a38:	23a4      	movs	r3, #164	@ 0xa4
 8004a3a:	18fb      	adds	r3, r7, r3
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	2380      	movs	r3, #128	@ 0x80
 8004a40:	035b      	lsls	r3, r3, #13
 8004a42:	4013      	ands	r3, r2
 8004a44:	d010      	beq.n	8004a68 <HAL_UART_IRQHandler+0x584>
 8004a46:	239c      	movs	r3, #156	@ 0x9c
 8004a48:	18fb      	adds	r3, r7, r3
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	2380      	movs	r3, #128	@ 0x80
 8004a4e:	03db      	lsls	r3, r3, #15
 8004a50:	4013      	ands	r3, r2
 8004a52:	d009      	beq.n	8004a68 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	2280      	movs	r2, #128	@ 0x80
 8004a5a:	0352      	lsls	r2, r2, #13
 8004a5c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	0018      	movs	r0, r3
 8004a62:	f001 f8ab 	bl	8005bbc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004a66:	e05a      	b.n	8004b1e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004a68:	23a4      	movs	r3, #164	@ 0xa4
 8004a6a:	18fb      	adds	r3, r7, r3
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	2280      	movs	r2, #128	@ 0x80
 8004a70:	4013      	ands	r3, r2
 8004a72:	d016      	beq.n	8004aa2 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004a74:	23a0      	movs	r3, #160	@ 0xa0
 8004a76:	18fb      	adds	r3, r7, r3
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	2280      	movs	r2, #128	@ 0x80
 8004a7c:	4013      	ands	r3, r2
 8004a7e:	d106      	bne.n	8004a8e <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004a80:	239c      	movs	r3, #156	@ 0x9c
 8004a82:	18fb      	adds	r3, r7, r3
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	2380      	movs	r3, #128	@ 0x80
 8004a88:	041b      	lsls	r3, r3, #16
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	d009      	beq.n	8004aa2 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d042      	beq.n	8004b1c <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	0010      	movs	r0, r2
 8004a9e:	4798      	blx	r3
    }
    return;
 8004aa0:	e03c      	b.n	8004b1c <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004aa2:	23a4      	movs	r3, #164	@ 0xa4
 8004aa4:	18fb      	adds	r3, r7, r3
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	2240      	movs	r2, #64	@ 0x40
 8004aaa:	4013      	ands	r3, r2
 8004aac:	d00a      	beq.n	8004ac4 <HAL_UART_IRQHandler+0x5e0>
 8004aae:	23a0      	movs	r3, #160	@ 0xa0
 8004ab0:	18fb      	adds	r3, r7, r3
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	2240      	movs	r2, #64	@ 0x40
 8004ab6:	4013      	ands	r3, r2
 8004ab8:	d004      	beq.n	8004ac4 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	0018      	movs	r0, r3
 8004abe:	f000 ffde 	bl	8005a7e <UART_EndTransmit_IT>
    return;
 8004ac2:	e02c      	b.n	8004b1e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004ac4:	23a4      	movs	r3, #164	@ 0xa4
 8004ac6:	18fb      	adds	r3, r7, r3
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	2380      	movs	r3, #128	@ 0x80
 8004acc:	041b      	lsls	r3, r3, #16
 8004ace:	4013      	ands	r3, r2
 8004ad0:	d00b      	beq.n	8004aea <HAL_UART_IRQHandler+0x606>
 8004ad2:	23a0      	movs	r3, #160	@ 0xa0
 8004ad4:	18fb      	adds	r3, r7, r3
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	2380      	movs	r3, #128	@ 0x80
 8004ada:	05db      	lsls	r3, r3, #23
 8004adc:	4013      	ands	r3, r2
 8004ade:	d004      	beq.n	8004aea <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	0018      	movs	r0, r3
 8004ae4:	f001 f87a 	bl	8005bdc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004ae8:	e019      	b.n	8004b1e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004aea:	23a4      	movs	r3, #164	@ 0xa4
 8004aec:	18fb      	adds	r3, r7, r3
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	2380      	movs	r3, #128	@ 0x80
 8004af2:	045b      	lsls	r3, r3, #17
 8004af4:	4013      	ands	r3, r2
 8004af6:	d012      	beq.n	8004b1e <HAL_UART_IRQHandler+0x63a>
 8004af8:	23a0      	movs	r3, #160	@ 0xa0
 8004afa:	18fb      	adds	r3, r7, r3
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	da0d      	bge.n	8004b1e <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	0018      	movs	r0, r3
 8004b06:	f001 f861 	bl	8005bcc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004b0a:	e008      	b.n	8004b1e <HAL_UART_IRQHandler+0x63a>
      return;
 8004b0c:	46c0      	nop			@ (mov r8, r8)
 8004b0e:	e006      	b.n	8004b1e <HAL_UART_IRQHandler+0x63a>
    return;
 8004b10:	46c0      	nop			@ (mov r8, r8)
 8004b12:	e004      	b.n	8004b1e <HAL_UART_IRQHandler+0x63a>
      return;
 8004b14:	46c0      	nop			@ (mov r8, r8)
 8004b16:	e002      	b.n	8004b1e <HAL_UART_IRQHandler+0x63a>
      return;
 8004b18:	46c0      	nop			@ (mov r8, r8)
 8004b1a:	e000      	b.n	8004b1e <HAL_UART_IRQHandler+0x63a>
    return;
 8004b1c:	46c0      	nop			@ (mov r8, r8)
  }
}
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	b02a      	add	sp, #168	@ 0xa8
 8004b22:	bdb0      	pop	{r4, r5, r7, pc}
 8004b24:	fffffeff 	.word	0xfffffeff
 8004b28:	fffffedf 	.word	0xfffffedf
 8004b2c:	effffffe 	.word	0xeffffffe

08004b30 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b082      	sub	sp, #8
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004b38:	46c0      	nop			@ (mov r8, r8)
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	b002      	add	sp, #8
 8004b3e:	bd80      	pop	{r7, pc}

08004b40 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b082      	sub	sp, #8
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8004b48:	46c0      	nop			@ (mov r8, r8)
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	b002      	add	sp, #8
 8004b4e:	bd80      	pop	{r7, pc}

08004b50 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b082      	sub	sp, #8
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004b58:	46c0      	nop			@ (mov r8, r8)
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	b002      	add	sp, #8
 8004b5e:	bd80      	pop	{r7, pc}

08004b60 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b082      	sub	sp, #8
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	000a      	movs	r2, r1
 8004b6a:	1cbb      	adds	r3, r7, #2
 8004b6c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004b6e:	46c0      	nop			@ (mov r8, r8)
 8004b70:	46bd      	mov	sp, r7
 8004b72:	b002      	add	sp, #8
 8004b74:	bd80      	pop	{r7, pc}
	...

08004b78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b78:	b5b0      	push	{r4, r5, r7, lr}
 8004b7a:	b090      	sub	sp, #64	@ 0x40
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b80:	231a      	movs	r3, #26
 8004b82:	2220      	movs	r2, #32
 8004b84:	189b      	adds	r3, r3, r2
 8004b86:	19db      	adds	r3, r3, r7
 8004b88:	2200      	movs	r2, #0
 8004b8a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b8e:	689a      	ldr	r2, [r3, #8]
 8004b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b92:	691b      	ldr	r3, [r3, #16]
 8004b94:	431a      	orrs	r2, r3
 8004b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b98:	695b      	ldr	r3, [r3, #20]
 8004b9a:	431a      	orrs	r2, r3
 8004b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b9e:	69db      	ldr	r3, [r3, #28]
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4ac1      	ldr	r2, [pc, #772]	@ (8004eb0 <UART_SetConfig+0x338>)
 8004bac:	4013      	ands	r3, r2
 8004bae:	0019      	movs	r1, r3
 8004bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004bb6:	430b      	orrs	r3, r1
 8004bb8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	4abc      	ldr	r2, [pc, #752]	@ (8004eb4 <UART_SetConfig+0x33c>)
 8004bc2:	4013      	ands	r3, r2
 8004bc4:	0018      	movs	r0, r3
 8004bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bc8:	68d9      	ldr	r1, [r3, #12]
 8004bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	0003      	movs	r3, r0
 8004bd0:	430b      	orrs	r3, r1
 8004bd2:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bd6:	699b      	ldr	r3, [r3, #24]
 8004bd8:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4ab6      	ldr	r2, [pc, #728]	@ (8004eb8 <UART_SetConfig+0x340>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d009      	beq.n	8004bf8 <UART_SetConfig+0x80>
 8004be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4ab4      	ldr	r2, [pc, #720]	@ (8004ebc <UART_SetConfig+0x344>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d004      	beq.n	8004bf8 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bf0:	6a1b      	ldr	r3, [r3, #32]
 8004bf2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	4ab0      	ldr	r2, [pc, #704]	@ (8004ec0 <UART_SetConfig+0x348>)
 8004c00:	4013      	ands	r3, r2
 8004c02:	0019      	movs	r1, r3
 8004c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c0a:	430b      	orrs	r3, r1
 8004c0c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c14:	220f      	movs	r2, #15
 8004c16:	4393      	bics	r3, r2
 8004c18:	0018      	movs	r0, r3
 8004c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c1c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	0003      	movs	r3, r0
 8004c24:	430b      	orrs	r3, r1
 8004c26:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4aa5      	ldr	r2, [pc, #660]	@ (8004ec4 <UART_SetConfig+0x34c>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d131      	bne.n	8004c96 <UART_SetConfig+0x11e>
 8004c32:	4ba5      	ldr	r3, [pc, #660]	@ (8004ec8 <UART_SetConfig+0x350>)
 8004c34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c36:	2203      	movs	r2, #3
 8004c38:	4013      	ands	r3, r2
 8004c3a:	2b03      	cmp	r3, #3
 8004c3c:	d01d      	beq.n	8004c7a <UART_SetConfig+0x102>
 8004c3e:	d823      	bhi.n	8004c88 <UART_SetConfig+0x110>
 8004c40:	2b02      	cmp	r3, #2
 8004c42:	d00c      	beq.n	8004c5e <UART_SetConfig+0xe6>
 8004c44:	d820      	bhi.n	8004c88 <UART_SetConfig+0x110>
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d002      	beq.n	8004c50 <UART_SetConfig+0xd8>
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d00e      	beq.n	8004c6c <UART_SetConfig+0xf4>
 8004c4e:	e01b      	b.n	8004c88 <UART_SetConfig+0x110>
 8004c50:	231b      	movs	r3, #27
 8004c52:	2220      	movs	r2, #32
 8004c54:	189b      	adds	r3, r3, r2
 8004c56:	19db      	adds	r3, r3, r7
 8004c58:	2200      	movs	r2, #0
 8004c5a:	701a      	strb	r2, [r3, #0]
 8004c5c:	e154      	b.n	8004f08 <UART_SetConfig+0x390>
 8004c5e:	231b      	movs	r3, #27
 8004c60:	2220      	movs	r2, #32
 8004c62:	189b      	adds	r3, r3, r2
 8004c64:	19db      	adds	r3, r3, r7
 8004c66:	2202      	movs	r2, #2
 8004c68:	701a      	strb	r2, [r3, #0]
 8004c6a:	e14d      	b.n	8004f08 <UART_SetConfig+0x390>
 8004c6c:	231b      	movs	r3, #27
 8004c6e:	2220      	movs	r2, #32
 8004c70:	189b      	adds	r3, r3, r2
 8004c72:	19db      	adds	r3, r3, r7
 8004c74:	2204      	movs	r2, #4
 8004c76:	701a      	strb	r2, [r3, #0]
 8004c78:	e146      	b.n	8004f08 <UART_SetConfig+0x390>
 8004c7a:	231b      	movs	r3, #27
 8004c7c:	2220      	movs	r2, #32
 8004c7e:	189b      	adds	r3, r3, r2
 8004c80:	19db      	adds	r3, r3, r7
 8004c82:	2208      	movs	r2, #8
 8004c84:	701a      	strb	r2, [r3, #0]
 8004c86:	e13f      	b.n	8004f08 <UART_SetConfig+0x390>
 8004c88:	231b      	movs	r3, #27
 8004c8a:	2220      	movs	r2, #32
 8004c8c:	189b      	adds	r3, r3, r2
 8004c8e:	19db      	adds	r3, r3, r7
 8004c90:	2210      	movs	r2, #16
 8004c92:	701a      	strb	r2, [r3, #0]
 8004c94:	e138      	b.n	8004f08 <UART_SetConfig+0x390>
 8004c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a8c      	ldr	r2, [pc, #560]	@ (8004ecc <UART_SetConfig+0x354>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d131      	bne.n	8004d04 <UART_SetConfig+0x18c>
 8004ca0:	4b89      	ldr	r3, [pc, #548]	@ (8004ec8 <UART_SetConfig+0x350>)
 8004ca2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ca4:	220c      	movs	r2, #12
 8004ca6:	4013      	ands	r3, r2
 8004ca8:	2b0c      	cmp	r3, #12
 8004caa:	d01d      	beq.n	8004ce8 <UART_SetConfig+0x170>
 8004cac:	d823      	bhi.n	8004cf6 <UART_SetConfig+0x17e>
 8004cae:	2b08      	cmp	r3, #8
 8004cb0:	d00c      	beq.n	8004ccc <UART_SetConfig+0x154>
 8004cb2:	d820      	bhi.n	8004cf6 <UART_SetConfig+0x17e>
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d002      	beq.n	8004cbe <UART_SetConfig+0x146>
 8004cb8:	2b04      	cmp	r3, #4
 8004cba:	d00e      	beq.n	8004cda <UART_SetConfig+0x162>
 8004cbc:	e01b      	b.n	8004cf6 <UART_SetConfig+0x17e>
 8004cbe:	231b      	movs	r3, #27
 8004cc0:	2220      	movs	r2, #32
 8004cc2:	189b      	adds	r3, r3, r2
 8004cc4:	19db      	adds	r3, r3, r7
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	701a      	strb	r2, [r3, #0]
 8004cca:	e11d      	b.n	8004f08 <UART_SetConfig+0x390>
 8004ccc:	231b      	movs	r3, #27
 8004cce:	2220      	movs	r2, #32
 8004cd0:	189b      	adds	r3, r3, r2
 8004cd2:	19db      	adds	r3, r3, r7
 8004cd4:	2202      	movs	r2, #2
 8004cd6:	701a      	strb	r2, [r3, #0]
 8004cd8:	e116      	b.n	8004f08 <UART_SetConfig+0x390>
 8004cda:	231b      	movs	r3, #27
 8004cdc:	2220      	movs	r2, #32
 8004cde:	189b      	adds	r3, r3, r2
 8004ce0:	19db      	adds	r3, r3, r7
 8004ce2:	2204      	movs	r2, #4
 8004ce4:	701a      	strb	r2, [r3, #0]
 8004ce6:	e10f      	b.n	8004f08 <UART_SetConfig+0x390>
 8004ce8:	231b      	movs	r3, #27
 8004cea:	2220      	movs	r2, #32
 8004cec:	189b      	adds	r3, r3, r2
 8004cee:	19db      	adds	r3, r3, r7
 8004cf0:	2208      	movs	r2, #8
 8004cf2:	701a      	strb	r2, [r3, #0]
 8004cf4:	e108      	b.n	8004f08 <UART_SetConfig+0x390>
 8004cf6:	231b      	movs	r3, #27
 8004cf8:	2220      	movs	r2, #32
 8004cfa:	189b      	adds	r3, r3, r2
 8004cfc:	19db      	adds	r3, r3, r7
 8004cfe:	2210      	movs	r2, #16
 8004d00:	701a      	strb	r2, [r3, #0]
 8004d02:	e101      	b.n	8004f08 <UART_SetConfig+0x390>
 8004d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a71      	ldr	r2, [pc, #452]	@ (8004ed0 <UART_SetConfig+0x358>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d131      	bne.n	8004d72 <UART_SetConfig+0x1fa>
 8004d0e:	4b6e      	ldr	r3, [pc, #440]	@ (8004ec8 <UART_SetConfig+0x350>)
 8004d10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d12:	2230      	movs	r2, #48	@ 0x30
 8004d14:	4013      	ands	r3, r2
 8004d16:	2b30      	cmp	r3, #48	@ 0x30
 8004d18:	d01d      	beq.n	8004d56 <UART_SetConfig+0x1de>
 8004d1a:	d823      	bhi.n	8004d64 <UART_SetConfig+0x1ec>
 8004d1c:	2b20      	cmp	r3, #32
 8004d1e:	d00c      	beq.n	8004d3a <UART_SetConfig+0x1c2>
 8004d20:	d820      	bhi.n	8004d64 <UART_SetConfig+0x1ec>
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d002      	beq.n	8004d2c <UART_SetConfig+0x1b4>
 8004d26:	2b10      	cmp	r3, #16
 8004d28:	d00e      	beq.n	8004d48 <UART_SetConfig+0x1d0>
 8004d2a:	e01b      	b.n	8004d64 <UART_SetConfig+0x1ec>
 8004d2c:	231b      	movs	r3, #27
 8004d2e:	2220      	movs	r2, #32
 8004d30:	189b      	adds	r3, r3, r2
 8004d32:	19db      	adds	r3, r3, r7
 8004d34:	2200      	movs	r2, #0
 8004d36:	701a      	strb	r2, [r3, #0]
 8004d38:	e0e6      	b.n	8004f08 <UART_SetConfig+0x390>
 8004d3a:	231b      	movs	r3, #27
 8004d3c:	2220      	movs	r2, #32
 8004d3e:	189b      	adds	r3, r3, r2
 8004d40:	19db      	adds	r3, r3, r7
 8004d42:	2202      	movs	r2, #2
 8004d44:	701a      	strb	r2, [r3, #0]
 8004d46:	e0df      	b.n	8004f08 <UART_SetConfig+0x390>
 8004d48:	231b      	movs	r3, #27
 8004d4a:	2220      	movs	r2, #32
 8004d4c:	189b      	adds	r3, r3, r2
 8004d4e:	19db      	adds	r3, r3, r7
 8004d50:	2204      	movs	r2, #4
 8004d52:	701a      	strb	r2, [r3, #0]
 8004d54:	e0d8      	b.n	8004f08 <UART_SetConfig+0x390>
 8004d56:	231b      	movs	r3, #27
 8004d58:	2220      	movs	r2, #32
 8004d5a:	189b      	adds	r3, r3, r2
 8004d5c:	19db      	adds	r3, r3, r7
 8004d5e:	2208      	movs	r2, #8
 8004d60:	701a      	strb	r2, [r3, #0]
 8004d62:	e0d1      	b.n	8004f08 <UART_SetConfig+0x390>
 8004d64:	231b      	movs	r3, #27
 8004d66:	2220      	movs	r2, #32
 8004d68:	189b      	adds	r3, r3, r2
 8004d6a:	19db      	adds	r3, r3, r7
 8004d6c:	2210      	movs	r2, #16
 8004d6e:	701a      	strb	r2, [r3, #0]
 8004d70:	e0ca      	b.n	8004f08 <UART_SetConfig+0x390>
 8004d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a57      	ldr	r2, [pc, #348]	@ (8004ed4 <UART_SetConfig+0x35c>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d106      	bne.n	8004d8a <UART_SetConfig+0x212>
 8004d7c:	231b      	movs	r3, #27
 8004d7e:	2220      	movs	r2, #32
 8004d80:	189b      	adds	r3, r3, r2
 8004d82:	19db      	adds	r3, r3, r7
 8004d84:	2200      	movs	r2, #0
 8004d86:	701a      	strb	r2, [r3, #0]
 8004d88:	e0be      	b.n	8004f08 <UART_SetConfig+0x390>
 8004d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a52      	ldr	r2, [pc, #328]	@ (8004ed8 <UART_SetConfig+0x360>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d106      	bne.n	8004da2 <UART_SetConfig+0x22a>
 8004d94:	231b      	movs	r3, #27
 8004d96:	2220      	movs	r2, #32
 8004d98:	189b      	adds	r3, r3, r2
 8004d9a:	19db      	adds	r3, r3, r7
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	701a      	strb	r2, [r3, #0]
 8004da0:	e0b2      	b.n	8004f08 <UART_SetConfig+0x390>
 8004da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a4d      	ldr	r2, [pc, #308]	@ (8004edc <UART_SetConfig+0x364>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d106      	bne.n	8004dba <UART_SetConfig+0x242>
 8004dac:	231b      	movs	r3, #27
 8004dae:	2220      	movs	r2, #32
 8004db0:	189b      	adds	r3, r3, r2
 8004db2:	19db      	adds	r3, r3, r7
 8004db4:	2200      	movs	r2, #0
 8004db6:	701a      	strb	r2, [r3, #0]
 8004db8:	e0a6      	b.n	8004f08 <UART_SetConfig+0x390>
 8004dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a3e      	ldr	r2, [pc, #248]	@ (8004eb8 <UART_SetConfig+0x340>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d13e      	bne.n	8004e42 <UART_SetConfig+0x2ca>
 8004dc4:	4b40      	ldr	r3, [pc, #256]	@ (8004ec8 <UART_SetConfig+0x350>)
 8004dc6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004dc8:	23c0      	movs	r3, #192	@ 0xc0
 8004dca:	011b      	lsls	r3, r3, #4
 8004dcc:	4013      	ands	r3, r2
 8004dce:	22c0      	movs	r2, #192	@ 0xc0
 8004dd0:	0112      	lsls	r2, r2, #4
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d027      	beq.n	8004e26 <UART_SetConfig+0x2ae>
 8004dd6:	22c0      	movs	r2, #192	@ 0xc0
 8004dd8:	0112      	lsls	r2, r2, #4
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d82a      	bhi.n	8004e34 <UART_SetConfig+0x2bc>
 8004dde:	2280      	movs	r2, #128	@ 0x80
 8004de0:	0112      	lsls	r2, r2, #4
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d011      	beq.n	8004e0a <UART_SetConfig+0x292>
 8004de6:	2280      	movs	r2, #128	@ 0x80
 8004de8:	0112      	lsls	r2, r2, #4
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d822      	bhi.n	8004e34 <UART_SetConfig+0x2bc>
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d004      	beq.n	8004dfc <UART_SetConfig+0x284>
 8004df2:	2280      	movs	r2, #128	@ 0x80
 8004df4:	00d2      	lsls	r2, r2, #3
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d00e      	beq.n	8004e18 <UART_SetConfig+0x2a0>
 8004dfa:	e01b      	b.n	8004e34 <UART_SetConfig+0x2bc>
 8004dfc:	231b      	movs	r3, #27
 8004dfe:	2220      	movs	r2, #32
 8004e00:	189b      	adds	r3, r3, r2
 8004e02:	19db      	adds	r3, r3, r7
 8004e04:	2200      	movs	r2, #0
 8004e06:	701a      	strb	r2, [r3, #0]
 8004e08:	e07e      	b.n	8004f08 <UART_SetConfig+0x390>
 8004e0a:	231b      	movs	r3, #27
 8004e0c:	2220      	movs	r2, #32
 8004e0e:	189b      	adds	r3, r3, r2
 8004e10:	19db      	adds	r3, r3, r7
 8004e12:	2202      	movs	r2, #2
 8004e14:	701a      	strb	r2, [r3, #0]
 8004e16:	e077      	b.n	8004f08 <UART_SetConfig+0x390>
 8004e18:	231b      	movs	r3, #27
 8004e1a:	2220      	movs	r2, #32
 8004e1c:	189b      	adds	r3, r3, r2
 8004e1e:	19db      	adds	r3, r3, r7
 8004e20:	2204      	movs	r2, #4
 8004e22:	701a      	strb	r2, [r3, #0]
 8004e24:	e070      	b.n	8004f08 <UART_SetConfig+0x390>
 8004e26:	231b      	movs	r3, #27
 8004e28:	2220      	movs	r2, #32
 8004e2a:	189b      	adds	r3, r3, r2
 8004e2c:	19db      	adds	r3, r3, r7
 8004e2e:	2208      	movs	r2, #8
 8004e30:	701a      	strb	r2, [r3, #0]
 8004e32:	e069      	b.n	8004f08 <UART_SetConfig+0x390>
 8004e34:	231b      	movs	r3, #27
 8004e36:	2220      	movs	r2, #32
 8004e38:	189b      	adds	r3, r3, r2
 8004e3a:	19db      	adds	r3, r3, r7
 8004e3c:	2210      	movs	r2, #16
 8004e3e:	701a      	strb	r2, [r3, #0]
 8004e40:	e062      	b.n	8004f08 <UART_SetConfig+0x390>
 8004e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a1d      	ldr	r2, [pc, #116]	@ (8004ebc <UART_SetConfig+0x344>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d157      	bne.n	8004efc <UART_SetConfig+0x384>
 8004e4c:	4b1e      	ldr	r3, [pc, #120]	@ (8004ec8 <UART_SetConfig+0x350>)
 8004e4e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004e50:	23c0      	movs	r3, #192	@ 0xc0
 8004e52:	009b      	lsls	r3, r3, #2
 8004e54:	4013      	ands	r3, r2
 8004e56:	22c0      	movs	r2, #192	@ 0xc0
 8004e58:	0092      	lsls	r2, r2, #2
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d040      	beq.n	8004ee0 <UART_SetConfig+0x368>
 8004e5e:	22c0      	movs	r2, #192	@ 0xc0
 8004e60:	0092      	lsls	r2, r2, #2
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d843      	bhi.n	8004eee <UART_SetConfig+0x376>
 8004e66:	2280      	movs	r2, #128	@ 0x80
 8004e68:	0092      	lsls	r2, r2, #2
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d011      	beq.n	8004e92 <UART_SetConfig+0x31a>
 8004e6e:	2280      	movs	r2, #128	@ 0x80
 8004e70:	0092      	lsls	r2, r2, #2
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d83b      	bhi.n	8004eee <UART_SetConfig+0x376>
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d004      	beq.n	8004e84 <UART_SetConfig+0x30c>
 8004e7a:	2280      	movs	r2, #128	@ 0x80
 8004e7c:	0052      	lsls	r2, r2, #1
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d00e      	beq.n	8004ea0 <UART_SetConfig+0x328>
 8004e82:	e034      	b.n	8004eee <UART_SetConfig+0x376>
 8004e84:	231b      	movs	r3, #27
 8004e86:	2220      	movs	r2, #32
 8004e88:	189b      	adds	r3, r3, r2
 8004e8a:	19db      	adds	r3, r3, r7
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	701a      	strb	r2, [r3, #0]
 8004e90:	e03a      	b.n	8004f08 <UART_SetConfig+0x390>
 8004e92:	231b      	movs	r3, #27
 8004e94:	2220      	movs	r2, #32
 8004e96:	189b      	adds	r3, r3, r2
 8004e98:	19db      	adds	r3, r3, r7
 8004e9a:	2202      	movs	r2, #2
 8004e9c:	701a      	strb	r2, [r3, #0]
 8004e9e:	e033      	b.n	8004f08 <UART_SetConfig+0x390>
 8004ea0:	231b      	movs	r3, #27
 8004ea2:	2220      	movs	r2, #32
 8004ea4:	189b      	adds	r3, r3, r2
 8004ea6:	19db      	adds	r3, r3, r7
 8004ea8:	2204      	movs	r2, #4
 8004eaa:	701a      	strb	r2, [r3, #0]
 8004eac:	e02c      	b.n	8004f08 <UART_SetConfig+0x390>
 8004eae:	46c0      	nop			@ (mov r8, r8)
 8004eb0:	cfff69f3 	.word	0xcfff69f3
 8004eb4:	ffffcfff 	.word	0xffffcfff
 8004eb8:	40008000 	.word	0x40008000
 8004ebc:	40008400 	.word	0x40008400
 8004ec0:	11fff4ff 	.word	0x11fff4ff
 8004ec4:	40013800 	.word	0x40013800
 8004ec8:	40021000 	.word	0x40021000
 8004ecc:	40004400 	.word	0x40004400
 8004ed0:	40004800 	.word	0x40004800
 8004ed4:	40004c00 	.word	0x40004c00
 8004ed8:	40005000 	.word	0x40005000
 8004edc:	40013c00 	.word	0x40013c00
 8004ee0:	231b      	movs	r3, #27
 8004ee2:	2220      	movs	r2, #32
 8004ee4:	189b      	adds	r3, r3, r2
 8004ee6:	19db      	adds	r3, r3, r7
 8004ee8:	2208      	movs	r2, #8
 8004eea:	701a      	strb	r2, [r3, #0]
 8004eec:	e00c      	b.n	8004f08 <UART_SetConfig+0x390>
 8004eee:	231b      	movs	r3, #27
 8004ef0:	2220      	movs	r2, #32
 8004ef2:	189b      	adds	r3, r3, r2
 8004ef4:	19db      	adds	r3, r3, r7
 8004ef6:	2210      	movs	r2, #16
 8004ef8:	701a      	strb	r2, [r3, #0]
 8004efa:	e005      	b.n	8004f08 <UART_SetConfig+0x390>
 8004efc:	231b      	movs	r3, #27
 8004efe:	2220      	movs	r2, #32
 8004f00:	189b      	adds	r3, r3, r2
 8004f02:	19db      	adds	r3, r3, r7
 8004f04:	2210      	movs	r2, #16
 8004f06:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4ac1      	ldr	r2, [pc, #772]	@ (8005214 <UART_SetConfig+0x69c>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d005      	beq.n	8004f1e <UART_SetConfig+0x3a6>
 8004f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4ac0      	ldr	r2, [pc, #768]	@ (8005218 <UART_SetConfig+0x6a0>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d000      	beq.n	8004f1e <UART_SetConfig+0x3a6>
 8004f1c:	e093      	b.n	8005046 <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004f1e:	231b      	movs	r3, #27
 8004f20:	2220      	movs	r2, #32
 8004f22:	189b      	adds	r3, r3, r2
 8004f24:	19db      	adds	r3, r3, r7
 8004f26:	781b      	ldrb	r3, [r3, #0]
 8004f28:	2b08      	cmp	r3, #8
 8004f2a:	d015      	beq.n	8004f58 <UART_SetConfig+0x3e0>
 8004f2c:	dc18      	bgt.n	8004f60 <UART_SetConfig+0x3e8>
 8004f2e:	2b04      	cmp	r3, #4
 8004f30:	d00d      	beq.n	8004f4e <UART_SetConfig+0x3d6>
 8004f32:	dc15      	bgt.n	8004f60 <UART_SetConfig+0x3e8>
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d002      	beq.n	8004f3e <UART_SetConfig+0x3c6>
 8004f38:	2b02      	cmp	r3, #2
 8004f3a:	d005      	beq.n	8004f48 <UART_SetConfig+0x3d0>
 8004f3c:	e010      	b.n	8004f60 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f3e:	f7fe fe8b 	bl	8003c58 <HAL_RCC_GetPCLK1Freq>
 8004f42:	0003      	movs	r3, r0
 8004f44:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004f46:	e014      	b.n	8004f72 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f48:	4bb4      	ldr	r3, [pc, #720]	@ (800521c <UART_SetConfig+0x6a4>)
 8004f4a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004f4c:	e011      	b.n	8004f72 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f4e:	f7fe fdf7 	bl	8003b40 <HAL_RCC_GetSysClockFreq>
 8004f52:	0003      	movs	r3, r0
 8004f54:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004f56:	e00c      	b.n	8004f72 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f58:	2380      	movs	r3, #128	@ 0x80
 8004f5a:	021b      	lsls	r3, r3, #8
 8004f5c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004f5e:	e008      	b.n	8004f72 <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 8004f60:	2300      	movs	r3, #0
 8004f62:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8004f64:	231a      	movs	r3, #26
 8004f66:	2220      	movs	r2, #32
 8004f68:	189b      	adds	r3, r3, r2
 8004f6a:	19db      	adds	r3, r3, r7
 8004f6c:	2201      	movs	r2, #1
 8004f6e:	701a      	strb	r2, [r3, #0]
        break;
 8004f70:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004f72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d100      	bne.n	8004f7a <UART_SetConfig+0x402>
 8004f78:	e135      	b.n	80051e6 <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f7c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004f7e:	4ba8      	ldr	r3, [pc, #672]	@ (8005220 <UART_SetConfig+0x6a8>)
 8004f80:	0052      	lsls	r2, r2, #1
 8004f82:	5ad3      	ldrh	r3, [r2, r3]
 8004f84:	0019      	movs	r1, r3
 8004f86:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004f88:	f7fb f8c6 	bl	8000118 <__udivsi3>
 8004f8c:	0003      	movs	r3, r0
 8004f8e:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f92:	685a      	ldr	r2, [r3, #4]
 8004f94:	0013      	movs	r3, r2
 8004f96:	005b      	lsls	r3, r3, #1
 8004f98:	189b      	adds	r3, r3, r2
 8004f9a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d305      	bcc.n	8004fac <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004fa6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d906      	bls.n	8004fba <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 8004fac:	231a      	movs	r3, #26
 8004fae:	2220      	movs	r2, #32
 8004fb0:	189b      	adds	r3, r3, r2
 8004fb2:	19db      	adds	r3, r3, r7
 8004fb4:	2201      	movs	r2, #1
 8004fb6:	701a      	strb	r2, [r3, #0]
 8004fb8:	e044      	b.n	8005044 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004fba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fbc:	61bb      	str	r3, [r7, #24]
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	61fb      	str	r3, [r7, #28]
 8004fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fc4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004fc6:	4b96      	ldr	r3, [pc, #600]	@ (8005220 <UART_SetConfig+0x6a8>)
 8004fc8:	0052      	lsls	r2, r2, #1
 8004fca:	5ad3      	ldrh	r3, [r2, r3]
 8004fcc:	613b      	str	r3, [r7, #16]
 8004fce:	2300      	movs	r3, #0
 8004fd0:	617b      	str	r3, [r7, #20]
 8004fd2:	693a      	ldr	r2, [r7, #16]
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	69b8      	ldr	r0, [r7, #24]
 8004fd8:	69f9      	ldr	r1, [r7, #28]
 8004fda:	f7fb fa13 	bl	8000404 <__aeabi_uldivmod>
 8004fde:	0002      	movs	r2, r0
 8004fe0:	000b      	movs	r3, r1
 8004fe2:	0e11      	lsrs	r1, r2, #24
 8004fe4:	021d      	lsls	r5, r3, #8
 8004fe6:	430d      	orrs	r5, r1
 8004fe8:	0214      	lsls	r4, r2, #8
 8004fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	085b      	lsrs	r3, r3, #1
 8004ff0:	60bb      	str	r3, [r7, #8]
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	60fb      	str	r3, [r7, #12]
 8004ff6:	68b8      	ldr	r0, [r7, #8]
 8004ff8:	68f9      	ldr	r1, [r7, #12]
 8004ffa:	1900      	adds	r0, r0, r4
 8004ffc:	4169      	adcs	r1, r5
 8004ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	603b      	str	r3, [r7, #0]
 8005004:	2300      	movs	r3, #0
 8005006:	607b      	str	r3, [r7, #4]
 8005008:	683a      	ldr	r2, [r7, #0]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f7fb f9fa 	bl	8000404 <__aeabi_uldivmod>
 8005010:	0002      	movs	r2, r0
 8005012:	000b      	movs	r3, r1
 8005014:	0013      	movs	r3, r2
 8005016:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005018:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800501a:	23c0      	movs	r3, #192	@ 0xc0
 800501c:	009b      	lsls	r3, r3, #2
 800501e:	429a      	cmp	r2, r3
 8005020:	d309      	bcc.n	8005036 <UART_SetConfig+0x4be>
 8005022:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005024:	2380      	movs	r3, #128	@ 0x80
 8005026:	035b      	lsls	r3, r3, #13
 8005028:	429a      	cmp	r2, r3
 800502a:	d204      	bcs.n	8005036 <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 800502c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005032:	60da      	str	r2, [r3, #12]
 8005034:	e006      	b.n	8005044 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 8005036:	231a      	movs	r3, #26
 8005038:	2220      	movs	r2, #32
 800503a:	189b      	adds	r3, r3, r2
 800503c:	19db      	adds	r3, r3, r7
 800503e:	2201      	movs	r2, #1
 8005040:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 8005042:	e0d0      	b.n	80051e6 <UART_SetConfig+0x66e>
 8005044:	e0cf      	b.n	80051e6 <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005048:	69da      	ldr	r2, [r3, #28]
 800504a:	2380      	movs	r3, #128	@ 0x80
 800504c:	021b      	lsls	r3, r3, #8
 800504e:	429a      	cmp	r2, r3
 8005050:	d000      	beq.n	8005054 <UART_SetConfig+0x4dc>
 8005052:	e070      	b.n	8005136 <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 8005054:	231b      	movs	r3, #27
 8005056:	2220      	movs	r2, #32
 8005058:	189b      	adds	r3, r3, r2
 800505a:	19db      	adds	r3, r3, r7
 800505c:	781b      	ldrb	r3, [r3, #0]
 800505e:	2b08      	cmp	r3, #8
 8005060:	d015      	beq.n	800508e <UART_SetConfig+0x516>
 8005062:	dc18      	bgt.n	8005096 <UART_SetConfig+0x51e>
 8005064:	2b04      	cmp	r3, #4
 8005066:	d00d      	beq.n	8005084 <UART_SetConfig+0x50c>
 8005068:	dc15      	bgt.n	8005096 <UART_SetConfig+0x51e>
 800506a:	2b00      	cmp	r3, #0
 800506c:	d002      	beq.n	8005074 <UART_SetConfig+0x4fc>
 800506e:	2b02      	cmp	r3, #2
 8005070:	d005      	beq.n	800507e <UART_SetConfig+0x506>
 8005072:	e010      	b.n	8005096 <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005074:	f7fe fdf0 	bl	8003c58 <HAL_RCC_GetPCLK1Freq>
 8005078:	0003      	movs	r3, r0
 800507a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800507c:	e014      	b.n	80050a8 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800507e:	4b67      	ldr	r3, [pc, #412]	@ (800521c <UART_SetConfig+0x6a4>)
 8005080:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005082:	e011      	b.n	80050a8 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005084:	f7fe fd5c 	bl	8003b40 <HAL_RCC_GetSysClockFreq>
 8005088:	0003      	movs	r3, r0
 800508a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800508c:	e00c      	b.n	80050a8 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800508e:	2380      	movs	r3, #128	@ 0x80
 8005090:	021b      	lsls	r3, r3, #8
 8005092:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005094:	e008      	b.n	80050a8 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 8005096:	2300      	movs	r3, #0
 8005098:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800509a:	231a      	movs	r3, #26
 800509c:	2220      	movs	r2, #32
 800509e:	189b      	adds	r3, r3, r2
 80050a0:	19db      	adds	r3, r3, r7
 80050a2:	2201      	movs	r2, #1
 80050a4:	701a      	strb	r2, [r3, #0]
        break;
 80050a6:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80050a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d100      	bne.n	80050b0 <UART_SetConfig+0x538>
 80050ae:	e09a      	b.n	80051e6 <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80050b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050b2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80050b4:	4b5a      	ldr	r3, [pc, #360]	@ (8005220 <UART_SetConfig+0x6a8>)
 80050b6:	0052      	lsls	r2, r2, #1
 80050b8:	5ad3      	ldrh	r3, [r2, r3]
 80050ba:	0019      	movs	r1, r3
 80050bc:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80050be:	f7fb f82b 	bl	8000118 <__udivsi3>
 80050c2:	0003      	movs	r3, r0
 80050c4:	005a      	lsls	r2, r3, #1
 80050c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	085b      	lsrs	r3, r3, #1
 80050cc:	18d2      	adds	r2, r2, r3
 80050ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	0019      	movs	r1, r3
 80050d4:	0010      	movs	r0, r2
 80050d6:	f7fb f81f 	bl	8000118 <__udivsi3>
 80050da:	0003      	movs	r3, r0
 80050dc:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050e0:	2b0f      	cmp	r3, #15
 80050e2:	d921      	bls.n	8005128 <UART_SetConfig+0x5b0>
 80050e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80050e6:	2380      	movs	r3, #128	@ 0x80
 80050e8:	025b      	lsls	r3, r3, #9
 80050ea:	429a      	cmp	r2, r3
 80050ec:	d21c      	bcs.n	8005128 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80050ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050f0:	b29a      	uxth	r2, r3
 80050f2:	200e      	movs	r0, #14
 80050f4:	2420      	movs	r4, #32
 80050f6:	1903      	adds	r3, r0, r4
 80050f8:	19db      	adds	r3, r3, r7
 80050fa:	210f      	movs	r1, #15
 80050fc:	438a      	bics	r2, r1
 80050fe:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005102:	085b      	lsrs	r3, r3, #1
 8005104:	b29b      	uxth	r3, r3
 8005106:	2207      	movs	r2, #7
 8005108:	4013      	ands	r3, r2
 800510a:	b299      	uxth	r1, r3
 800510c:	1903      	adds	r3, r0, r4
 800510e:	19db      	adds	r3, r3, r7
 8005110:	1902      	adds	r2, r0, r4
 8005112:	19d2      	adds	r2, r2, r7
 8005114:	8812      	ldrh	r2, [r2, #0]
 8005116:	430a      	orrs	r2, r1
 8005118:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800511a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	1902      	adds	r2, r0, r4
 8005120:	19d2      	adds	r2, r2, r7
 8005122:	8812      	ldrh	r2, [r2, #0]
 8005124:	60da      	str	r2, [r3, #12]
 8005126:	e05e      	b.n	80051e6 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8005128:	231a      	movs	r3, #26
 800512a:	2220      	movs	r2, #32
 800512c:	189b      	adds	r3, r3, r2
 800512e:	19db      	adds	r3, r3, r7
 8005130:	2201      	movs	r2, #1
 8005132:	701a      	strb	r2, [r3, #0]
 8005134:	e057      	b.n	80051e6 <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005136:	231b      	movs	r3, #27
 8005138:	2220      	movs	r2, #32
 800513a:	189b      	adds	r3, r3, r2
 800513c:	19db      	adds	r3, r3, r7
 800513e:	781b      	ldrb	r3, [r3, #0]
 8005140:	2b08      	cmp	r3, #8
 8005142:	d015      	beq.n	8005170 <UART_SetConfig+0x5f8>
 8005144:	dc18      	bgt.n	8005178 <UART_SetConfig+0x600>
 8005146:	2b04      	cmp	r3, #4
 8005148:	d00d      	beq.n	8005166 <UART_SetConfig+0x5ee>
 800514a:	dc15      	bgt.n	8005178 <UART_SetConfig+0x600>
 800514c:	2b00      	cmp	r3, #0
 800514e:	d002      	beq.n	8005156 <UART_SetConfig+0x5de>
 8005150:	2b02      	cmp	r3, #2
 8005152:	d005      	beq.n	8005160 <UART_SetConfig+0x5e8>
 8005154:	e010      	b.n	8005178 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005156:	f7fe fd7f 	bl	8003c58 <HAL_RCC_GetPCLK1Freq>
 800515a:	0003      	movs	r3, r0
 800515c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800515e:	e014      	b.n	800518a <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005160:	4b2e      	ldr	r3, [pc, #184]	@ (800521c <UART_SetConfig+0x6a4>)
 8005162:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005164:	e011      	b.n	800518a <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005166:	f7fe fceb 	bl	8003b40 <HAL_RCC_GetSysClockFreq>
 800516a:	0003      	movs	r3, r0
 800516c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800516e:	e00c      	b.n	800518a <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005170:	2380      	movs	r3, #128	@ 0x80
 8005172:	021b      	lsls	r3, r3, #8
 8005174:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005176:	e008      	b.n	800518a <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 8005178:	2300      	movs	r3, #0
 800517a:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800517c:	231a      	movs	r3, #26
 800517e:	2220      	movs	r2, #32
 8005180:	189b      	adds	r3, r3, r2
 8005182:	19db      	adds	r3, r3, r7
 8005184:	2201      	movs	r2, #1
 8005186:	701a      	strb	r2, [r3, #0]
        break;
 8005188:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800518a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800518c:	2b00      	cmp	r3, #0
 800518e:	d02a      	beq.n	80051e6 <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005192:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005194:	4b22      	ldr	r3, [pc, #136]	@ (8005220 <UART_SetConfig+0x6a8>)
 8005196:	0052      	lsls	r2, r2, #1
 8005198:	5ad3      	ldrh	r3, [r2, r3]
 800519a:	0019      	movs	r1, r3
 800519c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800519e:	f7fa ffbb 	bl	8000118 <__udivsi3>
 80051a2:	0003      	movs	r3, r0
 80051a4:	001a      	movs	r2, r3
 80051a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	085b      	lsrs	r3, r3, #1
 80051ac:	18d2      	adds	r2, r2, r3
 80051ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	0019      	movs	r1, r3
 80051b4:	0010      	movs	r0, r2
 80051b6:	f7fa ffaf 	bl	8000118 <__udivsi3>
 80051ba:	0003      	movs	r3, r0
 80051bc:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051c0:	2b0f      	cmp	r3, #15
 80051c2:	d90a      	bls.n	80051da <UART_SetConfig+0x662>
 80051c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051c6:	2380      	movs	r3, #128	@ 0x80
 80051c8:	025b      	lsls	r3, r3, #9
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d205      	bcs.n	80051da <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80051ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051d0:	b29a      	uxth	r2, r3
 80051d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	60da      	str	r2, [r3, #12]
 80051d8:	e005      	b.n	80051e6 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 80051da:	231a      	movs	r3, #26
 80051dc:	2220      	movs	r2, #32
 80051de:	189b      	adds	r3, r3, r2
 80051e0:	19db      	adds	r3, r3, r7
 80051e2:	2201      	movs	r2, #1
 80051e4:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80051e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051e8:	226a      	movs	r2, #106	@ 0x6a
 80051ea:	2101      	movs	r1, #1
 80051ec:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80051ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051f0:	2268      	movs	r2, #104	@ 0x68
 80051f2:	2101      	movs	r1, #1
 80051f4:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80051f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051f8:	2200      	movs	r2, #0
 80051fa:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80051fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051fe:	2200      	movs	r2, #0
 8005200:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005202:	231a      	movs	r3, #26
 8005204:	2220      	movs	r2, #32
 8005206:	189b      	adds	r3, r3, r2
 8005208:	19db      	adds	r3, r3, r7
 800520a:	781b      	ldrb	r3, [r3, #0]
}
 800520c:	0018      	movs	r0, r3
 800520e:	46bd      	mov	sp, r7
 8005210:	b010      	add	sp, #64	@ 0x40
 8005212:	bdb0      	pop	{r4, r5, r7, pc}
 8005214:	40008000 	.word	0x40008000
 8005218:	40008400 	.word	0x40008400
 800521c:	00f42400 	.word	0x00f42400
 8005220:	08007290 	.word	0x08007290

08005224 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b082      	sub	sp, #8
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005230:	2208      	movs	r2, #8
 8005232:	4013      	ands	r3, r2
 8005234:	d00b      	beq.n	800524e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	4a4a      	ldr	r2, [pc, #296]	@ (8005368 <UART_AdvFeatureConfig+0x144>)
 800523e:	4013      	ands	r3, r2
 8005240:	0019      	movs	r1, r3
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	430a      	orrs	r2, r1
 800524c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005252:	2201      	movs	r2, #1
 8005254:	4013      	ands	r3, r2
 8005256:	d00b      	beq.n	8005270 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	4a43      	ldr	r2, [pc, #268]	@ (800536c <UART_AdvFeatureConfig+0x148>)
 8005260:	4013      	ands	r3, r2
 8005262:	0019      	movs	r1, r3
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	430a      	orrs	r2, r1
 800526e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005274:	2202      	movs	r2, #2
 8005276:	4013      	ands	r3, r2
 8005278:	d00b      	beq.n	8005292 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	4a3b      	ldr	r2, [pc, #236]	@ (8005370 <UART_AdvFeatureConfig+0x14c>)
 8005282:	4013      	ands	r3, r2
 8005284:	0019      	movs	r1, r3
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	430a      	orrs	r2, r1
 8005290:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005296:	2204      	movs	r2, #4
 8005298:	4013      	ands	r3, r2
 800529a:	d00b      	beq.n	80052b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	4a34      	ldr	r2, [pc, #208]	@ (8005374 <UART_AdvFeatureConfig+0x150>)
 80052a4:	4013      	ands	r3, r2
 80052a6:	0019      	movs	r1, r3
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	430a      	orrs	r2, r1
 80052b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052b8:	2210      	movs	r2, #16
 80052ba:	4013      	ands	r3, r2
 80052bc:	d00b      	beq.n	80052d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	4a2c      	ldr	r2, [pc, #176]	@ (8005378 <UART_AdvFeatureConfig+0x154>)
 80052c6:	4013      	ands	r3, r2
 80052c8:	0019      	movs	r1, r3
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	430a      	orrs	r2, r1
 80052d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052da:	2220      	movs	r2, #32
 80052dc:	4013      	ands	r3, r2
 80052de:	d00b      	beq.n	80052f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	4a25      	ldr	r2, [pc, #148]	@ (800537c <UART_AdvFeatureConfig+0x158>)
 80052e8:	4013      	ands	r3, r2
 80052ea:	0019      	movs	r1, r3
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	430a      	orrs	r2, r1
 80052f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052fc:	2240      	movs	r2, #64	@ 0x40
 80052fe:	4013      	ands	r3, r2
 8005300:	d01d      	beq.n	800533e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	4a1d      	ldr	r2, [pc, #116]	@ (8005380 <UART_AdvFeatureConfig+0x15c>)
 800530a:	4013      	ands	r3, r2
 800530c:	0019      	movs	r1, r3
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	430a      	orrs	r2, r1
 8005318:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800531e:	2380      	movs	r3, #128	@ 0x80
 8005320:	035b      	lsls	r3, r3, #13
 8005322:	429a      	cmp	r2, r3
 8005324:	d10b      	bne.n	800533e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	4a15      	ldr	r2, [pc, #84]	@ (8005384 <UART_AdvFeatureConfig+0x160>)
 800532e:	4013      	ands	r3, r2
 8005330:	0019      	movs	r1, r3
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	430a      	orrs	r2, r1
 800533c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005342:	2280      	movs	r2, #128	@ 0x80
 8005344:	4013      	ands	r3, r2
 8005346:	d00b      	beq.n	8005360 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	4a0e      	ldr	r2, [pc, #56]	@ (8005388 <UART_AdvFeatureConfig+0x164>)
 8005350:	4013      	ands	r3, r2
 8005352:	0019      	movs	r1, r3
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	430a      	orrs	r2, r1
 800535e:	605a      	str	r2, [r3, #4]
  }
}
 8005360:	46c0      	nop			@ (mov r8, r8)
 8005362:	46bd      	mov	sp, r7
 8005364:	b002      	add	sp, #8
 8005366:	bd80      	pop	{r7, pc}
 8005368:	ffff7fff 	.word	0xffff7fff
 800536c:	fffdffff 	.word	0xfffdffff
 8005370:	fffeffff 	.word	0xfffeffff
 8005374:	fffbffff 	.word	0xfffbffff
 8005378:	ffffefff 	.word	0xffffefff
 800537c:	ffffdfff 	.word	0xffffdfff
 8005380:	ffefffff 	.word	0xffefffff
 8005384:	ff9fffff 	.word	0xff9fffff
 8005388:	fff7ffff 	.word	0xfff7ffff

0800538c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b092      	sub	sp, #72	@ 0x48
 8005390:	af02      	add	r7, sp, #8
 8005392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2290      	movs	r2, #144	@ 0x90
 8005398:	2100      	movs	r1, #0
 800539a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800539c:	f7fc fbfe 	bl	8001b9c <HAL_GetTick>
 80053a0:	0003      	movs	r3, r0
 80053a2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	2208      	movs	r2, #8
 80053ac:	4013      	ands	r3, r2
 80053ae:	2b08      	cmp	r3, #8
 80053b0:	d12d      	bne.n	800540e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053b4:	2280      	movs	r2, #128	@ 0x80
 80053b6:	0391      	lsls	r1, r2, #14
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	4a47      	ldr	r2, [pc, #284]	@ (80054d8 <UART_CheckIdleState+0x14c>)
 80053bc:	9200      	str	r2, [sp, #0]
 80053be:	2200      	movs	r2, #0
 80053c0:	f000 f88e 	bl	80054e0 <UART_WaitOnFlagUntilTimeout>
 80053c4:	1e03      	subs	r3, r0, #0
 80053c6:	d022      	beq.n	800540e <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053c8:	f3ef 8310 	mrs	r3, PRIMASK
 80053cc:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80053ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80053d0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80053d2:	2301      	movs	r3, #1
 80053d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053d8:	f383 8810 	msr	PRIMASK, r3
}
 80053dc:	46c0      	nop			@ (mov r8, r8)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	2180      	movs	r1, #128	@ 0x80
 80053ea:	438a      	bics	r2, r1
 80053ec:	601a      	str	r2, [r3, #0]
 80053ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053f4:	f383 8810 	msr	PRIMASK, r3
}
 80053f8:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2288      	movs	r2, #136	@ 0x88
 80053fe:	2120      	movs	r1, #32
 8005400:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2284      	movs	r2, #132	@ 0x84
 8005406:	2100      	movs	r1, #0
 8005408:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800540a:	2303      	movs	r3, #3
 800540c:	e060      	b.n	80054d0 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	2204      	movs	r2, #4
 8005416:	4013      	ands	r3, r2
 8005418:	2b04      	cmp	r3, #4
 800541a:	d146      	bne.n	80054aa <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800541c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800541e:	2280      	movs	r2, #128	@ 0x80
 8005420:	03d1      	lsls	r1, r2, #15
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	4a2c      	ldr	r2, [pc, #176]	@ (80054d8 <UART_CheckIdleState+0x14c>)
 8005426:	9200      	str	r2, [sp, #0]
 8005428:	2200      	movs	r2, #0
 800542a:	f000 f859 	bl	80054e0 <UART_WaitOnFlagUntilTimeout>
 800542e:	1e03      	subs	r3, r0, #0
 8005430:	d03b      	beq.n	80054aa <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005432:	f3ef 8310 	mrs	r3, PRIMASK
 8005436:	60fb      	str	r3, [r7, #12]
  return(result);
 8005438:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800543a:	637b      	str	r3, [r7, #52]	@ 0x34
 800543c:	2301      	movs	r3, #1
 800543e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	f383 8810 	msr	PRIMASK, r3
}
 8005446:	46c0      	nop			@ (mov r8, r8)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4922      	ldr	r1, [pc, #136]	@ (80054dc <UART_CheckIdleState+0x150>)
 8005454:	400a      	ands	r2, r1
 8005456:	601a      	str	r2, [r3, #0]
 8005458:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800545a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	f383 8810 	msr	PRIMASK, r3
}
 8005462:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005464:	f3ef 8310 	mrs	r3, PRIMASK
 8005468:	61bb      	str	r3, [r7, #24]
  return(result);
 800546a:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800546c:	633b      	str	r3, [r7, #48]	@ 0x30
 800546e:	2301      	movs	r3, #1
 8005470:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005472:	69fb      	ldr	r3, [r7, #28]
 8005474:	f383 8810 	msr	PRIMASK, r3
}
 8005478:	46c0      	nop			@ (mov r8, r8)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	689a      	ldr	r2, [r3, #8]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	2101      	movs	r1, #1
 8005486:	438a      	bics	r2, r1
 8005488:	609a      	str	r2, [r3, #8]
 800548a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800548c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800548e:	6a3b      	ldr	r3, [r7, #32]
 8005490:	f383 8810 	msr	PRIMASK, r3
}
 8005494:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	228c      	movs	r2, #140	@ 0x8c
 800549a:	2120      	movs	r1, #32
 800549c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2284      	movs	r2, #132	@ 0x84
 80054a2:	2100      	movs	r1, #0
 80054a4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054a6:	2303      	movs	r3, #3
 80054a8:	e012      	b.n	80054d0 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2288      	movs	r2, #136	@ 0x88
 80054ae:	2120      	movs	r1, #32
 80054b0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	228c      	movs	r2, #140	@ 0x8c
 80054b6:	2120      	movs	r1, #32
 80054b8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2200      	movs	r2, #0
 80054be:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2200      	movs	r2, #0
 80054c4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2284      	movs	r2, #132	@ 0x84
 80054ca:	2100      	movs	r1, #0
 80054cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80054ce:	2300      	movs	r3, #0
}
 80054d0:	0018      	movs	r0, r3
 80054d2:	46bd      	mov	sp, r7
 80054d4:	b010      	add	sp, #64	@ 0x40
 80054d6:	bd80      	pop	{r7, pc}
 80054d8:	01ffffff 	.word	0x01ffffff
 80054dc:	fffffedf 	.word	0xfffffedf

080054e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b084      	sub	sp, #16
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	60f8      	str	r0, [r7, #12]
 80054e8:	60b9      	str	r1, [r7, #8]
 80054ea:	603b      	str	r3, [r7, #0]
 80054ec:	1dfb      	adds	r3, r7, #7
 80054ee:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054f0:	e051      	b.n	8005596 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054f2:	69bb      	ldr	r3, [r7, #24]
 80054f4:	3301      	adds	r3, #1
 80054f6:	d04e      	beq.n	8005596 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054f8:	f7fc fb50 	bl	8001b9c <HAL_GetTick>
 80054fc:	0002      	movs	r2, r0
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	1ad3      	subs	r3, r2, r3
 8005502:	69ba      	ldr	r2, [r7, #24]
 8005504:	429a      	cmp	r2, r3
 8005506:	d302      	bcc.n	800550e <UART_WaitOnFlagUntilTimeout+0x2e>
 8005508:	69bb      	ldr	r3, [r7, #24]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d101      	bne.n	8005512 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800550e:	2303      	movs	r3, #3
 8005510:	e051      	b.n	80055b6 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	2204      	movs	r2, #4
 800551a:	4013      	ands	r3, r2
 800551c:	d03b      	beq.n	8005596 <UART_WaitOnFlagUntilTimeout+0xb6>
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	2b80      	cmp	r3, #128	@ 0x80
 8005522:	d038      	beq.n	8005596 <UART_WaitOnFlagUntilTimeout+0xb6>
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	2b40      	cmp	r3, #64	@ 0x40
 8005528:	d035      	beq.n	8005596 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	69db      	ldr	r3, [r3, #28]
 8005530:	2208      	movs	r2, #8
 8005532:	4013      	ands	r3, r2
 8005534:	2b08      	cmp	r3, #8
 8005536:	d111      	bne.n	800555c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	2208      	movs	r2, #8
 800553e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	0018      	movs	r0, r3
 8005544:	f000 f922 	bl	800578c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2290      	movs	r2, #144	@ 0x90
 800554c:	2108      	movs	r1, #8
 800554e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2284      	movs	r2, #132	@ 0x84
 8005554:	2100      	movs	r1, #0
 8005556:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005558:	2301      	movs	r3, #1
 800555a:	e02c      	b.n	80055b6 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	69da      	ldr	r2, [r3, #28]
 8005562:	2380      	movs	r3, #128	@ 0x80
 8005564:	011b      	lsls	r3, r3, #4
 8005566:	401a      	ands	r2, r3
 8005568:	2380      	movs	r3, #128	@ 0x80
 800556a:	011b      	lsls	r3, r3, #4
 800556c:	429a      	cmp	r2, r3
 800556e:	d112      	bne.n	8005596 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	2280      	movs	r2, #128	@ 0x80
 8005576:	0112      	lsls	r2, r2, #4
 8005578:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	0018      	movs	r0, r3
 800557e:	f000 f905 	bl	800578c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2290      	movs	r2, #144	@ 0x90
 8005586:	2120      	movs	r1, #32
 8005588:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2284      	movs	r2, #132	@ 0x84
 800558e:	2100      	movs	r1, #0
 8005590:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005592:	2303      	movs	r3, #3
 8005594:	e00f      	b.n	80055b6 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	69db      	ldr	r3, [r3, #28]
 800559c:	68ba      	ldr	r2, [r7, #8]
 800559e:	4013      	ands	r3, r2
 80055a0:	68ba      	ldr	r2, [r7, #8]
 80055a2:	1ad3      	subs	r3, r2, r3
 80055a4:	425a      	negs	r2, r3
 80055a6:	4153      	adcs	r3, r2
 80055a8:	b2db      	uxtb	r3, r3
 80055aa:	001a      	movs	r2, r3
 80055ac:	1dfb      	adds	r3, r7, #7
 80055ae:	781b      	ldrb	r3, [r3, #0]
 80055b0:	429a      	cmp	r2, r3
 80055b2:	d09e      	beq.n	80054f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80055b4:	2300      	movs	r3, #0
}
 80055b6:	0018      	movs	r0, r3
 80055b8:	46bd      	mov	sp, r7
 80055ba:	b004      	add	sp, #16
 80055bc:	bd80      	pop	{r7, pc}
	...

080055c0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b090      	sub	sp, #64	@ 0x40
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	60f8      	str	r0, [r7, #12]
 80055c8:	60b9      	str	r1, [r7, #8]
 80055ca:	1dbb      	adds	r3, r7, #6
 80055cc:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	68ba      	ldr	r2, [r7, #8]
 80055d2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	1dba      	adds	r2, r7, #6
 80055d8:	215c      	movs	r1, #92	@ 0x5c
 80055da:	8812      	ldrh	r2, [r2, #0]
 80055dc:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2290      	movs	r2, #144	@ 0x90
 80055e2:	2100      	movs	r1, #0
 80055e4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	228c      	movs	r2, #140	@ 0x8c
 80055ea:	2122      	movs	r1, #34	@ 0x22
 80055ec:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2280      	movs	r2, #128	@ 0x80
 80055f2:	589b      	ldr	r3, [r3, r2]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d02d      	beq.n	8005654 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2280      	movs	r2, #128	@ 0x80
 80055fc:	589b      	ldr	r3, [r3, r2]
 80055fe:	4a40      	ldr	r2, [pc, #256]	@ (8005700 <UART_Start_Receive_DMA+0x140>)
 8005600:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2280      	movs	r2, #128	@ 0x80
 8005606:	589b      	ldr	r3, [r3, r2]
 8005608:	4a3e      	ldr	r2, [pc, #248]	@ (8005704 <UART_Start_Receive_DMA+0x144>)
 800560a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2280      	movs	r2, #128	@ 0x80
 8005610:	589b      	ldr	r3, [r3, r2]
 8005612:	4a3d      	ldr	r2, [pc, #244]	@ (8005708 <UART_Start_Receive_DMA+0x148>)
 8005614:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2280      	movs	r2, #128	@ 0x80
 800561a:	589b      	ldr	r3, [r3, r2]
 800561c:	2200      	movs	r2, #0
 800561e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2280      	movs	r2, #128	@ 0x80
 8005624:	5898      	ldr	r0, [r3, r2]
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	3324      	adds	r3, #36	@ 0x24
 800562c:	0019      	movs	r1, r3
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005632:	001a      	movs	r2, r3
 8005634:	1dbb      	adds	r3, r7, #6
 8005636:	881b      	ldrh	r3, [r3, #0]
 8005638:	f7fc fc7e 	bl	8001f38 <HAL_DMA_Start_IT>
 800563c:	1e03      	subs	r3, r0, #0
 800563e:	d009      	beq.n	8005654 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2290      	movs	r2, #144	@ 0x90
 8005644:	2110      	movs	r1, #16
 8005646:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	228c      	movs	r2, #140	@ 0x8c
 800564c:	2120      	movs	r1, #32
 800564e:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8005650:	2301      	movs	r3, #1
 8005652:	e050      	b.n	80056f6 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	691b      	ldr	r3, [r3, #16]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d019      	beq.n	8005690 <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800565c:	f3ef 8310 	mrs	r3, PRIMASK
 8005660:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8005662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005664:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005666:	2301      	movs	r3, #1
 8005668:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800566a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800566c:	f383 8810 	msr	PRIMASK, r3
}
 8005670:	46c0      	nop			@ (mov r8, r8)
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	681a      	ldr	r2, [r3, #0]
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	2180      	movs	r1, #128	@ 0x80
 800567e:	0049      	lsls	r1, r1, #1
 8005680:	430a      	orrs	r2, r1
 8005682:	601a      	str	r2, [r3, #0]
 8005684:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005686:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800568a:	f383 8810 	msr	PRIMASK, r3
}
 800568e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005690:	f3ef 8310 	mrs	r3, PRIMASK
 8005694:	613b      	str	r3, [r7, #16]
  return(result);
 8005696:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005698:	63bb      	str	r3, [r7, #56]	@ 0x38
 800569a:	2301      	movs	r3, #1
 800569c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	f383 8810 	msr	PRIMASK, r3
}
 80056a4:	46c0      	nop			@ (mov r8, r8)
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	689a      	ldr	r2, [r3, #8]
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	2101      	movs	r1, #1
 80056b2:	430a      	orrs	r2, r1
 80056b4:	609a      	str	r2, [r3, #8]
 80056b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056b8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056ba:	69bb      	ldr	r3, [r7, #24]
 80056bc:	f383 8810 	msr	PRIMASK, r3
}
 80056c0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056c2:	f3ef 8310 	mrs	r3, PRIMASK
 80056c6:	61fb      	str	r3, [r7, #28]
  return(result);
 80056c8:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80056cc:	2301      	movs	r3, #1
 80056ce:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056d0:	6a3b      	ldr	r3, [r7, #32]
 80056d2:	f383 8810 	msr	PRIMASK, r3
}
 80056d6:	46c0      	nop			@ (mov r8, r8)
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	689a      	ldr	r2, [r3, #8]
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	2140      	movs	r1, #64	@ 0x40
 80056e4:	430a      	orrs	r2, r1
 80056e6:	609a      	str	r2, [r3, #8]
 80056e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056ea:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ee:	f383 8810 	msr	PRIMASK, r3
}
 80056f2:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 80056f4:	2300      	movs	r3, #0
}
 80056f6:	0018      	movs	r0, r3
 80056f8:	46bd      	mov	sp, r7
 80056fa:	b010      	add	sp, #64	@ 0x40
 80056fc:	bd80      	pop	{r7, pc}
 80056fe:	46c0      	nop			@ (mov r8, r8)
 8005700:	08005859 	.word	0x08005859
 8005704:	08005989 	.word	0x08005989
 8005708:	080059cb 	.word	0x080059cb

0800570c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b08a      	sub	sp, #40	@ 0x28
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005714:	f3ef 8310 	mrs	r3, PRIMASK
 8005718:	60bb      	str	r3, [r7, #8]
  return(result);
 800571a:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800571c:	627b      	str	r3, [r7, #36]	@ 0x24
 800571e:	2301      	movs	r3, #1
 8005720:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	f383 8810 	msr	PRIMASK, r3
}
 8005728:	46c0      	nop			@ (mov r8, r8)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	21c0      	movs	r1, #192	@ 0xc0
 8005736:	438a      	bics	r2, r1
 8005738:	601a      	str	r2, [r3, #0]
 800573a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800573c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	f383 8810 	msr	PRIMASK, r3
}
 8005744:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005746:	f3ef 8310 	mrs	r3, PRIMASK
 800574a:	617b      	str	r3, [r7, #20]
  return(result);
 800574c:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800574e:	623b      	str	r3, [r7, #32]
 8005750:	2301      	movs	r3, #1
 8005752:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005754:	69bb      	ldr	r3, [r7, #24]
 8005756:	f383 8810 	msr	PRIMASK, r3
}
 800575a:	46c0      	nop			@ (mov r8, r8)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	689a      	ldr	r2, [r3, #8]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4908      	ldr	r1, [pc, #32]	@ (8005788 <UART_EndTxTransfer+0x7c>)
 8005768:	400a      	ands	r2, r1
 800576a:	609a      	str	r2, [r3, #8]
 800576c:	6a3b      	ldr	r3, [r7, #32]
 800576e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005770:	69fb      	ldr	r3, [r7, #28]
 8005772:	f383 8810 	msr	PRIMASK, r3
}
 8005776:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2288      	movs	r2, #136	@ 0x88
 800577c:	2120      	movs	r1, #32
 800577e:	5099      	str	r1, [r3, r2]
}
 8005780:	46c0      	nop			@ (mov r8, r8)
 8005782:	46bd      	mov	sp, r7
 8005784:	b00a      	add	sp, #40	@ 0x28
 8005786:	bd80      	pop	{r7, pc}
 8005788:	ff7fffff 	.word	0xff7fffff

0800578c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b08e      	sub	sp, #56	@ 0x38
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005794:	f3ef 8310 	mrs	r3, PRIMASK
 8005798:	617b      	str	r3, [r7, #20]
  return(result);
 800579a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800579c:	637b      	str	r3, [r7, #52]	@ 0x34
 800579e:	2301      	movs	r3, #1
 80057a0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057a2:	69bb      	ldr	r3, [r7, #24]
 80057a4:	f383 8810 	msr	PRIMASK, r3
}
 80057a8:	46c0      	nop			@ (mov r8, r8)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	681a      	ldr	r2, [r3, #0]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4926      	ldr	r1, [pc, #152]	@ (8005850 <UART_EndRxTransfer+0xc4>)
 80057b6:	400a      	ands	r2, r1
 80057b8:	601a      	str	r2, [r3, #0]
 80057ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057bc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057be:	69fb      	ldr	r3, [r7, #28]
 80057c0:	f383 8810 	msr	PRIMASK, r3
}
 80057c4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057c6:	f3ef 8310 	mrs	r3, PRIMASK
 80057ca:	623b      	str	r3, [r7, #32]
  return(result);
 80057cc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80057ce:	633b      	str	r3, [r7, #48]	@ 0x30
 80057d0:	2301      	movs	r3, #1
 80057d2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057d6:	f383 8810 	msr	PRIMASK, r3
}
 80057da:	46c0      	nop			@ (mov r8, r8)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	689a      	ldr	r2, [r3, #8]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	491b      	ldr	r1, [pc, #108]	@ (8005854 <UART_EndRxTransfer+0xc8>)
 80057e8:	400a      	ands	r2, r1
 80057ea:	609a      	str	r2, [r3, #8]
 80057ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057f2:	f383 8810 	msr	PRIMASK, r3
}
 80057f6:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d118      	bne.n	8005832 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005800:	f3ef 8310 	mrs	r3, PRIMASK
 8005804:	60bb      	str	r3, [r7, #8]
  return(result);
 8005806:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005808:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800580a:	2301      	movs	r3, #1
 800580c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	f383 8810 	msr	PRIMASK, r3
}
 8005814:	46c0      	nop			@ (mov r8, r8)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	681a      	ldr	r2, [r3, #0]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	2110      	movs	r1, #16
 8005822:	438a      	bics	r2, r1
 8005824:	601a      	str	r2, [r3, #0]
 8005826:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005828:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	f383 8810 	msr	PRIMASK, r3
}
 8005830:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	228c      	movs	r2, #140	@ 0x8c
 8005836:	2120      	movs	r1, #32
 8005838:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2200      	movs	r2, #0
 800583e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2200      	movs	r2, #0
 8005844:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005846:	46c0      	nop			@ (mov r8, r8)
 8005848:	46bd      	mov	sp, r7
 800584a:	b00e      	add	sp, #56	@ 0x38
 800584c:	bd80      	pop	{r7, pc}
 800584e:	46c0      	nop			@ (mov r8, r8)
 8005850:	fffffedf 	.word	0xfffffedf
 8005854:	effffffe 	.word	0xeffffffe

08005858 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b094      	sub	sp, #80	@ 0x50
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005864:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	2220      	movs	r2, #32
 800586e:	4013      	ands	r3, r2
 8005870:	d16f      	bne.n	8005952 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8005872:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005874:	225e      	movs	r2, #94	@ 0x5e
 8005876:	2100      	movs	r1, #0
 8005878:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800587a:	f3ef 8310 	mrs	r3, PRIMASK
 800587e:	61bb      	str	r3, [r7, #24]
  return(result);
 8005880:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005882:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005884:	2301      	movs	r3, #1
 8005886:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005888:	69fb      	ldr	r3, [r7, #28]
 800588a:	f383 8810 	msr	PRIMASK, r3
}
 800588e:	46c0      	nop			@ (mov r8, r8)
 8005890:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	681a      	ldr	r2, [r3, #0]
 8005896:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	493a      	ldr	r1, [pc, #232]	@ (8005984 <UART_DMAReceiveCplt+0x12c>)
 800589c:	400a      	ands	r2, r1
 800589e:	601a      	str	r2, [r3, #0]
 80058a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80058a2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058a4:	6a3b      	ldr	r3, [r7, #32]
 80058a6:	f383 8810 	msr	PRIMASK, r3
}
 80058aa:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058ac:	f3ef 8310 	mrs	r3, PRIMASK
 80058b0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80058b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80058b6:	2301      	movs	r3, #1
 80058b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058bc:	f383 8810 	msr	PRIMASK, r3
}
 80058c0:	46c0      	nop			@ (mov r8, r8)
 80058c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	689a      	ldr	r2, [r3, #8]
 80058c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	2101      	movs	r1, #1
 80058ce:	438a      	bics	r2, r1
 80058d0:	609a      	str	r2, [r3, #8]
 80058d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80058d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058d8:	f383 8810 	msr	PRIMASK, r3
}
 80058dc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058de:	f3ef 8310 	mrs	r3, PRIMASK
 80058e2:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80058e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058e6:	643b      	str	r3, [r7, #64]	@ 0x40
 80058e8:	2301      	movs	r3, #1
 80058ea:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058ee:	f383 8810 	msr	PRIMASK, r3
}
 80058f2:	46c0      	nop			@ (mov r8, r8)
 80058f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	689a      	ldr	r2, [r3, #8]
 80058fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	2140      	movs	r1, #64	@ 0x40
 8005900:	438a      	bics	r2, r1
 8005902:	609a      	str	r2, [r3, #8]
 8005904:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005906:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005908:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800590a:	f383 8810 	msr	PRIMASK, r3
}
 800590e:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005910:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005912:	228c      	movs	r2, #140	@ 0x8c
 8005914:	2120      	movs	r1, #32
 8005916:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005918:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800591a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800591c:	2b01      	cmp	r3, #1
 800591e:	d118      	bne.n	8005952 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005920:	f3ef 8310 	mrs	r3, PRIMASK
 8005924:	60fb      	str	r3, [r7, #12]
  return(result);
 8005926:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005928:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800592a:	2301      	movs	r3, #1
 800592c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	f383 8810 	msr	PRIMASK, r3
}
 8005934:	46c0      	nop			@ (mov r8, r8)
 8005936:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	2110      	movs	r1, #16
 8005942:	438a      	bics	r2, r1
 8005944:	601a      	str	r2, [r3, #0]
 8005946:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005948:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	f383 8810 	msr	PRIMASK, r3
}
 8005950:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005952:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005954:	2200      	movs	r2, #0
 8005956:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005958:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800595a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800595c:	2b01      	cmp	r3, #1
 800595e:	d108      	bne.n	8005972 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005960:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005962:	225c      	movs	r2, #92	@ 0x5c
 8005964:	5a9a      	ldrh	r2, [r3, r2]
 8005966:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005968:	0011      	movs	r1, r2
 800596a:	0018      	movs	r0, r3
 800596c:	f7ff f8f8 	bl	8004b60 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005970:	e003      	b.n	800597a <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 8005972:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005974:	0018      	movs	r0, r3
 8005976:	f7fb fb69 	bl	800104c <HAL_UART_RxCpltCallback>
}
 800597a:	46c0      	nop			@ (mov r8, r8)
 800597c:	46bd      	mov	sp, r7
 800597e:	b014      	add	sp, #80	@ 0x50
 8005980:	bd80      	pop	{r7, pc}
 8005982:	46c0      	nop			@ (mov r8, r8)
 8005984:	fffffeff 	.word	0xfffffeff

08005988 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b084      	sub	sp, #16
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005994:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2201      	movs	r2, #1
 800599a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	d10a      	bne.n	80059ba <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	225c      	movs	r2, #92	@ 0x5c
 80059a8:	5a9b      	ldrh	r3, [r3, r2]
 80059aa:	085b      	lsrs	r3, r3, #1
 80059ac:	b29a      	uxth	r2, r3
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	0011      	movs	r1, r2
 80059b2:	0018      	movs	r0, r3
 80059b4:	f7ff f8d4 	bl	8004b60 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80059b8:	e003      	b.n	80059c2 <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	0018      	movs	r0, r3
 80059be:	f7ff f8bf 	bl	8004b40 <HAL_UART_RxHalfCpltCallback>
}
 80059c2:	46c0      	nop			@ (mov r8, r8)
 80059c4:	46bd      	mov	sp, r7
 80059c6:	b004      	add	sp, #16
 80059c8:	bd80      	pop	{r7, pc}

080059ca <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80059ca:	b580      	push	{r7, lr}
 80059cc:	b086      	sub	sp, #24
 80059ce:	af00      	add	r7, sp, #0
 80059d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059d6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	2288      	movs	r2, #136	@ 0x88
 80059dc:	589b      	ldr	r3, [r3, r2]
 80059de:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	228c      	movs	r2, #140	@ 0x8c
 80059e4:	589b      	ldr	r3, [r3, r2]
 80059e6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	2280      	movs	r2, #128	@ 0x80
 80059f0:	4013      	ands	r3, r2
 80059f2:	2b80      	cmp	r3, #128	@ 0x80
 80059f4:	d10a      	bne.n	8005a0c <UART_DMAError+0x42>
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	2b21      	cmp	r3, #33	@ 0x21
 80059fa:	d107      	bne.n	8005a0c <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	2256      	movs	r2, #86	@ 0x56
 8005a00:	2100      	movs	r1, #0
 8005a02:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	0018      	movs	r0, r3
 8005a08:	f7ff fe80 	bl	800570c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	2240      	movs	r2, #64	@ 0x40
 8005a14:	4013      	ands	r3, r2
 8005a16:	2b40      	cmp	r3, #64	@ 0x40
 8005a18:	d10a      	bne.n	8005a30 <UART_DMAError+0x66>
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2b22      	cmp	r3, #34	@ 0x22
 8005a1e:	d107      	bne.n	8005a30 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	225e      	movs	r2, #94	@ 0x5e
 8005a24:	2100      	movs	r1, #0
 8005a26:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	0018      	movs	r0, r3
 8005a2c:	f7ff feae 	bl	800578c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	2290      	movs	r2, #144	@ 0x90
 8005a34:	589b      	ldr	r3, [r3, r2]
 8005a36:	2210      	movs	r2, #16
 8005a38:	431a      	orrs	r2, r3
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	2190      	movs	r1, #144	@ 0x90
 8005a3e:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	0018      	movs	r0, r3
 8005a44:	f7ff f884 	bl	8004b50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a48:	46c0      	nop			@ (mov r8, r8)
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	b006      	add	sp, #24
 8005a4e:	bd80      	pop	{r7, pc}

08005a50 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b084      	sub	sp, #16
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a5c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	225e      	movs	r2, #94	@ 0x5e
 8005a62:	2100      	movs	r1, #0
 8005a64:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2256      	movs	r2, #86	@ 0x56
 8005a6a:	2100      	movs	r1, #0
 8005a6c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	0018      	movs	r0, r3
 8005a72:	f7ff f86d 	bl	8004b50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a76:	46c0      	nop			@ (mov r8, r8)
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	b004      	add	sp, #16
 8005a7c:	bd80      	pop	{r7, pc}

08005a7e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005a7e:	b580      	push	{r7, lr}
 8005a80:	b086      	sub	sp, #24
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a86:	f3ef 8310 	mrs	r3, PRIMASK
 8005a8a:	60bb      	str	r3, [r7, #8]
  return(result);
 8005a8c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005a8e:	617b      	str	r3, [r7, #20]
 8005a90:	2301      	movs	r3, #1
 8005a92:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f383 8810 	msr	PRIMASK, r3
}
 8005a9a:	46c0      	nop			@ (mov r8, r8)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	681a      	ldr	r2, [r3, #0]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	2140      	movs	r1, #64	@ 0x40
 8005aa8:	438a      	bics	r2, r1
 8005aaa:	601a      	str	r2, [r3, #0]
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	f383 8810 	msr	PRIMASK, r3
}
 8005ab6:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2288      	movs	r2, #136	@ 0x88
 8005abc:	2120      	movs	r1, #32
 8005abe:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	0018      	movs	r0, r3
 8005aca:	f7ff f831 	bl	8004b30 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ace:	46c0      	nop			@ (mov r8, r8)
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	b006      	add	sp, #24
 8005ad4:	bd80      	pop	{r7, pc}
	...

08005ad8 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b086      	sub	sp, #24
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	60f8      	str	r0, [r7, #12]
 8005ae0:	60b9      	str	r1, [r7, #8]
 8005ae2:	607a      	str	r2, [r7, #4]
 8005ae4:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d101      	bne.n	8005af0 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 8005aec:	2301      	movs	r3, #1
 8005aee:	e05d      	b.n	8005bac <HAL_RS485Ex_Init+0xd4>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2288      	movs	r2, #136	@ 0x88
 8005af4:	589b      	ldr	r3, [r3, r2]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d107      	bne.n	8005b0a <HAL_RS485Ex_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2284      	movs	r2, #132	@ 0x84
 8005afe:	2100      	movs	r1, #0
 8005b00:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	0018      	movs	r0, r3
 8005b06:	f7fb fd75 	bl	80015f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2288      	movs	r2, #136	@ 0x88
 8005b0e:	2124      	movs	r1, #36	@ 0x24
 8005b10:	5099      	str	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	681a      	ldr	r2, [r3, #0]
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	2101      	movs	r1, #1
 8005b1e:	438a      	bics	r2, r1
 8005b20:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d003      	beq.n	8005b32 <HAL_RS485Ex_Init+0x5a>
  {
    UART_AdvFeatureConfig(huart);
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	0018      	movs	r0, r3
 8005b2e:	f7ff fb79 	bl	8005224 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	0018      	movs	r0, r3
 8005b36:	f7ff f81f 	bl	8004b78 <UART_SetConfig>
 8005b3a:	0003      	movs	r3, r0
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	d101      	bne.n	8005b44 <HAL_RS485Ex_Init+0x6c>
  {
    return HAL_ERROR;
 8005b40:	2301      	movs	r3, #1
 8005b42:	e033      	b.n	8005bac <HAL_RS485Ex_Init+0xd4>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	689a      	ldr	r2, [r3, #8]
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	2180      	movs	r1, #128	@ 0x80
 8005b50:	01c9      	lsls	r1, r1, #7
 8005b52:	430a      	orrs	r2, r1
 8005b54:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	4a15      	ldr	r2, [pc, #84]	@ (8005bb4 <HAL_RS485Ex_Init+0xdc>)
 8005b5e:	4013      	ands	r3, r2
 8005b60:	0019      	movs	r1, r3
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	68ba      	ldr	r2, [r7, #8]
 8005b68:	430a      	orrs	r2, r1
 8005b6a:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	055b      	lsls	r3, r3, #21
 8005b70:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	041b      	lsls	r3, r3, #16
 8005b76:	697a      	ldr	r2, [r7, #20]
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a0d      	ldr	r2, [pc, #52]	@ (8005bb8 <HAL_RS485Ex_Init+0xe0>)
 8005b84:	4013      	ands	r3, r2
 8005b86:	0019      	movs	r1, r3
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	697a      	ldr	r2, [r7, #20]
 8005b8e:	430a      	orrs	r2, r1
 8005b90:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	681a      	ldr	r2, [r3, #0]
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	2101      	movs	r1, #1
 8005b9e:	430a      	orrs	r2, r1
 8005ba0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	0018      	movs	r0, r3
 8005ba6:	f7ff fbf1 	bl	800538c <UART_CheckIdleState>
 8005baa:	0003      	movs	r3, r0
}
 8005bac:	0018      	movs	r0, r3
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	b006      	add	sp, #24
 8005bb2:	bd80      	pop	{r7, pc}
 8005bb4:	ffff7fff 	.word	0xffff7fff
 8005bb8:	fc00ffff 	.word	0xfc00ffff

08005bbc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b082      	sub	sp, #8
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005bc4:	46c0      	nop			@ (mov r8, r8)
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	b002      	add	sp, #8
 8005bca:	bd80      	pop	{r7, pc}

08005bcc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b082      	sub	sp, #8
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005bd4:	46c0      	nop			@ (mov r8, r8)
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	b002      	add	sp, #8
 8005bda:	bd80      	pop	{r7, pc}

08005bdc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b082      	sub	sp, #8
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005be4:	46c0      	nop			@ (mov r8, r8)
 8005be6:	46bd      	mov	sp, r7
 8005be8:	b002      	add	sp, #8
 8005bea:	bd80      	pop	{r7, pc}

08005bec <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b084      	sub	sp, #16
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2284      	movs	r2, #132	@ 0x84
 8005bf8:	5c9b      	ldrb	r3, [r3, r2]
 8005bfa:	2b01      	cmp	r3, #1
 8005bfc:	d101      	bne.n	8005c02 <HAL_UARTEx_DisableFifoMode+0x16>
 8005bfe:	2302      	movs	r3, #2
 8005c00:	e027      	b.n	8005c52 <HAL_UARTEx_DisableFifoMode+0x66>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2284      	movs	r2, #132	@ 0x84
 8005c06:	2101      	movs	r1, #1
 8005c08:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2288      	movs	r2, #136	@ 0x88
 8005c0e:	2124      	movs	r1, #36	@ 0x24
 8005c10:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	681a      	ldr	r2, [r3, #0]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	2101      	movs	r1, #1
 8005c26:	438a      	bics	r2, r1
 8005c28:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	4a0b      	ldr	r2, [pc, #44]	@ (8005c5c <HAL_UARTEx_DisableFifoMode+0x70>)
 8005c2e:	4013      	ands	r3, r2
 8005c30:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2200      	movs	r2, #0
 8005c36:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	68fa      	ldr	r2, [r7, #12]
 8005c3e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2288      	movs	r2, #136	@ 0x88
 8005c44:	2120      	movs	r1, #32
 8005c46:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2284      	movs	r2, #132	@ 0x84
 8005c4c:	2100      	movs	r1, #0
 8005c4e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005c50:	2300      	movs	r3, #0
}
 8005c52:	0018      	movs	r0, r3
 8005c54:	46bd      	mov	sp, r7
 8005c56:	b004      	add	sp, #16
 8005c58:	bd80      	pop	{r7, pc}
 8005c5a:	46c0      	nop			@ (mov r8, r8)
 8005c5c:	dfffffff 	.word	0xdfffffff

08005c60 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b084      	sub	sp, #16
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
 8005c68:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2284      	movs	r2, #132	@ 0x84
 8005c6e:	5c9b      	ldrb	r3, [r3, r2]
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	d101      	bne.n	8005c78 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005c74:	2302      	movs	r3, #2
 8005c76:	e02e      	b.n	8005cd6 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2284      	movs	r2, #132	@ 0x84
 8005c7c:	2101      	movs	r1, #1
 8005c7e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2288      	movs	r2, #136	@ 0x88
 8005c84:	2124      	movs	r1, #36	@ 0x24
 8005c86:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	681a      	ldr	r2, [r3, #0]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	2101      	movs	r1, #1
 8005c9c:	438a      	bics	r2, r1
 8005c9e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	689b      	ldr	r3, [r3, #8]
 8005ca6:	00db      	lsls	r3, r3, #3
 8005ca8:	08d9      	lsrs	r1, r3, #3
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	683a      	ldr	r2, [r7, #0]
 8005cb0:	430a      	orrs	r2, r1
 8005cb2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	0018      	movs	r0, r3
 8005cb8:	f000 f854 	bl	8005d64 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	68fa      	ldr	r2, [r7, #12]
 8005cc2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2288      	movs	r2, #136	@ 0x88
 8005cc8:	2120      	movs	r1, #32
 8005cca:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2284      	movs	r2, #132	@ 0x84
 8005cd0:	2100      	movs	r1, #0
 8005cd2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005cd4:	2300      	movs	r3, #0
}
 8005cd6:	0018      	movs	r0, r3
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	b004      	add	sp, #16
 8005cdc:	bd80      	pop	{r7, pc}
	...

08005ce0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b084      	sub	sp, #16
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
 8005ce8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2284      	movs	r2, #132	@ 0x84
 8005cee:	5c9b      	ldrb	r3, [r3, r2]
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d101      	bne.n	8005cf8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005cf4:	2302      	movs	r3, #2
 8005cf6:	e02f      	b.n	8005d58 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2284      	movs	r2, #132	@ 0x84
 8005cfc:	2101      	movs	r1, #1
 8005cfe:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2288      	movs	r2, #136	@ 0x88
 8005d04:	2124      	movs	r1, #36	@ 0x24
 8005d06:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	681a      	ldr	r2, [r3, #0]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	2101      	movs	r1, #1
 8005d1c:	438a      	bics	r2, r1
 8005d1e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	689b      	ldr	r3, [r3, #8]
 8005d26:	4a0e      	ldr	r2, [pc, #56]	@ (8005d60 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8005d28:	4013      	ands	r3, r2
 8005d2a:	0019      	movs	r1, r3
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	683a      	ldr	r2, [r7, #0]
 8005d32:	430a      	orrs	r2, r1
 8005d34:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	0018      	movs	r0, r3
 8005d3a:	f000 f813 	bl	8005d64 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	68fa      	ldr	r2, [r7, #12]
 8005d44:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2288      	movs	r2, #136	@ 0x88
 8005d4a:	2120      	movs	r1, #32
 8005d4c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2284      	movs	r2, #132	@ 0x84
 8005d52:	2100      	movs	r1, #0
 8005d54:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005d56:	2300      	movs	r3, #0
}
 8005d58:	0018      	movs	r0, r3
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	b004      	add	sp, #16
 8005d5e:	bd80      	pop	{r7, pc}
 8005d60:	f1ffffff 	.word	0xf1ffffff

08005d64 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005d64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d66:	b085      	sub	sp, #20
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d108      	bne.n	8005d86 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	226a      	movs	r2, #106	@ 0x6a
 8005d78:	2101      	movs	r1, #1
 8005d7a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2268      	movs	r2, #104	@ 0x68
 8005d80:	2101      	movs	r1, #1
 8005d82:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005d84:	e043      	b.n	8005e0e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005d86:	260f      	movs	r6, #15
 8005d88:	19bb      	adds	r3, r7, r6
 8005d8a:	2208      	movs	r2, #8
 8005d8c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005d8e:	200e      	movs	r0, #14
 8005d90:	183b      	adds	r3, r7, r0
 8005d92:	2208      	movs	r2, #8
 8005d94:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	0e5b      	lsrs	r3, r3, #25
 8005d9e:	b2da      	uxtb	r2, r3
 8005da0:	240d      	movs	r4, #13
 8005da2:	193b      	adds	r3, r7, r4
 8005da4:	2107      	movs	r1, #7
 8005da6:	400a      	ands	r2, r1
 8005da8:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	689b      	ldr	r3, [r3, #8]
 8005db0:	0f5b      	lsrs	r3, r3, #29
 8005db2:	b2da      	uxtb	r2, r3
 8005db4:	250c      	movs	r5, #12
 8005db6:	197b      	adds	r3, r7, r5
 8005db8:	2107      	movs	r1, #7
 8005dba:	400a      	ands	r2, r1
 8005dbc:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005dbe:	183b      	adds	r3, r7, r0
 8005dc0:	781b      	ldrb	r3, [r3, #0]
 8005dc2:	197a      	adds	r2, r7, r5
 8005dc4:	7812      	ldrb	r2, [r2, #0]
 8005dc6:	4914      	ldr	r1, [pc, #80]	@ (8005e18 <UARTEx_SetNbDataToProcess+0xb4>)
 8005dc8:	5c8a      	ldrb	r2, [r1, r2]
 8005dca:	435a      	muls	r2, r3
 8005dcc:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8005dce:	197b      	adds	r3, r7, r5
 8005dd0:	781b      	ldrb	r3, [r3, #0]
 8005dd2:	4a12      	ldr	r2, [pc, #72]	@ (8005e1c <UARTEx_SetNbDataToProcess+0xb8>)
 8005dd4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005dd6:	0019      	movs	r1, r3
 8005dd8:	f7fa fa28 	bl	800022c <__divsi3>
 8005ddc:	0003      	movs	r3, r0
 8005dde:	b299      	uxth	r1, r3
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	226a      	movs	r2, #106	@ 0x6a
 8005de4:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005de6:	19bb      	adds	r3, r7, r6
 8005de8:	781b      	ldrb	r3, [r3, #0]
 8005dea:	193a      	adds	r2, r7, r4
 8005dec:	7812      	ldrb	r2, [r2, #0]
 8005dee:	490a      	ldr	r1, [pc, #40]	@ (8005e18 <UARTEx_SetNbDataToProcess+0xb4>)
 8005df0:	5c8a      	ldrb	r2, [r1, r2]
 8005df2:	435a      	muls	r2, r3
 8005df4:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8005df6:	193b      	adds	r3, r7, r4
 8005df8:	781b      	ldrb	r3, [r3, #0]
 8005dfa:	4a08      	ldr	r2, [pc, #32]	@ (8005e1c <UARTEx_SetNbDataToProcess+0xb8>)
 8005dfc:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005dfe:	0019      	movs	r1, r3
 8005e00:	f7fa fa14 	bl	800022c <__divsi3>
 8005e04:	0003      	movs	r3, r0
 8005e06:	b299      	uxth	r1, r3
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2268      	movs	r2, #104	@ 0x68
 8005e0c:	5299      	strh	r1, [r3, r2]
}
 8005e0e:	46c0      	nop			@ (mov r8, r8)
 8005e10:	46bd      	mov	sp, r7
 8005e12:	b005      	add	sp, #20
 8005e14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e16:	46c0      	nop			@ (mov r8, r8)
 8005e18:	080072a8 	.word	0x080072a8
 8005e1c:	080072b0 	.word	0x080072b0

08005e20 <std>:
 8005e20:	2300      	movs	r3, #0
 8005e22:	b510      	push	{r4, lr}
 8005e24:	0004      	movs	r4, r0
 8005e26:	6003      	str	r3, [r0, #0]
 8005e28:	6043      	str	r3, [r0, #4]
 8005e2a:	6083      	str	r3, [r0, #8]
 8005e2c:	8181      	strh	r1, [r0, #12]
 8005e2e:	6643      	str	r3, [r0, #100]	@ 0x64
 8005e30:	81c2      	strh	r2, [r0, #14]
 8005e32:	6103      	str	r3, [r0, #16]
 8005e34:	6143      	str	r3, [r0, #20]
 8005e36:	6183      	str	r3, [r0, #24]
 8005e38:	0019      	movs	r1, r3
 8005e3a:	2208      	movs	r2, #8
 8005e3c:	305c      	adds	r0, #92	@ 0x5c
 8005e3e:	f000 fa43 	bl	80062c8 <memset>
 8005e42:	4b0b      	ldr	r3, [pc, #44]	@ (8005e70 <std+0x50>)
 8005e44:	6224      	str	r4, [r4, #32]
 8005e46:	6263      	str	r3, [r4, #36]	@ 0x24
 8005e48:	4b0a      	ldr	r3, [pc, #40]	@ (8005e74 <std+0x54>)
 8005e4a:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005e4c:	4b0a      	ldr	r3, [pc, #40]	@ (8005e78 <std+0x58>)
 8005e4e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005e50:	4b0a      	ldr	r3, [pc, #40]	@ (8005e7c <std+0x5c>)
 8005e52:	6323      	str	r3, [r4, #48]	@ 0x30
 8005e54:	4b0a      	ldr	r3, [pc, #40]	@ (8005e80 <std+0x60>)
 8005e56:	429c      	cmp	r4, r3
 8005e58:	d005      	beq.n	8005e66 <std+0x46>
 8005e5a:	4b0a      	ldr	r3, [pc, #40]	@ (8005e84 <std+0x64>)
 8005e5c:	429c      	cmp	r4, r3
 8005e5e:	d002      	beq.n	8005e66 <std+0x46>
 8005e60:	4b09      	ldr	r3, [pc, #36]	@ (8005e88 <std+0x68>)
 8005e62:	429c      	cmp	r4, r3
 8005e64:	d103      	bne.n	8005e6e <std+0x4e>
 8005e66:	0020      	movs	r0, r4
 8005e68:	3058      	adds	r0, #88	@ 0x58
 8005e6a:	f000 faad 	bl	80063c8 <__retarget_lock_init_recursive>
 8005e6e:	bd10      	pop	{r4, pc}
 8005e70:	080060f1 	.word	0x080060f1
 8005e74:	08006119 	.word	0x08006119
 8005e78:	08006151 	.word	0x08006151
 8005e7c:	0800617d 	.word	0x0800617d
 8005e80:	2000038c 	.word	0x2000038c
 8005e84:	200003f4 	.word	0x200003f4
 8005e88:	2000045c 	.word	0x2000045c

08005e8c <stdio_exit_handler>:
 8005e8c:	b510      	push	{r4, lr}
 8005e8e:	4a03      	ldr	r2, [pc, #12]	@ (8005e9c <stdio_exit_handler+0x10>)
 8005e90:	4903      	ldr	r1, [pc, #12]	@ (8005ea0 <stdio_exit_handler+0x14>)
 8005e92:	4804      	ldr	r0, [pc, #16]	@ (8005ea4 <stdio_exit_handler+0x18>)
 8005e94:	f000 f86c 	bl	8005f70 <_fwalk_sglue>
 8005e98:	bd10      	pop	{r4, pc}
 8005e9a:	46c0      	nop			@ (mov r8, r8)
 8005e9c:	20000018 	.word	0x20000018
 8005ea0:	08006f15 	.word	0x08006f15
 8005ea4:	20000028 	.word	0x20000028

08005ea8 <cleanup_stdio>:
 8005ea8:	6841      	ldr	r1, [r0, #4]
 8005eaa:	4b0b      	ldr	r3, [pc, #44]	@ (8005ed8 <cleanup_stdio+0x30>)
 8005eac:	b510      	push	{r4, lr}
 8005eae:	0004      	movs	r4, r0
 8005eb0:	4299      	cmp	r1, r3
 8005eb2:	d001      	beq.n	8005eb8 <cleanup_stdio+0x10>
 8005eb4:	f001 f82e 	bl	8006f14 <_fflush_r>
 8005eb8:	68a1      	ldr	r1, [r4, #8]
 8005eba:	4b08      	ldr	r3, [pc, #32]	@ (8005edc <cleanup_stdio+0x34>)
 8005ebc:	4299      	cmp	r1, r3
 8005ebe:	d002      	beq.n	8005ec6 <cleanup_stdio+0x1e>
 8005ec0:	0020      	movs	r0, r4
 8005ec2:	f001 f827 	bl	8006f14 <_fflush_r>
 8005ec6:	68e1      	ldr	r1, [r4, #12]
 8005ec8:	4b05      	ldr	r3, [pc, #20]	@ (8005ee0 <cleanup_stdio+0x38>)
 8005eca:	4299      	cmp	r1, r3
 8005ecc:	d002      	beq.n	8005ed4 <cleanup_stdio+0x2c>
 8005ece:	0020      	movs	r0, r4
 8005ed0:	f001 f820 	bl	8006f14 <_fflush_r>
 8005ed4:	bd10      	pop	{r4, pc}
 8005ed6:	46c0      	nop			@ (mov r8, r8)
 8005ed8:	2000038c 	.word	0x2000038c
 8005edc:	200003f4 	.word	0x200003f4
 8005ee0:	2000045c 	.word	0x2000045c

08005ee4 <global_stdio_init.part.0>:
 8005ee4:	b510      	push	{r4, lr}
 8005ee6:	4b09      	ldr	r3, [pc, #36]	@ (8005f0c <global_stdio_init.part.0+0x28>)
 8005ee8:	4a09      	ldr	r2, [pc, #36]	@ (8005f10 <global_stdio_init.part.0+0x2c>)
 8005eea:	2104      	movs	r1, #4
 8005eec:	601a      	str	r2, [r3, #0]
 8005eee:	4809      	ldr	r0, [pc, #36]	@ (8005f14 <global_stdio_init.part.0+0x30>)
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	f7ff ff95 	bl	8005e20 <std>
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	2109      	movs	r1, #9
 8005efa:	4807      	ldr	r0, [pc, #28]	@ (8005f18 <global_stdio_init.part.0+0x34>)
 8005efc:	f7ff ff90 	bl	8005e20 <std>
 8005f00:	2202      	movs	r2, #2
 8005f02:	2112      	movs	r1, #18
 8005f04:	4805      	ldr	r0, [pc, #20]	@ (8005f1c <global_stdio_init.part.0+0x38>)
 8005f06:	f7ff ff8b 	bl	8005e20 <std>
 8005f0a:	bd10      	pop	{r4, pc}
 8005f0c:	200004c4 	.word	0x200004c4
 8005f10:	08005e8d 	.word	0x08005e8d
 8005f14:	2000038c 	.word	0x2000038c
 8005f18:	200003f4 	.word	0x200003f4
 8005f1c:	2000045c 	.word	0x2000045c

08005f20 <__sfp_lock_acquire>:
 8005f20:	b510      	push	{r4, lr}
 8005f22:	4802      	ldr	r0, [pc, #8]	@ (8005f2c <__sfp_lock_acquire+0xc>)
 8005f24:	f000 fa51 	bl	80063ca <__retarget_lock_acquire_recursive>
 8005f28:	bd10      	pop	{r4, pc}
 8005f2a:	46c0      	nop			@ (mov r8, r8)
 8005f2c:	200004cd 	.word	0x200004cd

08005f30 <__sfp_lock_release>:
 8005f30:	b510      	push	{r4, lr}
 8005f32:	4802      	ldr	r0, [pc, #8]	@ (8005f3c <__sfp_lock_release+0xc>)
 8005f34:	f000 fa4a 	bl	80063cc <__retarget_lock_release_recursive>
 8005f38:	bd10      	pop	{r4, pc}
 8005f3a:	46c0      	nop			@ (mov r8, r8)
 8005f3c:	200004cd 	.word	0x200004cd

08005f40 <__sinit>:
 8005f40:	b510      	push	{r4, lr}
 8005f42:	0004      	movs	r4, r0
 8005f44:	f7ff ffec 	bl	8005f20 <__sfp_lock_acquire>
 8005f48:	6a23      	ldr	r3, [r4, #32]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d002      	beq.n	8005f54 <__sinit+0x14>
 8005f4e:	f7ff ffef 	bl	8005f30 <__sfp_lock_release>
 8005f52:	bd10      	pop	{r4, pc}
 8005f54:	4b04      	ldr	r3, [pc, #16]	@ (8005f68 <__sinit+0x28>)
 8005f56:	6223      	str	r3, [r4, #32]
 8005f58:	4b04      	ldr	r3, [pc, #16]	@ (8005f6c <__sinit+0x2c>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d1f6      	bne.n	8005f4e <__sinit+0xe>
 8005f60:	f7ff ffc0 	bl	8005ee4 <global_stdio_init.part.0>
 8005f64:	e7f3      	b.n	8005f4e <__sinit+0xe>
 8005f66:	46c0      	nop			@ (mov r8, r8)
 8005f68:	08005ea9 	.word	0x08005ea9
 8005f6c:	200004c4 	.word	0x200004c4

08005f70 <_fwalk_sglue>:
 8005f70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005f72:	0014      	movs	r4, r2
 8005f74:	2600      	movs	r6, #0
 8005f76:	9000      	str	r0, [sp, #0]
 8005f78:	9101      	str	r1, [sp, #4]
 8005f7a:	68a5      	ldr	r5, [r4, #8]
 8005f7c:	6867      	ldr	r7, [r4, #4]
 8005f7e:	3f01      	subs	r7, #1
 8005f80:	d504      	bpl.n	8005f8c <_fwalk_sglue+0x1c>
 8005f82:	6824      	ldr	r4, [r4, #0]
 8005f84:	2c00      	cmp	r4, #0
 8005f86:	d1f8      	bne.n	8005f7a <_fwalk_sglue+0xa>
 8005f88:	0030      	movs	r0, r6
 8005f8a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005f8c:	89ab      	ldrh	r3, [r5, #12]
 8005f8e:	2b01      	cmp	r3, #1
 8005f90:	d908      	bls.n	8005fa4 <_fwalk_sglue+0x34>
 8005f92:	220e      	movs	r2, #14
 8005f94:	5eab      	ldrsh	r3, [r5, r2]
 8005f96:	3301      	adds	r3, #1
 8005f98:	d004      	beq.n	8005fa4 <_fwalk_sglue+0x34>
 8005f9a:	0029      	movs	r1, r5
 8005f9c:	9800      	ldr	r0, [sp, #0]
 8005f9e:	9b01      	ldr	r3, [sp, #4]
 8005fa0:	4798      	blx	r3
 8005fa2:	4306      	orrs	r6, r0
 8005fa4:	3568      	adds	r5, #104	@ 0x68
 8005fa6:	e7ea      	b.n	8005f7e <_fwalk_sglue+0xe>

08005fa8 <iprintf>:
 8005fa8:	b40f      	push	{r0, r1, r2, r3}
 8005faa:	b507      	push	{r0, r1, r2, lr}
 8005fac:	4905      	ldr	r1, [pc, #20]	@ (8005fc4 <iprintf+0x1c>)
 8005fae:	ab04      	add	r3, sp, #16
 8005fb0:	6808      	ldr	r0, [r1, #0]
 8005fb2:	cb04      	ldmia	r3!, {r2}
 8005fb4:	6881      	ldr	r1, [r0, #8]
 8005fb6:	9301      	str	r3, [sp, #4]
 8005fb8:	f000 fc8c 	bl	80068d4 <_vfiprintf_r>
 8005fbc:	b003      	add	sp, #12
 8005fbe:	bc08      	pop	{r3}
 8005fc0:	b004      	add	sp, #16
 8005fc2:	4718      	bx	r3
 8005fc4:	20000024 	.word	0x20000024

08005fc8 <_puts_r>:
 8005fc8:	6a03      	ldr	r3, [r0, #32]
 8005fca:	b570      	push	{r4, r5, r6, lr}
 8005fcc:	0005      	movs	r5, r0
 8005fce:	000e      	movs	r6, r1
 8005fd0:	6884      	ldr	r4, [r0, #8]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d101      	bne.n	8005fda <_puts_r+0x12>
 8005fd6:	f7ff ffb3 	bl	8005f40 <__sinit>
 8005fda:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005fdc:	07db      	lsls	r3, r3, #31
 8005fde:	d405      	bmi.n	8005fec <_puts_r+0x24>
 8005fe0:	89a3      	ldrh	r3, [r4, #12]
 8005fe2:	059b      	lsls	r3, r3, #22
 8005fe4:	d402      	bmi.n	8005fec <_puts_r+0x24>
 8005fe6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005fe8:	f000 f9ef 	bl	80063ca <__retarget_lock_acquire_recursive>
 8005fec:	89a3      	ldrh	r3, [r4, #12]
 8005fee:	071b      	lsls	r3, r3, #28
 8005ff0:	d502      	bpl.n	8005ff8 <_puts_r+0x30>
 8005ff2:	6923      	ldr	r3, [r4, #16]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d11f      	bne.n	8006038 <_puts_r+0x70>
 8005ff8:	0021      	movs	r1, r4
 8005ffa:	0028      	movs	r0, r5
 8005ffc:	f000 f906 	bl	800620c <__swsetup_r>
 8006000:	2800      	cmp	r0, #0
 8006002:	d019      	beq.n	8006038 <_puts_r+0x70>
 8006004:	2501      	movs	r5, #1
 8006006:	426d      	negs	r5, r5
 8006008:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800600a:	07db      	lsls	r3, r3, #31
 800600c:	d405      	bmi.n	800601a <_puts_r+0x52>
 800600e:	89a3      	ldrh	r3, [r4, #12]
 8006010:	059b      	lsls	r3, r3, #22
 8006012:	d402      	bmi.n	800601a <_puts_r+0x52>
 8006014:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006016:	f000 f9d9 	bl	80063cc <__retarget_lock_release_recursive>
 800601a:	0028      	movs	r0, r5
 800601c:	bd70      	pop	{r4, r5, r6, pc}
 800601e:	3601      	adds	r6, #1
 8006020:	60a3      	str	r3, [r4, #8]
 8006022:	2b00      	cmp	r3, #0
 8006024:	da04      	bge.n	8006030 <_puts_r+0x68>
 8006026:	69a2      	ldr	r2, [r4, #24]
 8006028:	429a      	cmp	r2, r3
 800602a:	dc16      	bgt.n	800605a <_puts_r+0x92>
 800602c:	290a      	cmp	r1, #10
 800602e:	d014      	beq.n	800605a <_puts_r+0x92>
 8006030:	6823      	ldr	r3, [r4, #0]
 8006032:	1c5a      	adds	r2, r3, #1
 8006034:	6022      	str	r2, [r4, #0]
 8006036:	7019      	strb	r1, [r3, #0]
 8006038:	68a3      	ldr	r3, [r4, #8]
 800603a:	7831      	ldrb	r1, [r6, #0]
 800603c:	3b01      	subs	r3, #1
 800603e:	2900      	cmp	r1, #0
 8006040:	d1ed      	bne.n	800601e <_puts_r+0x56>
 8006042:	60a3      	str	r3, [r4, #8]
 8006044:	2b00      	cmp	r3, #0
 8006046:	da0f      	bge.n	8006068 <_puts_r+0xa0>
 8006048:	0022      	movs	r2, r4
 800604a:	0028      	movs	r0, r5
 800604c:	310a      	adds	r1, #10
 800604e:	f000 f89b 	bl	8006188 <__swbuf_r>
 8006052:	3001      	adds	r0, #1
 8006054:	d0d6      	beq.n	8006004 <_puts_r+0x3c>
 8006056:	250a      	movs	r5, #10
 8006058:	e7d6      	b.n	8006008 <_puts_r+0x40>
 800605a:	0022      	movs	r2, r4
 800605c:	0028      	movs	r0, r5
 800605e:	f000 f893 	bl	8006188 <__swbuf_r>
 8006062:	3001      	adds	r0, #1
 8006064:	d1e8      	bne.n	8006038 <_puts_r+0x70>
 8006066:	e7cd      	b.n	8006004 <_puts_r+0x3c>
 8006068:	6823      	ldr	r3, [r4, #0]
 800606a:	1c5a      	adds	r2, r3, #1
 800606c:	6022      	str	r2, [r4, #0]
 800606e:	220a      	movs	r2, #10
 8006070:	701a      	strb	r2, [r3, #0]
 8006072:	e7f0      	b.n	8006056 <_puts_r+0x8e>

08006074 <puts>:
 8006074:	b510      	push	{r4, lr}
 8006076:	4b03      	ldr	r3, [pc, #12]	@ (8006084 <puts+0x10>)
 8006078:	0001      	movs	r1, r0
 800607a:	6818      	ldr	r0, [r3, #0]
 800607c:	f7ff ffa4 	bl	8005fc8 <_puts_r>
 8006080:	bd10      	pop	{r4, pc}
 8006082:	46c0      	nop			@ (mov r8, r8)
 8006084:	20000024 	.word	0x20000024

08006088 <sniprintf>:
 8006088:	b40c      	push	{r2, r3}
 800608a:	b530      	push	{r4, r5, lr}
 800608c:	4b17      	ldr	r3, [pc, #92]	@ (80060ec <sniprintf+0x64>)
 800608e:	000c      	movs	r4, r1
 8006090:	681d      	ldr	r5, [r3, #0]
 8006092:	b09d      	sub	sp, #116	@ 0x74
 8006094:	2900      	cmp	r1, #0
 8006096:	da08      	bge.n	80060aa <sniprintf+0x22>
 8006098:	238b      	movs	r3, #139	@ 0x8b
 800609a:	2001      	movs	r0, #1
 800609c:	602b      	str	r3, [r5, #0]
 800609e:	4240      	negs	r0, r0
 80060a0:	b01d      	add	sp, #116	@ 0x74
 80060a2:	bc30      	pop	{r4, r5}
 80060a4:	bc08      	pop	{r3}
 80060a6:	b002      	add	sp, #8
 80060a8:	4718      	bx	r3
 80060aa:	2382      	movs	r3, #130	@ 0x82
 80060ac:	466a      	mov	r2, sp
 80060ae:	009b      	lsls	r3, r3, #2
 80060b0:	8293      	strh	r3, [r2, #20]
 80060b2:	2300      	movs	r3, #0
 80060b4:	9002      	str	r0, [sp, #8]
 80060b6:	9006      	str	r0, [sp, #24]
 80060b8:	4299      	cmp	r1, r3
 80060ba:	d000      	beq.n	80060be <sniprintf+0x36>
 80060bc:	1e4b      	subs	r3, r1, #1
 80060be:	9304      	str	r3, [sp, #16]
 80060c0:	9307      	str	r3, [sp, #28]
 80060c2:	2301      	movs	r3, #1
 80060c4:	466a      	mov	r2, sp
 80060c6:	425b      	negs	r3, r3
 80060c8:	82d3      	strh	r3, [r2, #22]
 80060ca:	0028      	movs	r0, r5
 80060cc:	ab21      	add	r3, sp, #132	@ 0x84
 80060ce:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80060d0:	a902      	add	r1, sp, #8
 80060d2:	9301      	str	r3, [sp, #4]
 80060d4:	f000 fad8 	bl	8006688 <_svfiprintf_r>
 80060d8:	1c43      	adds	r3, r0, #1
 80060da:	da01      	bge.n	80060e0 <sniprintf+0x58>
 80060dc:	238b      	movs	r3, #139	@ 0x8b
 80060de:	602b      	str	r3, [r5, #0]
 80060e0:	2c00      	cmp	r4, #0
 80060e2:	d0dd      	beq.n	80060a0 <sniprintf+0x18>
 80060e4:	2200      	movs	r2, #0
 80060e6:	9b02      	ldr	r3, [sp, #8]
 80060e8:	701a      	strb	r2, [r3, #0]
 80060ea:	e7d9      	b.n	80060a0 <sniprintf+0x18>
 80060ec:	20000024 	.word	0x20000024

080060f0 <__sread>:
 80060f0:	b570      	push	{r4, r5, r6, lr}
 80060f2:	000c      	movs	r4, r1
 80060f4:	250e      	movs	r5, #14
 80060f6:	5f49      	ldrsh	r1, [r1, r5]
 80060f8:	f000 f914 	bl	8006324 <_read_r>
 80060fc:	2800      	cmp	r0, #0
 80060fe:	db03      	blt.n	8006108 <__sread+0x18>
 8006100:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8006102:	181b      	adds	r3, r3, r0
 8006104:	6563      	str	r3, [r4, #84]	@ 0x54
 8006106:	bd70      	pop	{r4, r5, r6, pc}
 8006108:	89a3      	ldrh	r3, [r4, #12]
 800610a:	4a02      	ldr	r2, [pc, #8]	@ (8006114 <__sread+0x24>)
 800610c:	4013      	ands	r3, r2
 800610e:	81a3      	strh	r3, [r4, #12]
 8006110:	e7f9      	b.n	8006106 <__sread+0x16>
 8006112:	46c0      	nop			@ (mov r8, r8)
 8006114:	ffffefff 	.word	0xffffefff

08006118 <__swrite>:
 8006118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800611a:	001f      	movs	r7, r3
 800611c:	898b      	ldrh	r3, [r1, #12]
 800611e:	0005      	movs	r5, r0
 8006120:	000c      	movs	r4, r1
 8006122:	0016      	movs	r6, r2
 8006124:	05db      	lsls	r3, r3, #23
 8006126:	d505      	bpl.n	8006134 <__swrite+0x1c>
 8006128:	230e      	movs	r3, #14
 800612a:	5ec9      	ldrsh	r1, [r1, r3]
 800612c:	2200      	movs	r2, #0
 800612e:	2302      	movs	r3, #2
 8006130:	f000 f8e4 	bl	80062fc <_lseek_r>
 8006134:	89a3      	ldrh	r3, [r4, #12]
 8006136:	4a05      	ldr	r2, [pc, #20]	@ (800614c <__swrite+0x34>)
 8006138:	0028      	movs	r0, r5
 800613a:	4013      	ands	r3, r2
 800613c:	81a3      	strh	r3, [r4, #12]
 800613e:	0032      	movs	r2, r6
 8006140:	230e      	movs	r3, #14
 8006142:	5ee1      	ldrsh	r1, [r4, r3]
 8006144:	003b      	movs	r3, r7
 8006146:	f000 f901 	bl	800634c <_write_r>
 800614a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800614c:	ffffefff 	.word	0xffffefff

08006150 <__sseek>:
 8006150:	b570      	push	{r4, r5, r6, lr}
 8006152:	000c      	movs	r4, r1
 8006154:	250e      	movs	r5, #14
 8006156:	5f49      	ldrsh	r1, [r1, r5]
 8006158:	f000 f8d0 	bl	80062fc <_lseek_r>
 800615c:	89a3      	ldrh	r3, [r4, #12]
 800615e:	1c42      	adds	r2, r0, #1
 8006160:	d103      	bne.n	800616a <__sseek+0x1a>
 8006162:	4a05      	ldr	r2, [pc, #20]	@ (8006178 <__sseek+0x28>)
 8006164:	4013      	ands	r3, r2
 8006166:	81a3      	strh	r3, [r4, #12]
 8006168:	bd70      	pop	{r4, r5, r6, pc}
 800616a:	2280      	movs	r2, #128	@ 0x80
 800616c:	0152      	lsls	r2, r2, #5
 800616e:	4313      	orrs	r3, r2
 8006170:	81a3      	strh	r3, [r4, #12]
 8006172:	6560      	str	r0, [r4, #84]	@ 0x54
 8006174:	e7f8      	b.n	8006168 <__sseek+0x18>
 8006176:	46c0      	nop			@ (mov r8, r8)
 8006178:	ffffefff 	.word	0xffffefff

0800617c <__sclose>:
 800617c:	b510      	push	{r4, lr}
 800617e:	230e      	movs	r3, #14
 8006180:	5ec9      	ldrsh	r1, [r1, r3]
 8006182:	f000 f8a9 	bl	80062d8 <_close_r>
 8006186:	bd10      	pop	{r4, pc}

08006188 <__swbuf_r>:
 8006188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800618a:	0006      	movs	r6, r0
 800618c:	000d      	movs	r5, r1
 800618e:	0014      	movs	r4, r2
 8006190:	2800      	cmp	r0, #0
 8006192:	d004      	beq.n	800619e <__swbuf_r+0x16>
 8006194:	6a03      	ldr	r3, [r0, #32]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d101      	bne.n	800619e <__swbuf_r+0x16>
 800619a:	f7ff fed1 	bl	8005f40 <__sinit>
 800619e:	69a3      	ldr	r3, [r4, #24]
 80061a0:	60a3      	str	r3, [r4, #8]
 80061a2:	89a3      	ldrh	r3, [r4, #12]
 80061a4:	071b      	lsls	r3, r3, #28
 80061a6:	d502      	bpl.n	80061ae <__swbuf_r+0x26>
 80061a8:	6923      	ldr	r3, [r4, #16]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d109      	bne.n	80061c2 <__swbuf_r+0x3a>
 80061ae:	0021      	movs	r1, r4
 80061b0:	0030      	movs	r0, r6
 80061b2:	f000 f82b 	bl	800620c <__swsetup_r>
 80061b6:	2800      	cmp	r0, #0
 80061b8:	d003      	beq.n	80061c2 <__swbuf_r+0x3a>
 80061ba:	2501      	movs	r5, #1
 80061bc:	426d      	negs	r5, r5
 80061be:	0028      	movs	r0, r5
 80061c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061c2:	6923      	ldr	r3, [r4, #16]
 80061c4:	6820      	ldr	r0, [r4, #0]
 80061c6:	b2ef      	uxtb	r7, r5
 80061c8:	1ac0      	subs	r0, r0, r3
 80061ca:	6963      	ldr	r3, [r4, #20]
 80061cc:	b2ed      	uxtb	r5, r5
 80061ce:	4283      	cmp	r3, r0
 80061d0:	dc05      	bgt.n	80061de <__swbuf_r+0x56>
 80061d2:	0021      	movs	r1, r4
 80061d4:	0030      	movs	r0, r6
 80061d6:	f000 fe9d 	bl	8006f14 <_fflush_r>
 80061da:	2800      	cmp	r0, #0
 80061dc:	d1ed      	bne.n	80061ba <__swbuf_r+0x32>
 80061de:	68a3      	ldr	r3, [r4, #8]
 80061e0:	3001      	adds	r0, #1
 80061e2:	3b01      	subs	r3, #1
 80061e4:	60a3      	str	r3, [r4, #8]
 80061e6:	6823      	ldr	r3, [r4, #0]
 80061e8:	1c5a      	adds	r2, r3, #1
 80061ea:	6022      	str	r2, [r4, #0]
 80061ec:	701f      	strb	r7, [r3, #0]
 80061ee:	6963      	ldr	r3, [r4, #20]
 80061f0:	4283      	cmp	r3, r0
 80061f2:	d004      	beq.n	80061fe <__swbuf_r+0x76>
 80061f4:	89a3      	ldrh	r3, [r4, #12]
 80061f6:	07db      	lsls	r3, r3, #31
 80061f8:	d5e1      	bpl.n	80061be <__swbuf_r+0x36>
 80061fa:	2d0a      	cmp	r5, #10
 80061fc:	d1df      	bne.n	80061be <__swbuf_r+0x36>
 80061fe:	0021      	movs	r1, r4
 8006200:	0030      	movs	r0, r6
 8006202:	f000 fe87 	bl	8006f14 <_fflush_r>
 8006206:	2800      	cmp	r0, #0
 8006208:	d0d9      	beq.n	80061be <__swbuf_r+0x36>
 800620a:	e7d6      	b.n	80061ba <__swbuf_r+0x32>

0800620c <__swsetup_r>:
 800620c:	4b2d      	ldr	r3, [pc, #180]	@ (80062c4 <__swsetup_r+0xb8>)
 800620e:	b570      	push	{r4, r5, r6, lr}
 8006210:	0005      	movs	r5, r0
 8006212:	6818      	ldr	r0, [r3, #0]
 8006214:	000c      	movs	r4, r1
 8006216:	2800      	cmp	r0, #0
 8006218:	d004      	beq.n	8006224 <__swsetup_r+0x18>
 800621a:	6a03      	ldr	r3, [r0, #32]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d101      	bne.n	8006224 <__swsetup_r+0x18>
 8006220:	f7ff fe8e 	bl	8005f40 <__sinit>
 8006224:	230c      	movs	r3, #12
 8006226:	5ee2      	ldrsh	r2, [r4, r3]
 8006228:	0713      	lsls	r3, r2, #28
 800622a:	d423      	bmi.n	8006274 <__swsetup_r+0x68>
 800622c:	06d3      	lsls	r3, r2, #27
 800622e:	d407      	bmi.n	8006240 <__swsetup_r+0x34>
 8006230:	2309      	movs	r3, #9
 8006232:	602b      	str	r3, [r5, #0]
 8006234:	2340      	movs	r3, #64	@ 0x40
 8006236:	2001      	movs	r0, #1
 8006238:	4313      	orrs	r3, r2
 800623a:	81a3      	strh	r3, [r4, #12]
 800623c:	4240      	negs	r0, r0
 800623e:	e03a      	b.n	80062b6 <__swsetup_r+0xaa>
 8006240:	0752      	lsls	r2, r2, #29
 8006242:	d513      	bpl.n	800626c <__swsetup_r+0x60>
 8006244:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006246:	2900      	cmp	r1, #0
 8006248:	d008      	beq.n	800625c <__swsetup_r+0x50>
 800624a:	0023      	movs	r3, r4
 800624c:	3344      	adds	r3, #68	@ 0x44
 800624e:	4299      	cmp	r1, r3
 8006250:	d002      	beq.n	8006258 <__swsetup_r+0x4c>
 8006252:	0028      	movs	r0, r5
 8006254:	f000 f8bc 	bl	80063d0 <_free_r>
 8006258:	2300      	movs	r3, #0
 800625a:	6363      	str	r3, [r4, #52]	@ 0x34
 800625c:	2224      	movs	r2, #36	@ 0x24
 800625e:	89a3      	ldrh	r3, [r4, #12]
 8006260:	4393      	bics	r3, r2
 8006262:	81a3      	strh	r3, [r4, #12]
 8006264:	2300      	movs	r3, #0
 8006266:	6063      	str	r3, [r4, #4]
 8006268:	6923      	ldr	r3, [r4, #16]
 800626a:	6023      	str	r3, [r4, #0]
 800626c:	2308      	movs	r3, #8
 800626e:	89a2      	ldrh	r2, [r4, #12]
 8006270:	4313      	orrs	r3, r2
 8006272:	81a3      	strh	r3, [r4, #12]
 8006274:	6923      	ldr	r3, [r4, #16]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d10b      	bne.n	8006292 <__swsetup_r+0x86>
 800627a:	21a0      	movs	r1, #160	@ 0xa0
 800627c:	2280      	movs	r2, #128	@ 0x80
 800627e:	89a3      	ldrh	r3, [r4, #12]
 8006280:	0089      	lsls	r1, r1, #2
 8006282:	0092      	lsls	r2, r2, #2
 8006284:	400b      	ands	r3, r1
 8006286:	4293      	cmp	r3, r2
 8006288:	d003      	beq.n	8006292 <__swsetup_r+0x86>
 800628a:	0021      	movs	r1, r4
 800628c:	0028      	movs	r0, r5
 800628e:	f000 fe97 	bl	8006fc0 <__smakebuf_r>
 8006292:	230c      	movs	r3, #12
 8006294:	5ee2      	ldrsh	r2, [r4, r3]
 8006296:	2101      	movs	r1, #1
 8006298:	0013      	movs	r3, r2
 800629a:	400b      	ands	r3, r1
 800629c:	420a      	tst	r2, r1
 800629e:	d00b      	beq.n	80062b8 <__swsetup_r+0xac>
 80062a0:	2300      	movs	r3, #0
 80062a2:	60a3      	str	r3, [r4, #8]
 80062a4:	6963      	ldr	r3, [r4, #20]
 80062a6:	425b      	negs	r3, r3
 80062a8:	61a3      	str	r3, [r4, #24]
 80062aa:	2000      	movs	r0, #0
 80062ac:	6923      	ldr	r3, [r4, #16]
 80062ae:	4283      	cmp	r3, r0
 80062b0:	d101      	bne.n	80062b6 <__swsetup_r+0xaa>
 80062b2:	0613      	lsls	r3, r2, #24
 80062b4:	d4be      	bmi.n	8006234 <__swsetup_r+0x28>
 80062b6:	bd70      	pop	{r4, r5, r6, pc}
 80062b8:	0791      	lsls	r1, r2, #30
 80062ba:	d400      	bmi.n	80062be <__swsetup_r+0xb2>
 80062bc:	6963      	ldr	r3, [r4, #20]
 80062be:	60a3      	str	r3, [r4, #8]
 80062c0:	e7f3      	b.n	80062aa <__swsetup_r+0x9e>
 80062c2:	46c0      	nop			@ (mov r8, r8)
 80062c4:	20000024 	.word	0x20000024

080062c8 <memset>:
 80062c8:	0003      	movs	r3, r0
 80062ca:	1882      	adds	r2, r0, r2
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d100      	bne.n	80062d2 <memset+0xa>
 80062d0:	4770      	bx	lr
 80062d2:	7019      	strb	r1, [r3, #0]
 80062d4:	3301      	adds	r3, #1
 80062d6:	e7f9      	b.n	80062cc <memset+0x4>

080062d8 <_close_r>:
 80062d8:	2300      	movs	r3, #0
 80062da:	b570      	push	{r4, r5, r6, lr}
 80062dc:	4d06      	ldr	r5, [pc, #24]	@ (80062f8 <_close_r+0x20>)
 80062de:	0004      	movs	r4, r0
 80062e0:	0008      	movs	r0, r1
 80062e2:	602b      	str	r3, [r5, #0]
 80062e4:	f7fb fb4b 	bl	800197e <_close>
 80062e8:	1c43      	adds	r3, r0, #1
 80062ea:	d103      	bne.n	80062f4 <_close_r+0x1c>
 80062ec:	682b      	ldr	r3, [r5, #0]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d000      	beq.n	80062f4 <_close_r+0x1c>
 80062f2:	6023      	str	r3, [r4, #0]
 80062f4:	bd70      	pop	{r4, r5, r6, pc}
 80062f6:	46c0      	nop			@ (mov r8, r8)
 80062f8:	200004c8 	.word	0x200004c8

080062fc <_lseek_r>:
 80062fc:	b570      	push	{r4, r5, r6, lr}
 80062fe:	0004      	movs	r4, r0
 8006300:	0008      	movs	r0, r1
 8006302:	0011      	movs	r1, r2
 8006304:	001a      	movs	r2, r3
 8006306:	2300      	movs	r3, #0
 8006308:	4d05      	ldr	r5, [pc, #20]	@ (8006320 <_lseek_r+0x24>)
 800630a:	602b      	str	r3, [r5, #0]
 800630c:	f7fb fb58 	bl	80019c0 <_lseek>
 8006310:	1c43      	adds	r3, r0, #1
 8006312:	d103      	bne.n	800631c <_lseek_r+0x20>
 8006314:	682b      	ldr	r3, [r5, #0]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d000      	beq.n	800631c <_lseek_r+0x20>
 800631a:	6023      	str	r3, [r4, #0]
 800631c:	bd70      	pop	{r4, r5, r6, pc}
 800631e:	46c0      	nop			@ (mov r8, r8)
 8006320:	200004c8 	.word	0x200004c8

08006324 <_read_r>:
 8006324:	b570      	push	{r4, r5, r6, lr}
 8006326:	0004      	movs	r4, r0
 8006328:	0008      	movs	r0, r1
 800632a:	0011      	movs	r1, r2
 800632c:	001a      	movs	r2, r3
 800632e:	2300      	movs	r3, #0
 8006330:	4d05      	ldr	r5, [pc, #20]	@ (8006348 <_read_r+0x24>)
 8006332:	602b      	str	r3, [r5, #0]
 8006334:	f7fb fb06 	bl	8001944 <_read>
 8006338:	1c43      	adds	r3, r0, #1
 800633a:	d103      	bne.n	8006344 <_read_r+0x20>
 800633c:	682b      	ldr	r3, [r5, #0]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d000      	beq.n	8006344 <_read_r+0x20>
 8006342:	6023      	str	r3, [r4, #0]
 8006344:	bd70      	pop	{r4, r5, r6, pc}
 8006346:	46c0      	nop			@ (mov r8, r8)
 8006348:	200004c8 	.word	0x200004c8

0800634c <_write_r>:
 800634c:	b570      	push	{r4, r5, r6, lr}
 800634e:	0004      	movs	r4, r0
 8006350:	0008      	movs	r0, r1
 8006352:	0011      	movs	r1, r2
 8006354:	001a      	movs	r2, r3
 8006356:	2300      	movs	r3, #0
 8006358:	4d05      	ldr	r5, [pc, #20]	@ (8006370 <_write_r+0x24>)
 800635a:	602b      	str	r3, [r5, #0]
 800635c:	f7fa fc9a 	bl	8000c94 <_write>
 8006360:	1c43      	adds	r3, r0, #1
 8006362:	d103      	bne.n	800636c <_write_r+0x20>
 8006364:	682b      	ldr	r3, [r5, #0]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d000      	beq.n	800636c <_write_r+0x20>
 800636a:	6023      	str	r3, [r4, #0]
 800636c:	bd70      	pop	{r4, r5, r6, pc}
 800636e:	46c0      	nop			@ (mov r8, r8)
 8006370:	200004c8 	.word	0x200004c8

08006374 <__errno>:
 8006374:	4b01      	ldr	r3, [pc, #4]	@ (800637c <__errno+0x8>)
 8006376:	6818      	ldr	r0, [r3, #0]
 8006378:	4770      	bx	lr
 800637a:	46c0      	nop			@ (mov r8, r8)
 800637c:	20000024 	.word	0x20000024

08006380 <__libc_init_array>:
 8006380:	b570      	push	{r4, r5, r6, lr}
 8006382:	2600      	movs	r6, #0
 8006384:	4c0c      	ldr	r4, [pc, #48]	@ (80063b8 <__libc_init_array+0x38>)
 8006386:	4d0d      	ldr	r5, [pc, #52]	@ (80063bc <__libc_init_array+0x3c>)
 8006388:	1b64      	subs	r4, r4, r5
 800638a:	10a4      	asrs	r4, r4, #2
 800638c:	42a6      	cmp	r6, r4
 800638e:	d109      	bne.n	80063a4 <__libc_init_array+0x24>
 8006390:	2600      	movs	r6, #0
 8006392:	f000 feeb 	bl	800716c <_init>
 8006396:	4c0a      	ldr	r4, [pc, #40]	@ (80063c0 <__libc_init_array+0x40>)
 8006398:	4d0a      	ldr	r5, [pc, #40]	@ (80063c4 <__libc_init_array+0x44>)
 800639a:	1b64      	subs	r4, r4, r5
 800639c:	10a4      	asrs	r4, r4, #2
 800639e:	42a6      	cmp	r6, r4
 80063a0:	d105      	bne.n	80063ae <__libc_init_array+0x2e>
 80063a2:	bd70      	pop	{r4, r5, r6, pc}
 80063a4:	00b3      	lsls	r3, r6, #2
 80063a6:	58eb      	ldr	r3, [r5, r3]
 80063a8:	4798      	blx	r3
 80063aa:	3601      	adds	r6, #1
 80063ac:	e7ee      	b.n	800638c <__libc_init_array+0xc>
 80063ae:	00b3      	lsls	r3, r6, #2
 80063b0:	58eb      	ldr	r3, [r5, r3]
 80063b2:	4798      	blx	r3
 80063b4:	3601      	adds	r6, #1
 80063b6:	e7f2      	b.n	800639e <__libc_init_array+0x1e>
 80063b8:	080072f4 	.word	0x080072f4
 80063bc:	080072f4 	.word	0x080072f4
 80063c0:	080072f8 	.word	0x080072f8
 80063c4:	080072f4 	.word	0x080072f4

080063c8 <__retarget_lock_init_recursive>:
 80063c8:	4770      	bx	lr

080063ca <__retarget_lock_acquire_recursive>:
 80063ca:	4770      	bx	lr

080063cc <__retarget_lock_release_recursive>:
 80063cc:	4770      	bx	lr
	...

080063d0 <_free_r>:
 80063d0:	b570      	push	{r4, r5, r6, lr}
 80063d2:	0005      	movs	r5, r0
 80063d4:	1e0c      	subs	r4, r1, #0
 80063d6:	d010      	beq.n	80063fa <_free_r+0x2a>
 80063d8:	3c04      	subs	r4, #4
 80063da:	6823      	ldr	r3, [r4, #0]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	da00      	bge.n	80063e2 <_free_r+0x12>
 80063e0:	18e4      	adds	r4, r4, r3
 80063e2:	0028      	movs	r0, r5
 80063e4:	f000 f8e0 	bl	80065a8 <__malloc_lock>
 80063e8:	4a1d      	ldr	r2, [pc, #116]	@ (8006460 <_free_r+0x90>)
 80063ea:	6813      	ldr	r3, [r2, #0]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d105      	bne.n	80063fc <_free_r+0x2c>
 80063f0:	6063      	str	r3, [r4, #4]
 80063f2:	6014      	str	r4, [r2, #0]
 80063f4:	0028      	movs	r0, r5
 80063f6:	f000 f8df 	bl	80065b8 <__malloc_unlock>
 80063fa:	bd70      	pop	{r4, r5, r6, pc}
 80063fc:	42a3      	cmp	r3, r4
 80063fe:	d908      	bls.n	8006412 <_free_r+0x42>
 8006400:	6820      	ldr	r0, [r4, #0]
 8006402:	1821      	adds	r1, r4, r0
 8006404:	428b      	cmp	r3, r1
 8006406:	d1f3      	bne.n	80063f0 <_free_r+0x20>
 8006408:	6819      	ldr	r1, [r3, #0]
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	1809      	adds	r1, r1, r0
 800640e:	6021      	str	r1, [r4, #0]
 8006410:	e7ee      	b.n	80063f0 <_free_r+0x20>
 8006412:	001a      	movs	r2, r3
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d001      	beq.n	800641e <_free_r+0x4e>
 800641a:	42a3      	cmp	r3, r4
 800641c:	d9f9      	bls.n	8006412 <_free_r+0x42>
 800641e:	6811      	ldr	r1, [r2, #0]
 8006420:	1850      	adds	r0, r2, r1
 8006422:	42a0      	cmp	r0, r4
 8006424:	d10b      	bne.n	800643e <_free_r+0x6e>
 8006426:	6820      	ldr	r0, [r4, #0]
 8006428:	1809      	adds	r1, r1, r0
 800642a:	1850      	adds	r0, r2, r1
 800642c:	6011      	str	r1, [r2, #0]
 800642e:	4283      	cmp	r3, r0
 8006430:	d1e0      	bne.n	80063f4 <_free_r+0x24>
 8006432:	6818      	ldr	r0, [r3, #0]
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	1841      	adds	r1, r0, r1
 8006438:	6011      	str	r1, [r2, #0]
 800643a:	6053      	str	r3, [r2, #4]
 800643c:	e7da      	b.n	80063f4 <_free_r+0x24>
 800643e:	42a0      	cmp	r0, r4
 8006440:	d902      	bls.n	8006448 <_free_r+0x78>
 8006442:	230c      	movs	r3, #12
 8006444:	602b      	str	r3, [r5, #0]
 8006446:	e7d5      	b.n	80063f4 <_free_r+0x24>
 8006448:	6820      	ldr	r0, [r4, #0]
 800644a:	1821      	adds	r1, r4, r0
 800644c:	428b      	cmp	r3, r1
 800644e:	d103      	bne.n	8006458 <_free_r+0x88>
 8006450:	6819      	ldr	r1, [r3, #0]
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	1809      	adds	r1, r1, r0
 8006456:	6021      	str	r1, [r4, #0]
 8006458:	6063      	str	r3, [r4, #4]
 800645a:	6054      	str	r4, [r2, #4]
 800645c:	e7ca      	b.n	80063f4 <_free_r+0x24>
 800645e:	46c0      	nop			@ (mov r8, r8)
 8006460:	200004d4 	.word	0x200004d4

08006464 <sbrk_aligned>:
 8006464:	b570      	push	{r4, r5, r6, lr}
 8006466:	4e0f      	ldr	r6, [pc, #60]	@ (80064a4 <sbrk_aligned+0x40>)
 8006468:	000d      	movs	r5, r1
 800646a:	6831      	ldr	r1, [r6, #0]
 800646c:	0004      	movs	r4, r0
 800646e:	2900      	cmp	r1, #0
 8006470:	d102      	bne.n	8006478 <sbrk_aligned+0x14>
 8006472:	f000 fe1d 	bl	80070b0 <_sbrk_r>
 8006476:	6030      	str	r0, [r6, #0]
 8006478:	0029      	movs	r1, r5
 800647a:	0020      	movs	r0, r4
 800647c:	f000 fe18 	bl	80070b0 <_sbrk_r>
 8006480:	1c43      	adds	r3, r0, #1
 8006482:	d103      	bne.n	800648c <sbrk_aligned+0x28>
 8006484:	2501      	movs	r5, #1
 8006486:	426d      	negs	r5, r5
 8006488:	0028      	movs	r0, r5
 800648a:	bd70      	pop	{r4, r5, r6, pc}
 800648c:	2303      	movs	r3, #3
 800648e:	1cc5      	adds	r5, r0, #3
 8006490:	439d      	bics	r5, r3
 8006492:	42a8      	cmp	r0, r5
 8006494:	d0f8      	beq.n	8006488 <sbrk_aligned+0x24>
 8006496:	1a29      	subs	r1, r5, r0
 8006498:	0020      	movs	r0, r4
 800649a:	f000 fe09 	bl	80070b0 <_sbrk_r>
 800649e:	3001      	adds	r0, #1
 80064a0:	d1f2      	bne.n	8006488 <sbrk_aligned+0x24>
 80064a2:	e7ef      	b.n	8006484 <sbrk_aligned+0x20>
 80064a4:	200004d0 	.word	0x200004d0

080064a8 <_malloc_r>:
 80064a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80064aa:	2203      	movs	r2, #3
 80064ac:	1ccb      	adds	r3, r1, #3
 80064ae:	4393      	bics	r3, r2
 80064b0:	3308      	adds	r3, #8
 80064b2:	0005      	movs	r5, r0
 80064b4:	001f      	movs	r7, r3
 80064b6:	2b0c      	cmp	r3, #12
 80064b8:	d234      	bcs.n	8006524 <_malloc_r+0x7c>
 80064ba:	270c      	movs	r7, #12
 80064bc:	42b9      	cmp	r1, r7
 80064be:	d833      	bhi.n	8006528 <_malloc_r+0x80>
 80064c0:	0028      	movs	r0, r5
 80064c2:	f000 f871 	bl	80065a8 <__malloc_lock>
 80064c6:	4e37      	ldr	r6, [pc, #220]	@ (80065a4 <_malloc_r+0xfc>)
 80064c8:	6833      	ldr	r3, [r6, #0]
 80064ca:	001c      	movs	r4, r3
 80064cc:	2c00      	cmp	r4, #0
 80064ce:	d12f      	bne.n	8006530 <_malloc_r+0x88>
 80064d0:	0039      	movs	r1, r7
 80064d2:	0028      	movs	r0, r5
 80064d4:	f7ff ffc6 	bl	8006464 <sbrk_aligned>
 80064d8:	0004      	movs	r4, r0
 80064da:	1c43      	adds	r3, r0, #1
 80064dc:	d15f      	bne.n	800659e <_malloc_r+0xf6>
 80064de:	6834      	ldr	r4, [r6, #0]
 80064e0:	9400      	str	r4, [sp, #0]
 80064e2:	9b00      	ldr	r3, [sp, #0]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d14a      	bne.n	800657e <_malloc_r+0xd6>
 80064e8:	2c00      	cmp	r4, #0
 80064ea:	d052      	beq.n	8006592 <_malloc_r+0xea>
 80064ec:	6823      	ldr	r3, [r4, #0]
 80064ee:	0028      	movs	r0, r5
 80064f0:	18e3      	adds	r3, r4, r3
 80064f2:	9900      	ldr	r1, [sp, #0]
 80064f4:	9301      	str	r3, [sp, #4]
 80064f6:	f000 fddb 	bl	80070b0 <_sbrk_r>
 80064fa:	9b01      	ldr	r3, [sp, #4]
 80064fc:	4283      	cmp	r3, r0
 80064fe:	d148      	bne.n	8006592 <_malloc_r+0xea>
 8006500:	6823      	ldr	r3, [r4, #0]
 8006502:	0028      	movs	r0, r5
 8006504:	1aff      	subs	r7, r7, r3
 8006506:	0039      	movs	r1, r7
 8006508:	f7ff ffac 	bl	8006464 <sbrk_aligned>
 800650c:	3001      	adds	r0, #1
 800650e:	d040      	beq.n	8006592 <_malloc_r+0xea>
 8006510:	6823      	ldr	r3, [r4, #0]
 8006512:	19db      	adds	r3, r3, r7
 8006514:	6023      	str	r3, [r4, #0]
 8006516:	6833      	ldr	r3, [r6, #0]
 8006518:	685a      	ldr	r2, [r3, #4]
 800651a:	2a00      	cmp	r2, #0
 800651c:	d133      	bne.n	8006586 <_malloc_r+0xde>
 800651e:	9b00      	ldr	r3, [sp, #0]
 8006520:	6033      	str	r3, [r6, #0]
 8006522:	e019      	b.n	8006558 <_malloc_r+0xb0>
 8006524:	2b00      	cmp	r3, #0
 8006526:	dac9      	bge.n	80064bc <_malloc_r+0x14>
 8006528:	230c      	movs	r3, #12
 800652a:	602b      	str	r3, [r5, #0]
 800652c:	2000      	movs	r0, #0
 800652e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006530:	6821      	ldr	r1, [r4, #0]
 8006532:	1bc9      	subs	r1, r1, r7
 8006534:	d420      	bmi.n	8006578 <_malloc_r+0xd0>
 8006536:	290b      	cmp	r1, #11
 8006538:	d90a      	bls.n	8006550 <_malloc_r+0xa8>
 800653a:	19e2      	adds	r2, r4, r7
 800653c:	6027      	str	r7, [r4, #0]
 800653e:	42a3      	cmp	r3, r4
 8006540:	d104      	bne.n	800654c <_malloc_r+0xa4>
 8006542:	6032      	str	r2, [r6, #0]
 8006544:	6863      	ldr	r3, [r4, #4]
 8006546:	6011      	str	r1, [r2, #0]
 8006548:	6053      	str	r3, [r2, #4]
 800654a:	e005      	b.n	8006558 <_malloc_r+0xb0>
 800654c:	605a      	str	r2, [r3, #4]
 800654e:	e7f9      	b.n	8006544 <_malloc_r+0x9c>
 8006550:	6862      	ldr	r2, [r4, #4]
 8006552:	42a3      	cmp	r3, r4
 8006554:	d10e      	bne.n	8006574 <_malloc_r+0xcc>
 8006556:	6032      	str	r2, [r6, #0]
 8006558:	0028      	movs	r0, r5
 800655a:	f000 f82d 	bl	80065b8 <__malloc_unlock>
 800655e:	0020      	movs	r0, r4
 8006560:	2207      	movs	r2, #7
 8006562:	300b      	adds	r0, #11
 8006564:	1d23      	adds	r3, r4, #4
 8006566:	4390      	bics	r0, r2
 8006568:	1ac2      	subs	r2, r0, r3
 800656a:	4298      	cmp	r0, r3
 800656c:	d0df      	beq.n	800652e <_malloc_r+0x86>
 800656e:	1a1b      	subs	r3, r3, r0
 8006570:	50a3      	str	r3, [r4, r2]
 8006572:	e7dc      	b.n	800652e <_malloc_r+0x86>
 8006574:	605a      	str	r2, [r3, #4]
 8006576:	e7ef      	b.n	8006558 <_malloc_r+0xb0>
 8006578:	0023      	movs	r3, r4
 800657a:	6864      	ldr	r4, [r4, #4]
 800657c:	e7a6      	b.n	80064cc <_malloc_r+0x24>
 800657e:	9c00      	ldr	r4, [sp, #0]
 8006580:	6863      	ldr	r3, [r4, #4]
 8006582:	9300      	str	r3, [sp, #0]
 8006584:	e7ad      	b.n	80064e2 <_malloc_r+0x3a>
 8006586:	001a      	movs	r2, r3
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	42a3      	cmp	r3, r4
 800658c:	d1fb      	bne.n	8006586 <_malloc_r+0xde>
 800658e:	2300      	movs	r3, #0
 8006590:	e7da      	b.n	8006548 <_malloc_r+0xa0>
 8006592:	230c      	movs	r3, #12
 8006594:	0028      	movs	r0, r5
 8006596:	602b      	str	r3, [r5, #0]
 8006598:	f000 f80e 	bl	80065b8 <__malloc_unlock>
 800659c:	e7c6      	b.n	800652c <_malloc_r+0x84>
 800659e:	6007      	str	r7, [r0, #0]
 80065a0:	e7da      	b.n	8006558 <_malloc_r+0xb0>
 80065a2:	46c0      	nop			@ (mov r8, r8)
 80065a4:	200004d4 	.word	0x200004d4

080065a8 <__malloc_lock>:
 80065a8:	b510      	push	{r4, lr}
 80065aa:	4802      	ldr	r0, [pc, #8]	@ (80065b4 <__malloc_lock+0xc>)
 80065ac:	f7ff ff0d 	bl	80063ca <__retarget_lock_acquire_recursive>
 80065b0:	bd10      	pop	{r4, pc}
 80065b2:	46c0      	nop			@ (mov r8, r8)
 80065b4:	200004cc 	.word	0x200004cc

080065b8 <__malloc_unlock>:
 80065b8:	b510      	push	{r4, lr}
 80065ba:	4802      	ldr	r0, [pc, #8]	@ (80065c4 <__malloc_unlock+0xc>)
 80065bc:	f7ff ff06 	bl	80063cc <__retarget_lock_release_recursive>
 80065c0:	bd10      	pop	{r4, pc}
 80065c2:	46c0      	nop			@ (mov r8, r8)
 80065c4:	200004cc 	.word	0x200004cc

080065c8 <__ssputs_r>:
 80065c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065ca:	688e      	ldr	r6, [r1, #8]
 80065cc:	b085      	sub	sp, #20
 80065ce:	001f      	movs	r7, r3
 80065d0:	000c      	movs	r4, r1
 80065d2:	680b      	ldr	r3, [r1, #0]
 80065d4:	9002      	str	r0, [sp, #8]
 80065d6:	9203      	str	r2, [sp, #12]
 80065d8:	42be      	cmp	r6, r7
 80065da:	d830      	bhi.n	800663e <__ssputs_r+0x76>
 80065dc:	210c      	movs	r1, #12
 80065de:	5e62      	ldrsh	r2, [r4, r1]
 80065e0:	2190      	movs	r1, #144	@ 0x90
 80065e2:	00c9      	lsls	r1, r1, #3
 80065e4:	420a      	tst	r2, r1
 80065e6:	d028      	beq.n	800663a <__ssputs_r+0x72>
 80065e8:	2003      	movs	r0, #3
 80065ea:	6921      	ldr	r1, [r4, #16]
 80065ec:	1a5b      	subs	r3, r3, r1
 80065ee:	9301      	str	r3, [sp, #4]
 80065f0:	6963      	ldr	r3, [r4, #20]
 80065f2:	4343      	muls	r3, r0
 80065f4:	9801      	ldr	r0, [sp, #4]
 80065f6:	0fdd      	lsrs	r5, r3, #31
 80065f8:	18ed      	adds	r5, r5, r3
 80065fa:	1c7b      	adds	r3, r7, #1
 80065fc:	181b      	adds	r3, r3, r0
 80065fe:	106d      	asrs	r5, r5, #1
 8006600:	42ab      	cmp	r3, r5
 8006602:	d900      	bls.n	8006606 <__ssputs_r+0x3e>
 8006604:	001d      	movs	r5, r3
 8006606:	0552      	lsls	r2, r2, #21
 8006608:	d528      	bpl.n	800665c <__ssputs_r+0x94>
 800660a:	0029      	movs	r1, r5
 800660c:	9802      	ldr	r0, [sp, #8]
 800660e:	f7ff ff4b 	bl	80064a8 <_malloc_r>
 8006612:	1e06      	subs	r6, r0, #0
 8006614:	d02c      	beq.n	8006670 <__ssputs_r+0xa8>
 8006616:	9a01      	ldr	r2, [sp, #4]
 8006618:	6921      	ldr	r1, [r4, #16]
 800661a:	f000 fd66 	bl	80070ea <memcpy>
 800661e:	89a2      	ldrh	r2, [r4, #12]
 8006620:	4b18      	ldr	r3, [pc, #96]	@ (8006684 <__ssputs_r+0xbc>)
 8006622:	401a      	ands	r2, r3
 8006624:	2380      	movs	r3, #128	@ 0x80
 8006626:	4313      	orrs	r3, r2
 8006628:	81a3      	strh	r3, [r4, #12]
 800662a:	9b01      	ldr	r3, [sp, #4]
 800662c:	6126      	str	r6, [r4, #16]
 800662e:	18f6      	adds	r6, r6, r3
 8006630:	6026      	str	r6, [r4, #0]
 8006632:	003e      	movs	r6, r7
 8006634:	6165      	str	r5, [r4, #20]
 8006636:	1aed      	subs	r5, r5, r3
 8006638:	60a5      	str	r5, [r4, #8]
 800663a:	42be      	cmp	r6, r7
 800663c:	d900      	bls.n	8006640 <__ssputs_r+0x78>
 800663e:	003e      	movs	r6, r7
 8006640:	0032      	movs	r2, r6
 8006642:	9903      	ldr	r1, [sp, #12]
 8006644:	6820      	ldr	r0, [r4, #0]
 8006646:	f000 fcfc 	bl	8007042 <memmove>
 800664a:	2000      	movs	r0, #0
 800664c:	68a3      	ldr	r3, [r4, #8]
 800664e:	1b9b      	subs	r3, r3, r6
 8006650:	60a3      	str	r3, [r4, #8]
 8006652:	6823      	ldr	r3, [r4, #0]
 8006654:	199b      	adds	r3, r3, r6
 8006656:	6023      	str	r3, [r4, #0]
 8006658:	b005      	add	sp, #20
 800665a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800665c:	002a      	movs	r2, r5
 800665e:	9802      	ldr	r0, [sp, #8]
 8006660:	f000 fd4c 	bl	80070fc <_realloc_r>
 8006664:	1e06      	subs	r6, r0, #0
 8006666:	d1e0      	bne.n	800662a <__ssputs_r+0x62>
 8006668:	6921      	ldr	r1, [r4, #16]
 800666a:	9802      	ldr	r0, [sp, #8]
 800666c:	f7ff feb0 	bl	80063d0 <_free_r>
 8006670:	230c      	movs	r3, #12
 8006672:	2001      	movs	r0, #1
 8006674:	9a02      	ldr	r2, [sp, #8]
 8006676:	4240      	negs	r0, r0
 8006678:	6013      	str	r3, [r2, #0]
 800667a:	89a2      	ldrh	r2, [r4, #12]
 800667c:	3334      	adds	r3, #52	@ 0x34
 800667e:	4313      	orrs	r3, r2
 8006680:	81a3      	strh	r3, [r4, #12]
 8006682:	e7e9      	b.n	8006658 <__ssputs_r+0x90>
 8006684:	fffffb7f 	.word	0xfffffb7f

08006688 <_svfiprintf_r>:
 8006688:	b5f0      	push	{r4, r5, r6, r7, lr}
 800668a:	b0a1      	sub	sp, #132	@ 0x84
 800668c:	9003      	str	r0, [sp, #12]
 800668e:	001d      	movs	r5, r3
 8006690:	898b      	ldrh	r3, [r1, #12]
 8006692:	000f      	movs	r7, r1
 8006694:	0016      	movs	r6, r2
 8006696:	061b      	lsls	r3, r3, #24
 8006698:	d511      	bpl.n	80066be <_svfiprintf_r+0x36>
 800669a:	690b      	ldr	r3, [r1, #16]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d10e      	bne.n	80066be <_svfiprintf_r+0x36>
 80066a0:	2140      	movs	r1, #64	@ 0x40
 80066a2:	f7ff ff01 	bl	80064a8 <_malloc_r>
 80066a6:	6038      	str	r0, [r7, #0]
 80066a8:	6138      	str	r0, [r7, #16]
 80066aa:	2800      	cmp	r0, #0
 80066ac:	d105      	bne.n	80066ba <_svfiprintf_r+0x32>
 80066ae:	230c      	movs	r3, #12
 80066b0:	9a03      	ldr	r2, [sp, #12]
 80066b2:	6013      	str	r3, [r2, #0]
 80066b4:	2001      	movs	r0, #1
 80066b6:	4240      	negs	r0, r0
 80066b8:	e0cf      	b.n	800685a <_svfiprintf_r+0x1d2>
 80066ba:	2340      	movs	r3, #64	@ 0x40
 80066bc:	617b      	str	r3, [r7, #20]
 80066be:	2300      	movs	r3, #0
 80066c0:	ac08      	add	r4, sp, #32
 80066c2:	6163      	str	r3, [r4, #20]
 80066c4:	3320      	adds	r3, #32
 80066c6:	7663      	strb	r3, [r4, #25]
 80066c8:	3310      	adds	r3, #16
 80066ca:	76a3      	strb	r3, [r4, #26]
 80066cc:	9507      	str	r5, [sp, #28]
 80066ce:	0035      	movs	r5, r6
 80066d0:	782b      	ldrb	r3, [r5, #0]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d001      	beq.n	80066da <_svfiprintf_r+0x52>
 80066d6:	2b25      	cmp	r3, #37	@ 0x25
 80066d8:	d148      	bne.n	800676c <_svfiprintf_r+0xe4>
 80066da:	1bab      	subs	r3, r5, r6
 80066dc:	9305      	str	r3, [sp, #20]
 80066de:	42b5      	cmp	r5, r6
 80066e0:	d00b      	beq.n	80066fa <_svfiprintf_r+0x72>
 80066e2:	0032      	movs	r2, r6
 80066e4:	0039      	movs	r1, r7
 80066e6:	9803      	ldr	r0, [sp, #12]
 80066e8:	f7ff ff6e 	bl	80065c8 <__ssputs_r>
 80066ec:	3001      	adds	r0, #1
 80066ee:	d100      	bne.n	80066f2 <_svfiprintf_r+0x6a>
 80066f0:	e0ae      	b.n	8006850 <_svfiprintf_r+0x1c8>
 80066f2:	6963      	ldr	r3, [r4, #20]
 80066f4:	9a05      	ldr	r2, [sp, #20]
 80066f6:	189b      	adds	r3, r3, r2
 80066f8:	6163      	str	r3, [r4, #20]
 80066fa:	782b      	ldrb	r3, [r5, #0]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d100      	bne.n	8006702 <_svfiprintf_r+0x7a>
 8006700:	e0a6      	b.n	8006850 <_svfiprintf_r+0x1c8>
 8006702:	2201      	movs	r2, #1
 8006704:	2300      	movs	r3, #0
 8006706:	4252      	negs	r2, r2
 8006708:	6062      	str	r2, [r4, #4]
 800670a:	a904      	add	r1, sp, #16
 800670c:	3254      	adds	r2, #84	@ 0x54
 800670e:	1852      	adds	r2, r2, r1
 8006710:	1c6e      	adds	r6, r5, #1
 8006712:	6023      	str	r3, [r4, #0]
 8006714:	60e3      	str	r3, [r4, #12]
 8006716:	60a3      	str	r3, [r4, #8]
 8006718:	7013      	strb	r3, [r2, #0]
 800671a:	65a3      	str	r3, [r4, #88]	@ 0x58
 800671c:	4b54      	ldr	r3, [pc, #336]	@ (8006870 <_svfiprintf_r+0x1e8>)
 800671e:	2205      	movs	r2, #5
 8006720:	0018      	movs	r0, r3
 8006722:	7831      	ldrb	r1, [r6, #0]
 8006724:	9305      	str	r3, [sp, #20]
 8006726:	f000 fcd5 	bl	80070d4 <memchr>
 800672a:	1c75      	adds	r5, r6, #1
 800672c:	2800      	cmp	r0, #0
 800672e:	d11f      	bne.n	8006770 <_svfiprintf_r+0xe8>
 8006730:	6822      	ldr	r2, [r4, #0]
 8006732:	06d3      	lsls	r3, r2, #27
 8006734:	d504      	bpl.n	8006740 <_svfiprintf_r+0xb8>
 8006736:	2353      	movs	r3, #83	@ 0x53
 8006738:	a904      	add	r1, sp, #16
 800673a:	185b      	adds	r3, r3, r1
 800673c:	2120      	movs	r1, #32
 800673e:	7019      	strb	r1, [r3, #0]
 8006740:	0713      	lsls	r3, r2, #28
 8006742:	d504      	bpl.n	800674e <_svfiprintf_r+0xc6>
 8006744:	2353      	movs	r3, #83	@ 0x53
 8006746:	a904      	add	r1, sp, #16
 8006748:	185b      	adds	r3, r3, r1
 800674a:	212b      	movs	r1, #43	@ 0x2b
 800674c:	7019      	strb	r1, [r3, #0]
 800674e:	7833      	ldrb	r3, [r6, #0]
 8006750:	2b2a      	cmp	r3, #42	@ 0x2a
 8006752:	d016      	beq.n	8006782 <_svfiprintf_r+0xfa>
 8006754:	0035      	movs	r5, r6
 8006756:	2100      	movs	r1, #0
 8006758:	200a      	movs	r0, #10
 800675a:	68e3      	ldr	r3, [r4, #12]
 800675c:	782a      	ldrb	r2, [r5, #0]
 800675e:	1c6e      	adds	r6, r5, #1
 8006760:	3a30      	subs	r2, #48	@ 0x30
 8006762:	2a09      	cmp	r2, #9
 8006764:	d950      	bls.n	8006808 <_svfiprintf_r+0x180>
 8006766:	2900      	cmp	r1, #0
 8006768:	d111      	bne.n	800678e <_svfiprintf_r+0x106>
 800676a:	e017      	b.n	800679c <_svfiprintf_r+0x114>
 800676c:	3501      	adds	r5, #1
 800676e:	e7af      	b.n	80066d0 <_svfiprintf_r+0x48>
 8006770:	9b05      	ldr	r3, [sp, #20]
 8006772:	6822      	ldr	r2, [r4, #0]
 8006774:	1ac0      	subs	r0, r0, r3
 8006776:	2301      	movs	r3, #1
 8006778:	4083      	lsls	r3, r0
 800677a:	4313      	orrs	r3, r2
 800677c:	002e      	movs	r6, r5
 800677e:	6023      	str	r3, [r4, #0]
 8006780:	e7cc      	b.n	800671c <_svfiprintf_r+0x94>
 8006782:	9b07      	ldr	r3, [sp, #28]
 8006784:	1d19      	adds	r1, r3, #4
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	9107      	str	r1, [sp, #28]
 800678a:	2b00      	cmp	r3, #0
 800678c:	db01      	blt.n	8006792 <_svfiprintf_r+0x10a>
 800678e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006790:	e004      	b.n	800679c <_svfiprintf_r+0x114>
 8006792:	425b      	negs	r3, r3
 8006794:	60e3      	str	r3, [r4, #12]
 8006796:	2302      	movs	r3, #2
 8006798:	4313      	orrs	r3, r2
 800679a:	6023      	str	r3, [r4, #0]
 800679c:	782b      	ldrb	r3, [r5, #0]
 800679e:	2b2e      	cmp	r3, #46	@ 0x2e
 80067a0:	d10c      	bne.n	80067bc <_svfiprintf_r+0x134>
 80067a2:	786b      	ldrb	r3, [r5, #1]
 80067a4:	2b2a      	cmp	r3, #42	@ 0x2a
 80067a6:	d134      	bne.n	8006812 <_svfiprintf_r+0x18a>
 80067a8:	9b07      	ldr	r3, [sp, #28]
 80067aa:	3502      	adds	r5, #2
 80067ac:	1d1a      	adds	r2, r3, #4
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	9207      	str	r2, [sp, #28]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	da01      	bge.n	80067ba <_svfiprintf_r+0x132>
 80067b6:	2301      	movs	r3, #1
 80067b8:	425b      	negs	r3, r3
 80067ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80067bc:	4e2d      	ldr	r6, [pc, #180]	@ (8006874 <_svfiprintf_r+0x1ec>)
 80067be:	2203      	movs	r2, #3
 80067c0:	0030      	movs	r0, r6
 80067c2:	7829      	ldrb	r1, [r5, #0]
 80067c4:	f000 fc86 	bl	80070d4 <memchr>
 80067c8:	2800      	cmp	r0, #0
 80067ca:	d006      	beq.n	80067da <_svfiprintf_r+0x152>
 80067cc:	2340      	movs	r3, #64	@ 0x40
 80067ce:	1b80      	subs	r0, r0, r6
 80067d0:	4083      	lsls	r3, r0
 80067d2:	6822      	ldr	r2, [r4, #0]
 80067d4:	3501      	adds	r5, #1
 80067d6:	4313      	orrs	r3, r2
 80067d8:	6023      	str	r3, [r4, #0]
 80067da:	7829      	ldrb	r1, [r5, #0]
 80067dc:	2206      	movs	r2, #6
 80067de:	4826      	ldr	r0, [pc, #152]	@ (8006878 <_svfiprintf_r+0x1f0>)
 80067e0:	1c6e      	adds	r6, r5, #1
 80067e2:	7621      	strb	r1, [r4, #24]
 80067e4:	f000 fc76 	bl	80070d4 <memchr>
 80067e8:	2800      	cmp	r0, #0
 80067ea:	d038      	beq.n	800685e <_svfiprintf_r+0x1d6>
 80067ec:	4b23      	ldr	r3, [pc, #140]	@ (800687c <_svfiprintf_r+0x1f4>)
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d122      	bne.n	8006838 <_svfiprintf_r+0x1b0>
 80067f2:	2207      	movs	r2, #7
 80067f4:	9b07      	ldr	r3, [sp, #28]
 80067f6:	3307      	adds	r3, #7
 80067f8:	4393      	bics	r3, r2
 80067fa:	3308      	adds	r3, #8
 80067fc:	9307      	str	r3, [sp, #28]
 80067fe:	6963      	ldr	r3, [r4, #20]
 8006800:	9a04      	ldr	r2, [sp, #16]
 8006802:	189b      	adds	r3, r3, r2
 8006804:	6163      	str	r3, [r4, #20]
 8006806:	e762      	b.n	80066ce <_svfiprintf_r+0x46>
 8006808:	4343      	muls	r3, r0
 800680a:	0035      	movs	r5, r6
 800680c:	2101      	movs	r1, #1
 800680e:	189b      	adds	r3, r3, r2
 8006810:	e7a4      	b.n	800675c <_svfiprintf_r+0xd4>
 8006812:	2300      	movs	r3, #0
 8006814:	200a      	movs	r0, #10
 8006816:	0019      	movs	r1, r3
 8006818:	3501      	adds	r5, #1
 800681a:	6063      	str	r3, [r4, #4]
 800681c:	782a      	ldrb	r2, [r5, #0]
 800681e:	1c6e      	adds	r6, r5, #1
 8006820:	3a30      	subs	r2, #48	@ 0x30
 8006822:	2a09      	cmp	r2, #9
 8006824:	d903      	bls.n	800682e <_svfiprintf_r+0x1a6>
 8006826:	2b00      	cmp	r3, #0
 8006828:	d0c8      	beq.n	80067bc <_svfiprintf_r+0x134>
 800682a:	9109      	str	r1, [sp, #36]	@ 0x24
 800682c:	e7c6      	b.n	80067bc <_svfiprintf_r+0x134>
 800682e:	4341      	muls	r1, r0
 8006830:	0035      	movs	r5, r6
 8006832:	2301      	movs	r3, #1
 8006834:	1889      	adds	r1, r1, r2
 8006836:	e7f1      	b.n	800681c <_svfiprintf_r+0x194>
 8006838:	aa07      	add	r2, sp, #28
 800683a:	9200      	str	r2, [sp, #0]
 800683c:	0021      	movs	r1, r4
 800683e:	003a      	movs	r2, r7
 8006840:	4b0f      	ldr	r3, [pc, #60]	@ (8006880 <_svfiprintf_r+0x1f8>)
 8006842:	9803      	ldr	r0, [sp, #12]
 8006844:	e000      	b.n	8006848 <_svfiprintf_r+0x1c0>
 8006846:	bf00      	nop
 8006848:	9004      	str	r0, [sp, #16]
 800684a:	9b04      	ldr	r3, [sp, #16]
 800684c:	3301      	adds	r3, #1
 800684e:	d1d6      	bne.n	80067fe <_svfiprintf_r+0x176>
 8006850:	89bb      	ldrh	r3, [r7, #12]
 8006852:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8006854:	065b      	lsls	r3, r3, #25
 8006856:	d500      	bpl.n	800685a <_svfiprintf_r+0x1d2>
 8006858:	e72c      	b.n	80066b4 <_svfiprintf_r+0x2c>
 800685a:	b021      	add	sp, #132	@ 0x84
 800685c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800685e:	aa07      	add	r2, sp, #28
 8006860:	9200      	str	r2, [sp, #0]
 8006862:	0021      	movs	r1, r4
 8006864:	003a      	movs	r2, r7
 8006866:	4b06      	ldr	r3, [pc, #24]	@ (8006880 <_svfiprintf_r+0x1f8>)
 8006868:	9803      	ldr	r0, [sp, #12]
 800686a:	f000 f9bf 	bl	8006bec <_printf_i>
 800686e:	e7eb      	b.n	8006848 <_svfiprintf_r+0x1c0>
 8006870:	080072b8 	.word	0x080072b8
 8006874:	080072be 	.word	0x080072be
 8006878:	080072c2 	.word	0x080072c2
 800687c:	00000000 	.word	0x00000000
 8006880:	080065c9 	.word	0x080065c9

08006884 <__sfputc_r>:
 8006884:	6893      	ldr	r3, [r2, #8]
 8006886:	b510      	push	{r4, lr}
 8006888:	3b01      	subs	r3, #1
 800688a:	6093      	str	r3, [r2, #8]
 800688c:	2b00      	cmp	r3, #0
 800688e:	da04      	bge.n	800689a <__sfputc_r+0x16>
 8006890:	6994      	ldr	r4, [r2, #24]
 8006892:	42a3      	cmp	r3, r4
 8006894:	db07      	blt.n	80068a6 <__sfputc_r+0x22>
 8006896:	290a      	cmp	r1, #10
 8006898:	d005      	beq.n	80068a6 <__sfputc_r+0x22>
 800689a:	6813      	ldr	r3, [r2, #0]
 800689c:	1c58      	adds	r0, r3, #1
 800689e:	6010      	str	r0, [r2, #0]
 80068a0:	7019      	strb	r1, [r3, #0]
 80068a2:	0008      	movs	r0, r1
 80068a4:	bd10      	pop	{r4, pc}
 80068a6:	f7ff fc6f 	bl	8006188 <__swbuf_r>
 80068aa:	0001      	movs	r1, r0
 80068ac:	e7f9      	b.n	80068a2 <__sfputc_r+0x1e>

080068ae <__sfputs_r>:
 80068ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068b0:	0006      	movs	r6, r0
 80068b2:	000f      	movs	r7, r1
 80068b4:	0014      	movs	r4, r2
 80068b6:	18d5      	adds	r5, r2, r3
 80068b8:	42ac      	cmp	r4, r5
 80068ba:	d101      	bne.n	80068c0 <__sfputs_r+0x12>
 80068bc:	2000      	movs	r0, #0
 80068be:	e007      	b.n	80068d0 <__sfputs_r+0x22>
 80068c0:	7821      	ldrb	r1, [r4, #0]
 80068c2:	003a      	movs	r2, r7
 80068c4:	0030      	movs	r0, r6
 80068c6:	f7ff ffdd 	bl	8006884 <__sfputc_r>
 80068ca:	3401      	adds	r4, #1
 80068cc:	1c43      	adds	r3, r0, #1
 80068ce:	d1f3      	bne.n	80068b8 <__sfputs_r+0xa>
 80068d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080068d4 <_vfiprintf_r>:
 80068d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80068d6:	b0a1      	sub	sp, #132	@ 0x84
 80068d8:	000f      	movs	r7, r1
 80068da:	0015      	movs	r5, r2
 80068dc:	001e      	movs	r6, r3
 80068de:	9003      	str	r0, [sp, #12]
 80068e0:	2800      	cmp	r0, #0
 80068e2:	d004      	beq.n	80068ee <_vfiprintf_r+0x1a>
 80068e4:	6a03      	ldr	r3, [r0, #32]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d101      	bne.n	80068ee <_vfiprintf_r+0x1a>
 80068ea:	f7ff fb29 	bl	8005f40 <__sinit>
 80068ee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80068f0:	07db      	lsls	r3, r3, #31
 80068f2:	d405      	bmi.n	8006900 <_vfiprintf_r+0x2c>
 80068f4:	89bb      	ldrh	r3, [r7, #12]
 80068f6:	059b      	lsls	r3, r3, #22
 80068f8:	d402      	bmi.n	8006900 <_vfiprintf_r+0x2c>
 80068fa:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80068fc:	f7ff fd65 	bl	80063ca <__retarget_lock_acquire_recursive>
 8006900:	89bb      	ldrh	r3, [r7, #12]
 8006902:	071b      	lsls	r3, r3, #28
 8006904:	d502      	bpl.n	800690c <_vfiprintf_r+0x38>
 8006906:	693b      	ldr	r3, [r7, #16]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d113      	bne.n	8006934 <_vfiprintf_r+0x60>
 800690c:	0039      	movs	r1, r7
 800690e:	9803      	ldr	r0, [sp, #12]
 8006910:	f7ff fc7c 	bl	800620c <__swsetup_r>
 8006914:	2800      	cmp	r0, #0
 8006916:	d00d      	beq.n	8006934 <_vfiprintf_r+0x60>
 8006918:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800691a:	07db      	lsls	r3, r3, #31
 800691c:	d503      	bpl.n	8006926 <_vfiprintf_r+0x52>
 800691e:	2001      	movs	r0, #1
 8006920:	4240      	negs	r0, r0
 8006922:	b021      	add	sp, #132	@ 0x84
 8006924:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006926:	89bb      	ldrh	r3, [r7, #12]
 8006928:	059b      	lsls	r3, r3, #22
 800692a:	d4f8      	bmi.n	800691e <_vfiprintf_r+0x4a>
 800692c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800692e:	f7ff fd4d 	bl	80063cc <__retarget_lock_release_recursive>
 8006932:	e7f4      	b.n	800691e <_vfiprintf_r+0x4a>
 8006934:	2300      	movs	r3, #0
 8006936:	ac08      	add	r4, sp, #32
 8006938:	6163      	str	r3, [r4, #20]
 800693a:	3320      	adds	r3, #32
 800693c:	7663      	strb	r3, [r4, #25]
 800693e:	3310      	adds	r3, #16
 8006940:	76a3      	strb	r3, [r4, #26]
 8006942:	9607      	str	r6, [sp, #28]
 8006944:	002e      	movs	r6, r5
 8006946:	7833      	ldrb	r3, [r6, #0]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d001      	beq.n	8006950 <_vfiprintf_r+0x7c>
 800694c:	2b25      	cmp	r3, #37	@ 0x25
 800694e:	d148      	bne.n	80069e2 <_vfiprintf_r+0x10e>
 8006950:	1b73      	subs	r3, r6, r5
 8006952:	9305      	str	r3, [sp, #20]
 8006954:	42ae      	cmp	r6, r5
 8006956:	d00b      	beq.n	8006970 <_vfiprintf_r+0x9c>
 8006958:	002a      	movs	r2, r5
 800695a:	0039      	movs	r1, r7
 800695c:	9803      	ldr	r0, [sp, #12]
 800695e:	f7ff ffa6 	bl	80068ae <__sfputs_r>
 8006962:	3001      	adds	r0, #1
 8006964:	d100      	bne.n	8006968 <_vfiprintf_r+0x94>
 8006966:	e0ae      	b.n	8006ac6 <_vfiprintf_r+0x1f2>
 8006968:	6963      	ldr	r3, [r4, #20]
 800696a:	9a05      	ldr	r2, [sp, #20]
 800696c:	189b      	adds	r3, r3, r2
 800696e:	6163      	str	r3, [r4, #20]
 8006970:	7833      	ldrb	r3, [r6, #0]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d100      	bne.n	8006978 <_vfiprintf_r+0xa4>
 8006976:	e0a6      	b.n	8006ac6 <_vfiprintf_r+0x1f2>
 8006978:	2201      	movs	r2, #1
 800697a:	2300      	movs	r3, #0
 800697c:	4252      	negs	r2, r2
 800697e:	6062      	str	r2, [r4, #4]
 8006980:	a904      	add	r1, sp, #16
 8006982:	3254      	adds	r2, #84	@ 0x54
 8006984:	1852      	adds	r2, r2, r1
 8006986:	1c75      	adds	r5, r6, #1
 8006988:	6023      	str	r3, [r4, #0]
 800698a:	60e3      	str	r3, [r4, #12]
 800698c:	60a3      	str	r3, [r4, #8]
 800698e:	7013      	strb	r3, [r2, #0]
 8006990:	65a3      	str	r3, [r4, #88]	@ 0x58
 8006992:	4b59      	ldr	r3, [pc, #356]	@ (8006af8 <_vfiprintf_r+0x224>)
 8006994:	2205      	movs	r2, #5
 8006996:	0018      	movs	r0, r3
 8006998:	7829      	ldrb	r1, [r5, #0]
 800699a:	9305      	str	r3, [sp, #20]
 800699c:	f000 fb9a 	bl	80070d4 <memchr>
 80069a0:	1c6e      	adds	r6, r5, #1
 80069a2:	2800      	cmp	r0, #0
 80069a4:	d11f      	bne.n	80069e6 <_vfiprintf_r+0x112>
 80069a6:	6822      	ldr	r2, [r4, #0]
 80069a8:	06d3      	lsls	r3, r2, #27
 80069aa:	d504      	bpl.n	80069b6 <_vfiprintf_r+0xe2>
 80069ac:	2353      	movs	r3, #83	@ 0x53
 80069ae:	a904      	add	r1, sp, #16
 80069b0:	185b      	adds	r3, r3, r1
 80069b2:	2120      	movs	r1, #32
 80069b4:	7019      	strb	r1, [r3, #0]
 80069b6:	0713      	lsls	r3, r2, #28
 80069b8:	d504      	bpl.n	80069c4 <_vfiprintf_r+0xf0>
 80069ba:	2353      	movs	r3, #83	@ 0x53
 80069bc:	a904      	add	r1, sp, #16
 80069be:	185b      	adds	r3, r3, r1
 80069c0:	212b      	movs	r1, #43	@ 0x2b
 80069c2:	7019      	strb	r1, [r3, #0]
 80069c4:	782b      	ldrb	r3, [r5, #0]
 80069c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80069c8:	d016      	beq.n	80069f8 <_vfiprintf_r+0x124>
 80069ca:	002e      	movs	r6, r5
 80069cc:	2100      	movs	r1, #0
 80069ce:	200a      	movs	r0, #10
 80069d0:	68e3      	ldr	r3, [r4, #12]
 80069d2:	7832      	ldrb	r2, [r6, #0]
 80069d4:	1c75      	adds	r5, r6, #1
 80069d6:	3a30      	subs	r2, #48	@ 0x30
 80069d8:	2a09      	cmp	r2, #9
 80069da:	d950      	bls.n	8006a7e <_vfiprintf_r+0x1aa>
 80069dc:	2900      	cmp	r1, #0
 80069de:	d111      	bne.n	8006a04 <_vfiprintf_r+0x130>
 80069e0:	e017      	b.n	8006a12 <_vfiprintf_r+0x13e>
 80069e2:	3601      	adds	r6, #1
 80069e4:	e7af      	b.n	8006946 <_vfiprintf_r+0x72>
 80069e6:	9b05      	ldr	r3, [sp, #20]
 80069e8:	6822      	ldr	r2, [r4, #0]
 80069ea:	1ac0      	subs	r0, r0, r3
 80069ec:	2301      	movs	r3, #1
 80069ee:	4083      	lsls	r3, r0
 80069f0:	4313      	orrs	r3, r2
 80069f2:	0035      	movs	r5, r6
 80069f4:	6023      	str	r3, [r4, #0]
 80069f6:	e7cc      	b.n	8006992 <_vfiprintf_r+0xbe>
 80069f8:	9b07      	ldr	r3, [sp, #28]
 80069fa:	1d19      	adds	r1, r3, #4
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	9107      	str	r1, [sp, #28]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	db01      	blt.n	8006a08 <_vfiprintf_r+0x134>
 8006a04:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006a06:	e004      	b.n	8006a12 <_vfiprintf_r+0x13e>
 8006a08:	425b      	negs	r3, r3
 8006a0a:	60e3      	str	r3, [r4, #12]
 8006a0c:	2302      	movs	r3, #2
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	6023      	str	r3, [r4, #0]
 8006a12:	7833      	ldrb	r3, [r6, #0]
 8006a14:	2b2e      	cmp	r3, #46	@ 0x2e
 8006a16:	d10c      	bne.n	8006a32 <_vfiprintf_r+0x15e>
 8006a18:	7873      	ldrb	r3, [r6, #1]
 8006a1a:	2b2a      	cmp	r3, #42	@ 0x2a
 8006a1c:	d134      	bne.n	8006a88 <_vfiprintf_r+0x1b4>
 8006a1e:	9b07      	ldr	r3, [sp, #28]
 8006a20:	3602      	adds	r6, #2
 8006a22:	1d1a      	adds	r2, r3, #4
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	9207      	str	r2, [sp, #28]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	da01      	bge.n	8006a30 <_vfiprintf_r+0x15c>
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	425b      	negs	r3, r3
 8006a30:	9309      	str	r3, [sp, #36]	@ 0x24
 8006a32:	4d32      	ldr	r5, [pc, #200]	@ (8006afc <_vfiprintf_r+0x228>)
 8006a34:	2203      	movs	r2, #3
 8006a36:	0028      	movs	r0, r5
 8006a38:	7831      	ldrb	r1, [r6, #0]
 8006a3a:	f000 fb4b 	bl	80070d4 <memchr>
 8006a3e:	2800      	cmp	r0, #0
 8006a40:	d006      	beq.n	8006a50 <_vfiprintf_r+0x17c>
 8006a42:	2340      	movs	r3, #64	@ 0x40
 8006a44:	1b40      	subs	r0, r0, r5
 8006a46:	4083      	lsls	r3, r0
 8006a48:	6822      	ldr	r2, [r4, #0]
 8006a4a:	3601      	adds	r6, #1
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	6023      	str	r3, [r4, #0]
 8006a50:	7831      	ldrb	r1, [r6, #0]
 8006a52:	2206      	movs	r2, #6
 8006a54:	482a      	ldr	r0, [pc, #168]	@ (8006b00 <_vfiprintf_r+0x22c>)
 8006a56:	1c75      	adds	r5, r6, #1
 8006a58:	7621      	strb	r1, [r4, #24]
 8006a5a:	f000 fb3b 	bl	80070d4 <memchr>
 8006a5e:	2800      	cmp	r0, #0
 8006a60:	d040      	beq.n	8006ae4 <_vfiprintf_r+0x210>
 8006a62:	4b28      	ldr	r3, [pc, #160]	@ (8006b04 <_vfiprintf_r+0x230>)
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d122      	bne.n	8006aae <_vfiprintf_r+0x1da>
 8006a68:	2207      	movs	r2, #7
 8006a6a:	9b07      	ldr	r3, [sp, #28]
 8006a6c:	3307      	adds	r3, #7
 8006a6e:	4393      	bics	r3, r2
 8006a70:	3308      	adds	r3, #8
 8006a72:	9307      	str	r3, [sp, #28]
 8006a74:	6963      	ldr	r3, [r4, #20]
 8006a76:	9a04      	ldr	r2, [sp, #16]
 8006a78:	189b      	adds	r3, r3, r2
 8006a7a:	6163      	str	r3, [r4, #20]
 8006a7c:	e762      	b.n	8006944 <_vfiprintf_r+0x70>
 8006a7e:	4343      	muls	r3, r0
 8006a80:	002e      	movs	r6, r5
 8006a82:	2101      	movs	r1, #1
 8006a84:	189b      	adds	r3, r3, r2
 8006a86:	e7a4      	b.n	80069d2 <_vfiprintf_r+0xfe>
 8006a88:	2300      	movs	r3, #0
 8006a8a:	200a      	movs	r0, #10
 8006a8c:	0019      	movs	r1, r3
 8006a8e:	3601      	adds	r6, #1
 8006a90:	6063      	str	r3, [r4, #4]
 8006a92:	7832      	ldrb	r2, [r6, #0]
 8006a94:	1c75      	adds	r5, r6, #1
 8006a96:	3a30      	subs	r2, #48	@ 0x30
 8006a98:	2a09      	cmp	r2, #9
 8006a9a:	d903      	bls.n	8006aa4 <_vfiprintf_r+0x1d0>
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d0c8      	beq.n	8006a32 <_vfiprintf_r+0x15e>
 8006aa0:	9109      	str	r1, [sp, #36]	@ 0x24
 8006aa2:	e7c6      	b.n	8006a32 <_vfiprintf_r+0x15e>
 8006aa4:	4341      	muls	r1, r0
 8006aa6:	002e      	movs	r6, r5
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	1889      	adds	r1, r1, r2
 8006aac:	e7f1      	b.n	8006a92 <_vfiprintf_r+0x1be>
 8006aae:	aa07      	add	r2, sp, #28
 8006ab0:	9200      	str	r2, [sp, #0]
 8006ab2:	0021      	movs	r1, r4
 8006ab4:	003a      	movs	r2, r7
 8006ab6:	4b14      	ldr	r3, [pc, #80]	@ (8006b08 <_vfiprintf_r+0x234>)
 8006ab8:	9803      	ldr	r0, [sp, #12]
 8006aba:	e000      	b.n	8006abe <_vfiprintf_r+0x1ea>
 8006abc:	bf00      	nop
 8006abe:	9004      	str	r0, [sp, #16]
 8006ac0:	9b04      	ldr	r3, [sp, #16]
 8006ac2:	3301      	adds	r3, #1
 8006ac4:	d1d6      	bne.n	8006a74 <_vfiprintf_r+0x1a0>
 8006ac6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006ac8:	07db      	lsls	r3, r3, #31
 8006aca:	d405      	bmi.n	8006ad8 <_vfiprintf_r+0x204>
 8006acc:	89bb      	ldrh	r3, [r7, #12]
 8006ace:	059b      	lsls	r3, r3, #22
 8006ad0:	d402      	bmi.n	8006ad8 <_vfiprintf_r+0x204>
 8006ad2:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8006ad4:	f7ff fc7a 	bl	80063cc <__retarget_lock_release_recursive>
 8006ad8:	89bb      	ldrh	r3, [r7, #12]
 8006ada:	065b      	lsls	r3, r3, #25
 8006adc:	d500      	bpl.n	8006ae0 <_vfiprintf_r+0x20c>
 8006ade:	e71e      	b.n	800691e <_vfiprintf_r+0x4a>
 8006ae0:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8006ae2:	e71e      	b.n	8006922 <_vfiprintf_r+0x4e>
 8006ae4:	aa07      	add	r2, sp, #28
 8006ae6:	9200      	str	r2, [sp, #0]
 8006ae8:	0021      	movs	r1, r4
 8006aea:	003a      	movs	r2, r7
 8006aec:	4b06      	ldr	r3, [pc, #24]	@ (8006b08 <_vfiprintf_r+0x234>)
 8006aee:	9803      	ldr	r0, [sp, #12]
 8006af0:	f000 f87c 	bl	8006bec <_printf_i>
 8006af4:	e7e3      	b.n	8006abe <_vfiprintf_r+0x1ea>
 8006af6:	46c0      	nop			@ (mov r8, r8)
 8006af8:	080072b8 	.word	0x080072b8
 8006afc:	080072be 	.word	0x080072be
 8006b00:	080072c2 	.word	0x080072c2
 8006b04:	00000000 	.word	0x00000000
 8006b08:	080068af 	.word	0x080068af

08006b0c <_printf_common>:
 8006b0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b0e:	0016      	movs	r6, r2
 8006b10:	9301      	str	r3, [sp, #4]
 8006b12:	688a      	ldr	r2, [r1, #8]
 8006b14:	690b      	ldr	r3, [r1, #16]
 8006b16:	000c      	movs	r4, r1
 8006b18:	9000      	str	r0, [sp, #0]
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	da00      	bge.n	8006b20 <_printf_common+0x14>
 8006b1e:	0013      	movs	r3, r2
 8006b20:	0022      	movs	r2, r4
 8006b22:	6033      	str	r3, [r6, #0]
 8006b24:	3243      	adds	r2, #67	@ 0x43
 8006b26:	7812      	ldrb	r2, [r2, #0]
 8006b28:	2a00      	cmp	r2, #0
 8006b2a:	d001      	beq.n	8006b30 <_printf_common+0x24>
 8006b2c:	3301      	adds	r3, #1
 8006b2e:	6033      	str	r3, [r6, #0]
 8006b30:	6823      	ldr	r3, [r4, #0]
 8006b32:	069b      	lsls	r3, r3, #26
 8006b34:	d502      	bpl.n	8006b3c <_printf_common+0x30>
 8006b36:	6833      	ldr	r3, [r6, #0]
 8006b38:	3302      	adds	r3, #2
 8006b3a:	6033      	str	r3, [r6, #0]
 8006b3c:	6822      	ldr	r2, [r4, #0]
 8006b3e:	2306      	movs	r3, #6
 8006b40:	0015      	movs	r5, r2
 8006b42:	401d      	ands	r5, r3
 8006b44:	421a      	tst	r2, r3
 8006b46:	d027      	beq.n	8006b98 <_printf_common+0x8c>
 8006b48:	0023      	movs	r3, r4
 8006b4a:	3343      	adds	r3, #67	@ 0x43
 8006b4c:	781b      	ldrb	r3, [r3, #0]
 8006b4e:	1e5a      	subs	r2, r3, #1
 8006b50:	4193      	sbcs	r3, r2
 8006b52:	6822      	ldr	r2, [r4, #0]
 8006b54:	0692      	lsls	r2, r2, #26
 8006b56:	d430      	bmi.n	8006bba <_printf_common+0xae>
 8006b58:	0022      	movs	r2, r4
 8006b5a:	9901      	ldr	r1, [sp, #4]
 8006b5c:	9800      	ldr	r0, [sp, #0]
 8006b5e:	9d08      	ldr	r5, [sp, #32]
 8006b60:	3243      	adds	r2, #67	@ 0x43
 8006b62:	47a8      	blx	r5
 8006b64:	3001      	adds	r0, #1
 8006b66:	d025      	beq.n	8006bb4 <_printf_common+0xa8>
 8006b68:	2206      	movs	r2, #6
 8006b6a:	6823      	ldr	r3, [r4, #0]
 8006b6c:	2500      	movs	r5, #0
 8006b6e:	4013      	ands	r3, r2
 8006b70:	2b04      	cmp	r3, #4
 8006b72:	d105      	bne.n	8006b80 <_printf_common+0x74>
 8006b74:	6833      	ldr	r3, [r6, #0]
 8006b76:	68e5      	ldr	r5, [r4, #12]
 8006b78:	1aed      	subs	r5, r5, r3
 8006b7a:	43eb      	mvns	r3, r5
 8006b7c:	17db      	asrs	r3, r3, #31
 8006b7e:	401d      	ands	r5, r3
 8006b80:	68a3      	ldr	r3, [r4, #8]
 8006b82:	6922      	ldr	r2, [r4, #16]
 8006b84:	4293      	cmp	r3, r2
 8006b86:	dd01      	ble.n	8006b8c <_printf_common+0x80>
 8006b88:	1a9b      	subs	r3, r3, r2
 8006b8a:	18ed      	adds	r5, r5, r3
 8006b8c:	2600      	movs	r6, #0
 8006b8e:	42b5      	cmp	r5, r6
 8006b90:	d120      	bne.n	8006bd4 <_printf_common+0xc8>
 8006b92:	2000      	movs	r0, #0
 8006b94:	e010      	b.n	8006bb8 <_printf_common+0xac>
 8006b96:	3501      	adds	r5, #1
 8006b98:	68e3      	ldr	r3, [r4, #12]
 8006b9a:	6832      	ldr	r2, [r6, #0]
 8006b9c:	1a9b      	subs	r3, r3, r2
 8006b9e:	42ab      	cmp	r3, r5
 8006ba0:	ddd2      	ble.n	8006b48 <_printf_common+0x3c>
 8006ba2:	0022      	movs	r2, r4
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	9901      	ldr	r1, [sp, #4]
 8006ba8:	9800      	ldr	r0, [sp, #0]
 8006baa:	9f08      	ldr	r7, [sp, #32]
 8006bac:	3219      	adds	r2, #25
 8006bae:	47b8      	blx	r7
 8006bb0:	3001      	adds	r0, #1
 8006bb2:	d1f0      	bne.n	8006b96 <_printf_common+0x8a>
 8006bb4:	2001      	movs	r0, #1
 8006bb6:	4240      	negs	r0, r0
 8006bb8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006bba:	2030      	movs	r0, #48	@ 0x30
 8006bbc:	18e1      	adds	r1, r4, r3
 8006bbe:	3143      	adds	r1, #67	@ 0x43
 8006bc0:	7008      	strb	r0, [r1, #0]
 8006bc2:	0021      	movs	r1, r4
 8006bc4:	1c5a      	adds	r2, r3, #1
 8006bc6:	3145      	adds	r1, #69	@ 0x45
 8006bc8:	7809      	ldrb	r1, [r1, #0]
 8006bca:	18a2      	adds	r2, r4, r2
 8006bcc:	3243      	adds	r2, #67	@ 0x43
 8006bce:	3302      	adds	r3, #2
 8006bd0:	7011      	strb	r1, [r2, #0]
 8006bd2:	e7c1      	b.n	8006b58 <_printf_common+0x4c>
 8006bd4:	0022      	movs	r2, r4
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	9901      	ldr	r1, [sp, #4]
 8006bda:	9800      	ldr	r0, [sp, #0]
 8006bdc:	9f08      	ldr	r7, [sp, #32]
 8006bde:	321a      	adds	r2, #26
 8006be0:	47b8      	blx	r7
 8006be2:	3001      	adds	r0, #1
 8006be4:	d0e6      	beq.n	8006bb4 <_printf_common+0xa8>
 8006be6:	3601      	adds	r6, #1
 8006be8:	e7d1      	b.n	8006b8e <_printf_common+0x82>
	...

08006bec <_printf_i>:
 8006bec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006bee:	b08b      	sub	sp, #44	@ 0x2c
 8006bf0:	9206      	str	r2, [sp, #24]
 8006bf2:	000a      	movs	r2, r1
 8006bf4:	3243      	adds	r2, #67	@ 0x43
 8006bf6:	9307      	str	r3, [sp, #28]
 8006bf8:	9005      	str	r0, [sp, #20]
 8006bfa:	9203      	str	r2, [sp, #12]
 8006bfc:	7e0a      	ldrb	r2, [r1, #24]
 8006bfe:	000c      	movs	r4, r1
 8006c00:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006c02:	2a78      	cmp	r2, #120	@ 0x78
 8006c04:	d809      	bhi.n	8006c1a <_printf_i+0x2e>
 8006c06:	2a62      	cmp	r2, #98	@ 0x62
 8006c08:	d80b      	bhi.n	8006c22 <_printf_i+0x36>
 8006c0a:	2a00      	cmp	r2, #0
 8006c0c:	d100      	bne.n	8006c10 <_printf_i+0x24>
 8006c0e:	e0bc      	b.n	8006d8a <_printf_i+0x19e>
 8006c10:	497b      	ldr	r1, [pc, #492]	@ (8006e00 <_printf_i+0x214>)
 8006c12:	9104      	str	r1, [sp, #16]
 8006c14:	2a58      	cmp	r2, #88	@ 0x58
 8006c16:	d100      	bne.n	8006c1a <_printf_i+0x2e>
 8006c18:	e090      	b.n	8006d3c <_printf_i+0x150>
 8006c1a:	0025      	movs	r5, r4
 8006c1c:	3542      	adds	r5, #66	@ 0x42
 8006c1e:	702a      	strb	r2, [r5, #0]
 8006c20:	e022      	b.n	8006c68 <_printf_i+0x7c>
 8006c22:	0010      	movs	r0, r2
 8006c24:	3863      	subs	r0, #99	@ 0x63
 8006c26:	2815      	cmp	r0, #21
 8006c28:	d8f7      	bhi.n	8006c1a <_printf_i+0x2e>
 8006c2a:	f7f9 fa6b 	bl	8000104 <__gnu_thumb1_case_shi>
 8006c2e:	0016      	.short	0x0016
 8006c30:	fff6001f 	.word	0xfff6001f
 8006c34:	fff6fff6 	.word	0xfff6fff6
 8006c38:	001ffff6 	.word	0x001ffff6
 8006c3c:	fff6fff6 	.word	0xfff6fff6
 8006c40:	fff6fff6 	.word	0xfff6fff6
 8006c44:	003600a1 	.word	0x003600a1
 8006c48:	fff60080 	.word	0xfff60080
 8006c4c:	00b2fff6 	.word	0x00b2fff6
 8006c50:	0036fff6 	.word	0x0036fff6
 8006c54:	fff6fff6 	.word	0xfff6fff6
 8006c58:	0084      	.short	0x0084
 8006c5a:	0025      	movs	r5, r4
 8006c5c:	681a      	ldr	r2, [r3, #0]
 8006c5e:	3542      	adds	r5, #66	@ 0x42
 8006c60:	1d11      	adds	r1, r2, #4
 8006c62:	6019      	str	r1, [r3, #0]
 8006c64:	6813      	ldr	r3, [r2, #0]
 8006c66:	702b      	strb	r3, [r5, #0]
 8006c68:	2301      	movs	r3, #1
 8006c6a:	e0a0      	b.n	8006dae <_printf_i+0x1c2>
 8006c6c:	6818      	ldr	r0, [r3, #0]
 8006c6e:	6809      	ldr	r1, [r1, #0]
 8006c70:	1d02      	adds	r2, r0, #4
 8006c72:	060d      	lsls	r5, r1, #24
 8006c74:	d50b      	bpl.n	8006c8e <_printf_i+0xa2>
 8006c76:	6806      	ldr	r6, [r0, #0]
 8006c78:	601a      	str	r2, [r3, #0]
 8006c7a:	2e00      	cmp	r6, #0
 8006c7c:	da03      	bge.n	8006c86 <_printf_i+0x9a>
 8006c7e:	232d      	movs	r3, #45	@ 0x2d
 8006c80:	9a03      	ldr	r2, [sp, #12]
 8006c82:	4276      	negs	r6, r6
 8006c84:	7013      	strb	r3, [r2, #0]
 8006c86:	4b5e      	ldr	r3, [pc, #376]	@ (8006e00 <_printf_i+0x214>)
 8006c88:	270a      	movs	r7, #10
 8006c8a:	9304      	str	r3, [sp, #16]
 8006c8c:	e018      	b.n	8006cc0 <_printf_i+0xd4>
 8006c8e:	6806      	ldr	r6, [r0, #0]
 8006c90:	601a      	str	r2, [r3, #0]
 8006c92:	0649      	lsls	r1, r1, #25
 8006c94:	d5f1      	bpl.n	8006c7a <_printf_i+0x8e>
 8006c96:	b236      	sxth	r6, r6
 8006c98:	e7ef      	b.n	8006c7a <_printf_i+0x8e>
 8006c9a:	6808      	ldr	r0, [r1, #0]
 8006c9c:	6819      	ldr	r1, [r3, #0]
 8006c9e:	c940      	ldmia	r1!, {r6}
 8006ca0:	0605      	lsls	r5, r0, #24
 8006ca2:	d402      	bmi.n	8006caa <_printf_i+0xbe>
 8006ca4:	0640      	lsls	r0, r0, #25
 8006ca6:	d500      	bpl.n	8006caa <_printf_i+0xbe>
 8006ca8:	b2b6      	uxth	r6, r6
 8006caa:	6019      	str	r1, [r3, #0]
 8006cac:	4b54      	ldr	r3, [pc, #336]	@ (8006e00 <_printf_i+0x214>)
 8006cae:	270a      	movs	r7, #10
 8006cb0:	9304      	str	r3, [sp, #16]
 8006cb2:	2a6f      	cmp	r2, #111	@ 0x6f
 8006cb4:	d100      	bne.n	8006cb8 <_printf_i+0xcc>
 8006cb6:	3f02      	subs	r7, #2
 8006cb8:	0023      	movs	r3, r4
 8006cba:	2200      	movs	r2, #0
 8006cbc:	3343      	adds	r3, #67	@ 0x43
 8006cbe:	701a      	strb	r2, [r3, #0]
 8006cc0:	6863      	ldr	r3, [r4, #4]
 8006cc2:	60a3      	str	r3, [r4, #8]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	db03      	blt.n	8006cd0 <_printf_i+0xe4>
 8006cc8:	2104      	movs	r1, #4
 8006cca:	6822      	ldr	r2, [r4, #0]
 8006ccc:	438a      	bics	r2, r1
 8006cce:	6022      	str	r2, [r4, #0]
 8006cd0:	2e00      	cmp	r6, #0
 8006cd2:	d102      	bne.n	8006cda <_printf_i+0xee>
 8006cd4:	9d03      	ldr	r5, [sp, #12]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d00c      	beq.n	8006cf4 <_printf_i+0x108>
 8006cda:	9d03      	ldr	r5, [sp, #12]
 8006cdc:	0030      	movs	r0, r6
 8006cde:	0039      	movs	r1, r7
 8006ce0:	f7f9 faa0 	bl	8000224 <__aeabi_uidivmod>
 8006ce4:	9b04      	ldr	r3, [sp, #16]
 8006ce6:	3d01      	subs	r5, #1
 8006ce8:	5c5b      	ldrb	r3, [r3, r1]
 8006cea:	702b      	strb	r3, [r5, #0]
 8006cec:	0033      	movs	r3, r6
 8006cee:	0006      	movs	r6, r0
 8006cf0:	429f      	cmp	r7, r3
 8006cf2:	d9f3      	bls.n	8006cdc <_printf_i+0xf0>
 8006cf4:	2f08      	cmp	r7, #8
 8006cf6:	d109      	bne.n	8006d0c <_printf_i+0x120>
 8006cf8:	6823      	ldr	r3, [r4, #0]
 8006cfa:	07db      	lsls	r3, r3, #31
 8006cfc:	d506      	bpl.n	8006d0c <_printf_i+0x120>
 8006cfe:	6862      	ldr	r2, [r4, #4]
 8006d00:	6923      	ldr	r3, [r4, #16]
 8006d02:	429a      	cmp	r2, r3
 8006d04:	dc02      	bgt.n	8006d0c <_printf_i+0x120>
 8006d06:	2330      	movs	r3, #48	@ 0x30
 8006d08:	3d01      	subs	r5, #1
 8006d0a:	702b      	strb	r3, [r5, #0]
 8006d0c:	9b03      	ldr	r3, [sp, #12]
 8006d0e:	1b5b      	subs	r3, r3, r5
 8006d10:	6123      	str	r3, [r4, #16]
 8006d12:	9b07      	ldr	r3, [sp, #28]
 8006d14:	0021      	movs	r1, r4
 8006d16:	9300      	str	r3, [sp, #0]
 8006d18:	9805      	ldr	r0, [sp, #20]
 8006d1a:	9b06      	ldr	r3, [sp, #24]
 8006d1c:	aa09      	add	r2, sp, #36	@ 0x24
 8006d1e:	f7ff fef5 	bl	8006b0c <_printf_common>
 8006d22:	3001      	adds	r0, #1
 8006d24:	d148      	bne.n	8006db8 <_printf_i+0x1cc>
 8006d26:	2001      	movs	r0, #1
 8006d28:	4240      	negs	r0, r0
 8006d2a:	b00b      	add	sp, #44	@ 0x2c
 8006d2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d2e:	2220      	movs	r2, #32
 8006d30:	6809      	ldr	r1, [r1, #0]
 8006d32:	430a      	orrs	r2, r1
 8006d34:	6022      	str	r2, [r4, #0]
 8006d36:	2278      	movs	r2, #120	@ 0x78
 8006d38:	4932      	ldr	r1, [pc, #200]	@ (8006e04 <_printf_i+0x218>)
 8006d3a:	9104      	str	r1, [sp, #16]
 8006d3c:	0021      	movs	r1, r4
 8006d3e:	3145      	adds	r1, #69	@ 0x45
 8006d40:	700a      	strb	r2, [r1, #0]
 8006d42:	6819      	ldr	r1, [r3, #0]
 8006d44:	6822      	ldr	r2, [r4, #0]
 8006d46:	c940      	ldmia	r1!, {r6}
 8006d48:	0610      	lsls	r0, r2, #24
 8006d4a:	d402      	bmi.n	8006d52 <_printf_i+0x166>
 8006d4c:	0650      	lsls	r0, r2, #25
 8006d4e:	d500      	bpl.n	8006d52 <_printf_i+0x166>
 8006d50:	b2b6      	uxth	r6, r6
 8006d52:	6019      	str	r1, [r3, #0]
 8006d54:	07d3      	lsls	r3, r2, #31
 8006d56:	d502      	bpl.n	8006d5e <_printf_i+0x172>
 8006d58:	2320      	movs	r3, #32
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	6023      	str	r3, [r4, #0]
 8006d5e:	2e00      	cmp	r6, #0
 8006d60:	d001      	beq.n	8006d66 <_printf_i+0x17a>
 8006d62:	2710      	movs	r7, #16
 8006d64:	e7a8      	b.n	8006cb8 <_printf_i+0xcc>
 8006d66:	2220      	movs	r2, #32
 8006d68:	6823      	ldr	r3, [r4, #0]
 8006d6a:	4393      	bics	r3, r2
 8006d6c:	6023      	str	r3, [r4, #0]
 8006d6e:	e7f8      	b.n	8006d62 <_printf_i+0x176>
 8006d70:	681a      	ldr	r2, [r3, #0]
 8006d72:	680d      	ldr	r5, [r1, #0]
 8006d74:	1d10      	adds	r0, r2, #4
 8006d76:	6949      	ldr	r1, [r1, #20]
 8006d78:	6018      	str	r0, [r3, #0]
 8006d7a:	6813      	ldr	r3, [r2, #0]
 8006d7c:	062e      	lsls	r6, r5, #24
 8006d7e:	d501      	bpl.n	8006d84 <_printf_i+0x198>
 8006d80:	6019      	str	r1, [r3, #0]
 8006d82:	e002      	b.n	8006d8a <_printf_i+0x19e>
 8006d84:	066d      	lsls	r5, r5, #25
 8006d86:	d5fb      	bpl.n	8006d80 <_printf_i+0x194>
 8006d88:	8019      	strh	r1, [r3, #0]
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	9d03      	ldr	r5, [sp, #12]
 8006d8e:	6123      	str	r3, [r4, #16]
 8006d90:	e7bf      	b.n	8006d12 <_printf_i+0x126>
 8006d92:	681a      	ldr	r2, [r3, #0]
 8006d94:	1d11      	adds	r1, r2, #4
 8006d96:	6019      	str	r1, [r3, #0]
 8006d98:	6815      	ldr	r5, [r2, #0]
 8006d9a:	2100      	movs	r1, #0
 8006d9c:	0028      	movs	r0, r5
 8006d9e:	6862      	ldr	r2, [r4, #4]
 8006da0:	f000 f998 	bl	80070d4 <memchr>
 8006da4:	2800      	cmp	r0, #0
 8006da6:	d001      	beq.n	8006dac <_printf_i+0x1c0>
 8006da8:	1b40      	subs	r0, r0, r5
 8006daa:	6060      	str	r0, [r4, #4]
 8006dac:	6863      	ldr	r3, [r4, #4]
 8006dae:	6123      	str	r3, [r4, #16]
 8006db0:	2300      	movs	r3, #0
 8006db2:	9a03      	ldr	r2, [sp, #12]
 8006db4:	7013      	strb	r3, [r2, #0]
 8006db6:	e7ac      	b.n	8006d12 <_printf_i+0x126>
 8006db8:	002a      	movs	r2, r5
 8006dba:	6923      	ldr	r3, [r4, #16]
 8006dbc:	9906      	ldr	r1, [sp, #24]
 8006dbe:	9805      	ldr	r0, [sp, #20]
 8006dc0:	9d07      	ldr	r5, [sp, #28]
 8006dc2:	47a8      	blx	r5
 8006dc4:	3001      	adds	r0, #1
 8006dc6:	d0ae      	beq.n	8006d26 <_printf_i+0x13a>
 8006dc8:	6823      	ldr	r3, [r4, #0]
 8006dca:	079b      	lsls	r3, r3, #30
 8006dcc:	d415      	bmi.n	8006dfa <_printf_i+0x20e>
 8006dce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006dd0:	68e0      	ldr	r0, [r4, #12]
 8006dd2:	4298      	cmp	r0, r3
 8006dd4:	daa9      	bge.n	8006d2a <_printf_i+0x13e>
 8006dd6:	0018      	movs	r0, r3
 8006dd8:	e7a7      	b.n	8006d2a <_printf_i+0x13e>
 8006dda:	0022      	movs	r2, r4
 8006ddc:	2301      	movs	r3, #1
 8006dde:	9906      	ldr	r1, [sp, #24]
 8006de0:	9805      	ldr	r0, [sp, #20]
 8006de2:	9e07      	ldr	r6, [sp, #28]
 8006de4:	3219      	adds	r2, #25
 8006de6:	47b0      	blx	r6
 8006de8:	3001      	adds	r0, #1
 8006dea:	d09c      	beq.n	8006d26 <_printf_i+0x13a>
 8006dec:	3501      	adds	r5, #1
 8006dee:	68e3      	ldr	r3, [r4, #12]
 8006df0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006df2:	1a9b      	subs	r3, r3, r2
 8006df4:	42ab      	cmp	r3, r5
 8006df6:	dcf0      	bgt.n	8006dda <_printf_i+0x1ee>
 8006df8:	e7e9      	b.n	8006dce <_printf_i+0x1e2>
 8006dfa:	2500      	movs	r5, #0
 8006dfc:	e7f7      	b.n	8006dee <_printf_i+0x202>
 8006dfe:	46c0      	nop			@ (mov r8, r8)
 8006e00:	080072c9 	.word	0x080072c9
 8006e04:	080072da 	.word	0x080072da

08006e08 <__sflush_r>:
 8006e08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e0a:	220c      	movs	r2, #12
 8006e0c:	5e8b      	ldrsh	r3, [r1, r2]
 8006e0e:	0005      	movs	r5, r0
 8006e10:	000c      	movs	r4, r1
 8006e12:	071a      	lsls	r2, r3, #28
 8006e14:	d456      	bmi.n	8006ec4 <__sflush_r+0xbc>
 8006e16:	684a      	ldr	r2, [r1, #4]
 8006e18:	2a00      	cmp	r2, #0
 8006e1a:	dc02      	bgt.n	8006e22 <__sflush_r+0x1a>
 8006e1c:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8006e1e:	2a00      	cmp	r2, #0
 8006e20:	dd4e      	ble.n	8006ec0 <__sflush_r+0xb8>
 8006e22:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8006e24:	2f00      	cmp	r7, #0
 8006e26:	d04b      	beq.n	8006ec0 <__sflush_r+0xb8>
 8006e28:	2200      	movs	r2, #0
 8006e2a:	2080      	movs	r0, #128	@ 0x80
 8006e2c:	682e      	ldr	r6, [r5, #0]
 8006e2e:	602a      	str	r2, [r5, #0]
 8006e30:	001a      	movs	r2, r3
 8006e32:	0140      	lsls	r0, r0, #5
 8006e34:	6a21      	ldr	r1, [r4, #32]
 8006e36:	4002      	ands	r2, r0
 8006e38:	4203      	tst	r3, r0
 8006e3a:	d033      	beq.n	8006ea4 <__sflush_r+0x9c>
 8006e3c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006e3e:	89a3      	ldrh	r3, [r4, #12]
 8006e40:	075b      	lsls	r3, r3, #29
 8006e42:	d506      	bpl.n	8006e52 <__sflush_r+0x4a>
 8006e44:	6863      	ldr	r3, [r4, #4]
 8006e46:	1ad2      	subs	r2, r2, r3
 8006e48:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d001      	beq.n	8006e52 <__sflush_r+0x4a>
 8006e4e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006e50:	1ad2      	subs	r2, r2, r3
 8006e52:	2300      	movs	r3, #0
 8006e54:	0028      	movs	r0, r5
 8006e56:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8006e58:	6a21      	ldr	r1, [r4, #32]
 8006e5a:	47b8      	blx	r7
 8006e5c:	89a2      	ldrh	r2, [r4, #12]
 8006e5e:	1c43      	adds	r3, r0, #1
 8006e60:	d106      	bne.n	8006e70 <__sflush_r+0x68>
 8006e62:	6829      	ldr	r1, [r5, #0]
 8006e64:	291d      	cmp	r1, #29
 8006e66:	d846      	bhi.n	8006ef6 <__sflush_r+0xee>
 8006e68:	4b29      	ldr	r3, [pc, #164]	@ (8006f10 <__sflush_r+0x108>)
 8006e6a:	410b      	asrs	r3, r1
 8006e6c:	07db      	lsls	r3, r3, #31
 8006e6e:	d442      	bmi.n	8006ef6 <__sflush_r+0xee>
 8006e70:	2300      	movs	r3, #0
 8006e72:	6063      	str	r3, [r4, #4]
 8006e74:	6923      	ldr	r3, [r4, #16]
 8006e76:	6023      	str	r3, [r4, #0]
 8006e78:	04d2      	lsls	r2, r2, #19
 8006e7a:	d505      	bpl.n	8006e88 <__sflush_r+0x80>
 8006e7c:	1c43      	adds	r3, r0, #1
 8006e7e:	d102      	bne.n	8006e86 <__sflush_r+0x7e>
 8006e80:	682b      	ldr	r3, [r5, #0]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d100      	bne.n	8006e88 <__sflush_r+0x80>
 8006e86:	6560      	str	r0, [r4, #84]	@ 0x54
 8006e88:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006e8a:	602e      	str	r6, [r5, #0]
 8006e8c:	2900      	cmp	r1, #0
 8006e8e:	d017      	beq.n	8006ec0 <__sflush_r+0xb8>
 8006e90:	0023      	movs	r3, r4
 8006e92:	3344      	adds	r3, #68	@ 0x44
 8006e94:	4299      	cmp	r1, r3
 8006e96:	d002      	beq.n	8006e9e <__sflush_r+0x96>
 8006e98:	0028      	movs	r0, r5
 8006e9a:	f7ff fa99 	bl	80063d0 <_free_r>
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	6363      	str	r3, [r4, #52]	@ 0x34
 8006ea2:	e00d      	b.n	8006ec0 <__sflush_r+0xb8>
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	0028      	movs	r0, r5
 8006ea8:	47b8      	blx	r7
 8006eaa:	0002      	movs	r2, r0
 8006eac:	1c43      	adds	r3, r0, #1
 8006eae:	d1c6      	bne.n	8006e3e <__sflush_r+0x36>
 8006eb0:	682b      	ldr	r3, [r5, #0]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d0c3      	beq.n	8006e3e <__sflush_r+0x36>
 8006eb6:	2b1d      	cmp	r3, #29
 8006eb8:	d001      	beq.n	8006ebe <__sflush_r+0xb6>
 8006eba:	2b16      	cmp	r3, #22
 8006ebc:	d11a      	bne.n	8006ef4 <__sflush_r+0xec>
 8006ebe:	602e      	str	r6, [r5, #0]
 8006ec0:	2000      	movs	r0, #0
 8006ec2:	e01e      	b.n	8006f02 <__sflush_r+0xfa>
 8006ec4:	690e      	ldr	r6, [r1, #16]
 8006ec6:	2e00      	cmp	r6, #0
 8006ec8:	d0fa      	beq.n	8006ec0 <__sflush_r+0xb8>
 8006eca:	680f      	ldr	r7, [r1, #0]
 8006ecc:	600e      	str	r6, [r1, #0]
 8006ece:	1bba      	subs	r2, r7, r6
 8006ed0:	9201      	str	r2, [sp, #4]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	079b      	lsls	r3, r3, #30
 8006ed6:	d100      	bne.n	8006eda <__sflush_r+0xd2>
 8006ed8:	694a      	ldr	r2, [r1, #20]
 8006eda:	60a2      	str	r2, [r4, #8]
 8006edc:	9b01      	ldr	r3, [sp, #4]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	ddee      	ble.n	8006ec0 <__sflush_r+0xb8>
 8006ee2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8006ee4:	0032      	movs	r2, r6
 8006ee6:	001f      	movs	r7, r3
 8006ee8:	0028      	movs	r0, r5
 8006eea:	9b01      	ldr	r3, [sp, #4]
 8006eec:	6a21      	ldr	r1, [r4, #32]
 8006eee:	47b8      	blx	r7
 8006ef0:	2800      	cmp	r0, #0
 8006ef2:	dc07      	bgt.n	8006f04 <__sflush_r+0xfc>
 8006ef4:	89a2      	ldrh	r2, [r4, #12]
 8006ef6:	2340      	movs	r3, #64	@ 0x40
 8006ef8:	2001      	movs	r0, #1
 8006efa:	4313      	orrs	r3, r2
 8006efc:	b21b      	sxth	r3, r3
 8006efe:	81a3      	strh	r3, [r4, #12]
 8006f00:	4240      	negs	r0, r0
 8006f02:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006f04:	9b01      	ldr	r3, [sp, #4]
 8006f06:	1836      	adds	r6, r6, r0
 8006f08:	1a1b      	subs	r3, r3, r0
 8006f0a:	9301      	str	r3, [sp, #4]
 8006f0c:	e7e6      	b.n	8006edc <__sflush_r+0xd4>
 8006f0e:	46c0      	nop			@ (mov r8, r8)
 8006f10:	dfbffffe 	.word	0xdfbffffe

08006f14 <_fflush_r>:
 8006f14:	690b      	ldr	r3, [r1, #16]
 8006f16:	b570      	push	{r4, r5, r6, lr}
 8006f18:	0005      	movs	r5, r0
 8006f1a:	000c      	movs	r4, r1
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d102      	bne.n	8006f26 <_fflush_r+0x12>
 8006f20:	2500      	movs	r5, #0
 8006f22:	0028      	movs	r0, r5
 8006f24:	bd70      	pop	{r4, r5, r6, pc}
 8006f26:	2800      	cmp	r0, #0
 8006f28:	d004      	beq.n	8006f34 <_fflush_r+0x20>
 8006f2a:	6a03      	ldr	r3, [r0, #32]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d101      	bne.n	8006f34 <_fflush_r+0x20>
 8006f30:	f7ff f806 	bl	8005f40 <__sinit>
 8006f34:	220c      	movs	r2, #12
 8006f36:	5ea3      	ldrsh	r3, [r4, r2]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d0f1      	beq.n	8006f20 <_fflush_r+0xc>
 8006f3c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006f3e:	07d2      	lsls	r2, r2, #31
 8006f40:	d404      	bmi.n	8006f4c <_fflush_r+0x38>
 8006f42:	059b      	lsls	r3, r3, #22
 8006f44:	d402      	bmi.n	8006f4c <_fflush_r+0x38>
 8006f46:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006f48:	f7ff fa3f 	bl	80063ca <__retarget_lock_acquire_recursive>
 8006f4c:	0028      	movs	r0, r5
 8006f4e:	0021      	movs	r1, r4
 8006f50:	f7ff ff5a 	bl	8006e08 <__sflush_r>
 8006f54:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006f56:	0005      	movs	r5, r0
 8006f58:	07db      	lsls	r3, r3, #31
 8006f5a:	d4e2      	bmi.n	8006f22 <_fflush_r+0xe>
 8006f5c:	89a3      	ldrh	r3, [r4, #12]
 8006f5e:	059b      	lsls	r3, r3, #22
 8006f60:	d4df      	bmi.n	8006f22 <_fflush_r+0xe>
 8006f62:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006f64:	f7ff fa32 	bl	80063cc <__retarget_lock_release_recursive>
 8006f68:	e7db      	b.n	8006f22 <_fflush_r+0xe>
	...

08006f6c <__swhatbuf_r>:
 8006f6c:	b570      	push	{r4, r5, r6, lr}
 8006f6e:	000e      	movs	r6, r1
 8006f70:	001d      	movs	r5, r3
 8006f72:	230e      	movs	r3, #14
 8006f74:	5ec9      	ldrsh	r1, [r1, r3]
 8006f76:	0014      	movs	r4, r2
 8006f78:	b096      	sub	sp, #88	@ 0x58
 8006f7a:	2900      	cmp	r1, #0
 8006f7c:	da0c      	bge.n	8006f98 <__swhatbuf_r+0x2c>
 8006f7e:	89b2      	ldrh	r2, [r6, #12]
 8006f80:	2380      	movs	r3, #128	@ 0x80
 8006f82:	0011      	movs	r1, r2
 8006f84:	4019      	ands	r1, r3
 8006f86:	421a      	tst	r2, r3
 8006f88:	d114      	bne.n	8006fb4 <__swhatbuf_r+0x48>
 8006f8a:	2380      	movs	r3, #128	@ 0x80
 8006f8c:	00db      	lsls	r3, r3, #3
 8006f8e:	2000      	movs	r0, #0
 8006f90:	6029      	str	r1, [r5, #0]
 8006f92:	6023      	str	r3, [r4, #0]
 8006f94:	b016      	add	sp, #88	@ 0x58
 8006f96:	bd70      	pop	{r4, r5, r6, pc}
 8006f98:	466a      	mov	r2, sp
 8006f9a:	f000 f865 	bl	8007068 <_fstat_r>
 8006f9e:	2800      	cmp	r0, #0
 8006fa0:	dbed      	blt.n	8006f7e <__swhatbuf_r+0x12>
 8006fa2:	23f0      	movs	r3, #240	@ 0xf0
 8006fa4:	9901      	ldr	r1, [sp, #4]
 8006fa6:	021b      	lsls	r3, r3, #8
 8006fa8:	4019      	ands	r1, r3
 8006faa:	4b04      	ldr	r3, [pc, #16]	@ (8006fbc <__swhatbuf_r+0x50>)
 8006fac:	18c9      	adds	r1, r1, r3
 8006fae:	424b      	negs	r3, r1
 8006fb0:	4159      	adcs	r1, r3
 8006fb2:	e7ea      	b.n	8006f8a <__swhatbuf_r+0x1e>
 8006fb4:	2100      	movs	r1, #0
 8006fb6:	2340      	movs	r3, #64	@ 0x40
 8006fb8:	e7e9      	b.n	8006f8e <__swhatbuf_r+0x22>
 8006fba:	46c0      	nop			@ (mov r8, r8)
 8006fbc:	ffffe000 	.word	0xffffe000

08006fc0 <__smakebuf_r>:
 8006fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006fc2:	2602      	movs	r6, #2
 8006fc4:	898b      	ldrh	r3, [r1, #12]
 8006fc6:	0005      	movs	r5, r0
 8006fc8:	000c      	movs	r4, r1
 8006fca:	b085      	sub	sp, #20
 8006fcc:	4233      	tst	r3, r6
 8006fce:	d007      	beq.n	8006fe0 <__smakebuf_r+0x20>
 8006fd0:	0023      	movs	r3, r4
 8006fd2:	3347      	adds	r3, #71	@ 0x47
 8006fd4:	6023      	str	r3, [r4, #0]
 8006fd6:	6123      	str	r3, [r4, #16]
 8006fd8:	2301      	movs	r3, #1
 8006fda:	6163      	str	r3, [r4, #20]
 8006fdc:	b005      	add	sp, #20
 8006fde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006fe0:	ab03      	add	r3, sp, #12
 8006fe2:	aa02      	add	r2, sp, #8
 8006fe4:	f7ff ffc2 	bl	8006f6c <__swhatbuf_r>
 8006fe8:	9f02      	ldr	r7, [sp, #8]
 8006fea:	9001      	str	r0, [sp, #4]
 8006fec:	0039      	movs	r1, r7
 8006fee:	0028      	movs	r0, r5
 8006ff0:	f7ff fa5a 	bl	80064a8 <_malloc_r>
 8006ff4:	2800      	cmp	r0, #0
 8006ff6:	d108      	bne.n	800700a <__smakebuf_r+0x4a>
 8006ff8:	220c      	movs	r2, #12
 8006ffa:	5ea3      	ldrsh	r3, [r4, r2]
 8006ffc:	059a      	lsls	r2, r3, #22
 8006ffe:	d4ed      	bmi.n	8006fdc <__smakebuf_r+0x1c>
 8007000:	2203      	movs	r2, #3
 8007002:	4393      	bics	r3, r2
 8007004:	431e      	orrs	r6, r3
 8007006:	81a6      	strh	r6, [r4, #12]
 8007008:	e7e2      	b.n	8006fd0 <__smakebuf_r+0x10>
 800700a:	2380      	movs	r3, #128	@ 0x80
 800700c:	89a2      	ldrh	r2, [r4, #12]
 800700e:	6020      	str	r0, [r4, #0]
 8007010:	4313      	orrs	r3, r2
 8007012:	81a3      	strh	r3, [r4, #12]
 8007014:	9b03      	ldr	r3, [sp, #12]
 8007016:	6120      	str	r0, [r4, #16]
 8007018:	6167      	str	r7, [r4, #20]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d00c      	beq.n	8007038 <__smakebuf_r+0x78>
 800701e:	0028      	movs	r0, r5
 8007020:	230e      	movs	r3, #14
 8007022:	5ee1      	ldrsh	r1, [r4, r3]
 8007024:	f000 f832 	bl	800708c <_isatty_r>
 8007028:	2800      	cmp	r0, #0
 800702a:	d005      	beq.n	8007038 <__smakebuf_r+0x78>
 800702c:	2303      	movs	r3, #3
 800702e:	89a2      	ldrh	r2, [r4, #12]
 8007030:	439a      	bics	r2, r3
 8007032:	3b02      	subs	r3, #2
 8007034:	4313      	orrs	r3, r2
 8007036:	81a3      	strh	r3, [r4, #12]
 8007038:	89a3      	ldrh	r3, [r4, #12]
 800703a:	9a01      	ldr	r2, [sp, #4]
 800703c:	4313      	orrs	r3, r2
 800703e:	81a3      	strh	r3, [r4, #12]
 8007040:	e7cc      	b.n	8006fdc <__smakebuf_r+0x1c>

08007042 <memmove>:
 8007042:	b510      	push	{r4, lr}
 8007044:	4288      	cmp	r0, r1
 8007046:	d806      	bhi.n	8007056 <memmove+0x14>
 8007048:	2300      	movs	r3, #0
 800704a:	429a      	cmp	r2, r3
 800704c:	d008      	beq.n	8007060 <memmove+0x1e>
 800704e:	5ccc      	ldrb	r4, [r1, r3]
 8007050:	54c4      	strb	r4, [r0, r3]
 8007052:	3301      	adds	r3, #1
 8007054:	e7f9      	b.n	800704a <memmove+0x8>
 8007056:	188b      	adds	r3, r1, r2
 8007058:	4298      	cmp	r0, r3
 800705a:	d2f5      	bcs.n	8007048 <memmove+0x6>
 800705c:	3a01      	subs	r2, #1
 800705e:	d200      	bcs.n	8007062 <memmove+0x20>
 8007060:	bd10      	pop	{r4, pc}
 8007062:	5c8b      	ldrb	r3, [r1, r2]
 8007064:	5483      	strb	r3, [r0, r2]
 8007066:	e7f9      	b.n	800705c <memmove+0x1a>

08007068 <_fstat_r>:
 8007068:	2300      	movs	r3, #0
 800706a:	b570      	push	{r4, r5, r6, lr}
 800706c:	4d06      	ldr	r5, [pc, #24]	@ (8007088 <_fstat_r+0x20>)
 800706e:	0004      	movs	r4, r0
 8007070:	0008      	movs	r0, r1
 8007072:	0011      	movs	r1, r2
 8007074:	602b      	str	r3, [r5, #0]
 8007076:	f7fa fc8c 	bl	8001992 <_fstat>
 800707a:	1c43      	adds	r3, r0, #1
 800707c:	d103      	bne.n	8007086 <_fstat_r+0x1e>
 800707e:	682b      	ldr	r3, [r5, #0]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d000      	beq.n	8007086 <_fstat_r+0x1e>
 8007084:	6023      	str	r3, [r4, #0]
 8007086:	bd70      	pop	{r4, r5, r6, pc}
 8007088:	200004c8 	.word	0x200004c8

0800708c <_isatty_r>:
 800708c:	2300      	movs	r3, #0
 800708e:	b570      	push	{r4, r5, r6, lr}
 8007090:	4d06      	ldr	r5, [pc, #24]	@ (80070ac <_isatty_r+0x20>)
 8007092:	0004      	movs	r4, r0
 8007094:	0008      	movs	r0, r1
 8007096:	602b      	str	r3, [r5, #0]
 8007098:	f7fa fc89 	bl	80019ae <_isatty>
 800709c:	1c43      	adds	r3, r0, #1
 800709e:	d103      	bne.n	80070a8 <_isatty_r+0x1c>
 80070a0:	682b      	ldr	r3, [r5, #0]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d000      	beq.n	80070a8 <_isatty_r+0x1c>
 80070a6:	6023      	str	r3, [r4, #0]
 80070a8:	bd70      	pop	{r4, r5, r6, pc}
 80070aa:	46c0      	nop			@ (mov r8, r8)
 80070ac:	200004c8 	.word	0x200004c8

080070b0 <_sbrk_r>:
 80070b0:	2300      	movs	r3, #0
 80070b2:	b570      	push	{r4, r5, r6, lr}
 80070b4:	4d06      	ldr	r5, [pc, #24]	@ (80070d0 <_sbrk_r+0x20>)
 80070b6:	0004      	movs	r4, r0
 80070b8:	0008      	movs	r0, r1
 80070ba:	602b      	str	r3, [r5, #0]
 80070bc:	f7fa fc8c 	bl	80019d8 <_sbrk>
 80070c0:	1c43      	adds	r3, r0, #1
 80070c2:	d103      	bne.n	80070cc <_sbrk_r+0x1c>
 80070c4:	682b      	ldr	r3, [r5, #0]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d000      	beq.n	80070cc <_sbrk_r+0x1c>
 80070ca:	6023      	str	r3, [r4, #0]
 80070cc:	bd70      	pop	{r4, r5, r6, pc}
 80070ce:	46c0      	nop			@ (mov r8, r8)
 80070d0:	200004c8 	.word	0x200004c8

080070d4 <memchr>:
 80070d4:	b2c9      	uxtb	r1, r1
 80070d6:	1882      	adds	r2, r0, r2
 80070d8:	4290      	cmp	r0, r2
 80070da:	d101      	bne.n	80070e0 <memchr+0xc>
 80070dc:	2000      	movs	r0, #0
 80070de:	4770      	bx	lr
 80070e0:	7803      	ldrb	r3, [r0, #0]
 80070e2:	428b      	cmp	r3, r1
 80070e4:	d0fb      	beq.n	80070de <memchr+0xa>
 80070e6:	3001      	adds	r0, #1
 80070e8:	e7f6      	b.n	80070d8 <memchr+0x4>

080070ea <memcpy>:
 80070ea:	2300      	movs	r3, #0
 80070ec:	b510      	push	{r4, lr}
 80070ee:	429a      	cmp	r2, r3
 80070f0:	d100      	bne.n	80070f4 <memcpy+0xa>
 80070f2:	bd10      	pop	{r4, pc}
 80070f4:	5ccc      	ldrb	r4, [r1, r3]
 80070f6:	54c4      	strb	r4, [r0, r3]
 80070f8:	3301      	adds	r3, #1
 80070fa:	e7f8      	b.n	80070ee <memcpy+0x4>

080070fc <_realloc_r>:
 80070fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80070fe:	0006      	movs	r6, r0
 8007100:	000c      	movs	r4, r1
 8007102:	0015      	movs	r5, r2
 8007104:	2900      	cmp	r1, #0
 8007106:	d105      	bne.n	8007114 <_realloc_r+0x18>
 8007108:	0011      	movs	r1, r2
 800710a:	f7ff f9cd 	bl	80064a8 <_malloc_r>
 800710e:	0004      	movs	r4, r0
 8007110:	0020      	movs	r0, r4
 8007112:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007114:	2a00      	cmp	r2, #0
 8007116:	d103      	bne.n	8007120 <_realloc_r+0x24>
 8007118:	f7ff f95a 	bl	80063d0 <_free_r>
 800711c:	2400      	movs	r4, #0
 800711e:	e7f7      	b.n	8007110 <_realloc_r+0x14>
 8007120:	f000 f81b 	bl	800715a <_malloc_usable_size_r>
 8007124:	0007      	movs	r7, r0
 8007126:	4285      	cmp	r5, r0
 8007128:	d802      	bhi.n	8007130 <_realloc_r+0x34>
 800712a:	0843      	lsrs	r3, r0, #1
 800712c:	42ab      	cmp	r3, r5
 800712e:	d3ef      	bcc.n	8007110 <_realloc_r+0x14>
 8007130:	0029      	movs	r1, r5
 8007132:	0030      	movs	r0, r6
 8007134:	f7ff f9b8 	bl	80064a8 <_malloc_r>
 8007138:	9001      	str	r0, [sp, #4]
 800713a:	2800      	cmp	r0, #0
 800713c:	d0ee      	beq.n	800711c <_realloc_r+0x20>
 800713e:	002a      	movs	r2, r5
 8007140:	42bd      	cmp	r5, r7
 8007142:	d900      	bls.n	8007146 <_realloc_r+0x4a>
 8007144:	003a      	movs	r2, r7
 8007146:	0021      	movs	r1, r4
 8007148:	9801      	ldr	r0, [sp, #4]
 800714a:	f7ff ffce 	bl	80070ea <memcpy>
 800714e:	0021      	movs	r1, r4
 8007150:	0030      	movs	r0, r6
 8007152:	f7ff f93d 	bl	80063d0 <_free_r>
 8007156:	9c01      	ldr	r4, [sp, #4]
 8007158:	e7da      	b.n	8007110 <_realloc_r+0x14>

0800715a <_malloc_usable_size_r>:
 800715a:	1f0b      	subs	r3, r1, #4
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	1f18      	subs	r0, r3, #4
 8007160:	2b00      	cmp	r3, #0
 8007162:	da01      	bge.n	8007168 <_malloc_usable_size_r+0xe>
 8007164:	580b      	ldr	r3, [r1, r0]
 8007166:	18c0      	adds	r0, r0, r3
 8007168:	4770      	bx	lr
	...

0800716c <_init>:
 800716c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800716e:	46c0      	nop			@ (mov r8, r8)
 8007170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007172:	bc08      	pop	{r3}
 8007174:	469e      	mov	lr, r3
 8007176:	4770      	bx	lr

08007178 <_fini>:
 8007178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800717a:	46c0      	nop			@ (mov r8, r8)
 800717c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800717e:	bc08      	pop	{r3}
 8007180:	469e      	mov	lr, r3
 8007182:	4770      	bx	lr
